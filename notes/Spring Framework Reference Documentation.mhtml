From: <Saved by Blink>
Snapshot-Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/
Subject: Spring Framework Reference Documentation
Date: Tue, 4 Dec 2018 14:32:06 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----"


------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: text/html
Content-ID: <frame-275BB5F86256743A26843F8B6C277C5C@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3Dwindows-1252">

<title>Spring Framework Reference Documentation</title><link rel=3D"stylesh=
eet" type=3D"text/css" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/css/manual-singlepage.css"><met=
a name=3D"generator" content=3D"DocBook XSL Stylesheets V1.78.1"></head><bo=
dy bgcolor=3D"white" text=3D"black" link=3D"#0000FF" vlink=3D"#840084" alin=
k=3D"#0000FF"><div lang=3D"en" class=3D"book"><div class=3D"titlepage"><div=
><div><h1 class=3D"title"><a name=3D"d5e1"></a>Spring Framework Reference D=
ocumentation</h1></div><div><div class=3D"authorgroup"><h2>Authors</h2>
<span class=3D"author"><span class=3D"firstname">Rod</span> <span class=3D"=
surname">Johnson</span></span>
, <span class=3D"author"><span class=3D"firstname">Juergen</span> <span cla=
ss=3D"surname">Hoeller</span></span>
, <span class=3D"author"><span class=3D"firstname">Keith</span> <span class=
=3D"surname">Donald</span></span>
, <span class=3D"author"><span class=3D"firstname">Colin</span> <span class=
=3D"surname">Sampaleanu</span></span>
, <span class=3D"author"><span class=3D"firstname">Rob</span> <span class=
=3D"surname">Harrop</span></span>
, <span class=3D"author"><span class=3D"firstname">Thomas</span> <span clas=
s=3D"surname">Risberg</span></span>
, <span class=3D"author"><span class=3D"firstname">Alef</span> <span class=
=3D"surname">Arendsen</span></span>
, <span class=3D"author"><span class=3D"firstname">Darren</span> <span clas=
s=3D"surname">Davison</span></span>
, <span class=3D"author"><span class=3D"firstname">Dmitriy</span> <span cla=
ss=3D"surname">Kopylenko</span></span>
, <span class=3D"author"><span class=3D"firstname">Mark</span> <span class=
=3D"surname">Pollack</span></span>
, <span class=3D"author"><span class=3D"firstname">Thierry</span> <span cla=
ss=3D"surname">Templier</span></span>
, <span class=3D"author"><span class=3D"firstname">Erwin</span> <span class=
=3D"surname">Vervaet</span></span>
, <span class=3D"author"><span class=3D"firstname">Portia</span> <span clas=
s=3D"surname">Tung</span></span>
, <span class=3D"author"><span class=3D"firstname">Ben</span> <span class=
=3D"surname">Hale</span></span>
, <span class=3D"author"><span class=3D"firstname">Adrian</span> <span clas=
s=3D"surname">Colyer</span></span>
, <span class=3D"author"><span class=3D"firstname">John</span> <span class=
=3D"surname">Lewis</span></span>
, <span class=3D"author"><span class=3D"firstname">Costin</span> <span clas=
s=3D"surname">Leau</span></span>
, <span class=3D"author"><span class=3D"firstname">Mark</span> <span class=
=3D"surname">Fisher</span></span>
, <span class=3D"author"><span class=3D"firstname">Sam</span> <span class=
=3D"surname">Brannen</span></span>
, <span class=3D"author"><span class=3D"firstname">Ramnivas</span> <span cl=
ass=3D"surname">Laddad</span></span>
, <span class=3D"author"><span class=3D"firstname">Arjen</span> <span class=
=3D"surname">Poutsma</span></span>
, <span class=3D"author"><span class=3D"firstname">Chris</span> <span class=
=3D"surname">Beams</span></span>
, <span class=3D"author"><span class=3D"firstname">Tareq</span> <span class=
=3D"surname">Abedrabbo</span></span>
, <span class=3D"author"><span class=3D"firstname">Andy</span> <span class=
=3D"surname">Clement</span></span>
, <span class=3D"author"><span class=3D"firstname">Dave</span> <span class=
=3D"surname">Syer</span></span>
, <span class=3D"author"><span class=3D"firstname">Oliver</span> <span clas=
s=3D"surname">Gierke</span></span>
, <span class=3D"author"><span class=3D"firstname">Rossen</span> <span clas=
s=3D"surname">Stoyanchev</span></span>
, <span class=3D"author"><span class=3D"firstname">Phillip</span> <span cla=
ss=3D"surname">Webb</span></span>
, <span class=3D"author"><span class=3D"firstname">Rob</span> <span class=
=3D"surname">Winch</span></span>
, <span class=3D"author"><span class=3D"firstname">Brian</span> <span class=
=3D"surname">Clozel</span></span>
, <span class=3D"author"><span class=3D"firstname">Stephane</span> <span cl=
ass=3D"surname">Nicoll</span></span>
, <span class=3D"author"><span class=3D"firstname">Sebastien</span> <span c=
lass=3D"surname">Deleuze</span></span>
</div></div><div><p class=3D"releaseinfo">4.3.21.RELEASE</p></div><div><p c=
lass=3D"copyright">Copyright =A9 2004-2016 </p></div><div><div class=3D"leg=
alnotice"><a name=3D"d5e138" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#d5e138"></a>
<p>Copies of this document may be made for your own use and for distributio=
n to
others, provided that you do not charge any fee for such copies and further=
 provided
that each copy contains this Copyright Notice, whether distributed in print=
 or
electronically.</p>
</div></div></div><hr></div><div class=3D"toc"><p><b>Table of Contents</b><=
/p><dl class=3D"toc"><dt><span class=3D"part"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spri=
ng-introduction">I. Overview of Spring Framework</a></span></dt><dd><dl><dt=
><span class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#overview-getting-started-=
with-spring">1. Getting Started with Spring</a></span></dt><dt><span class=
=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#overview">2. Introduction to the Spri=
ng Framework</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#overview-dependency-injection">2.1. Dependency Injection and =
Inversion of Control</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#overview-modules">2.2. Framework Modules</a></span></dt><dd><=
dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-core-conta=
iner">2.2.1. Core Container</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#overview-aop-instrumentation">2.2.2. AOP and Instrumen=
tation</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
overview-messaging">2.2.3. Messaging</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#overview-data-access">2.2.4. Data Access/Inte=
gration</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#overview-web">2.2.5. Web</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#overview-testing">2.2.6. Test</a></span></dt></dl></dd><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-usagescenarios=
">2.3. Usage scenarios</a></span></dt><dd><dl><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#dependency-management">2.3.1. Dependency Management=
 and Naming Conventions</a></span></dt><dd><dl><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#overview-spring-dependencies">Spring Dependencies =
and Depending on Spring</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#overview-maven-dependency-management">Maven Dependency Ma=
nagement</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#overview-maven-bom">Maven "Bill Of Materials" Dependency</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-gradle-depende=
ncy-management">Gradle Dependency Management</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#overview-ivy-dependency-management">I=
vy Dependency Management</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#overview-distribution-zip">Distribution Zip Files</a></sp=
an></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#over=
view-logging">2.3.2. Logging</a></span></dt><dd><dl><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#overview-logging-log4j">Using Log4j 1.2 or 2.=
x</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overv=
iew-avoiding-commons-logging">Avoiding Commons Logging</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#overview-logging-slf4j">Usi=
ng SLF4J with Log4j or Logback</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#overview-logging-jul">Using JUL (java.util.logging)=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overvi=
ew-logging-websphere">Commons Logging on WebSphere</a></span></dt></dl></dd=
></dl></dd></dl></dd></dl></dd><dt><span class=3D"part"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#spring-whats-new">II. What=92s New in Spring Framework 4.x</a></span>=
</dt><dd><dl><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.=
0">3. New Features and Enhancements in Spring Framework 4.0</a></span></dt>=
<dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_improved_gett=
ing_started_experience">3.1. Improved Getting Started Experience</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_removed_deprecat=
ed_packages_and_methods">3.2. Removed Deprecated Packages and Methods</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_java_8_as_w=
ell_as_6_and_7">3.3. Java 8 (as well as 6 and 7)</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#_java_ee_6_and_7">3.4. Java EE 6 =
and 7</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_=
groovy_bean_definition_dsl">3.5. Groovy Bean Definition DSL</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#_core_container_improv=
ements">3.6. Core Container Improvements</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#_general_web_improvements">3.7. General W=
eb Improvements</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#_websocket_sockjs_and_stomp_messaging">3.8. WebSocket, SockJS, and=
 STOMP Messaging</a></span></dt><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#_testing_improvements">3.9. Testing Improvements</a></span></dt><=
/dl></dd><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.1">4=
. New Features and Enhancements in Spring Framework 4.1</a></span></dt><dd>=
<dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v4_1-JMS-Improveme=
nts">4.1. JMS Improvements</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#v4_1-Caching-Improvements">4.2. Caching Improvements</a=
></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v4_1-Web-=
Improvements">4.3. Web Improvements</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#v4_1-WebSocket-Messaging-Improvements">4.4. We=
bSocket Messaging Improvements</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#v4_1-Testing-Improvements">4.5. Testing Improvement=
s</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#new-in-4.2">5. New Features and Enhancements in Spring Framework 4.2</=
a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
v4_2-Core-Container-Improvements">5.1. Core Container Improvements</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v4_2-Data-Acces=
s-Improvements">5.2. Data Access Improvements</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#v4_2-JMS-Improvements">5.3. JMS Impr=
ovements</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#v4_2-Web-Improvements">5.4. Web Improvements</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-WebSocket-Messaging-Improvemen=
ts">5.5. WebSocket Messaging Improvements</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#v4_2-Testing-Improvements">5.6. Testing =
Improvements</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#new-in-4.3">6. New Features and Enhancements in Spring Fr=
amework 4.3</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#v4_3-Core-Container-Improvements">6.1. Core Container Improvem=
ents</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v4=
_3-Data-Access-Improvements">6.2. Data Access Improvements</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#v4_3-Caching-Improvemen=
ts">6.3. Caching Improvements</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#v4_3-JMS-Improvements">6.4. JMS Improvements</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v4_3-Web-Impro=
vements">6.5. Web Improvements</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#v4_3-WebSocket-Messaging-Improvements">6.6. WebSock=
et Messaging Improvements</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#v4_3-Testing-Improvements">6.7. Testing Improvements</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v4_3-Suppo=
rt-for-new-library-and-server-generations">6.8. Support for new library and=
 server generations</a></span></dt></dl></dd></dl></dd><dt><span class=3D"p=
art"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#spring-core">III. Core Technologies</a></span=
></dt><dd><dl><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans">7=
. The IoC container</a></span></dt><dd><dl><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#beans-introduction">7.1. Introduction to the Spring Io=
C container and beans</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#beans-basics">7.2. Container overview</a></span></dt><dd><dl=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-metadat=
a">7.2.1. Configuration metadata</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#beans-factory-instantiation">7.2.2. Instantiating=
 a container</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#beans-factory-xml-import">Composing XML-based configuration m=
etadata</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#groovy-bean-definition-dsl">The Groovy Bean Definition DSL</a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factor=
y-client">7.2.3. Using the container</a></span></dt></dl></dd><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-definition">7.3. Bean overvie=
w</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-beanname">7.3.1. Naming beans</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-beanname-alias">Aliasing a be=
an outside the bean definition</a></span></dt></dl></dd><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#beans-factory-class">7.3.2. Instantiating=
 beans</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-factory-class-ctor">Instantiation with a constructor</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-c=
lass-static-factory-method">Instantiation with a static factory method</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-facto=
ry-class-instance-factory-method">Instantiation using an instance factory m=
ethod</a></span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#beans-dependencies">7.4. Dependencies</a></span></dt><dd=
><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-col=
laborators">7.4.1. Dependency Injection</a></span></dt><dd><dl><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#beans-constructor-injection">Const=
ructor-based dependency injection</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#beans-setter-injection">Setter-based dependency =
injection</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-dependency-resolution">Dependency resolution process</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-some-examples"=
>Examples of dependency injection</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#beans-factory-properties-detailed">7.=
4.2. Dependencies and configuration in detail</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#beans-value-element">Straigh=
t values (primitives, Strings, and so on)</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#beans-ref-element">References to other b=
eans (collaborators)</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#beans-inner-beans">Inner beans</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#beans-collection-elements">Collection=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-null-element">Null and empty string values</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#beans-p-namespace">XML shortcut with =
the p-namespace</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#beans-c-namespace">XML shortcut with the c-namespace</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-compound-prope=
rty-names">Compound property names</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#beans-factory-dependson">7.4.3. Using=
 depends-on</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-lazy-init">7.4.4. Lazy-initialized beans</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire=
">7.4.5. Autowiring collaborators</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#beans-autowired-exceptions">Limitations =
and disadvantages of autowiring</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-factory-autowire-candidate">Excluding a bean=
 from autowiring</a></span></dt></dl></dd><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#beans-factory-method-injection">7.4.6. Method injection=
</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-factory-lookup-method-injection">Lookup method injection</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-arb=
itrary-method-replacement">Arbitrary method replacement</a></span></dt></dl=
></dd></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-=
factory-scopes">7.5. Bean scopes</a></span></dt><dd><dl><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#beans-factory-scopes-singleton">7.5.1. Th=
e singleton scope</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#beans-factory-scopes-prototype">7.5.2. The prototype scope</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factor=
y-scopes-sing-prot-interaction">7.5.3. Singleton beans with prototype-bean =
dependencies</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#beans-factory-scopes-other">7.5.4. Request, session, global session, =
application, and WebSocket scopes</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#beans-factory-scopes-other-web-configura=
tion">Initial web configuration</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-factory-scopes-request">Request scope</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory=
-scopes-session">Session scope</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#beans-factory-scopes-global-session">Global session=
 scope</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
beans-factory-scopes-application">Application scope</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-inj=
ection">Scoped beans as dependencies</a></span></dt></dl></dd><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom">7.5.5.=
 Custom scopes</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-factory-scopes-custom-creating">Creating a custom s=
cope</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-factory-scopes-custom-using">Using a custom scope</a></span></dt></dl><=
/dd></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fa=
ctory-nature">7.6. Customizing the nature of a bean</a></span></dt><dd><dl>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycl=
e">7.6.1. Lifecycle callbacks</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#beans-factory-lifecycle-initializingbean">In=
itialization callbacks</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-factory-lifecycle-disposablebean">Destruction callb=
acks</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-factory-lifecycle-default-init-destroy-methods">Default initialization =
and destroy methods</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#beans-factory-lifecycle-combined-effects">Combining lifecycle =
mechanisms</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#beans-factory-lifecycle-processor">Startup and shutdown callbacks</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factor=
y-shutdown">Shutting down the Spring IoC container gracefully in non-web ap=
plications</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#beans-factory-aware">7.6.2. ApplicationContextAware and BeanN=
ameAware</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aware-list">7.6.3. Other Aware interfaces</a></span></dt></dl></dd><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#beans-child-bean-definitions=
">7.7. Bean definition inheritance</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#beans-factory-extension">7.8. Container Extensi=
on Points</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#beans-factory-extension-bpp">7.8.1. Customizing beans using a Be=
anPostProcessor</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-factory-extension-bpp-examples-hw">Example: Hello W=
orld, BeanPostProcessor-style</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#beans-factory-extension-bpp-examples-rabpp">Example:=
 The RequiredAnnotationBeanPostProcessor</a></span></dt></dl></dd><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-factory-extension-factory=
-postprocessors">7.8.2. Customizing configuration metadata with a BeanFacto=
ryPostProcessor</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-factory-placeholderconfigurer">Example: the Class n=
ame substitution PropertyPlaceholderConfigurer</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-overrideconfigurer">E=
xample: the PropertyOverrideConfigurer</a></span></dt></dl></dd><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#beans-factory-extension-factorybe=
an">7.8.3. Customizing instantiation logic with a FactoryBean</a></span></d=
t></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-anno=
tation-config">7.9. Annotation-based container configuration</a></span></dt=
><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-require=
d-annotation">7.9.1. @Required</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#beans-autowired-annotation">7.9.2. @Autowired</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-autowi=
red-annotation-primary">7.9.3. Fine-tuning annotation-based autowiring with=
 @Primary</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-autowired-annotation-qualifiers">7.9.4. Fine-tuning annotation-bas=
ed autowiring with qualifiers</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#beans-generics-as-qualifiers">7.9.5. Using generics =
as autowiring qualifiers</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-custom-autowire-configurer">7.9.6. CustomAutowireCo=
nfigurer</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-resource-annotation">7.9.7. @Resource</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-a=
nnotations">7.9.8. @PostConstruct and @PreDestroy</a></span></dt></dl></dd>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-classpath-scanni=
ng">7.10. Classpath scanning and managed components</a></span></dt><dd><dl>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-stereotype-annot=
ations">7.10.1. @Component and further stereotype annotations</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-meta-annotatio=
ns">7.10.2. Meta-annotations</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#beans-scanning-autodetection">7.10.3. Automatically d=
etecting classes and registering bean definitions</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#beans-scanning-filters">7.10.4. =
Using filters to customize scanning</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#beans-factorybeans-annotations">7.10.5. Defini=
ng bean metadata within components</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#beans-scanning-name-generator">7.10.6. Naming a=
utodetected components</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-scanning-scope-resolver">7.10.7. Providing a scope =
for autodetected components</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#beans-scanning-qualifiers">7.10.8. Providing qualifier=
 metadata with annotations</a></span></dt></dl></dd><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#beans-standard-annotations">7.11. Using JSR 3=
30 Standard Annotations</a></span></dt><dd><dl><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-inject-named">7.11.1. Dependency Injection w=
ith @Inject and @Named</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-named">7.11.2. @Named and @ManagedBean: standard eq=
uivalents to the @Component annotation</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#beans-standard-annotations-limitations">7.1=
1.3. Limitations of JSR-330 standard annotations</a></span></dt></dl></dd><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java">7.12. Java-=
based container configuration</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#beans-java-basic-concepts">7.12.1. Basic con=
cepts: @Bean and @Configuration</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-java-instantiating-container">7.12.2. Instan=
tiating the Spring container using AnnotationConfigApplicationContext</a></=
span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-java-instantiating-container-contstructor">Simple construction</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-instan=
tiating-container-register">Building the container programmatically using r=
egister(Class&lt;?&gt;=85&#8203;)</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#beans-java-instantiating-container-scan">Enablin=
g component scanning with scan(String=85&#8203;)</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#beans-java-instantiating-containe=
r-web">Support for web applications with AnnotationConfigWebApplicationCont=
ext</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#beans-java-bean-annotation">7.12.3. Using the @Bean annotation</a></=
span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-java-declaring-a-bean">Declaring a bean</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#beans-java-dependencies">Bean dependenci=
es</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-java-lifecycle-callbacks">Receiving lifecycle callbacks</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-specifying-be=
an-scope">Specifying bean scope</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-java-customizing-bean-naming">Customizing be=
an naming</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-java-bean-aliasing">Bean aliasing</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#beans-java-bean-description">Bean des=
cription</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#beans-java-configuration-annotation">7.12.4. Using the @Configu=
ration annotation</a></span></dt><dd><dl><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#beans-java-injecting-dependencies">Injecting inter-bean =
dependencies</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#beans-java-method-injection">Lookup method injection</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-further-info=
rmation-java-config">Further information about how Java-based configuration=
 works internally</a></span></dt></dl></dd><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#beans-java-composing-configuration-classes">7.12.5. Co=
mposing Java-based configurations</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#beans-java-using-import">Using the @Impo=
rt annotation</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#beans-java-conditional">Conditionally include @Configuration classes=
 or @Bean methods</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#beans-java-combining">Combining Java and XML configuration</a></=
span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-environment">7.13. Environment abstraction</a></span></dt><dd=
><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-definition-=
profiles">7.13.1. Bean definition profiles</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-definition-profiles-java"=
>@Profile</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-definition-profiles-xml">XML bean definition profiles</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-definition-pr=
ofiles-enable">Activating a profile</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#beans-definition-profiles-default">Default pro=
file</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-property-source-abstraction">7.13.2. PropertySource abstracti=
on</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__pr=
opertysource">7.13.3. @PropertySource</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#_placeholder_resolution_in_statements">7.13.=
4. Placeholder resolution in statements</a></span></dt></dl></dd><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#context-load-time-weaver">7.14. =
Registering a LoadTimeWeaver</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#context-introduction">7.15. Additional capabilities o=
f the ApplicationContext</a></span></dt><dd><dl><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#context-functionality-messagesource">7.15.1. Inte=
rnationalization using MessageSource</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#context-functionality-events">7.15.2. Standar=
d and custom events</a></span></dt><dd><dl><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#context-functionality-events-annotation">Annotation-ba=
sed event listeners</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#context-functionality-events-async">Asynchronous Listeners</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#context-fu=
nctionality-events-order">Ordering listeners</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#context-functionality-events-generics=
">Generic events</a></span></dt></dl></dd><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#context-functionality-resources">7.15.3. Convenient acc=
ess to low-level resources</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#context-create">7.15.4. Convenient ApplicationContext i=
nstantiation for web applications</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#context-deploy-rar">7.15.5. Deploying a Spring A=
pplicationContext as a Java EE RAR file</a></span></dt></dl></dd><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#beans-beanfactory">7.16. The Bea=
nFactory</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#context-introduction-ctx-vs-beanfactory">7.16.1. BeanFactory or A=
pplicationContext?</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#beans-servicelocator">7.16.2. Glue code and the evil singleton<=
/a></span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#resources">8. Resources</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#resources-introduction">8.1. Introduc=
tion</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#re=
sources-resource">8.2. The Resource interface</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#resources-implementations">8.3. Buil=
t-in Resource implementations</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#resources-implementations-urlresource">8.3.1=
. UrlResource</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#resources-implementations-classpathresource">8.3.2. ClassPathResourc=
e</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resou=
rces-implementations-filesystemresource">8.3.3. FileSystemResource</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resources-imple=
mentations-servletcontextresource">8.3.4. ServletContextResource</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resources-impleme=
ntations-inputstreamresource">8.3.5. InputStreamResource</a></span></dt><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#resources-implementations=
-bytearrayresource">8.3.6. ByteArrayResource</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#resources-resourceloader">8=
.4. The ResourceLoader</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#resources-resourceloaderaware">8.5. The ResourceLoaderAwa=
re interface</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#resources-as-dependencies">8.6. Resources as dependencies</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx"=
>8.7. Application contexts and Resource paths</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx-constructi=
on">8.7.1. Constructing application contexts</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#resources-app-ctx-classpathxm=
l">Constructing ClassPathXmlApplicationContext instances - shortcuts</a></s=
pan></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#res=
ources-app-ctx-wildcards-in-resource-paths">8.7.2. Wildcards in application=
 context constructor resource paths</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#resources-app-ctx-ant-patterns-in-pat=
hs">Ant-style Patterns</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#resources-classpath-wildcards">The classpath*: prefix</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resources-=
wildcards-in-path-other-stuff">Other notes relating to wildcards</a></span>=
</dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resourc=
es-filesystemresource-caveats">8.7.3. FileSystemResource caveats</a></span>=
</dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#validation">9. Validation, Data Binding, and Type Conversion</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#validation=
-introduction">9.1. Introduction</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#validator">9.2. Validation using Spring=92s Valid=
ator interface</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#validation-conversion">9.3. Resolving codes to error messages</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beans"=
>9.4. Bean manipulation and the BeanWrapper</a></span></dt><dd><dl><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#beans-beans-conventions">9.4.1=
. Setting and getting basic and nested properties</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#beans-beans-conversion">9.4.2. B=
uilt-in PropertyEditor implementations</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-beans-conversion-customeditor=
-registration">Registering additional custom PropertyEditors</a></span></dt=
></dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#c=
ore-convert">9.5. Spring Type Conversion</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#core-convert-Converter-API">9.5.1=
. Converter SPI</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#core-convert-ConverterFactory-SPI">9.5.2. ConverterFactory</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#core-convert-G=
enericConverter-SPI">9.5.3. GenericConverter</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#core-convert-ConditionalGener=
icConverter-SPI">ConditionalGenericConverter</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#core-convert-ConversionServ=
ice-API">9.5.4. ConversionService API</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#core-convert-Spring-config">9.5.5. Configuri=
ng a ConversionService</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#core-convert-programmatic-usage">9.5.6. Using a Conversio=
nService programmatically</a></span></dt></dl></dd><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#format">9.6. Spring Field Formatting</a></span=
></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format-F=
ormatter-SPI">9.6.1. Formatter SPI</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#format-CustomFormatAnnotations">9.6.2. Annotati=
on-driven Formatting</a></span></dt><dd><dl><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#format-annotations-api">Format Annotation API</a></sp=
an></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#form=
at-FormatterRegistry-SPI">9.6.3. FormatterRegistry SPI</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#format-FormatterRegistrar-S=
PI">9.6.4. FormatterRegistrar SPI</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#format-configuring-formatting-mvc">9.6.5. Config=
uring Formatting in Spring MVC</a></span></dt></dl></dd><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#format-configuring-formatting-globaldatet=
imeformat">9.7. Configuring a global date &amp; time format</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#validation-beanvalidat=
ion">9.8. Spring Validation</a></span></dt><dd><dl><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#validation-beanvalidation-overview">9.8.1. Ove=
rview of the JSR-303 Bean Validation API</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#validation-beanvalidation-spring">9.8.2. =
Configuring a Bean Validation Provider</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#validation-beanvalidation-spring-in=
ject">Injecting a Validator</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#validation-beanvalidation-spring-constraints">Configur=
ing Custom Constraints</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#validation-beanvalidation-spring-method">Spring-driven Me=
thod Validation</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#validation-beanvalidation-spring-other">Additional Configuration O=
ptions</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#validation-binder">9.8.3. Configuring a DataBinder</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#validation-mvc">9.8.4=
. Spring MVC 3 Validation</a></span></dt></dl></dd></dl></dd><dt><span clas=
s=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#expressions">10. Spring Expression L=
anguage (SpEL)</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#expressions-intro">10.1. Introduction</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#expressions-evaluation">10=
.2. Evaluation</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#expressions-evaluation-context">10.2.1. <code class=3D"li=
teral">EvaluationContext</code></a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#expressions-type-conversion">Type conversi=
on</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#expressions-parser-configuration">10.2.2. Parser configuration</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-s=
pel-compilation">10.2.3. SpEL compilation</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#expressions-compiler-configurati=
on">Compiler configuration</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#expressions-compiler-limitations">Compiler limitations<=
/a></span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#expressions-beandef">10.3. Expressions in bean definitions</a>=
</span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ex=
pressions-beandef-xml-based">10.3.1. XML configuration</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#expressions-beandef-annotat=
ion-based">10.3.2. Annotation config</a></span></dt></dl></dd><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#expressions-language-ref">10.4. Lan=
guage Reference</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#expressions-ref-literal">10.4.1. Literal expressions</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions=
-properties-arrays">10.4.2. Properties, Arrays, Lists, Maps, Indexers</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-=
inline-lists">10.4.3. Inline lists</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#expressions-inline-maps">10.4.4. Inline Maps</a=
></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressio=
ns-array-construction">10.4.5. Array construction</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#expressions-methods">10.4.6. Met=
hods</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ex=
pressions-operators">10.4.7. Operators</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#expressions-operators-relational">R=
elational operators</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#expressions-operators-logical">Logical operators</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-operator=
s-mathematical">Mathematical operators</a></span></dt></dl></dd><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#expressions-assignment">10.4.8. A=
ssignment</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#expressions-types">10.4.9. Types</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#expressions-constructors">10.4.10. Constructor=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expre=
ssions-ref-variables">10.4.11. Variables</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#expressions-this-root">The #this =
and #root variables</a></span></dt></dl></dd><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#expressions-ref-functions">10.4.12. Functions</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-b=
ean-references">10.4.13. Bean references</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#expressions-operator-ternary">10.4.14. Te=
rnary Operator (If-Then-Else)</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#expressions-operator-elvis">10.4.15. The Elvis Opera=
tor</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#exp=
ressions-operator-safe-navigation">10.4.16. Safe Navigation operator</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-c=
ollection-selection">10.4.17. Collection Selection</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#expressions-collection-projecti=
on">10.4.18. Collection Projection</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#expressions-templating">10.4.19. Expression tem=
plating</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#expressions-example-classes">10.5. Classes used in the examples<=
/a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#aop">11. Aspect Oriented Programming with Spring</a></span></dt><dd><dl>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction">11.1=
. Introduction</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#aop-introduction-defn">11.1.1. AOP concepts</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction-spr=
ing-defn">11.1.2. Spring AOP capabilities and goals</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#aop-introduction-proxies">11.1=
.3. AOP Proxies</a></span></dt></dl></dd><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#aop-ataspectj">11.2. @AspectJ support</a></span></dt><dd=
><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aspectj-suppo=
rt">11.2.1. Enabling @AspectJ Support</a></span></dt><dd><dl><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#aop-enable-aspectj-java">Enabling @A=
spectJ Support with Java configuration</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#aop-enable-aspectj-xml">Enabling @AspectJ S=
upport with XML configuration</a></span></dt></dl></dd><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#aop-at-aspectj">11.2.2. Declaring an aspec=
t</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-p=
ointcuts">11.2.3. Declaring a pointcut</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-pointcuts-designators">Supporte=
d Pointcut Designators</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#aop-pointcuts-combining">Combining pointcut expressions</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-comm=
on-pointcuts">Sharing common pointcut definitions</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#aop-pointcuts-examples">Examples=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#writin=
g-good-pointcuts">Writing good pointcuts</a></span></dt></dl></dd><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#aop-advice">11.2.4. Declaring a=
dvice</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#aop-advice-before">Before advice</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#aop-advice-after-returning">After returnin=
g advice</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-advice-after-throwing">After throwing advice</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#aop-advice-after-finally">After=
 (finally) advice</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#aop-ataspectj-around-advice">Around advice</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-advice-params"=
>Advice parameters</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#aop-ataspectj-advice-ordering">Advice ordering</a></span></dt><=
/dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-introduct=
ions">11.2.5. Introductions</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#aop-instantiation-models">11.2.6. Aspect instantiation=
 models</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-ataspectj-example">11.2.7. Example</a></span></dt></dl></dd><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#aop-schema">11.3. Schema-based A=
OP support</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#aop-schema-declaring-an-aspect">11.3.1. Declaring an aspect</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema=
-pointcuts">11.3.2. Declaring a pointcut</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#aop-schema-advice">11.3.3. Declaring advi=
ce</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#aop-schema-advice-before">Before advice</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-schema-advice-after-returning">Af=
ter returning advice</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#aop-schema-advice-after-throwing">After throwing advice</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-a=
dvice-after-finally">After (finally) advice</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-schema-advice-around">Around advi=
ce</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
schema-params">Advice parameters</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#aop-ordering">Advice ordering</a></span></dt></dl=
></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-intro=
ductions">11.3.4. Introductions</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#aop-schema-instatiation-models">11.3.5. Aspect ins=
tantiation models</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#aop-schema-advisors">11.3.6. Advisors</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#aop-schema-example">11.3.7. Examp=
le</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#aop-choosing">11.4. Choosing which AOP declaration style to use</a></=
span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
spring-or-aspectj">11.4.1. Spring AOP or full AspectJ?</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-or-xml">11.4.=
2. @AspectJ or XML for Spring AOP?</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-mixing-styles">11.5. Mixing aspec=
t types</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-proxying">11.6. Proxying mechanisms</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#aop-understanding-aop-proxies">11=
.6.1. Understanding AOP proxies</a></span></dt></dl></dd><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#aop-aspectj-programmatic">11.7. Programm=
atic creation of @AspectJ Proxies</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#aop-using-aspectj">11.8. Using AspectJ with Spri=
ng applications</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#aop-atconfigurable">11.8.1. Using AspectJ to dependency i=
nject domain objects with Spring</a></span></dt><dd><dl><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#aop-configurable-testing">Unit testing @C=
onfigurable objects</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#aop-configurable-container">Working with multiple application =
contexts</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#aop-ajlib-other">11.8.2. Other Spring aspects for AspectJ</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-confi=
gure">11.8.3. Configuring AspectJ aspects using Spring IoC</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw">11.8.4. Loa=
d-time weaving with AspectJ in the Spring Framework</a></span></dt><dd><dl>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-first-examp=
le">A first example</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#aop-aj-ltw-the-aspects">Aspects</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-aj-ltw-aop_dot_xml">'META-INF/aop=
.xml'</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#a=
op-aj-ltw-libraries">Required libraries (JARS)</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-aj-ltw-spring">Spring configura=
tion</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ao=
p-aj-ltw-environments">Environment-specific configuration</a></span></dt></=
dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
resources">11.9. Further Resources</a></span></dt></dl></dd><dt><span class=
=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-api">12. Spring AOP APIs</a></spa=
n></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api=
-introduction">12.1. Introduction</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#aop-api-pointcuts">12.2. Pointcut API in Spring<=
/a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-api-concepts">12.2.1. Concepts</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#aop-api-pointcut-ops">12.2.2. Operations on po=
intcuts</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-api-pointcuts-aspectj">12.2.3. AspectJ expression pointcuts</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts=
-impls">12.2.4. Convenience pointcut implementations</a></span></dt><dd><dl=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-sta=
tic">Static pointcuts</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#aop-api-pointcuts-dynamic">Dynamic pointcuts</a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-poin=
tcuts-superclasses">12.2.5. Pointcut superclasses</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#aop-api-pointcuts-custom">12.2.6=
. Custom pointcuts</a></span></dt></dl></dd><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#aop-api-advice">12.3. Advice API in Spring</a></span>=
</dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-a=
dvice-lifecycle">12.3.1. Advice lifecycles</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-api-advice-types">12.3.2. Advice =
types in Spring</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#aop-api-advice-around">Interception around advice</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice=
-before">Before advice</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#aop-api-advice-throws">Throws advice</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-after-return=
ing">After Returning advice</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#aop-api-advice-introduction">Introduction advice</a></=
span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#aop-api-advisor">12.4. Advisor API in Spring</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#aop-pfb">12.5. Using the Prox=
yFactoryBean to create AOP proxies</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#aop-pfb-1">12.5.1. Basics</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-2">12.5.2.=
 JavaBean properties</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#aop-pfb-proxy-types">12.5.3. JDK- and CGLIB-based proxies</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pr=
oxying-intf">12.5.4. Proxying interfaces</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#aop-api-proxying-class">12.5.5. Proxying =
classes</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-global-advisors">12.5.6. Using 'global' advisors</a></span></dt></dl><=
/dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-concise-proxy"=
>12.6. Concise proxy definitions</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#aop-prog">12.7. Creating AOP proxies programmatic=
ally with the ProxyFactory</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#aop-api-advised">12.8. Manipulating advised objects</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-autopr=
oxy">12.9. Using the "auto-proxy" facility</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#aop-autoproxy-choices">12.9.1. =
Autoproxy bean definitions</a></span></dt><dd><dl><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#aop-api-autoproxy">BeanNameAutoProxyCreator</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-au=
toproxy-default">DefaultAdvisorAutoProxyCreator</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#aop-api-autoproxy-abstract">Abstra=
ctAdvisorAutoProxyCreator</a></span></dt></dl></dd><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#aop-autoproxy-metadata">12.9.2. Using metadata=
-driven auto-proxying</a></span></dt></dl></dd><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#aop-targetsource">12.10. Using TargetSources</a></=
span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
ts-swap">12.10.1. Hot swappable target sources</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-ts-pool">12.10.2. Pooling targe=
t sources</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#aop-ts-prototype">12.10.3. Prototype target sources</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-threadlocal">12.10.4=
. ThreadLocal target sources</a></span></dt></dl></dd><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#aop-extensibility">12.11. Defining new Advi=
ce types</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-api-resources">12.12. Further resources</a></span></dt></dl></dd></dl=
></dd><dt><span class=3D"part"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing">IV. Testin=
g</a></span></dt><dd><dl><dt><span class=3D"chapter"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#testing-introduction">13. Introduction to Spring Testing</a></span></dt>=
<dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#unit-testing">14. Unit=
 Testing</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#mock-objects">14.1. Mock Objects</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mock-objects-env">14.1.1. Envir=
onment</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
mock-objects-jndi">14.1.2. JNDI</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#mock-objects-servlet">14.1.3. Servlet API</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-po=
rtlet">14.1.4. Portlet API</a></span></dt></dl></dd><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#unit-testing-support-classes">14.2. Unit Test=
ing support Classes</a></span></dt><dd><dl><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#unit-testing-utilities">14.2.1. General testing utilit=
ies</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#uni=
t-testing-spring-mvc">14.2.2. Spring MVC</a></span></dt></dl></dd></dl></dd=
><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#integration-testing">=
15. Integration Testing</a></span></dt><dd><dl><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#integration-testing-overview">15.1. Overview</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#integration-=
testing-goals">15.2. Goals of Integration Testing</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#testing-ctx-management">=
15.2.1. Context management and caching</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#testing-fixture-di">15.2.2. Dependency Inje=
ction of test fixtures</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#testing-tx">15.2.3. Transaction management</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing-support-class=
es">15.2.4. Support classes for integration testing</a></span></dt></dl></d=
d><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-=
support-jdbc">15.3. JDBC Testing Support</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#integration-testing-annotations">15.4. An=
notations</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#integration-testing-annotations-spring">15.4.1. Spring Testing A=
nnotations</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#__bootstrapwith">@BootstrapWith</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#__contextconfiguration">@ContextConfi=
guration</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#__webappconfiguration">@WebAppConfiguration</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#__contexthierarchy">@ContextHierarch=
y</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__act=
iveprofiles">@ActiveProfiles</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#__testpropertysource">@TestPropertySource</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__dirtiescontext">=
@DirtiesContext</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#__testexecutionlisteners">@TestExecutionListeners</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#__commit">@Commit</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__rollback">=
@Rollback</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#__beforetransaction">@BeforeTransaction</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#__aftertransaction">@AfterTransaction=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__sql"=
>@Sql</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_=
_sqlconfig">@SqlConfig</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#__sqlgroup">@SqlGroup</a></span></dt></dl></dd><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-=
standard">15.4.2. Standard Annotation Support</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#integration-testing-annotations-juni=
t">15.4.3. Spring JUnit 4 Testing Annotations</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#__ifprofilevalue">@IfProfile=
Value</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_=
_profilevaluesourceconfiguration">@ProfileValueSourceConfiguration</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__timed">@Timed=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__repe=
at">@Repeat</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#integration-testing-annotations-meta">15.4.4. Meta-Annotatio=
n Support for Testing</a></span></dt></dl></dd><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#testcontext-framework">15.5. Spring TestContext Fr=
amework</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#testcontext-key-abstractions">15.5.1. Key abstractions</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_testconte=
xt">TestContext</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#_testcontextmanager">TestContextManager</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#_testexecutionlistener">TestExecu=
tionListener</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#_context_loaders">Context Loaders</a></span></dt></dl></dd><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#testcontext-bootstrapping">15.5.=
2. Bootstrapping the TestContext framework</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#testcontext-tel-config">15.5.3. TestE=
xecutionListener configuration</a></span></dt><dd><dl><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#testcontext-tel-config-registering-tels">Re=
gistering custom TestExecutionListeners</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#testcontext-tel-config-automatic-discovery=
">Automatic discovery of default TestExecutionListeners</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tel-config-ord=
ering">Ordering TestExecutionListeners</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#testcontext-tel-config-merging">Merging Tes=
tExecutionListeners</a></span></dt></dl></dd><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#testcontext-ctx-management">15.5.4. Context manageme=
nt</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#testcontext-ctx-management-xml">Context configuration with XML resource=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testc=
ontext-ctx-management-groovy">Context configuration with Groovy scripts</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontex=
t-ctx-management-javaconfig">Context configuration with annotated classes</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcont=
ext-ctx-management-mixed-config">Mixing XML, Groovy scripts, and annotated =
classes</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#testcontext-ctx-management-initializers">Context configuration with contex=
t initializers</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#testcontext-ctx-management-inheritance">Context configuration inher=
itance</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
testcontext-ctx-management-env-profiles">Context configuration with environ=
ment profiles</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#testcontext-ctx-management-property-sources">Context configuration w=
ith test property sources</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#testcontext-ctx-management-web">Loading a WebApplication=
Context</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#testcontext-ctx-management-caching">Context caching</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management-ct=
x-hierarchies">Context hierarchies</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#testcontext-fixture-di">15.5.5. Depen=
dency injection of test fixtures</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#testcontext-web-scoped-beans">15.5.6. Testing req=
uest and session scoped beans</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#testcontext-tx">15.5.7. Transaction management</a></=
span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#test=
context-tx-test-managed-transactions">Test-managed transactions</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx-ena=
bling-transactions">Enabling and disabling transactions</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx-rollback-an=
d-commit-behavior">Transaction rollback and commit behavior</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx-program=
matic-tx-mgt">Programmatic transaction management</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#testcontext-tx-before-and-after-=
tx">Executing code outside of a transaction</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#testcontext-tx-mgr-config">Configurin=
g a transaction manager</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#testcontext-tx-annotation-demo">Demonstration of all tran=
saction-related annotations</a></span></dt></dl></dd><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#testcontext-executing-sql">15.5.8. Executing=
 SQL scripts</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#testcontext-executing-sql-programmatically">Executing SQL scr=
ipts programmatically</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#testcontext-executing-sql-declaratively">Executing SQL scrip=
ts declaratively with @Sql</a></span></dt></dl></dd><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#testcontext-support-classes">15.5.9. TestCont=
ext Framework support classes</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#testcontext-junit4-runner">Spring JUnit 4 Ru=
nner</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#te=
stcontext-junit4-rules">Spring JUnit 4 Rules</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#testcontext-support-classes-junit4">J=
Unit 4 support classes</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#testcontext-junit-jupiter-extension">JUnit 5 Support</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext=
-support-classes-testng">TestNG support classes</a></span></dt></dl></dd></=
dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-tes=
t-framework">15.6. Spring MVC Test Framework</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-server">15.6.=
1. Server-Side Tests</a></span></dt><dd><dl><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#spring-mvc-test-server-static-imports">Static Imports=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring=
-mvc-test-server-setup-options">Setup Choices</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#spring-mvc-test-server-performing-re=
quests">Performing Requests</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#spring-mvc-test-server-defining-expectations">Defining=
 Expectations</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#spring-mvc-test-server-filters">Filter Registrations</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-vs-end=
-to-end-integration-tests">Differences between Out-of-Container and End-to-=
End Integration Tests</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#spring-mvc-test-server-resources">Further Server-Side Test E=
xamples</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#spring-mvc-test-server-htmlunit">15.6.2. HtmlUnit Integration</a=
></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#s=
pring-mvc-test-server-htmlunit-why">Why HtmlUnit Integration?</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-serv=
er-htmlunit-mah">MockMvc and HtmlUnit</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-webdriver">M=
ockMvc and WebDriver</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#spring-mvc-test-server-htmlunit-geb">MockMvc and Geb</a></spa=
n></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sprin=
g-mvc-test-client">15.6.3. Client-Side REST Tests</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-client-s=
tatic-imports">Static Imports</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#spring-mvc-test-client-resources">Further Examples o=
f Client-side REST Tests</a></span></dt></dl></dd></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#testing-examples-petclinic">15.7. Pet=
Clinic Example</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#testing-resources">16. Further Resources</a></span></dt><=
/dl></dd><dt><span class=3D"part"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-data-tier=
">V. Data Access</a></span></dt><dd><dl><dt><span class=3D"chapter"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#transaction">17. Transaction Management</a></span></dt><d=
d><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-intr=
o">17.1. Introduction to Spring Framework transaction management</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-motiv=
ation">17.2. Advantages of the Spring Framework=92s transaction support mod=
el</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#transaction-global">17.2.1. Global transactions</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#transaction-local">17.2.2. Loc=
al transactions</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#transaction-programming-model">17.2.3. Spring Framework=92s consis=
tent programming model</a></span></dt></dl></dd><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#transaction-strategies">17.3. Understanding the S=
pring Framework transaction abstraction</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#tx-resource-synchronization">17.4. Synchro=
nizing resources with transactions</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#tx-resource-synchronization-high">17.=
4.1. High-level synchronization approach</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#tx-resource-synchronization-low">17.4.2. =
Low-level synchronization approach</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#tx-resource-synchronization-tadsp">17.4.3. Tran=
sactionAwareDataSourceProxy</a></span></dt></dl></dd><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#transaction-declarative">17.5. Declarative t=
ransaction management</a></span></dt><dd><dl><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#tx-decl-explained">17.5.1. Understanding the Spring =
Framework=92s declarative transaction implementation</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-first=
-example">17.5.2. Example of declarative transaction implementation</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-de=
clarative-rolling-back">17.5.3. Rolling back a declarative transaction</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction=
-declarative-diff-tx">17.5.4. Configuring different transactional semantics=
 for different beans</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#transaction-declarative-txadvice-settings">17.5.5. &lt;tx:adv=
ice/&gt; settings</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#transaction-declarative-annotations">17.5.6. Using @Transactiona=
l</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#transaction-declarative-attransactional-settings">@Transactional setting=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-mu=
ltiple-tx-mgrs-with-attransactional">Multiple Transaction Managers with @Tr=
ansactional</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#tx-custom-attributes">Custom shortcut annotations</a></span></dt></dl>=
</dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation">1=
7.5.7. Transaction propagation</a></span></dt><dd><dl><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#tx-propagation-required">Required</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation-r=
equires_new">RequiresNew</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#tx-propagation-nested">Nested</a></span></dt></dl></dd><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative-=
applying-more-than-just-tx-advice">17.5.8. Advising transactional operation=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#trans=
action-declarative-aspectj">17.5.9. Using @Transactional with AspectJ</a></=
span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tr=
ansaction-programmatic">17.6. Programmatic transaction management</a></span=
></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-prog-=
template">17.6.1. Using the TransactionTemplate</a></span></dt><dd><dl><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#tx-prog-template-settings"=
>Specifying transaction settings</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#transaction-programmatic-ptm">17.6.2.=
 Using the PlatformTransactionManager</a></span></dt></dl></dd><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#tx-decl-vs-prog">17.7. Choosing be=
tween programmatic and declarative transaction management</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-event">17.8.=
 Transaction bound event</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#transaction-application-server-integration">17.9. Applica=
tion server-specific integration</a></span></dt><dd><dl><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#transaction-application-server-integratio=
n-websphere">17.9.1. IBM WebSphere</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#transaction-application-server-integration-webl=
ogic">17.9.2. Oracle WebLogic Server</a></span></dt></dl></dd><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-solutions-to-common-pro=
blems">17.10. Solutions to common problems</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#transaction-solutions-to-common=
-problems-wrong-ptm">17.10.1. Use of the wrong transaction manager for a sp=
ecific DataSource</a></span></dt></dl></dd><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#transaction-resources">17.11. Further resources</a></s=
pan></dt></dl></dd><dt><span class=3D"chapter"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dao=
">18. DAO support</a></span></dt><dd><dl><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#dao-introduction">18.1. Introduction</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#dao-exceptions">18.2. Cons=
istent exception hierarchy</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#dao-annotations">18.3. Annotations used for configuring=
 DAO or Repository classes</a></span></dt></dl></dd><dt><span class=3D"chap=
ter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#jdbc">19. Data access with JDBC</a></span></d=
t><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-introdu=
ction">19.1. Introduction to Spring Framework JDBC</a></span></dt><dd><dl><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-choose-style">19.1=
.1. Choosing an approach for JDBC database access</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#jdbc-packages">19.1.2. Package h=
ierarchy</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#jdbc-core">19.2. Using the JDBC core classes to control basic J=
DBC processing and error handling</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#jdbc-JdbcTemplate">19.2.1. JdbcTemplate<=
/a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#jdbc-JdbcTemplate-examples">Examples of JdbcTemplate class usage</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplat=
e-idioms">JdbcTemplate best practices</a></span></dt></dl></dd><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#jdbc-NamedParameterJdbcTemplate">1=
9.2.2. NamedParameterJdbcTemplate</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#jdbc-SQLExceptionTranslator">19.2.3. SQLExceptio=
nTranslator</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#jdbc-statements-executing">19.2.4. Executing statements</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-statements-query=
ing">19.2.5. Running queries</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#jdbc-updates">19.2.6. Updating the database</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-auto-genere=
ted-keys">19.2.7. Retrieving auto-generated keys</a></span></dt></dl></dd><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-connections">19.3.=
 Controlling database connections</a></span></dt><dd><dl><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#jdbc-datasource">19.3.1. DataSource</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-DataSo=
urceUtils">19.3.2. DataSourceUtils</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#jdbc-SmartDataSource">19.3.3. SmartDataSource</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-Abs=
tractDataSource">19.3.4. AbstractDataSource</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#jdbc-SingleConnectionDataSource">19.3=
.5. SingleConnectionDataSource</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#jdbc-DriverManagerDataSource">19.3.6. DriverManager=
DataSource</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#jdbc-TransactionAwareDataSourceProxy">19.3.7. TransactionAwareDataSourc=
eProxy</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
jdbc-DataSourceTransactionManager">19.3.8. DataSourceTransactionManager</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-Nativ=
eJdbcExtractor">19.3.9. NativeJdbcExtractor</a></span></dt></dl></dd><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#jdbc-advanced-jdbc">19.4. JD=
BC batch operations</a></span></dt><dd><dl><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#jdbc-batch-classic">19.4.1. Basic batch operations wit=
h the JdbcTemplate</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#jdbc-batch-list">19.4.2. Batch operations with a List of object=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-=
batch-multi">19.4.3. Batch operations with multiple batches</a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-=
jdbc">19.5. Simplifying JDBC operations with the SimpleJdbc classes</a></sp=
an></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-s=
imple-jdbc-insert-1">19.5.1. Inserting data using SimpleJdbcInsert</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdb=
c-insert-2">19.5.2. Retrieving auto-generated keys using SimpleJdbcInsert</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-sim=
ple-jdbc-insert-3">19.5.3. Specifying columns for a SimpleJdbcInsert</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-j=
dbc-parameters">19.5.4. Using SqlParameterSource to provide parameter value=
s</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-=
simple-jdbc-call-1">19.5.5. Calling a stored procedure with SimpleJdbcCall<=
/a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-si=
mple-jdbc-call-2">19.5.6. Explicitly declaring parameters to use for a Simp=
leJdbcCall</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#jdbc-params">19.5.7. How to define SqlParameters</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-call-3">19.5=
.8. Calling a stored function using SimpleJdbcCall</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc-call-4">19.5.9=
. Returning ResultSet/REF Cursor from a SimpleJdbcCall</a></span></dt></dl>=
</dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-object">19.6=
. Modeling JDBC operations as Java objects</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#jdbc-SqlQuery">19.6.1. SqlQuery=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-M=
appingSqlQuery">19.6.2. MappingSqlQuery</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#jdbc-SqlUpdate">19.6.3. SqlUpdate</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-StoredProc=
edure">19.6.4. StoredProcedure</a></span></dt></dl></dd><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#jdbc-parameter-handling">19.7. Common pro=
blems with parameter and data value handling</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#jdbc-type-information">19.7.1=
. Providing SQL type information for parameters</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#jdbc-lob">19.7.2. Handling BLOB an=
d CLOB objects</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#jdbc-in-clause">19.7.3. Passing in lists of values for IN clause</a=
></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-comp=
lex-types">19.7.4. Handling complex types for stored procedure calls</a></s=
pan></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdb=
c-embedded-database-support">19.8. Embedded database support</a></span></dt=
><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-why-embe=
dded-database">19.8.1. Why use an embedded database?</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-xml">1=
9.8.2. Creating an embedded database using Spring XML</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-java"=
>19.8.3. Creating an embedded database programmatically</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-typ=
es">19.8.4. Selecting the embedded database type</a></span></dt><dd><dl><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-us=
ing-HSQL">Using HSQL</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#jdbc-embedded-database-using-H2">Using H2</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-usi=
ng-Derby">Using Derby</a></span></dt></dl></dd><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#jdbc-embedded-database-dao-testing">19.8.5. Testin=
g data access logic with an embedded database</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#jdbc-embedded-database-unique-names"=
>19.8.6. Generating unique names for embedded databases</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-ext=
ension">19.8.7. Extending the embedded database support</a></span></dt></dl=
></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-initializin=
g-datasource">19.9. Initializing a DataSource</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#jdbc-initializing-datasource=
-xml">19.9.1. Initializing a database using Spring XML</a></span></dt><dd><=
dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-client-compone=
nt-initialization">Initialization of other components that depend on the da=
tabase</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class=3D"chap=
ter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#orm">20. Object Relational Mapping (ORM) Data=
 Access</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#orm-introduction">20.1. Introduction to ORM with Spring</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-general">20.2=
. General ORM integration considerations</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#orm-resource-mngmnt">20.2.1. Reso=
urce and transaction management</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#orm-exception-translation">20.2.2. Exception trans=
lation</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#orm-hibernate">20.3. Hibernate</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#orm-session-factory-setup">20.3.1=
. SessionFactory setup in a Spring container</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#orm-hibernate-straight">20.3.2. Imple=
menting DAOs based on plain Hibernate API</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#orm-hibernate-tx-declarative">20.3.3. De=
clarative transaction demarcation</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#orm-hibernate-tx-programmatic">20.3.4. Programma=
tic transaction demarcation</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#orm-hibernate-tx-strategies">20.3.5. Transaction manag=
ement strategies</a></span></dt><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#orm-hibernate-resources">20.3.6. Comparing container-managed and =
locally defined resources</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#orm-hibernate-invalid-jdbc-access-error">20.3.7. Spuriou=
s application server warnings with Hibernate</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo">20.4. JDO</a></spa=
n></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-jdo=
-setup">20.4.1. PersistenceManagerFactory setup</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#orm-jdo-daos-straight">20.4.2. Imp=
lementing DAOs based on the plain JDO API</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#orm-jdo-tx">20.4.3. Transaction manageme=
nt</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-=
jdo-dialect">20.4.4. JdoDialect</a></span></dt></dl></dd><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#orm-jpa">20.5. JPA</a></span></dt><dd><d=
l><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup">20.5.=
1. Three options for JPA setup in a Spring environment</a></span></dt><dd><=
dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup-lemfb=
">LocalEntityManagerFactoryBean</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#orm-jpa-setup-jndi">Obtaining an EntityManagerFact=
ory from JNDI</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#orm-jpa-setup-lcemfb">LocalContainerEntityManagerFactoryBean</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-multip=
le">Dealing with multiple persistence units</a></span></dt></dl></dd><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-dao">20.5.2. Impleme=
nting DAOs based on JPA: EntityManagerFactory and EntityManager</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-tx">20.5.3=
. Spring-driven JPA transactions</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#orm-jpa-dialect">20.5.4. JpaDialect and JpaVendor=
Adapter</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#orm-jpa-jta">20.5.5. Setting up JPA with JTA transaction management</a></s=
pan></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#oxm">21. Marshalling XML using O/X Mappers</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-introduction">21.1. =
Introduction</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#_ease_of_configuration">21.1.1. Ease of configuration</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_consistent_in=
terfaces">21.1.2. Consistent interfaces</a></span></dt><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#_consistent_exception_hierarchy">21.1.3. C=
onsistent exception hierarchy</a></span></dt></dl></dd><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#oxm-marshaller-unmarshaller">21.2. Marshal=
ler and Unmarshaller</a></span></dt><dd><dl><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#oxm-marshaller">21.2.1. Marshaller</a></span></dt><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#oxm-unmarshaller">21.2.2.=
 Unmarshaller</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#oxm-xmlmappingexception">21.2.3. XmlMappingException</a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-usage">2=
1.3. Using Marshaller and Unmarshaller</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#oxm-schema-based-config">21.4. XML configur=
ation namespace</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#oxm-jaxb">21.5. JAXB</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#oxm-jaxb2">21.5.1. Jaxb2Marshaller</a></span=
></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-jaxb=
2-xsd">XML configuration namespace</a></span></dt></dl></dd></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#oxm-castor">21.6. Castor</a=
></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#o=
xm-castor-marshaller">21.6.1. CastorMarshaller</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#oxm-castor-mapping">21.6.2. Mapping=
</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#oxm-castor-xsd">XML configuration namespace</a></span></dt></dl></dd></dl=
></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-xmlbeans">21=
.7. XMLBeans</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#oxm-xmlbeans-marshaller">21.7.1. XmlBeansMarshaller</a></span=
></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-xmlb=
eans-xsd">XML configuration namespace</a></span></dt></dl></dd></dl></dd><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-jibx">21.8. JiBX</a>=
</span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ox=
m-jibx-marshaller">21.8.1. JibxMarshaller</a></span></dt><dd><dl><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#oxm-jibx-xsd">XML configuration =
namespace</a></span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#oxm-xstream">21.9. XStream</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#oxm-xstream-marshaller">=
21.9.1. XStreamMarshaller</a></span></dt></dl></dd></dl></dd></dl></dd><dt>=
<span class=3D"part"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#spring-web">VI. The Web</a></=
span></dt><dd><dl><dt><span class=3D"chapter"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc"=
>22. Web MVC framework</a></span></dt><dd><dl><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#mvc-introduction">22.1. Introduction to Spring Web =
MVC framework</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#mvc-features">22.1.1. Features of Spring Web MVC</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-introduction-p=
luggability">22.1.2. Pluggability of other MVC implementations</a></span></=
dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-servl=
et">22.2. The DispatcherServlet</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#mvc-servlet-special-bean-types">22.2.1. Sp=
ecial Bean Types In the WebApplicationContext</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#mvc-servlet-config">22.2.2. Default =
DispatcherServlet Configuration</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#mvc-servlet-sequence">22.2.3. DispatcherServlet Pr=
ocessing Sequence</a></span></dt></dl></dd><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#mvc-controller">22.3. Implementing Controllers</a></sp=
an></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-an=
n-controller">22.3.1. Defining a controller with @Controller</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmappin=
g">22.3.2. Mapping Requests With @RequestMapping</a></span></dt><dd><dl><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-co=
mposed">Composed @RequestMapping Variants</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#mvc-ann-requestmapping-proxying">@Contro=
ller and AOP Proxying</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#mvc-ann-requestmapping-31-vs-30">New Support Classes for @Re=
questMapping methods in Spring MVC 3.1</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#mvc-ann-requestmapping-uri-templates">URI T=
emplate Patterns</a></span></dt><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#mvc-ann-requestmapping-uri-templates-regex">URI Template Patterns=
 with Regular Expressions</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#mvc-ann-requestmapping-patterns">Path Patterns</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestm=
apping-pattern-comparison">Path Pattern Comparison</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-placehol=
ders">Path Patterns with Placeholders</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#mvc-ann-requestmapping-suffix-pattern-match"=
>Suffix Pattern Matching</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#mvc-ann-requestmapping-rfd">Suffix Pattern Matching and R=
FD</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-=
ann-matrix-variables">Matrix Variables</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#mvc-ann-requestmapping-consumes">Consumable=
 Media Types</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#mvc-ann-requestmapping-produces">Producible Media Types</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmappi=
ng-params-and-headers">Request Parameters and Header Values</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping=
-head-options">HTTP HEAD and HTTP OPTIONS</a></span></dt></dl></dd><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#mvc-ann-methods">22.3.3. Defin=
ing @RequestMapping handler methods</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#mvc-ann-arguments">Supported method a=
rgument types</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#mvc-ann-return-types">Supported method return types</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestparam">B=
inding request parameters to method parameters with @RequestParam</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestb=
ody">Mapping the request body with the @RequestBody annotation</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-responsebod=
y">Mapping the response body with the @ResponseBody annotation</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-restcontrol=
ler">Creating REST Controllers with the @RestController annotation</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-httpent=
ity">Using HttpEntity</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#mvc-ann-modelattrib-methods">Using @ModelAttribute on a meth=
od</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-=
ann-modelattrib-method-args">Using @ModelAttribute on a method argument</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-se=
ssionattrib">Using @SessionAttributes to store model attributes in the HTTP=
 session between requests</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#mvc-ann-sessionattrib-global">Using @SessionAttribute to=
 access pre-existing global session attributes</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#mvc-ann-requestattrib">Using @Reque=
stAttribute to access request attributes</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#mvc-ann-form-urlencoded-data">Working wit=
h "application/x-www-form-urlencoded" data</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#mvc-ann-cookievalue">Mapping cookie v=
alues with the @CookieValue annotation</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#mvc-ann-requestheader">Mapping request head=
er attributes with the @RequestHeader annotation</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#mvc-ann-typeconversion">Method Pa=
rameters And Type Conversion</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#mvc-ann-webdatabinder">Customizing WebDataBinder init=
ialization</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#mvc-ann-controller-advice">Advising controllers with @ControllerAdvice =
and @RestControllerAdvice</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#mvc-ann-jsonview">Jackson Serialization View Support</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-js=
onp">Jackson JSONP Support</a></span></dt></dl></dd><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#mvc-ann-async">22.3.4. Asynchronous Request P=
rocessing</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#mvc-ann-async-exceptions">Exception Handling for Async Requests<=
/a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann=
-async-interception">Intercepting Async Requests</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#mvc-ann-async-http-streaming">HTT=
P Streaming</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#mvc-ann-async-sse">HTTP Streaming With Server-Sent Events</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-async-outpu=
t-stream">HTTP Streaming Directly To The OutputStream</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-async-configuration"=
>Configuring Asynchronous Request Processing</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-tests">22.3.5. Test=
ing Controllers</a></span></dt></dl></dd><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#mvc-handlermapping">22.4. Handler mappings</a></span></d=
t><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-handlerm=
apping-interceptor">22.4.1. Intercepting requests with a HandlerInterceptor=
</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#mvc-viewresolver">22.5. Resolving views</a></span></dt><dd><dl><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#mvc-viewresolver-resolver">22.=
5.1. Resolving views with the ViewResolver interface</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#mvc-viewresolver-chaining">22=
.5.2. Chaining ViewResolvers</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#mvc-redirecting">22.5.3. Redirecting to Views</a></sp=
an></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-re=
directing-redirect-view">RedirectView</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#mvc-redirecting-redirect-prefix">The redirec=
t: prefix</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#mvc-redirecting-forward-prefix">The forward: prefix</a></span></dt></dl>=
</dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-multiple-repr=
esentations">22.5.4. ContentNegotiatingViewResolver</a></span></dt></dl></d=
d><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-flash-attributes=
">22.6. Using flash attributes</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#mvc-uri-building">22.7. Building URIs</a></span></d=
t><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-links-to=
-controllers">22.7.1. Building URIs to Controllers and methods</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-links-to-contro=
llers-forwarded-headers">22.7.2. Working with "Forwarded" and "X-Forwarded-=
*" Headers</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#mvc-links-to-controllers-from-views">22.7.3. Building URIs to Controlle=
rs and methods from views</a></span></dt></dl></dd><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#mvc-localeresolver">22.8. Using locales</a></s=
pan></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-t=
imezone">22.8.1. Obtaining Time Zone Information</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#mvc-localeresolver-acceptheader">=
22.8.2. AcceptHeaderLocaleResolver</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#mvc-localeresolver-cookie">22.8.3. CookieLocale=
Resolver</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#mvc-localeresolver-session">22.8.4. SessionLocaleResolver</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-localeresolver-int=
erceptor">22.8.5. LocaleChangeInterceptor</a></span></dt></dl></dd><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#mvc-themeresolver">22.9. Using=
 themes</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#mvc-themeresolver-introduction">22.9.1. Overview of themes</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-themeresol=
ver-defining">22.9.2. Defining themes</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#mvc-themeresolver-resolving">22.9.3. Theme r=
esolvers</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#mvc-multipart">22.10. Spring=92s multipart (file upload) suppor=
t</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#mvc-multipart-introduction">22.10.1. Introduction</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-resolver-common=
s">22.10.2. Using a MultipartResolver with <span class=3D"emphasis"><em>Com=
mons FileUpload</em></span></a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#mvc-multipart-resolver-standard">22.10.3. Using a Mult=
ipartResolver with <span class=3D"emphasis"><em>Servlet 3.0</em></span></a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-multip=
art-forms">22.10.4. Handling a file upload in a form</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#mvc-multipart-forms-non-brows=
ers">22.10.5. Handling a file upload request from programmatic clients</a><=
/span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#m=
vc-exceptionhandlers">22.11. Handling exceptions</a></span></dt><dd><dl><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#mvc-exceptionhandlers-res=
olver">22.11.1. HandlerExceptionResolver</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#mvc-ann-exceptionhandler">22.11.2. @Excep=
tionHandler</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#mvc-ann-rest-spring-mvc-exceptions">22.11.3. Handling Standard Spring =
MVC Exceptions</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#mvc-ann-annotated-exceptions">22.11.4. Annotating Business Exceptio=
ns With @ResponseStatus</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#mvc-ann-customer-servlet-container-error-page">22.11.5. C=
ustomizing the Default Servlet Container Error Page</a></span></dt></dl></d=
d><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-web-security">22=
.12. Web Security</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#mvc-coc">22.13. Convention over configuration support</a></span>=
</dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-coc-c=
cnhm">22.13.1. The Controller ControllerClassNameHandlerMapping</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-coc-modelmap">=
22.13.2. The Model ModelMap (ModelAndView)</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#mvc-coc-r2vnt">22.13.3. Default view =
name</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#mvc-caching">22.14. HTTP caching support</a></span></dt><dd><dl><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#mvc-caching-cachecontrol"=
>22.14.1. Cache-Control HTTP header</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#mvc-caching-static-resources">22.14.2. HTTP ca=
ching support for static resources</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#mvc-caching-etag-lastmodified">22.14.3. Support=
 for the Cache-Control, ETag and Last-Modified response headers in Controll=
ers</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc=
-httpcaching-shallowetag">22.14.4. Shallow ETag support</a></span></dt></dl=
></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-container-co=
nfig">22.15. Code-based Servlet container initialization</a></span></dt><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#mvc-config">22.16. Config=
uring Spring MVC</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#mvc-config-enable">22.16.1. Enabling the MVC Java Config =
or the MVC XML Namespace</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#mvc-config-customize">22.16.2. Customizing the Provided C=
onfiguration</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#mvc-config-conversion">22.16.3. Conversion and Formatting</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-validat=
ion">22.16.4. Validation</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#mvc-config-interceptors">22.16.5. Interceptors</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-conten=
t-negotiation">22.16.6. Content Negotiation</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#mvc-config-view-controller">22.16.7. =
View Controllers</a></span></dt><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#mvc-config-view-resolvers">22.16.8. View Resolvers</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-static-res=
ources">22.16.9. Serving of Resources</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#mvc-default-servlet-handler">22.16.10. Defau=
lt Servlet</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#mvc-config-path-matching">22.16.11. Path Matching</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#mvc-config-message-converter=
s">22.16.12. Message Converters</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#mvc-config-advanced-java">22.16.13. Advanced Custo=
mizations with MVC Java Config</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#mvc-config-advanced-xml">22.16.14. Advanced Customi=
zations with the MVC Namespace</a></span></dt></dl></dd></dl></dd><dt><span=
 class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#view">23. View Technologies</a>=
</span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#vi=
ew-introduction">23.1. Introduction</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#view-thymeleaf">23.2. Thymeleaf</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-groovymarkup">23=
.3. Groovy Markup</a></span></dt><dd><dl><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#view-groovymarkup-configuration">23.3.1. Configuration</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-gro=
ovymarkup-example">23.3.2. Example</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#view-velocity">23.4. Velocity &amp; F=
reeMarker</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#view-velocity-dependencies">23.4.1. Dependencies</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-velocity-contextc=
onfig">23.4.2. Context configuration</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#view-velocity-createtemplates">23.4.3. Creati=
ng templates</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#view-velocity-advancedconfig">23.4.4. Advanced configuration</a></spa=
n></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-ve=
locity-example-velocityproperties">velocity.properties</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#views-freemarker">FreeMarke=
r</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#view-velocity-forms">23.4.5. Bind support and form handling</a></span>=
</dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-bind=
-macros">The bind macros</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#view-simple-binding">Simple binding</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#views-form-macros">Form inpu=
t generation macros</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#views-form-macros-html-escaping">HTML escaping and XHTML compl=
iance</a></span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#view-jsp">23.5. JSP &amp; JSTL</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-resolver">23.5.=
1. View resolvers</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#view-jsp-jstl">23.5.2. 'Plain-old' JSPs versus JSTL</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-tags">23.5=
.3. Spring=92s JSP tag library</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#view-jsp-formtaglib">23.5.4. Spring=92s form tag li=
brary</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#view-jsp-formtaglib-configuration">Configuration</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-formta=
g">The form tag</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#view-jsp-formtaglib-inputtag">The input tag</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-checkboxt=
ag">The checkbox tag</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#view-jsp-formtaglib-checkboxestag">The checkboxes tag</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formt=
aglib-radiobuttontag">The radiobutton tag</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#view-jsp-formtaglib-radiobuttonstag">The=
 radiobuttons tag</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#view-jsp-formtaglib-passwordtag">The password tag</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtaglib-s=
electtag">The select tag</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#view-jsp-formtaglib-optiontag">The option tag</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-formtagli=
b-optionstag">The options tag</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#view-jsp-formtaglib-textareatag">The textarea tag</a=
></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jsp-=
formtaglib-hiddeninputtag">The hidden tag</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#view-jsp-formtaglib-errorstag">The error=
s tag</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#r=
est-method-conversion">HTTP method conversion</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#view-jsp-formtaglib-html5">HTML5 tag=
s</a></span></dt></dl></dd></dl></dd><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#view-script">23.6. Script views</a></span></dt><dd><dl><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#view-script-dependencies">2=
3.6.1. Requirements</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#view-script-integrate">23.6.2. Script templates</a></span></dt=
></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-xml-ma=
rshalling">23.7. XML Marshalling</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#view-tiles">23.8. Tiles</a></span></dt><dd><dl><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-dependencies"=
>23.8.1. Dependencies</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#view-tiles-integrate">23.8.2. Configuration</a></span></dt><=
dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-url"=
>UrlBasedViewResolver</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#view-tiles-resource">ResourceBundleViewResolver</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-tiles-preparer=
">SimpleSpringPreparerFactory and SpringBeanPreparerFactory</a></span></dt>=
</dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#vi=
ew-xslt">23.9. XSLT</a></span></dt><dd><dl><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#view-xslt-beandefs">23.9.1. Beans</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#view-xslt-controllercode">2=
3.9.2. Controller</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#view-xslt-transforming">23.9.3. Transformation</a></span></dt></=
dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-document"=
>23.10. Document views: PDF, Excel</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#view-document-intro">23.10.1. Introdu=
ction</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#v=
iew-document-config">23.10.2. Configuration</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#view-document-configviews">23.10.3. V=
iew definition</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#view-document-configcontroller">23.10.4. Controller</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-document-configsu=
bclasses">23.10.5. Excel views</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#view-document-configsubclasspdf">23.10.6. PDF views=
</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#view-jasper-reports">23.11. JasperReports</a></span></dt><dd><dl><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-dependen=
cies">23.11.1. Dependencies</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#view-jasper-reports-configuration">23.11.2. Configurat=
ion</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#view-jasper-reports-configuration-resolver">Configuring the ViewResolv=
er</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#view=
-jasper-reports-configuration-views">Configuring the Views</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-con=
figuration-report-files">About Report Files</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#view-jasper-reports-configuration-mul=
tiformat-view">Using JasperReportsMultiFormatView</a></span></dt></dl></dd>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#view-jasper-reports-mo=
del">23.11.3. Populating the ModelAndView</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#view-jasper-reports-subreports">23.11.4.=
 Working with sub-reports</a></span></dt><dd><dl><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#view-jasper-reports-subreports-config-reports">C=
onfiguring sub-report files</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#view-jasper-reports-subreports-config-datasources">Con=
figuring sub-report data sources</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#view-jasper-reports-exporter-paramete=
rs">23.11.5. Configuring exporter parameters</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#view-feeds">23.12. Feed vie=
ws: RSS, Atom</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#view-json-mapping">23.13. JSON Mapping View</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#view-xml-mapping">23.14. XML Ma=
pping View</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#web-integration">24. Integrating with other web frameworks</a=
></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#i=
ntro">24.1. Introduction</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#web-integration-common">24.2. Common configuration</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jsf">24.3. Ja=
vaServer Faces 1.2</a></span></dt><dd><dl><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#jsf-springbeanfaceselresolver">24.3.1. SpringBeanFacesE=
LResolver (JSF 1.2+)</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#jsf-facescontextutils">24.3.2. FacesContextUtils</a></span></=
dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#struts">2=
4.4. Apache Struts 2.x</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#tapestry">24.5. Tapestry 5.x</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#web-integration-resources">24.6. Fu=
rther Resources</a></span></dt></dl></dd><dt><span class=3D"chapter"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#portlet">25. Portlet MVC Framework</a></span></dt><dd><d=
l><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-introduction=
">25.1. Introduction</a></span></dt><dd><dl><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#portlet-introduction-controller">25.1.1. Controllers =
- The C in MVC</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#portlet-introduction-view">25.1.2. Views - The V in MVC</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-introducti=
on-scope">25.1.3. Web-scoped beans</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#portlet-dispatcher">25.2. The Dispatc=
herPortlet</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#portlet-viewservlet">25.3. The ViewRendererServlet</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller">25.4. C=
ontrollers</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#portlet-controller-abstractcontroller">25.4.1. AbstractControll=
er and PortletContentGenerator</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#portlet-controller-simple">25.4.2. Other simple con=
trollers</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#portlet-controller-command">25.4.3. Command Controllers</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-controller-wrapp=
ing">25.4.4. PortletWrappingController</a></span></dt></dl></dd><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#portlet-handlermapping">25.5. Han=
dler mappings</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#portlet-handlermapping-portletmode">25.5.1. PortletModeHandl=
erMapping</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#portlet-handlermapping-parameter">25.5.2. ParameterHandlerMapping</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-handl=
ermapping-portletmodeparameter">25.5.3. PortletModeParameterHandlerMapping<=
/a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet=
-handlermapping-interceptor">25.5.4. Adding HandlerInterceptors</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermap=
ping-interceptoradapter">25.5.5. HandlerInterceptorAdapter</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-handlermapping-=
parameterinterceptor">25.5.6. ParameterMappingInterceptor</a></span></dt></=
dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-viewre=
solver">25.6. Views and resolving them</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#portlet-multipart">25.7. Multipart (file up=
load) support</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#portlet-multipart-resolver">25.7.1. Using the PortletMultipa=
rtResolver</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#portlet-multipart-forms">25.7.2. Handling a file upload in a form</a></=
span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#po=
rtlet-exceptionresolver">25.8. Handling exceptions</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#portlet-annotation">25.9. Annot=
ation-based controller configuration</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#portlet-ann-setup">25.9.1. Setting up=
 the dispatcher for annotation support</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#portlet-ann-controller">25.9.2. Defining a =
controller with @Controller</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#portlet-ann-requestmapping">25.9.3. Mapping requests w=
ith @RequestMapping</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#portlet-ann-requestmapping-arguments">25.9.4. Supported handle=
r method arguments</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#portlet-ann-requestparam">25.9.5. Binding request parameters to=
 method parameters with @RequestParam</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#portlet-ann-modelattrib">25.9.6. Providing a=
 link to data from the model with @ModelAttribute</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#portlet-ann-sessionattrib">25.9.=
7. Specifying attributes to store in a Session with @SessionAttributes</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann=
-webdatabinder">25.9.8. Customizing WebDataBinder initialization</a></span>=
</dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-a=
nn-initbinder">Customizing data binding with @InitBinder</a></span></dt><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#portlet-ann-webbindingini=
tializer">Configuring a custom WebBindingInitializer</a></span></dt></dl></=
dd></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#portlet-d=
eployment">25.10. Portlet application deployment</a></span></dt></dl></dd><=
dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket">26. WebSocke=
t Support</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#websocket-intro">26.1. Introduction</a></span></dt><dd><dl><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#websocket-into-fallback-opt=
ions">26.1.1. WebSocket Fallback Options</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#websocket-intro-architecture">26.1.2. A M=
essaging Architecture</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#websocket-intro-sub-protocol">26.1.3. Sub-Protocol Support i=
n WebSocket</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#websocket-intro-when-to-use">26.1.4. Should I Use WebSocket?</a></span=
></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websoc=
ket-server">26.2. WebSocket API</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#websocket-server-handler">26.2.1. WebSocke=
tHandler</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#websocket-server-handshake">26.2.2. WebSocket Handshake</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-server-decorat=
ors">26.2.3. WebSocketHandler Decoration</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#websocket-server-deployment">26.2.4. Depl=
oyment</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
websocket-server-runtime-configuration">26.2.5. Configuring the WebSocket E=
ngine</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#w=
ebsocket-server-allowed-origins">26.2.6. Configuring allowed origins</a></s=
pan></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#web=
socket-fallback">26.3. SockJS Fallback</a></span></dt><dd><dl><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#websocket-fallback-sockjs-overview"=
>26.3.1. Overview</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#websocket-fallback-sockjs-enable">26.3.2. Enable SockJS</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-fallb=
ack-xhr-vs-iframe">26.3.3. IE 8, 9</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#websocket-fallback-sockjs-heartbeat">26.3.4. He=
artbeats</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#websocket-fallback-sockjs-servlet3-async">26.3.5. Client disconnects</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-f=
allback-cors">26.3.6. SockJS and CORS</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#websocket-fallback-sockjs-client">26.3.7. So=
ckJsClient</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#websocket-stomp">26.4. STOMP</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#websocket-stomp-overview">26.4.=
1. Overview</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#websocket-stomp-benefits">26.4.2. Benefits</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#websocket-stomp-enable">26.4.3. En=
able STOMP</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#websocket-stomp-message-flow">26.4.4. Flow of Messages</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-handle-=
annotations">26.4.5. Annotated Controllers</a></span></dt><dd><dl><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#websocket-stomp-message-mapping=
"><code class=3D"literal">@MessageMapping</code></a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#websocket-stomp-subscribe-mapping=
"><code class=3D"literal">@SubscribeMapping</code></a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#websocket-stomp-exception-handl=
er"><code class=3D"literal">@MessageExceptionHandler</code></a></span></dt>=
</dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-st=
omp-handle-send">26.4.6. Send Messages</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#websocket-stomp-handle-simple-broker">26.4.=
7. Simple Broker</a></span></dt><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#websocket-stomp-handle-broker-relay">26.4.8. External Broker</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-s=
tomp-handle-broker-relay-configure">26.4.9. Connect to Broker</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-dest=
ination-separator">26.4.10. Dot as Separator</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#websocket-stomp-authentication">26.4.=
11. Authentication</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#websocket-stomp-authentication-token-based">26.4.12. Token Auth=
entication</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#websocket-stomp-user-destination">26.4.13. User Destinations</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-a=
ppplication-context-events">26.4.14. Events and Interception</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-clien=
t">26.4.15. STOMP Client</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#websocket-stomp-websocket-scope">26.4.16. WebSocket Scope=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websoc=
ket-stomp-configuration-performance">26.4.17. Performance</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#websocket-stomp-stats">2=
6.4.18. Monitoring</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#websocket-stomp-testing">26.4.19. Testing</a></span></dt></dl><=
/dd></dl></dd><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cors">27=
. CORS Support</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#_introduction">27.1. Introduction</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#_controller_method_cors_config=
uration">27.2. Controller method CORS configuration</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#_global_cors_configuration">27=
.3. Global CORS configuration</a></span></dt><dd><dl><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#_javaconfig">27.3.1. JavaConfig</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_xml_namespace">27.=
3.2. XML namespace</a></span></dt></dl></dd><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#_advanced_customization">27.4. Advanced Customization=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_filte=
r_based_cors_support">27.5. Filter based CORS support</a></span></dt></dl><=
/dd></dl></dd><dt><span class=3D"part"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-inte=
gration">VII. Integration</a></span></dt><dd><dl><dt><span class=3D"chapter=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#remoting">28. Remoting and web services using Sp=
ring</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#remoting-introduction">28.1. Introduction</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#remoting-rmi">28.2. Exposing servi=
ces using RMI</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#remoting-rmi-server">28.2.1. Exporting the service using the=
 RmiServiceExporter</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#remoting-rmi-client">28.2.2. Linking in the service at the cli=
ent</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#remoting-caucho-protocols">28.3. Using Hessian or Burlap to remotely=
 call services via HTTP</a></span></dt><dd><dl><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#remoting-caucho-protocols-hessian">28.3.1. Wiring =
up the DispatcherServlet for Hessian and co.</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#remoting-caucho-protocols-hessian-ser=
ver">28.3.2. Exposing your beans by using the HessianServiceExporter</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remoting-cauc=
ho-protocols-hessian-client">28.3.3. Linking in the service on the client</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remoting=
-caucho-protocols-burlap">28.3.4. Using Burlap</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#remoting-caucho-protocols-security"=
>28.3.5. Applying HTTP basic authentication to a service exposed through He=
ssian or Burlap</a></span></dt></dl></dd><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#remoting-httpinvoker">28.4. Exposing services using HTTP=
 invokers</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#remoting-httpinvoker-server">28.4.1. Exposing the service object=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remoti=
ng-httpinvoker-client">28.4.2. Linking in the service at the client</a></sp=
an></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remo=
ting-web-services">28.5. Web services</a></span></dt><dd><dl><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#remoting-web-services-jaxws-export-s=
ervlet">28.5.1. Exposing servlet-based web services using JAX-WS</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remoting-web-serv=
ices-jaxws-export-standalone">28.5.2. Exporting standalone web services usi=
ng JAX-WS</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#remoting-web-services-jaxws-export-ri">28.5.3. Exporting web services us=
ing the JAX-WS RI=92s Spring support</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#remoting-web-services-jaxws-access">28.5.4. A=
ccessing web services using JAX-WS</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#remoting-jms">28.6. JMS</a></span></d=
t><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remoting-jms=
-server">28.6.1. Server-side configuration</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#remoting-jms-client">28.6.2. Client-s=
ide configuration</a></span></dt></dl></dd><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#remoting-amqp">28.7. AMQP</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#remoting-autodection-remote-interfa=
ces">28.8. Auto-detection is not implemented for remote interfaces</a></spa=
n></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#remoting-consid=
erations">28.9. Considerations when choosing a technology</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#rest-client-access">28.1=
0. Accessing RESTful services on the client</a></span></dt><dd><dl><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#rest-resttemplate">28.10.1. Re=
stTemplate</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#rest-resttemplate-uri">Working with the URI</a></span></dt><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#rest-template-headers">Dea=
ling with request and response headers</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#rest-template-jsonview">Jackson JSON Views =
support</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#rest-message-conversion">28.10.2. HTTP message conversion</a></s=
pan></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#rest-=
string-converter">StringHttpMessageConverter</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#rest-form-converter">FormHttpMessageC=
onverter</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#rest-byte-converter">ByteArrayHttpMessageConverter</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#rest-marhsalling-converter">M=
arshallingHttpMessageConverter</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#rest-mapping-json-converter">MappingJackson2HttpMes=
sageConverter</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#rest-mapping-xml-converter">MappingJackson2XmlHttpMessageConverter</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#rest-sou=
rce-converter">SourceHttpMessageConverter</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#rest-buffered-image-converter">BufferedI=
mageHttpMessageConverter</a></span></dt></dl></dd><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#rest-async-resttemplate">28.10.3. Async RestTem=
plate</a></span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#ejb">29. Enterprise JavaBeans (EJB) integration</a></spa=
n></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ejb-int=
roduction">29.1. Introduction</a></span></dt><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#ejb-access">29.2. Accessing EJBs</a></span></dt><dd>=
<dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ejb-access-concept=
s">29.2.1. Concepts</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#ejb-access-local">29.2.2. Accessing local SLSBs</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ejb-access-remote">29=
.2.3. Accessing remote SLSBs</a></span></dt><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#ejb-access-ejb2-ejb3">29.2.4. Accessing EJB 2.x SLSBs=
 versus EJB 3 SLSBs</a></span></dt></dl></dd><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#ejb-implementation">29.3. Using Spring=92s EJB imple=
mentation support classes</a></span></dt><dd><dl><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#ejb-implementation-ejb3">29.3.1. EJB 3 injection=
 interceptor</a></span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#jms">30. JMS (Java Message Service)</a></span></d=
t><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-introduc=
tion">30.1. Introduction</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#jms-using">30.2. Using Spring JMS</a></span></dt><dd><dl>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-jmstemplate">30.2.=
1. JmsTemplate</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#jms-connections">30.2.2. Connections</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#jms-caching-resources">Cachin=
g Messaging Resources</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#jms-connection-factory">SingleConnectionFactory</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-connection-fac=
tory-caching">CachingConnectionFactory</a></span></dt></dl></dd><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#jms-destinations">30.2.3. Destina=
tion Management</a></span></dt><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#jms-mdp">30.2.4. Message Listener Containers</a></span></dt><dd><d=
l><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-mdp-simple">Simp=
leMessageListenerContainer</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#jms-mdp-default">DefaultMessageListenerContainer</a></s=
pan></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms=
-tx">30.2.5. Transaction management</a></span></dt></dl></dd><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#jms-sending">30.3. Sending a Message=
</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#jms-msg-conversion">30.3.1. Using Message Converters</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#jms-callbacks">30.3.2. Sess=
ionCallback and ProducerCallback</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#jms-receiving">30.4. Receiving a mess=
age</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#jms-receiving-sync">30.4.1. Synchronous reception</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#jms-asynchronousMessageRece=
ption">30.4.2. Asynchronous reception: Message-Driven POJOs</a></span></dt>=
<dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-receiving-async-se=
ssion-aware-message-listener">30.4.3. SessionAwareMessageListener interface=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-re=
ceiving-async-message-listener-adapter">30.4.4. MessageListenerAdapter</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-tx-part=
icipation">30.4.5. Processing messages within transactions</a></span></dt><=
/dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-jca-messa=
ge-endpoint-manager">30.5. Support for JCA Message Endpoints</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms-annotated">30.6. =
Annotation-driven listener endpoints</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#jms-annotated-support">30.6.1. Enable=
 listener endpoint annotations</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#jms-annotated-programmatic-registration">30.6.2. Pr=
ogrammatic endpoints registration</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#jms-annotated-method-signature">30.6.3. Annotate=
d endpoint method signature</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#jms-annotated-response">30.6.4. Response management</a=
></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#jms-namespace">30.7. JMS namespace support</a></span></dt></dl></dd><dt><s=
pan class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#jmx">31. JMX</a></span></dt>=
<dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-introducti=
on">31.1. Introduction</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#jmx-exporting">31.2. Exporting your beans to JMX</a></spa=
n></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-exp=
orting-mbeanserver">31.2.1. Creating an MBeanServer</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#jmx-mbean-server">31.2.2. Reus=
ing an existing MBeanServer</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#jmx-exporting-lazy">31.2.3. Lazy-initialized MBeans</a=
></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-expor=
ting-auto">31.2.4. Automatic registration of MBeans</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#jmx-exporting-registration-beh=
avior">31.2.5. Controlling the registration behavior</a></span></dt></dl></=
dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface">31.3=
. Controlling the management interface of your beans</a></span></dt><dd><dl=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-interface-assembl=
er">31.3.1. MBeanInfoAssembler interface</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#jmx-interface-metadata">31.3.2. Using sou=
rce-level metadata: Java annotations</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#jmx-interface-metadata-types">31.3.3. Source-=
level metadata types</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#jmx-interface-autodetect">31.3.4. AutodetectCapableMBeanInfoA=
ssembler interface</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#jmx-interface-java">31.3.5. Defining management interfaces usin=
g Java interfaces</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#jmx-interface-methodnames">31.3.6. Using MethodNameBasedMBeanInf=
oAssembler</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#jmx-naming">31.4. Controlling the ObjectNames for your beans<=
/a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#jmx-naming-properties">31.4.1. Reading ObjectNames from Properties</a></sp=
an></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-naming-met=
adata">31.4.2. Using the MetadataNamingStrategy</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#jmx-context-mbeanexport">31.4.3. C=
onfiguring annotation based MBean export</a></span></dt></dl></dd><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#jmx-jsr160">31.5. JSR-160 Conne=
ctors</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#jmx-jsr160-server">31.5.1. Server-side connectors</a></span></dt><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#jmx-jsr160-client">31.5.2=
. Client-side connectors</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#jmx-jsr160-protocols">31.5.3. JMX over Burlap/Hessian/SOA=
P</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#jmx-proxy">31.6. Accessing MBeans via proxies</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#jmx-notifications">31.7. Notifi=
cations</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#jmx-notifications-listeners">31.7.1. Registering listeners for not=
ifications</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#jmx-notifications-publishing">31.7.2. Publishing Notifications</a></spa=
n></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx-r=
esources">31.8. Further resources</a></span></dt></dl></dd><dt><span class=
=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#cci">32. JCA CCI</a></span></dt><dd><=
dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cci-introduction">3=
2.1. Introduction</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#cci-config">32.2. Configuring CCI</a></span></dt><dd><dl><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#cci-config-connector">32.2.1.=
 Connector configuration</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#cci-config-connectionfactory">32.2.2. ConnectionFactory c=
onfiguration in Spring</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#cci-config-cci-connections">32.2.3. Configuring CCI conne=
ctions</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
cci-config-single-connection">32.2.4. Using a single CCI connection</a></sp=
an></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cci-=
using">32.3. Using Spring=92s CCI access support</a></span></dt><dd><dl><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#cci-record-creator">32.3.=
1. Record conversion</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#cci-using-template">32.3.2. CciTemplate</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#cci-using-dao">32.3.3. DAO s=
upport</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
automatic-output-generation">32.3.4. Automatic output record generation</a>=
</span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#template-s=
ummary">32.3.5. Summary</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#cci-straight">32.3.6. Using a CCI Connection and Interact=
ion directly</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#cci-template-example">32.3.7. Example for CciTemplate usage</a></span=
></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cci-ob=
ject">32.4. Modeling CCI access as operation objects</a></span></dt><dd><dl=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cci-object-mapping-re=
cord">32.4.1. MappingRecordOperation</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#cci-object-mapping-comm-area">32.4.2. Mapping=
CommAreaOperation</a></span></dt><dt><span class=3D"section"><a href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#cci-automatic-record-gen">32.4.3. Automatic output record genera=
tion</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cc=
i-object-summary">32.4.4. Summary</a></span></dt><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#cci-objects-mappring-record-example">32.4.5. Exa=
mple for MappingRecordOperation usage</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#cci-objects-mapping-comm-area-example">32.4.=
6. Example for MappingCommAreaOperation usage</a></span></dt></dl></dd><dt>=
<span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#cci-tx">32.5. Transactions=
</a></span></dt></dl></dd><dt><span class=3D"chapter"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#mail">33. Email</a></span></dt><dd><dl><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#mail-introduction">33.1. Introduction</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#mail-usage">33.2. Usage=
</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#mail-usage-simple">33.2.1. Basic MailSender and SimpleMailMessage usage</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mail-usa=
ge-mime">33.2.2. Using the JavaMailSender and the MimeMessagePreparator</a>=
</span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
mail-javamail-mime">33.3. Using the JavaMail MimeMessageHelper</a></span></=
dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mail-javama=
il-mime-attachments">33.3.1. Sending attachments and inline resources</a></=
span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mail=
-javamail-mime-attachments-attachment">Attachments</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mail-javamail-mime-attachments-=
inline">Inline resources</a></span></dt></dl></dd><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#mail-templates">33.3.2. Creating email content =
using a templating library</a></span></dt><dd><dl><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#mail-templates-example">A Velocity-based exampl=
e</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class=3D"chapter">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#scheduling">34. Task Execution and Scheduling</a><=
/span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sch=
eduling-introduction">34.1. Introduction</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#scheduling-task-executor">34.2. The Sprin=
g TaskExecutor abstraction</a></span></dt><dd><dl><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#scheduling-task-executor-types">34.2.1. TaskExe=
cutor types</a></span></dt><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#scheduling-task-executor-usage">34.2.2. Using a TaskExecutor</a></span=
></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#schedu=
ling-task-scheduler">34.3. The Spring TaskScheduler abstraction</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#scheduling=
-trigger-interface">34.3.1. Trigger interface</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#scheduling-trigger-implementations">=
34.3.2. Trigger implementations</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#scheduling-task-scheduler-implementations">34.3.3.=
 TaskScheduler implementations</a></span></dt></dl></dd><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#scheduling-annotation-support">34.4. Anno=
tation Support for Scheduling and Asynchronous Execution</a></span></dt><dd=
><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#scheduling-enable=
-annotation-support">34.4.1. Enable scheduling annotations</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#scheduling-annotation-s=
upport-scheduled">34.4.2. The @Scheduled annotation</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#scheduling-annotation-support-=
async">34.4.3. The @Async annotation</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#scheduling-annotation-support-qualification">=
34.4.4. Executor qualification with @Async</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#scheduling-annotation-support-excepti=
on">34.4.5. Exception management with @Async</a></span></dt></dl></dd><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#scheduling-task-namespace">=
34.5. The task namespace</a></span></dt><dd><dl><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#scheduling-task-namespace-scheduler">34.5.1. The =
'scheduler' element</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#scheduling-task-namespace-executor">34.5.2. The 'executor' ele=
ment</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sc=
heduling-task-namespace-scheduled-tasks">34.5.3. The 'scheduled-tasks' elem=
ent</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#scheduling-quartz">34.6. Using the Quartz Scheduler</a></span></dt><=
dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#scheduling-quar=
tz-jobdetail">34.6.1. Using the JobDetailFactoryBean</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#scheduling-quartz-method-invo=
king-job">34.6.2. Using the MethodInvokingJobDetailFactoryBean</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#scheduling-quartz-c=
ron">34.6.3. Wiring up jobs using triggers and the SchedulerFactoryBean</a>=
</span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#dynamic-language">35. Dynamic language support</a></span></dt><dd=
><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-=
introduction">35.1. Introduction</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#dynamic-language-a-first-example">35.2. A first e=
xample</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
dynamic-language-beans">35.3. Defining beans that are backed by dynamic lan=
guages</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#dynamic-language-beans-concepts">35.3.1. Common concepts</a></span>=
</dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dynamic-l=
anguage-beans-concepts-xml-language-element">The &lt;lang:language/&gt; ele=
ment</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dy=
namic-language-refreshable-beans">Refreshable beans</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-inline"=
>Inline dynamic language source files</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#dynamic-language-beans-ctor-injection">Under=
standing Constructor Injection in the context of dynamic-language-backed be=
ans</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#dynamic-language-beans-jruby">35.3.2. JRuby beans</a></span></dt><dt=
><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-beans-gr=
oovy">35.3.3. Groovy beans</a></span></dt><dd><dl><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#dynamic-language-beans-groovy-customizer">Custo=
mizing Groovy objects via a callback</a></span></dt></dl></dd><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#dynamic-language-beans-bsh">35.3.4.=
 BeanShell beans</a></span></dt></dl></dd><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#dynamic-language-scenarios">35.4. Scenarios</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dynamic-la=
nguage-scenarios-controllers">35.4.1. Scripted Spring MVC Controllers</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dynamic-lang=
uage-scenarios-validators">35.4.2. Scripted Validators</a></span></dt></dl>=
</dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dynamic-language-=
final-notes">35.5. Bits and bobs</a></span></dt><dd><dl><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#dynamic-language-final-notes-aop">35.5.1.=
 AOP - advising scripted beans</a></span></dt><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#dynamic-language-final-notes-scopes">35.5.2. Scopin=
g</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#dynamic-language-resources">35.6. Further resources</a></span></dt></d=
l></dd><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache">36. Cach=
e Abstraction</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#cache-introduction">36.1. Introduction</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#cache-strategies">36.2. Unde=
rstanding the cache abstraction</a></span></dt><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#cache-annotations">36.3. Declarative annotation-ba=
sed caching</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#cache-annotations-cacheable">36.3.1. @Cacheable annotation</a>=
</span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ca=
che-annotations-cacheable-default-key">Default Key Generation</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-annotations-ca=
cheable-key">Custom Key Generation Declaration</a></span></dt><dt><span cla=
ss=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#cache-annotations-cacheable-default=
-cache-resolver">Default Cache Resolution</a></span></dt><dt><span class=3D=
"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#cache-annotations-cacheable-cache-resolv=
er">Custom cache resolution</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#cache-annotations-cacheable-synchronized">Synchronized=
 caching</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#cache-annotations-cacheable-condition">Conditional caching</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-spel-context">A=
vailable caching SpEL evaluation context</a></span></dt></dl></dd><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#cache-annotations-put">36.3.2. =
@CachePut annotation</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#cache-annotations-evict">36.3.3. @CacheEvict annotation</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-annota=
tions-caching">36.3.4. @Caching annotation</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#cache-annotations-config">36.3.5. @Ca=
cheConfig annotation</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#cache-annotation-enable">36.3.6. Enable caching annotations</=
a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-an=
notation-stereotype">36.3.7. Using custom annotations</a></span></dt></dl><=
/dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-jsr-107">36.=
4. JCache (JSR-107) annotations</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#cache-jsr-107-summary">36.4.1. Feature sum=
mary</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_e=
nabling_jsr_107_support">36.4.2. Enabling JSR-107 support</a></span></dt></=
dl></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-declarat=
ive-xml">36.5. Declarative XML-based caching</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#cache-store-configuration">36.6. Conf=
iguring the cache storage</a></span></dt><dd><dl><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#cache-store-configuration-jdk">36.6.1. JDK Concu=
rrentMap-based Cache</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#cache-store-configuration-ehcache">36.6.2. Ehcache-based Cach=
e</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache=
-store-configuration-caffeine">36.6.3. Caffeine Cache</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration-gu=
ava">36.6.4. Guava Cache</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#cache-store-configuration-gemfire">36.6.5. GemFire-based =
Cache</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#c=
ache-store-configuration-jsr107">36.6.6. JSR-107 Cache</a></span></dt><dt><=
span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#cache-store-configuration-n=
oop">36.6.7. Dealing with caches without a backing store</a></span></dt></d=
l></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-plug">36.=
7. Plugging-in different back-end caches</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#cache-specific-config">36.8. How can I se=
t the TTL/TTI/Eviction policy/XXX feature?</a></span></dt></dl></dd></dl></=
dd><dt><span class=3D"part"><a href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-appendices">VII=
I. Appendices</a></span></dt><dd><dl><dt><span class=3D"chapter"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#migration-4.x">37. Migrating to Spring Framework 4.x</a></sp=
an></dt><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#annotation-pro=
gramming-model">38. Spring Annotation Programming Model</a></span></dt><dt>=
<span class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#classic-spring">39. Classi=
c Spring Usage</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#classic-spring-orm">39.1. Classic ORM usage</a></span></d=
t><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-spri=
ng-hibernate">39.1.1. Hibernate</a></span></dt><dd><dl><dt><span class=3D"s=
ection"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#orm-hibernate-template">The HibernateTempl=
ate</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#orm=
-hibernate-daos">Implementing Spring-based DAOs without callbacks</a></span=
></dt></dl></dd></dl></dd><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#classic-spring-jms">39.2. JMS Usage</a></span></dt><dd><dl><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#classic-spring-jms-template">39.2.=
1. JmsTemplate</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#classic-spring-aysnc-messages">39.2.2. Asynchronous Message Recepti=
on</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#clas=
sic-spring-jms-connections">39.2.3. Connections</a></span></dt><dt><span cl=
ass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#classic-spring-jms-tx-management">=
39.2.4. Transaction Management</a></span></dt></dl></dd></dl></dd><dt><span=
 class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#classic-aop-spring">40. Classic=
 Spring AOP Usage</a></span></dt><dd><dl><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#classic-aop-api-pointcuts">40.1. Pointcut API in Spring<=
/a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#classic-aop-api-concepts">40.1.1. Concepts</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#classic-aop-api-pointcut-ops">40.1.2.=
 Operations on pointcuts</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#classic-aop-api-pointcuts-aspectj">40.1.3. AspectJ expres=
sion pointcuts</a></span></dt><dt><span class=3D"section"><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#classic-aop-api-pointcuts-impls">40.1.4. Convenience pointcut imple=
mentations</a></span></dt><dd><dl><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#classic-aop-api-pointcuts-static">Static pointcuts</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-poi=
ntcuts-dynamic">Dynamic pointcuts</a></span></dt></dl></dd><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#classic-aop-api-pointcuts-superclasse=
s">40.1.5. Pointcut superclasses</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#classic-aop-api-pointcuts-custom">40.1.6. Custom =
pointcuts</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#classic-aop-api-advice">40.2. Advice API in Spring</a></span><=
/dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-ao=
p-api-advice-lifecycle">40.2.1. Advice lifecycles</a></span></dt><dt><span =
class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-types">40=
.2.2. Advice types in Spring</a></span></dt><dd><dl><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#classic-aop-api-advice-around">Interception a=
round advice</a></span></dt><dt><span class=3D"section"><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#classic-aop-api-advice-before">Before advice</a></span></dt><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#classic-aop-api-advice-throws">=
Throws advice</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#classic-aop-api-advice-after-returning">After Returning advice</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-=
api-advice-introduction">Introduction advice</a></span></dt></dl></dd></dl>=
</dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-a=
dvisor">40.3. Advisor API in Spring</a></span></dt><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#classic-aop-pfb">40.4. Using the ProxyFactoryB=
ean to create AOP proxies</a></span></dt><dd><dl><dt><span class=3D"section=
"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#classic-aop-pfb-1">40.4.1. Basics</a></span></dt=
><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-pfb-2">40=
.4.2. JavaBean properties</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#classic-aop-pfb-proxy-types">40.4.3. JDK- and CGLIB-base=
d proxies</a></span></dt><dt><span class=3D"section"><a href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#classic-aop-api-proxying-intf">40.4.4. Proxying interfaces</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-prox=
ying-class">40.4.5. Proxying classes</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#classic-aop-global-advisors">40.4.6. Using 'g=
lobal' advisors</a></span></dt></dl></dd><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#classic-aop-concise-proxy">40.5. Concise proxy definitio=
ns</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#clas=
sic-aop-prog">40.6. Creating AOP proxies programmatically with the ProxyFac=
tory</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cl=
assic-aop-api-advised">40.7. Manipulating advised objects</a></span></dt><d=
t><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-autoproxy">4=
0.8. Using the "autoproxy" facility</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#classic-aop-autoproxy-choices">40.8.1=
. Autoproxy bean definitions</a></span></dt><dd><dl><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#classic-aop-api-autoproxy">BeanNameAutoProxyC=
reator</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
classic-aop-api-autoproxy-default">DefaultAdvisorAutoProxyCreator</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-api-=
autoproxy-abstract">AbstractAdvisorAutoProxyCreator</a></span></dt></dl></d=
d><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-autoprox=
y-metadata">40.8.2. Using metadata-driven auto-proxying</a></span></dt></dl=
></dd><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-targ=
etsource">40.9. Using TargetSources</a></span></dt><dd><dl><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#classic-aop-ts-swap">40.9.1. Hot swap=
pable target sources</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#classic-aop-ts-pool">40.9.2. Pooling target sources</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#classic-aop-ts-p=
rototype">40.9.3. Prototype target sources</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#classic-aop-ts-threadlocal">40.9.4. T=
hreadLocal target sources</a></span></dt></dl></dd><dt><span class=3D"secti=
on"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#classic-aop-extensibility">40.10. Defining new=
 Advice types</a></span></dt><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#classic-aop-api-resources">40.11. Further resources</a></span></dt><=
/dl></dd><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-configura=
tion">41. XML Schema-based configuration</a></span></dt><dd><dl><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#xsd-config-introduction">41.1. In=
troduction</a></span></dt><dt><span class=3D"section"><a href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#xsd-config-body">41.2. XML Schema-based configuration</a></span></dt><d=
d><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-=
referencing">41.2.1. Referencing the schemas</a></span></dt><dt><span class=
=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#xsd-config-body-schemas-util">41.2.2.=
 the util schema</a></span></dt><dd><dl><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#xsd-config-body-schemas-util-constant">&lt;util:constant/=
&gt;</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xs=
d-config-body-schemas-util-property-path">&lt;util:property-path/&gt;</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-b=
ody-schemas-util-properties">&lt;util:properties/&gt;</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-util=
-list">&lt;util:list/&gt;</a></span></dt><dt><span class=3D"section"><a hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#xsd-config-body-schemas-util-map">&lt;util:map/&gt;</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-=
body-schemas-util-set">&lt;util:set/&gt;</a></span></dt></dl></dd><dt><span=
 class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee">41=
.2.3. the jee schema</a></span></dt><dd><dl><dt><span class=3D"section"><a =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup">&lt;jee:jndi=
-lookup/&gt; (simple)</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup-environment-single">=
&lt;jee:jndi-lookup/&gt; (with single JNDI environment setting)</a></span><=
/dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-sc=
hemas-jee-jndi-lookup-evironment-multiple">&lt;jee:jndi-lookup/&gt; (with m=
ultiple JNDI environment settings)</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup-complex=
">&lt;jee:jndi-lookup/&gt; (complex)</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#xsd-config-body-schemas-jee-local-slsb">&lt;j=
ee:local-slsb/&gt; (simple)</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#xsd-config-body-schemas-jee-local-slsb-complex">&lt;je=
e:local-slsb/&gt; (complex)</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#xsd-config-body-schemas-jee-remote-slsb">&lt;jee:remot=
e-slsb/&gt;</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#xsd-config-body-schemas-lang">41.2.4. the lang schema</a></s=
pan></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-bo=
dy-schemas-jms">41.2.5. the jms schema</a></span></dt><dt><span class=3D"se=
ction"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#xsd-config-body-schemas-tx">41.2.6. the tx =
(transaction) schema</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#xsd-config-body-schemas-aop">41.2.7. the aop schema</a></span=
></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-=
schemas-context">41.2.8. the context schema</a></span></dt><dd><dl><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-contex=
t-pphc">&lt;property-placeholder/&gt;</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#xsd-config-body-schemas-context-ac">&lt;anno=
tation-config/&gt;</a></span></dt><dt><span class=3D"section"><a href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#xsd-config-body-schemas-context-component-scan">&lt;component-s=
can/&gt;</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#xsd-config-body-schemas-context-ltw">&lt;load-time-weaver/&gt;</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-s=
chemas-context-sc">&lt;spring-configured/&gt;</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#xsd-config-body-schemas-context-mbe"=
>&lt;mbean-export/&gt;</a></span></dt></dl></dd><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#xsd-config-body-schemas-tool">41.2.9. the tool sc=
hema</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xs=
d-config-body-schemas-jdbc">41.2.10. the jdbc schema</a></span></dt><dt><sp=
an class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-cache=
">41.2.11. the cache schema</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#xsd-config-body-schemas-beans">41.2.12. the beans sche=
ma</a></span></dt></dl></dd></dl></dd><dt><span class=3D"chapter"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#xml-custom">42. Extensible XML authoring</a></span></dt><=
dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-=
introduction">42.1. Introduction</a></span></dt><dt><span class=3D"section"=
><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/#extensible-xml-schema">42.2. Authoring the schema=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#extens=
ible-xml-namespacehandler">42.3. Coding a NamespaceHandler</a></span></dt><=
dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#extensible-xml-parser">=
42.4. BeanDefinitionParser</a></span></dt><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#extensible-xml-registration">42.5. Registering the hand=
ler and the schema</a></span></dt><dd><dl><dt><span class=3D"section"><a hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#extensible-xml-registration-spring-handlers">42.5.1. 'M=
ETA-INF/spring.handlers'</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#extensible-xml-registration-spring-schemas">42.5.2. 'META=
-INF/spring.schemas'</a></span></dt></dl></dd><dt><span class=3D"section"><=
a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#extensible-xml-using">42.6. Using a custom extensio=
n in your Spring XML configuration</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#extensible-xml-meat">42.7. Meatier examples</a>=
</span></dt><dd><dl><dt><span class=3D"section"><a href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ex=
tensible-xml-custom-nested">42.7.1. Nesting custom tags within custom tags<=
/a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#extensi=
ble-xml-custom-just-attributes">42.7.2. Custom attributes on 'normal' eleme=
nts</a></span></dt></dl></dd><dt><span class=3D"section"><a href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#extensible-xml-resources">42.8. Further Resources</a></span></dt></d=
l></dd><dt><span class=3D"chapter"><a href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-tld">43.=
 spring JSP Tag Library</a></span></dt><dd><dl><dt><span class=3D"section">=
<a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#spring.tld-intro">43.1. Introduction</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.argument"=
>43.2. The argument tag</a></span></dt><dt><span class=3D"section"><a href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#spring.tld.bind">43.3. The bind tag</a></span></dt><dt><s=
pan class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#spring.tld.escapeBody">43.4.=
 The escapeBody tag</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#spring.tld.eval">43.5. The eval tag</a></span></dt><dt><span c=
lass=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#spring.tld.hasBindErrors">43.6. T=
he hasBindErrors tag</a></span></dt><dt><span class=3D"section"><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#spring.tld.htmlEscape">43.7. The htmlEscape tag</a></span></d=
t><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.message">=
43.8. The message tag</a></span></dt><dt><span class=3D"section"><a href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#spring.tld.nestedPath">43.9. The nestedPath tag</a></span></=
dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring.tld.param">4=
3.10. The param tag</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#spring.tld.theme">43.11. The theme tag</a></span></dt><dt><spa=
n class=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#spring.tld.transform">43.12. T=
he transform tag</a></span></dt><dt><span class=3D"section"><a href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#spring.tld.url">43.13. The url tag</a></span></dt></dl></dd><dt><=
span class=3D"chapter"><a href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#spring-form-tld">44. spring=
-form JSP Tag Library</a></span></dt><dd><dl><dt><span class=3D"section"><a=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#spring-form.tld-intro">44.1. Introduction</a></span>=
</dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-form.tld.b=
utton">44.2. The button tag</a></span></dt><dt><span class=3D"section"><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#spring-form.tld.checkbox">44.3. The checkbox tag</a></=
span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-form.=
tld.checkboxes">44.4. The checkboxes tag</a></span></dt><dt><span class=3D"=
section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#spring-form.tld.errors">44.5. The errors =
tag</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spr=
ing-form.tld.form">44.6. The form tag</a></span></dt><dt><span class=3D"sec=
tion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#spring-form.tld.hidden">44.7. The hidden tag=
</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring=
-form.tld.input">44.8. The input tag</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#spring-form.tld.label">44.9. The label tag</a=
></span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-fo=
rm.tld.option">44.10. The option tag</a></span></dt><dt><span class=3D"sect=
ion"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#spring-form.tld.options">44.11. The options t=
ag</a></span></dt><dt><span class=3D"section"><a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spri=
ng-form.tld.password">44.12. The password tag</a></span></dt><dt><span clas=
s=3D"section"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#spring-form.tld.radiobutton">44.13. =
The radiobutton tag</a></span></dt><dt><span class=3D"section"><a href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#spring-form.tld.radiobuttons">44.14. The radiobuttons tag</a><=
/span></dt><dt><span class=3D"section"><a href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-form=
.tld.select">44.15. The select tag</a></span></dt><dt><span class=3D"sectio=
n"><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#spring-form.tld.textarea">44.16. The textarea t=
ag</a></span></dt></dl></dd></dl></dd></dl></div>
<div class=3D"part"><div class=3D"titlepage"><div><div><h1 class=3D"title">=
<a name=3D"spring-introduction" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-introduction">=
</a>Part&nbsp;I.&nbsp;Overview of Spring Framework</h1></div></div></div>
<div class=3D"partintro"><div></div>
<p>The Spring Framework is a lightweight solution and a potential one-stop-=
shop for
building your enterprise-ready applications. However, Spring is modular, al=
lowing you to
use only those parts that you need, without having to bring in the rest. Yo=
u can use the
IoC container, with any web framework on top, but you can also use only the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#orm-hibernate" title=3D"20.3&nbsp;H=
ibernate">Hibernate integration code</a> or the <a class=3D"link" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#jdbc-introduction" title=3D"19.1&nbsp;Introduction to Spring F=
ramework JDBC">JDBC abstraction
layer</a>. The Spring Framework supports declarative transaction management=
, remote access
to your logic through RMI or web services, and various options for persisti=
ng your data.
It offers a full-featured <a class=3D"link" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-intro=
duction" title=3D"22.1&nbsp;Introduction to Spring Web MVC framework">MVC f=
ramework</a>, and enables you to
integrate <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction" title=
=3D"11.1&nbsp;Introduction">AOP</a> transparently into your software.</p>
<p>Spring is designed to be non-intrusive, meaning that your domain logic c=
ode generally
has no dependencies on the framework itself. In your integration layer (suc=
h as the data
access layer), some dependencies on the data access technology and the Spri=
ng libraries
will exist. However, it should be easy to isolate these dependencies from t=
he rest of
your code base.</p>
<p>This document is a reference guide to Spring Framework features. If you =
have any
requests, comments, or questions on this document, please post them on the
<a class=3D"ulink" href=3D"https://groups.google.com/forum/#!forum/spring-f=
ramework-contrib" target=3D"_top">user mailing
list</a>. Questions on the Framework itself should be asked on StackOverflo=
w
(see <a class=3D"ulink" href=3D"https://spring.io/questions" target=3D"_top=
">https://spring.io/questions</a>).</p>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"overview-getting-started-with-spring" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#o=
verview-getting-started-with-spring"></a>1.&nbsp;Getting Started with Sprin=
g</h2></div></div></div>
<p>This reference guide provides detailed information about the Spring Fram=
ework.
It provides comprehensive documentation for all features, as well as some b=
ackground
about the underlying concepts (such as <span class=3D"emphasis"><em>"Depend=
ency Injection"</em></span>) that Spring has
embraced.</p>
<p>If you are just getting started with Spring, you may want to begin using=
 the Spring Framework
by creating a <a class=3D"ulink" href=3D"https://projects.spring.io/spring-=
boot/" target=3D"_top">Spring Boot</a> based application.
Spring Boot provides a quick (and opinionated) way to create a production-r=
eady Spring based
application. It is based on the Spring Framework, favors convention over co=
nfiguration, and is
designed to get you up and running as quickly as possible.</p>
<p>You can use <a class=3D"ulink" href=3D"https://start.spring.io/" target=
=3D"_top">start.spring.io</a> to generate a basic project or follow
one of the <a class=3D"ulink" href=3D"https://spring.io/guides" target=3D"_=
top">"Getting Started" guides</a> like the
<a class=3D"ulink" href=3D"https://spring.io/guides/gs/rest-service/" targe=
t=3D"_top">Getting Started Building a RESTful Web Service</a>
one. As well as being easier to digest, these guides are very <span class=
=3D"emphasis"><em>task focused</em></span>, and most of
them are based on Spring Boot. They also cover other projects from the Spri=
ng portfolio
that you might want to consider when solving a particular problem.</p>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"overview" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#overview"></a>2.&nbsp;Introdu=
ction to the Spring Framework</h2></div></div></div>
<p>The Spring Framework is a Java platform that provides comprehensive infr=
astructure support
for developing Java applications. Spring handles the infrastructure so you =
can focus on
your application.</p>
<p>Spring enables you to build applications from "plain old Java objects" (=
POJOs) and to
apply enterprise services non-invasively to POJOs. This capability applies =
to the Java
SE programming model and to full and partial Java EE.</p>
<p>Examples of how you, as an application developer, can benefit from the S=
pring platform:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Make a Java method execute in a database transaction without having to deal=
 with
transaction APIs.
</li><li class=3D"listitem">
Make a local Java method an HTTP endpoint without having to deal with the S=
ervlet API.
</li><li class=3D"listitem">
Make a local Java method a message handler without having to deal with the =
JMS API.
</li><li class=3D"listitem">
Make a local Java method a management operation without having to deal with=
 the JMX API.
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"overview-dependency-injection" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#overview-dependency-injection"></a>2.1&nbsp;Dependency Inject=
ion and Inversion of Control</h2></div></div></div>
<p>A Java application&#8201;=97&#8201;a loose term that runs the gamut from=
 constrained, embedded
applications to n-tier, server-side enterprise applications&#8201;=97&#8201=
;typically consists of
objects that collaborate to form the application proper. Thus the objects i=
n an
application have <span class=3D"emphasis"><em>dependencies</em></span> on e=
ach other.</p>
<p>Although the Java platform provides a wealth of application development =
functionality,
it lacks the means to organize the basic building blocks into a coherent wh=
ole, leaving
that task to architects and developers. Although you can use design pattern=
s such
as <span class=3D"emphasis"><em>Factory</em></span>, <span class=3D"emphasi=
s"><em>Abstract Factory</em></span>, <span class=3D"emphasis"><em>Builder</=
em></span>, <span class=3D"emphasis"><em>Decorator</em></span>, and <span c=
lass=3D"emphasis"><em>Service Locator</em></span>
to compose the various classes and object instances that make up an applica=
tion,
these patterns are simply that: best practices given a name, with a descrip=
tion
of what the pattern does, where to apply it, the problems it addresses, and=
 so forth.
Patterns are formalized best practices that <span class=3D"emphasis"><em>yo=
u must implement yourself</em></span> in your
application.</p>
<p>The Spring Framework <span class=3D"emphasis"><em>Inversion of Control</=
em></span> (IoC) component addresses this concern by
providing a formalized means of composing disparate components into a fully=
 working
application ready for use. The Spring Framework codifies formalized design =
patterns as
first-class objects that you can integrate into your own application(s). Nu=
merous
organizations and institutions use the Spring Framework in this manner to e=
ngineer
robust, <span class=3D"emphasis"><em>maintainable</em></span> applications.=
</p>
<div class=3D"sidebar"><a name=3D"background-ioc" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bac=
kground-ioc"></a><div class=3D"titlepage"><div><div><p class=3D"title"><b>B=
ackground</b></p></div></div></div>
<p>"<span class=3D"emphasis"><em>The question is, what aspect of control ar=
e [they] inverting?</em></span>" Martin Fowler posed
this question about Inversion of Control (IoC)
<a class=3D"ulink" href=3D"http://martinfowler.com/articles/injection.html"=
 target=3D"_top">on his site</a> in 2004. Fowler suggested
renaming the principle to make it more self-explanatory and came up with <s=
pan class=3D"emphasis"><em>Dependency
Injection</em></span>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"overview-modules" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#overview-modules"></a>2.2&nbsp;Framework Modules</h2></div></div></div>
<p>The Spring Framework consists of features organized into about 20 module=
s. These modules
are grouped into Core Container, Data Access/Integration, Web, AOP (Aspect =
Oriented
Programming), Instrumentation, Messaging, and Test, as shown in the followi=
ng diagram.</p>
<div class=3D"figure"><a name=3D"d5e200" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e200"></a>=
<p class=3D"title"><b>Figure&nbsp;2.1.&nbsp;Overview of the Spring Framewor=
k</b></p><div class=3D"figure-contents">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.=
png" alt=3D"spring overview"></div>
</div></div><br class=3D"figure-break">
<p>The following sections list the available modules for each feature along=
 with their
artifact names and the topics they cover. Artifact names correlate to <span=
 class=3D"emphasis"><em>artifact IDs</em></span> used
in <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#dependency-management" title=3D"=
2.3.1&nbsp;Dependency Management and Naming Conventions">Dependency Managem=
ent tools</a>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-core-container" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-core-=
container"></a>2.2.1&nbsp;Core Container</h3></div></div></div>
<p>The <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#beans-introduction" title=3D=
"7.1&nbsp;Introduction to the Spring IoC container and beans"><span class=
=3D"emphasis"><em>Core Container</em></span></a> consists of the <code clas=
s=3D"literal">spring-core</code>,
<code class=3D"literal">spring-beans</code>, <code class=3D"literal">spring=
-context</code>, <code class=3D"literal">spring-context-support</code>, and=
 <code class=3D"literal">spring-expression</code>
(Spring Expression Language) modules.</p>
<p>The <code class=3D"literal">spring-core</code> and <code class=3D"litera=
l">spring-beans</code> modules <a class=3D"link" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-introduction" title=3D"7.1&nbsp;Introduction to the Spring IoC container =
and beans">provide the fundamental
parts of the framework</a>, including the IoC and Dependency Injection feat=
ures. The
<code class=3D"literal">BeanFactory</code> is a sophisticated implementatio=
n of the factory pattern. It removes the
need for programmatic singletons and allows you to decouple the configurati=
on and
specification of dependencies from your actual program logic.</p>
<p>The <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#context-introduction" title=
=3D"7.15&nbsp;Additional capabilities of the ApplicationContext"><span clas=
s=3D"emphasis"><em>Context</em></span></a> (<code class=3D"literal">spring-=
context</code>) module builds on the solid
base provided by the <a class=3D"link" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-introduc=
tion" title=3D"7.1&nbsp;Introduction to the Spring IoC container and beans"=
><span class=3D"emphasis"><em>Core and Beans</em></span></a> modules: it is=
 a means to
access objects in a framework-style manner that is similar to a JNDI regist=
ry. The
Context module inherits its features from the Beans module and adds support=
 for
internationalization (using, for example, resource bundles), event propagat=
ion, resource
loading, and the transparent creation of contexts by, for example, a Servle=
t container.
The Context module also supports Java EE features such as EJB, JMX, and bas=
ic remoting.
The <code class=3D"literal">ApplicationContext</code> interface is the foca=
l point of the Context module.
<code class=3D"literal">spring-context-support</code> provides support for =
integrating common third-party libraries
into a Spring application context for caching (EhCache, Guava, JCache), mai=
ling
(JavaMail), scheduling (CommonJ, Quartz) and template engines (FreeMarker, =
JasperReports,
Velocity).</p>
<p>The <code class=3D"literal">spring-expression</code> module provides a p=
owerful <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#expressions" title=3D"10.&n=
bsp;Spring Expression Language (SpEL)"><span class=3D"emphasis"><em>Express=
ion
Language</em></span></a> for querying and manipulating an object graph at r=
untime. It is an extension
of the unified expression language (unified EL) as specified in the JSP 2.1
specification. The language supports setting and getting property values, p=
roperty
assignment, method invocation, accessing the content of arrays, collections=
 and indexers,
logical and arithmetic operators, named variables, and retrieval of objects=
 by name from
Spring=92s IoC container. It also supports list projection and selection as=
 well as common
list aggregations.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-aop-instrumentation" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-=
aop-instrumentation"></a>2.2.2&nbsp;AOP and Instrumentation</h3></div></div=
></div>
<p>The <code class=3D"literal">spring-aop</code> module provides an <a clas=
s=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#aop-introduction" title=3D"11.1&nbsp;Intro=
duction"><span class=3D"emphasis"><em>AOP</em></span></a> Alliance-complian=
t
aspect-oriented programming implementation allowing you to define, for exam=
ple,
method interceptors and pointcuts to cleanly decouple code that implements =
functionality
that should be separated. Using source-level metadata functionality, you ca=
n also
incorporate behavioral information into your code, in a manner similar to t=
hat of .NET
attributes.</p>
<p>The separate <code class=3D"literal">spring-aspects</code> module provid=
es integration with AspectJ.</p>
<p>The <code class=3D"literal">spring-instrument</code> module provides cla=
ss instrumentation support and classloader
implementations to be used in certain application servers. The <code class=
=3D"literal">spring-instrument-tomcat</code>
module contains Spring=92s instrumentation agent for Tomcat.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-messaging" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-messaging"=
></a>2.2.3&nbsp;Messaging</h3></div></div></div>
<p>Spring Framework 4 includes a <code class=3D"literal">spring-messaging</=
code> module with key abstractions from the
<span class=3D"emphasis"><em>Spring Integration</em></span> project such as=
 <code class=3D"literal">Message</code>, <code class=3D"literal">MessageCha=
nnel</code>, <code class=3D"literal">MessageHandler</code>, and
others to serve as a foundation for messaging-based applications. The modul=
e also
includes a set of annotations for mapping messages to methods, similar to t=
he Spring MVC
annotation based programming model.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-data-access" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-data-acc=
ess"></a>2.2.4&nbsp;Data Access/Integration</h3></div></div></div>
<p>The <span class=3D"emphasis"><em>Data Access/Integration</em></span> lay=
er consists of the JDBC, ORM, OXM, JMS, and
Transaction modules.</p>
<p>The <code class=3D"literal">spring-jdbc</code> module provides a <a clas=
s=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#jdbc-introduction" title=3D"19.1&nbsp;Intr=
oduction to Spring Framework JDBC">JDBC</a>-abstraction layer that
removes the need to do tedious JDBC coding and parsing of database-vendor s=
pecific error
codes.</p>
<p>The <code class=3D"literal">spring-tx</code> module supports <a class=3D=
"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#transaction" title=3D"17.&nbsp;Transaction Man=
agement">programmatic and declarative transaction</a>
management for classes that implement special interfaces and for <span clas=
s=3D"emphasis"><em>all your POJOs (Plain
Old Java Objects)</em></span>.</p>
<p>The <code class=3D"literal">spring-orm</code> module provides integratio=
n layers for popular
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#orm-introduction" title=3D"20.1&nbs=
p;Introduction to ORM with Spring">object-relational mapping</a> APIs, incl=
uding <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#orm-jpa" title=3D"20.5&nbsp;J=
PA">JPA</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#orm-jdo" title=3D"20.4&nbsp;JDO">JD=
O</a>, and <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#orm-hibernate" title=3D"=
20.3&nbsp;Hibernate">Hibernate</a>. Using the <code class=3D"literal">sprin=
g-orm</code> module you can
use all of these O/R-mapping frameworks in combination with all of the othe=
r features
Spring offers, such as the simple declarative transaction management featur=
e mentioned
previously.</p>
<p>The <code class=3D"literal">spring-oxm</code> module provides an abstrac=
tion layer that supports <a class=3D"link" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#oxm" title=
=3D"21.&nbsp;Marshalling XML using O/X Mappers">Object/XML
mapping</a> implementations such as JAXB, Castor, XMLBeans, JiBX and XStrea=
m.</p>
<p>The <code class=3D"literal">spring-jms</code> module (<a class=3D"link" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#jms" title=3D"30.&nbsp;JMS (Java Message Service)">Ja=
va Messaging Service</a>) contains features for producing and
consuming messages. Since Spring Framework 4.1, it provides integration wit=
h the
<code class=3D"literal">spring-messaging</code> module.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-web" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#overview-web"></a>2.2.5&n=
bsp;Web</h3></div></div></div>
<p>The <span class=3D"emphasis"><em>Web</em></span> layer consists of the <=
code class=3D"literal">spring-web</code>, <code class=3D"literal">spring-we=
bmvc</code>, <code class=3D"literal">spring-websocket</code>, and
<code class=3D"literal">spring-webmvc-portlet</code> modules.</p>
<p>The <code class=3D"literal">spring-web</code> module provides basic web-=
oriented integration features such as
multipart file upload functionality and the initialization of the IoC conta=
iner using
Servlet listeners and a web-oriented application context. It also contains =
an HTTP client
and the web-related parts of Spring=92s remoting support.</p>
<p>The <code class=3D"literal">spring-webmvc</code> module (also known as t=
he <span class=3D"emphasis"><em>Web-Servlet</em></span> module) contains Sp=
ring=92s
model-view-controller (<a class=3D"link" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-introduc=
tion" title=3D"22.1&nbsp;Introduction to Spring Web MVC framework"><span cl=
ass=3D"emphasis"><em>MVC</em></span></a>) and REST Web Services implementat=
ion
for web applications. Spring=92s MVC framework provides a clean separation =
between domain
model code and web forms and integrates with all of the other features of t=
he Spring
Framework.</p>
<p>The <code class=3D"literal">spring-webmvc-portlet</code> module (also kn=
own as the <span class=3D"emphasis"><em>Web-Portlet</em></span> module) pro=
vides
the MVC implementation to be used in a Portlet environment and mirrors the =
functionality
of the Servlet-based <code class=3D"literal">spring-webmvc</code> module.</=
p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-testing" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-testing"></a=
>2.2.6&nbsp;Test</h3></div></div></div>
<p>The <code class=3D"literal">spring-test</code> module supports the <a cl=
ass=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#unit-testing" title=3D"14.&nbsp;Unit Tes=
ting">unit testing</a> and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing" title=3D"15.&n=
bsp;Integration Testing">integration testing</a> of Spring components with =
JUnit or TestNG. It
provides consistent <a class=3D"link" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx=
-management" title=3D"15.5.4&nbsp;Context management">loading</a> of Spring
<code class=3D"literal">ApplicationContext</code>s and <a class=3D"link" hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#testcontext-ctx-management-caching" title=3D"Context ca=
ching">caching</a> of those
contexts. It also provides <a class=3D"link" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-obj=
ects" title=3D"14.1&nbsp;Mock Objects">mock objects</a> that you can use to=
 test your
code in isolation.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"overview-usagescenarios" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#overview-usagescenarios"></a>2.3&nbsp;Usage scenarios</h2></div></d=
iv></div>
<p>The building blocks described previously make Spring a logical choice in=
 many scenarios,
from embedded applications that run on resource-constrained devices to full=
-fledged
enterprise applications that use Spring=92s transaction management function=
ality and web
framework integration.</p>
<div class=3D"figure"><a name=3D"d5e313" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e313"></a>=
<p class=3D"title"><b>Figure&nbsp;2.2.&nbsp;Typical full-fledged Spring web=
 application</b></p><div class=3D"figure-contents">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-full.pn=
g" alt=3D"overview full"></div>
</div></div><br class=3D"figure-break">
<p>Spring=92s <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarati=
ve" title=3D"17.5&nbsp;Declarative transaction management">declarative tran=
saction management features</a> make
the web application fully transactional, just as it would be if you used EJ=
B
container-managed transactions. All your custom business logic can be imple=
mented with
simple POJOs and managed by Spring=92s IoC container. Additional services i=
nclude support
for sending email and validation that is independent of the web layer, whic=
h lets you
choose where to execute validation rules. Spring=92s ORM support is integra=
ted with JPA,
Hibernate and JDO; for example, when using Hibernate, you can continue to u=
se
your existing mapping files and standard Hibernate <code class=3D"literal">=
SessionFactory</code> configuration. Form
controllers seamlessly integrate the web-layer with the domain model, remov=
ing the need
for <code class=3D"literal">ActionForms</code> or other classes that transf=
orm HTTP parameters to values for your
domain model.</p>
<div class=3D"figure"><a name=3D"d5e324" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e324"></a>=
<p class=3D"title"><b>Figure&nbsp;2.3.&nbsp;Spring middle-tier using a thir=
d-party web framework</b></p><div class=3D"figure-contents">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-thirdpa=
rty-web.png" alt=3D"overview thirdparty web"></div>
</div></div><br class=3D"figure-break">
<p>Sometimes circumstances do not allow you to completely switch to a diffe=
rent framework.
The Spring Framework does <span class=3D"emphasis"><em>not</em></span> forc=
e you to use everything within it; it is not an
<span class=3D"emphasis"><em>all-or-nothing</em></span> solution. Existing =
front-ends built with Struts, Tapestry, JSF
or other UI frameworks can be integrated with a Spring-based middle-tier, w=
hich allows
you to use Spring transaction features. You simply need to wire up your bus=
iness logic
using an <code class=3D"literal">ApplicationContext</code> and use a <code =
class=3D"literal">WebApplicationContext</code> to integrate your web
layer.</p>
<div class=3D"figure"><a name=3D"d5e336" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e336"></a>=
<p class=3D"title"><b>Figure&nbsp;2.4.&nbsp;Remoting usage scenario</b></p>=
<div class=3D"figure-contents">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-remotin=
g.png" alt=3D"overview remoting"></div>
</div></div><br class=3D"figure-break">
<p>When you need to access existing code through web services, you can use =
Spring=92s
<code class=3D"literal">Hessian-</code>, <code class=3D"literal">Burlap-</c=
ode>, <code class=3D"literal">Rmi-</code> or <code class=3D"literal">JaxRpc=
ProxyFactory</code> classes. Enabling remote access to
existing applications is not difficult.</p>
<div class=3D"figure"><a name=3D"d5e348" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e348"></a>=
<p class=3D"title"><b>Figure&nbsp;2.5.&nbsp;EJBs - Wrapping existing POJOs<=
/b></p><div class=3D"figure-contents">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-ejb.png=
" alt=3D"overview ejb"></div>
</div></div><br class=3D"figure-break">
<p>The Spring Framework also provides an <a class=3D"link" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#ejb" title=3D"29.&nbsp;Enterprise JavaBeans (EJB) integration">access=
 and abstraction layer</a> for
Enterprise JavaBeans, enabling you to reuse your existing POJOs and wrap th=
em in
stateless session beans for use in scalable, fail-safe web applications tha=
t might need
declarative security.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"dependency-management" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dependency-manag=
ement"></a>2.3.1&nbsp;Dependency Management and Naming Conventions</h3></di=
v></div></div>
<p>Dependency management and dependency injection are different things. To =
get those nice
features of Spring into your application (like dependency injection) you ne=
ed to
assemble all the libraries needed (jar files) and get them onto your classp=
ath at
runtime, and possibly at compile time. These dependencies are not virtual c=
omponents
that are injected, but physical resources in a file system (typically). The=
 process of
dependency management involves locating those resources, storing them and a=
dding them to
classpaths. Dependencies can be direct (e.g. my application depends on Spri=
ng at
runtime), or indirect (e.g. my application depends on <code class=3D"litera=
l">commons-dbcp</code> which depends on
<code class=3D"literal">commons-pool</code>). The indirect dependencies are=
 also known as "transitive" and it is
those dependencies that are hardest to identify and manage.</p>
<p>If you are going to use Spring you need to get a copy of the jar librari=
es that comprise
the pieces of Spring that you need. To make this easier Spring is packaged =
as a set of
modules that separate the dependencies as much as possible, so for example =
if you don=92t
want to write a web application you don=92t need the spring-web modules. To=
 refer to
Spring library modules in this guide we use a shorthand naming convention <=
code class=3D"literal">spring-*</code> or
<code class=3D"literal">spring-*.jar,</code> where <code class=3D"literal">=
*</code> represents the short name for the module
(e.g. <code class=3D"literal">spring-core</code>, <code class=3D"literal">s=
pring-webmvc</code>, <code class=3D"literal">spring-jms</code>, etc.). The =
actual jar file name that
you use is normally the module name concatenated with the version number
(e.g. <span class=3D"emphasis"><em>spring-core-4.3.21.RELEASE.jar</em></spa=
n>).</p>
<p>Each release of the Spring Framework will publish artifacts to the follo=
wing places:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Maven Central, which is the default repository that Maven queries, and does=
 not
require any special configuration to use. Many of the common libraries that=
 Spring
depends on also are available from Maven Central and a large section of the=
 Spring
community uses Maven for dependency management, so this is convenient for t=
hem. The
names of the jars here are in the form <code class=3D"literal">spring-*-&lt=
;version&gt;.jar</code> and the Maven groupId
is <code class=3D"literal">org.springframework</code>.
</li><li class=3D"listitem">
In a public Maven repository hosted specifically for Spring. In addition to=
 the final
GA releases, this repository also hosts development snapshots and milestone=
s. The jar
file names are in the same form as Maven Central, so this is a useful place=
 to get
development versions of Spring to use with other libraries deployed in Mave=
n Central.
This repository also contains a bundle distribution zip file that contains =
all Spring
jars bundled together for easy download.
</li></ul></div>
<p>So the first thing you need to decide is how to manage your dependencies=
: we generally
recommend the use of an automated system like Maven, Gradle or Ivy, but you=
 can also do
it manually by downloading all the jars yourself.</p>
<p>Below you will find the list of Spring artifacts. For a more complete de=
scription of
each module, see <a class=3D"xref" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-modules" =
title=3D"2.2&nbsp;Framework Modules">Section&nbsp;2.2, =93Framework Modules=
=94</a>.</p>
<div class=3D"table"><a name=3D"d5e381" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e381"></a><=
p class=3D"title"><b>Table&nbsp;2.1.&nbsp;Spring Framework Artifacts</b></p=
><div class=3D"table-contents">
<table summary=3D"Spring Framework Artifacts" style=3D"border-collapse: col=
lapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0=
.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><=
col class=3D"col_2"><col class=3D"col_3"></colgroup><thead><tr><th style=3D=
"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" =
valign=3D"top">GroupId</th><th style=3D"border-right: 0.5pt solid ; border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">ArtifactId</th><th st=
yle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Descrip=
tion</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.springfr=
amework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5=
pt solid ; " align=3D"left" valign=3D"top"><p>spring-aop</p></td><td style=
=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Proxy-b=
ased AOP support</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; =
border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.springf=
ramework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top"><p>spring-aspects</p></td><td s=
tyle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Asp=
ectJ based aspects</p></td></tr><tr><td style=3D"border-right: 0.5pt solid =
; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.sprin=
gframework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-beans</p></td><td s=
tyle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Bea=
ns support, including Groovy</p></td></tr><tr><td style=3D"border-right: 0.=
5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
>org.springframework</p></td><td style=3D"border-right: 0.5pt solid ; borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-context</=
p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top"><p>Application context runtime, including scheduling and remoting abs=
tractions</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.springframewor=
k</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt sol=
id ; " align=3D"left" valign=3D"top"><p>spring-context-support</p></td><td =
style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Su=
pport classes for integrating common third-party libraries into a Spring ap=
plication context</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.spring=
framework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0=
.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-core</p></td><td sty=
le=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Core =
utilities, used by many other Spring modules</p></td></tr><tr><td style=3D"=
border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" v=
align=3D"top"><p>org.springframework</p></td><td style=3D"border-right: 0.5=
pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
spring-expression</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>Spring Expression Language (SpEL)</p></td></tr>=
<tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "=
 align=3D"left" valign=3D"top"><p>org.springframework</p></td><td style=3D"=
border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" v=
align=3D"top"><p>spring-instrument</p></td><td style=3D"border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><p>Instrumentation agent for JVM =
bootstrapping</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; bor=
der-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.springfram=
ework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top"><p>spring-instrument-tomcat</p></t=
d><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p>Instrumentation agent for Tomcat</p></td></tr><tr><td style=3D"border-r=
ight: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top"><p>org.springframework</p></td><td style=3D"border-right: 0.5pt solid=
 ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-j=
dbc</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p>JDBC support package, including DataSource setup and JDBC acc=
ess support</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.springframew=
ork</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt s=
olid ; " align=3D"left" valign=3D"top"><p>spring-jms</p></td><td style=3D"b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>JMS support =
package, including helper classes to send/receive JMS messages</p></td></tr=
><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; =
" align=3D"left" valign=3D"top"><p>org.springframework</p></td><td style=3D=
"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" =
valign=3D"top"><p>spring-messaging</p></td><td style=3D"border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><p>Support for messaging architec=
tures and protocols</p></td></tr><tr><td style=3D"border-right: 0.5pt solid=
 ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.spri=
ngframework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-orm</p></td><td st=
yle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Obje=
ct/Relational Mapping, including JPA and Hibernate support</p></td></tr><tr=
><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " al=
ign=3D"left" valign=3D"top"><p>org.springframework</p></td><td style=3D"bor=
der-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p>spring-oxm</p></td><td style=3D"border-bottom: 0.5pt solid ; =
" align=3D"left" valign=3D"top"><p>Object/XML Mapping</p></td></tr><tr><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>org.springframework</p></td><td style=3D"border=
-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top"><p>spring-test</p></td><td style=3D"border-bottom: 0.5pt solid ; "=
 align=3D"left" valign=3D"top"><p>Support for unit testing and integration =
testing Spring components</p></td></tr><tr><td style=3D"border-right: 0.5pt=
 solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>or=
g.springframework</p></td><td style=3D"border-right: 0.5pt solid ; border-b=
ottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-tx</p></td><=
td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
>Transaction infrastructure, including DAO support and JCA integration</p><=
/td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt =
solid ; " align=3D"left" valign=3D"top"><p>org.springframework</p></td><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>spring-web</p></td><td style=3D"border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>Foundational web support, =
including web client and web-based remoting</p></td></tr><tr><td style=3D"b=
order-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" va=
lign=3D"top"><p>org.springframework</p></td><td style=3D"border-right: 0.5p=
t solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>s=
pring-webmvc</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"l=
eft" valign=3D"top"><p>HTTP-based Model-View-Controller and REST endpoints =
for Servlet stacks</p></td></tr><tr><td style=3D"border-right: 0.5pt solid =
; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>org.sprin=
gframework</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>spring-webmvc-portlet</p><=
/td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"to=
p"><p>MVC implementation to be used in a Portlet environment</p></td></tr><=
tr><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p>org.springframework</p></td><td style=3D"border-right: 0.5pt solid ; " =
align=3D"left" valign=3D"top"><p>spring-websocket</p></td><td style=3D"" al=
ign=3D"left" valign=3D"top"><p>WebSocket and SockJS infrastructure, includi=
ng STOMP messaging support</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-spring-dependencies" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-=
spring-dependencies"></a>Spring Dependencies and Depending on Spring</h4></=
div></div></div>
<p>Although Spring provides integration and support for a huge range of ent=
erprise and
other external tools, it intentionally keeps its mandatory dependencies to =
an absolute
minimum: you shouldn=92t have to locate and download (even automatically) a=
 large number
of jar libraries in order to use Spring for simple use cases. For basic dep=
endency
injection there is only one mandatory external dependency, and that is for =
logging (see
below for a more detailed description of logging options).</p>
<p>Next we outline the basic steps needed to configure an application that =
depends on
Spring, first with Maven and then with Gradle and finally using Ivy. In all=
 cases, if
anything is unclear, refer to the documentation of your dependency manageme=
nt system, or
look at some sample code - Spring itself uses Gradle to manage dependencies=
 when it is
building, and our samples mostly use Gradle or Maven.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-maven-dependency-management" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#o=
verview-maven-dependency-management"></a>Maven Dependency Management</h4></=
div></div></div>
<p>If you are using <a class=3D"ulink" href=3D"https://maven.apache.org/" t=
arget=3D"_top">Maven</a> for dependency management you don=92t even
need to supply the logging dependency explicitly. For example, to create an=
 application
context and use dependency injection to configure an application, your Mave=
n dependencies
will look like this:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframework<sp=
an class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-context<span=
 class=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>4.3.21.RELEASE<span cl=
ass=3D"hl-tag">&lt;/version&gt;</span>
        <span class=3D"hl-tag">&lt;scope&gt;</span>runtime<span class=3D"hl=
-tag">&lt;/scope&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
<p>That=92s it. Note the scope can be declared as runtime if you don=92t ne=
ed to compile
against Spring APIs, which is typically the case for basic dependency injec=
tion use
cases.</p>
<p>The example above works with the Maven Central repository. To use the Sp=
ring Maven
repository (e.g. for milestones or developer snapshots), you need to specif=
y the
repository location in your Maven configuration. For full releases:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;repositories&gt;</=
span>
    <span class=3D"hl-tag">&lt;repository&gt;</span>
        <span class=3D"hl-tag">&lt;id&gt;</span>io.spring.repo.maven.releas=
e<span class=3D"hl-tag">&lt;/id&gt;</span>
        <span class=3D"hl-tag">&lt;url&gt;</span>http://repo.spring.io/rele=
ase/<span class=3D"hl-tag">&lt;/url&gt;</span>
        <span class=3D"hl-tag">&lt;snapshots&gt;</span><span class=3D"hl-ta=
g">&lt;enabled&gt;</span>false<span class=3D"hl-tag">&lt;/enabled&gt;</span=
><span class=3D"hl-tag">&lt;/snapshots&gt;</span>
    <span class=3D"hl-tag">&lt;/repository&gt;</span>
<span class=3D"hl-tag">&lt;/repositories&gt;</span></pre>
<p>For milestones:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;repositories&gt;</=
span>
    <span class=3D"hl-tag">&lt;repository&gt;</span>
        <span class=3D"hl-tag">&lt;id&gt;</span>io.spring.repo.maven.milest=
one<span class=3D"hl-tag">&lt;/id&gt;</span>
        <span class=3D"hl-tag">&lt;url&gt;</span>http://repo.spring.io/mile=
stone/<span class=3D"hl-tag">&lt;/url&gt;</span>
        <span class=3D"hl-tag">&lt;snapshots&gt;</span><span class=3D"hl-ta=
g">&lt;enabled&gt;</span>false<span class=3D"hl-tag">&lt;/enabled&gt;</span=
><span class=3D"hl-tag">&lt;/snapshots&gt;</span>
    <span class=3D"hl-tag">&lt;/repository&gt;</span>
<span class=3D"hl-tag">&lt;/repositories&gt;</span></pre>
<p>And for snapshots:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;repositories&gt;</=
span>
    <span class=3D"hl-tag">&lt;repository&gt;</span>
        <span class=3D"hl-tag">&lt;id&gt;</span>io.spring.repo.maven.snapsh=
ot<span class=3D"hl-tag">&lt;/id&gt;</span>
        <span class=3D"hl-tag">&lt;url&gt;</span>http://repo.spring.io/snap=
shot/<span class=3D"hl-tag">&lt;/url&gt;</span>
        <span class=3D"hl-tag">&lt;snapshots&gt;</span><span class=3D"hl-ta=
g">&lt;enabled&gt;</span>true<span class=3D"hl-tag">&lt;/enabled&gt;</span>=
<span class=3D"hl-tag">&lt;/snapshots&gt;</span>
    <span class=3D"hl-tag">&lt;/repository&gt;</span>
<span class=3D"hl-tag">&lt;/repositories&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-maven-bom" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-maven-bom"=
></a>Maven "Bill Of Materials" Dependency</h4></div></div></div>
<p>It is possible to accidentally mix different versions of Spring JARs whe=
n using Maven.
For example, you may find that a third-party library, or another Spring pro=
ject,
pulls in a transitive dependency to an older release. If you forget to expl=
icitly declare
a direct dependency yourself, all sorts of unexpected issues can arise.</p>
<p>To overcome such problems Maven supports the concept of a "bill of mater=
ials" (BOM)
dependency. You can import the <code class=3D"literal">spring-framework-bom=
</code> in your <code class=3D"literal">dependencyManagement</code>
section to ensure that all spring dependencies (both direct and transitive)=
 are at
the same version.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencyManageme=
nt&gt;</span>
    <span class=3D"hl-tag">&lt;dependencies&gt;</span>
        <span class=3D"hl-tag">&lt;dependency&gt;</span>
            <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframewor=
k<span class=3D"hl-tag">&lt;/groupId&gt;</span>
            <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-framewor=
k-bom<span class=3D"hl-tag">&lt;/artifactId&gt;</span>
            <span class=3D"hl-tag">&lt;version&gt;</span>4.3.21.RELEASE<spa=
n class=3D"hl-tag">&lt;/version&gt;</span>
            <span class=3D"hl-tag">&lt;type&gt;</span>pom<span class=3D"hl-=
tag">&lt;/type&gt;</span>
            <span class=3D"hl-tag">&lt;scope&gt;</span>import<span class=3D=
"hl-tag">&lt;/scope&gt;</span>
        <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;/dependencies&gt;</span>
<span class=3D"hl-tag">&lt;/dependencyManagement&gt;</span></pre>
<p>An added benefit of using the BOM is that you no longer need to specify =
the <code class=3D"literal">&lt;version&gt;</code>
attribute when depending on Spring Framework artifacts:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframework<sp=
an class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-context<span=
 class=3D"hl-tag">&lt;/artifactId&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframework<sp=
an class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-web<span cla=
ss=3D"hl-tag">&lt;/artifactId&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;dependencies&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-gradle-dependency-management" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
overview-gradle-dependency-management"></a>Gradle Dependency Management</h4=
></div></div></div>
<p>To use the Spring repository with the <a class=3D"ulink" href=3D"http://=
www.gradle.org/" target=3D"_top">Gradle</a> build system,
include the appropriate URL in the <code class=3D"literal">repositories</co=
de> section:</p>
<pre class=3D"programlisting">repositories {
    mavenCentral()
    <span class=3D"hl-comment">// and optionally...</span>
    maven { url <span class=3D"hl-string">"http://repo.spring.io/release"</=
span> }
}</pre>
<p>You can change the <code class=3D"literal">repositories</code> URL from =
<code class=3D"literal">/release</code> to <code class=3D"literal">/milesto=
ne</code> or <code class=3D"literal">/snapshot</code> as
appropriate. Once a repository has been configured, you can declare depende=
ncies in the
usual Gradle way:</p>
<pre class=3D"programlisting">dependencies {
    compile(<span class=3D"hl-string">"org.springframework:spring-context:4=
.3.21.RELEASE"</span>)
    testCompile(<span class=3D"hl-string">"org.springframework:spring-test:=
4.3.21.RELEASE"</span>)
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-ivy-dependency-management" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ove=
rview-ivy-dependency-management"></a>Ivy Dependency Management</h4></div></=
div></div>
<p>If you prefer to use <a class=3D"ulink" href=3D"https://ant.apache.org/i=
vy" target=3D"_top">Ivy</a> to manage dependencies then there
are similar configuration options.</p>
<p>To configure Ivy to point to the Spring repository add the following res=
olver to your
<code class=3D"literal">ivysettings.xml</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;resolvers&gt;</spa=
n>
    <span class=3D"hl-tag">&lt;ibiblio</span> <span class=3D"hl-attribute">=
name</span>=3D<span class=3D"hl-value">"io.spring.repo.maven.release"</span=
>
            <span class=3D"hl-attribute">m2compatible</span>=3D<span class=
=3D"hl-value">"true"</span>
            <span class=3D"hl-attribute">root</span>=3D<span class=3D"hl-va=
lue">"http://repo.spring.io/release/"</span><span class=3D"hl-tag">/&gt;</s=
pan>
<span class=3D"hl-tag">&lt;/resolvers&gt;</span></pre>
<p>You can change the <code class=3D"literal">root</code> URL from <code cl=
ass=3D"literal">/release/</code> to <code class=3D"literal">/milestone/</co=
de> or <code class=3D"literal">/snapshot/</code> as
appropriate.</p>
<p>Once configured, you can add dependencies in the usual way. For example =
(in <code class=3D"literal">ivy.xml</code>):</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependency</span> =
<span class=3D"hl-attribute">org</span>=3D<span class=3D"hl-value">"org.spr=
ingframework"</span>
    <span class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"sp=
ring-core"</span> <span class=3D"hl-attribute">rev</span>=3D<span class=3D"=
hl-value">"4.3.21.RELEASE"</span> <span class=3D"hl-attribute">conf</span>=
=3D<span class=3D"hl-value">"compile-&gt;runtime"</span><span class=3D"hl-t=
ag">/&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-distribution-zip" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-dis=
tribution-zip"></a>Distribution Zip Files</h4></div></div></div>
<p>Although using a build system that supports dependency management is the=
 recommended
way to obtain the Spring Framework, it is still possible to download a dist=
ribution
zip file.</p>
<p>Distribution zips are published to the Spring Maven Repository (this is =
just for our
convenience, you don=92t need Maven or any other build system in order to d=
ownload them).</p>
<p>To download a distribution zip open a web browser to
<a class=3D"ulink" href=3D"https://repo.spring.io/release/org/springframewo=
rk/spring" target=3D"_top">http://repo.spring.io/release/org/springframewor=
k/spring</a> and select the appropriate
subfolder for the version that you want. Distribution files end <code class=
=3D"literal">-dist.zip</code>, for example
spring-framework-{spring-version}-RELEASE-dist.zip. Distributions are also =
published
for <a class=3D"ulink" href=3D"https://repo.spring.io/milestone/org/springf=
ramework/spring" target=3D"_top">milestones</a> and
<a class=3D"ulink" href=3D"https://repo.spring.io/snapshot/org/springframew=
ork/spring" target=3D"_top">snapshots</a>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"overview-logging" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-logging"></a=
>2.3.2&nbsp;Logging</h3></div></div></div>
<p>Logging is a very important dependency for Spring because <span class=3D=
"emphasis"><em>a)</em></span> it is the only mandatory
external dependency, <span class=3D"emphasis"><em>b)</em></span> everyone l=
ikes to see some output from the tools they are
using, and <span class=3D"emphasis"><em>c)</em></span> Spring integrates wi=
th lots of other tools all of which have also made
a choice of logging dependency. One of the goals of an application develope=
r is often to
have unified logging configured in a central place for the whole applicatio=
n, including
all external components. This is more difficult than it might have been sin=
ce there are so
many choices of logging framework.</p>
<p>The mandatory logging dependency in Spring is the Jakarta Commons Loggin=
g API (JCL). We
compile against JCL and we also make JCL <code class=3D"literal">Log</code>=
 objects visible for classes that extend
the Spring Framework. It=92s important to users that all versions of Spring=
 use the same
logging library: migration is easy because backwards compatibility is prese=
rved even
with applications that extend Spring. The way we do this is to make one of =
the modules
in Spring depend explicitly on <code class=3D"literal">commons-logging</cod=
e> (the canonical implementation of JCL),
and then make all the other modules depend on that at compile time. If you =
are using
Maven for example, and wondering where you picked up the dependency on <cod=
e class=3D"literal">commons-logging</code>,
then it is from Spring and specifically from the central module called <cod=
e class=3D"literal">spring-core</code>.</p>
<p>The nice thing about <code class=3D"literal">commons-logging</code> is t=
hat you don=92t need anything else to make your
application work. It has a runtime discovery algorithm that looks for other=
 logging
frameworks in well known places on the classpath and uses one that it think=
s is
appropriate (or you can tell it which one if you need to). If nothing else =
is available
you get pretty nice looking logs just from the JDK (java.util.logging or JU=
L for short).
You should find that your Spring application works and logs happily to the =
console out
of the box in most situations, and that=92s important.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-logging-log4j" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-loggin=
g-log4j"></a>Using Log4j 1.2 or 2.x</h4></div></div></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Log4j 1.2 is EOL in the meantime. Also, Log4j 2.3 is the last Java 6 com=
patible
release, with newer Log4j 2.x releases requiring Java 7+.</p>
</td></tr></tbody></table></div>
<p>Many people use <a class=3D"ulink" href=3D"https://logging.apache.org/lo=
g4j" target=3D"_top">Log4j</a> as a logging framework for
configuration and management purposes. It is efficient and well-established=
, and in
fact it is what we use at runtime when we build Spring. Spring also provide=
s some
utilities for configuring and initializing Log4j, so it has an optional com=
pile-time
dependency on Log4j in some modules.</p>
<p>To make Log4j 1.2 work with the default JCL dependency (<code class=3D"l=
iteral">commons-logging</code>) all you
need to do is put Log4j on the classpath, and provide it with a configurati=
on file
(<code class=3D"literal">log4j.properties</code> or <code class=3D"literal"=
>log4j.xml</code> in the root of the classpath). So for Maven users
this is your dependency declaration:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframework<sp=
an class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-core<span cl=
ass=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>4.3.21.RELEASE<span cl=
ass=3D"hl-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>log4j<span class=3D"hl=
-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>log4j<span class=3D=
"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>1.2.17<span class=3D"h=
l-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
<p>And here=92s a sample log4j.properties for logging to the console:</p>
<pre class=3D"literallayout">log4j.rootCategory=3DINFO, stdout

log4j.appender.stdout=3Dorg.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=3Dorg.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=3D%d{ABSOLUTE} %5p %t %c{2}:=
%L - %m%n

log4j.category.org.springframework.beans.factory=3DDEBUG</pre>
<p>To use Log4j 2.x with JCL, all you need to do is put Log4j on the classp=
ath and
provide it with a configuration file (<code class=3D"literal">log4j2.xml</c=
ode>, <code class=3D"literal">log4j2.properties</code>, or other
<a class=3D"ulink" href=3D"https://logging.apache.org/log4j/2.x/manual/conf=
iguration.html" target=3D"_top">supported configuration
formats</a>). For Maven users, the minimal dependencies needed are:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.apache.logging.log=
4j<span class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>log4j-core<span cla=
ss=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>2.6.2<span class=3D"hl=
-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.apache.logging.log=
4j<span class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>log4j-jcl<span clas=
s=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>2.6.2<span class=3D"hl=
-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
<p>If you also wish to enable SLF4J to delegate to Log4j, e.g. for other li=
braries
which use SLF4J by default, the following dependency is also needed:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
  <span class=3D"hl-tag">&lt;dependency&gt;</span>
    <span class=3D"hl-tag">&lt;groupId&gt;</span>org.apache.logging.log4j<s=
pan class=3D"hl-tag">&lt;/groupId&gt;</span>
    <span class=3D"hl-tag">&lt;artifactId&gt;</span>log4j-slf4j-impl<span c=
lass=3D"hl-tag">&lt;/artifactId&gt;</span>
    <span class=3D"hl-tag">&lt;version&gt;</span>2.6.2<span class=3D"hl-tag=
">&lt;/version&gt;</span>
  <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
<p>Here is an example <code class=3D"literal">log4j2.xml</code> for logging=
 to the console:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;Configuration</span> <span class=3D"hl-attribute=
">status</span>=3D<span class=3D"hl-value">"WARN"</span><span class=3D"hl-t=
ag">&gt;</span>
  <span class=3D"hl-tag">&lt;Appenders&gt;</span>
    <span class=3D"hl-tag">&lt;Console</span> <span class=3D"hl-attribute">=
name</span>=3D<span class=3D"hl-value">"Console"</span> <span class=3D"hl-a=
ttribute">target</span>=3D<span class=3D"hl-value">"SYSTEM_OUT"</span><span=
 class=3D"hl-tag">&gt;</span>
      <span class=3D"hl-tag">&lt;PatternLayout</span> <span class=3D"hl-att=
ribute">pattern</span>=3D<span class=3D"hl-value">"%d{HH:mm:ss.SSS} [%t] %-=
5level %logger{36} - %msg%n"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/Console&gt;</span>
  <span class=3D"hl-tag">&lt;/Appenders&gt;</span>
  <span class=3D"hl-tag">&lt;Loggers&gt;</span>
    <span class=3D"hl-tag">&lt;Logger</span> <span class=3D"hl-attribute">n=
ame</span>=3D<span class=3D"hl-value">"org.springframework.beans.factory"</=
span> <span class=3D"hl-attribute">level</span>=3D<span class=3D"hl-value">=
"DEBUG"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;Root</span> <span class=3D"hl-attribute">lev=
el</span>=3D<span class=3D"hl-value">"error"</span><span class=3D"hl-tag">&=
gt;</span>
      <span class=3D"hl-tag">&lt;AppenderRef</span> <span class=3D"hl-attri=
bute">ref</span>=3D<span class=3D"hl-value">"Console"</span><span class=3D"=
hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/Root&gt;</span>
  <span class=3D"hl-tag">&lt;/Loggers&gt;</span>
<span class=3D"hl-tag">&lt;/Configuration&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-avoiding-commons-logging" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#over=
view-avoiding-commons-logging"></a>Avoiding Commons Logging</h4></div></div=
></div>
<p>Unfortunately, the runtime discovery algorithm in the standard <code cla=
ss=3D"literal">commons-logging</code> API,
while convenient for the end-user, can be problematic. If you=92d like to a=
void JCL=92s
standard lookup, there are basically two ways to switch it off:</p>
<div class=3D"orderedlist"><ol class=3D"orderedlist" type=3D"1"><li class=
=3D"listitem">
Exclude the dependency from the <code class=3D"literal">spring-core</code> =
module (as it is the only module that
explicitly depends on <code class=3D"literal">commons-logging</code>)
</li><li class=3D"listitem">
Depend on a special <code class=3D"literal">commons-logging</code> dependen=
cy that replaces the library with
an empty jar (more details can be found in the
<a class=3D"ulink" href=3D"http://slf4j.org/faq.html#excludingJCL" target=
=3D"_top">SLF4J FAQ</a>)
</li></ol></div>
<p>To exclude commons-logging, add the following to your <code class=3D"lit=
eral">dependencyManagement</code> section:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframework<sp=
an class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-core<span cl=
ass=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>4.3.21.RELEASE<span cl=
ass=3D"hl-tag">&lt;/version&gt;</span>
        <span class=3D"hl-tag">&lt;exclusions&gt;</span>
            <span class=3D"hl-tag">&lt;exclusion&gt;</span>
                <span class=3D"hl-tag">&lt;groupId&gt;</span>commons-loggin=
g<span class=3D"hl-tag">&lt;/groupId&gt;</span>
                <span class=3D"hl-tag">&lt;artifactId&gt;</span>commons-log=
ging<span class=3D"hl-tag">&lt;/artifactId&gt;</span>
            <span class=3D"hl-tag">&lt;/exclusion&gt;</span>
        <span class=3D"hl-tag">&lt;/exclusions&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
<p>Now this application is currently broken because there is no implementat=
ion of the JCL
API on the classpath, so to fix it a new one has to be provided. In the nex=
t section we
show you how to provide an alternative implementation of JCL using SLF4J.</=
p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-logging-slf4j" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-loggin=
g-slf4j"></a>Using SLF4J with Log4j or Logback</h4></div></div></div>
<p>The Simple Logging Facade for Java (<a class=3D"ulink" href=3D"http://ww=
w.slf4j.org/" target=3D"_top">SLF4J</a>) is a popular API
used by other libraries commonly used with Spring. It is typically used wit=
h
<a class=3D"ulink" href=3D"https://logback.qos.ch/" target=3D"_top">Logback=
</a> which is a native implementation of the SLF4J API.</p>
<p>SLF4J provides bindings to many common logging frameworks, including Log=
4j, and it also
does the reverse: bridges between other logging frameworks and itself. So t=
o use SLF4J
with Spring you need to replace the <code class=3D"literal">commons-logging=
</code> dependency with the SLF4J-JCL
bridge. Once you have done that then logging calls from within Spring will =
be translated
into logging calls to the SLF4J API, so if other libraries in your applicat=
ion use that
API, then you have a single place to configure and manage logging.</p>
<p>A common choice might be to bridge Spring to SLF4J, and then provide exp=
licit binding
from SLF4J to Log4j. You need to supply several dependencies (and exclude t=
he existing
<code class=3D"literal">commons-logging</code>): the JCL bridge, the SLF4j =
binding to Log4j, and the Log4j provider
itself. In Maven you would do that like this</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.springframework<sp=
an class=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>spring-core<span cl=
ass=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>4.3.21.RELEASE<span cl=
ass=3D"hl-tag">&lt;/version&gt;</span>
        <span class=3D"hl-tag">&lt;exclusions&gt;</span>
            <span class=3D"hl-tag">&lt;exclusion&gt;</span>
                <span class=3D"hl-tag">&lt;groupId&gt;</span>commons-loggin=
g<span class=3D"hl-tag">&lt;/groupId&gt;</span>
                <span class=3D"hl-tag">&lt;artifactId&gt;</span>commons-log=
ging<span class=3D"hl-tag">&lt;/artifactId&gt;</span>
            <span class=3D"hl-tag">&lt;/exclusion&gt;</span>
        <span class=3D"hl-tag">&lt;/exclusions&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.slf4j<span class=
=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>jcl-over-slf4j<span=
 class=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>1.7.21<span class=3D"h=
l-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.slf4j<span class=
=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>slf4j-log4j12<span =
class=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>1.7.21<span class=3D"h=
l-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>log4j<span class=3D"hl=
-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>log4j<span class=3D=
"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>1.2.17<span class=3D"h=
l-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
<p>A more common choice amongst SLF4J users, which uses fewer steps and gen=
erates fewer
dependencies, is to bind directly to <a class=3D"ulink" href=3D"http://logb=
ack.qos.ch/" target=3D"_top">Logback</a>. This removes the
extra binding step because Logback implements SLF4J directly, so you only n=
eed to depend
on just two libraries, namely <code class=3D"literal">jcl-over-slf4j</code>=
 and <code class=3D"literal">logback</code>):</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependencies&gt;</=
span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>org.slf4j<span class=
=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>jcl-over-slf4j<span=
 class=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>1.7.21<span class=3D"h=
l-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
    <span class=3D"hl-tag">&lt;dependency&gt;</span>
        <span class=3D"hl-tag">&lt;groupId&gt;</span>ch.qos.logback<span cl=
ass=3D"hl-tag">&lt;/groupId&gt;</span>
        <span class=3D"hl-tag">&lt;artifactId&gt;</span>logback-classic<spa=
n class=3D"hl-tag">&lt;/artifactId&gt;</span>
        <span class=3D"hl-tag">&lt;version&gt;</span>1.1.7<span class=3D"hl=
-tag">&lt;/version&gt;</span>
    <span class=3D"hl-tag">&lt;/dependency&gt;</span>
<span class=3D"hl-tag">&lt;/dependencies&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-logging-jul" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-logging-=
jul"></a>Using JUL (java.util.logging)</h4></div></div></div>
<p>Commons Logging will delegate to <code class=3D"literal">java.util.loggi=
ng</code> by default, provided that no
Log4j is detected on the classpath. So there is no special dependency to se=
t up:
just use Spring with no external dependency for log output to <code class=
=3D"literal">java.util.logging</code>,
either in a standalone application (with a custom or default JUL setup at t=
he JDK
level) or with an application server=92s log system (and its system-wide JU=
L setup).</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"overview-logging-websphere" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#overview-lo=
gging-websphere"></a>Commons Logging on WebSphere</h4></div></div></div>
<p>Spring applications may run on a container that itself provides an imple=
mentation of
JCL, e.g. IBM=92s WebSphere Application Server (WAS). This does not cause i=
ssues per se
but leads to two different scenarios that need to be understood:</p>
<p>In a "parent first" ClassLoader delegation model (the default on WAS), a=
pplications
will always pick up the server-provided version of Commons Logging, delegat=
ing to the
WAS logging subsystem (which is actually based on JUL). An application-prov=
ided variant
of JCL, whether standard Commons Logging or the JCL-over-SLF4J bridge, will=
 effectively
be ignored, along with any locally included log provider.</p>
<p>With a "parent last" delegation model (the default in a regular Servlet =
container but
an explicit configuration option on WAS), an application-provided Commons L=
ogging
variant will be picked up, enabling you to set up a locally included log pr=
ovider,
e.g. Log4j or Logback, within your application. In case of no local log pro=
vider,
regular Commons Logging will delegate to JUL by default, effectively loggin=
g to
WebSphere=92s logging subsystem like in the "parent first" scenario.</p>
<p>All in all, we recommend deploying Spring applications in the "parent la=
st" model
since it naturally allows for local providers as well as the server=92s log=
 subsystem.</p>
</div>
</div>
</div>
</div>
</div>
<div class=3D"part"><div class=3D"titlepage"><div><div><h1 class=3D"title">=
<a name=3D"spring-whats-new" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#spring-whats-new"></a>Pa=
rt&nbsp;II.&nbsp;What=92s New in Spring Framework 4.x</h1></div></div></div=
>
<div class=3D"partintro"><div></div>
<p>This chapter provides an overview of the new features and improvements t=
hat have been
introduced with Spring Framework 4.3. If you are interested in more details=
, please see the link:
<a class=3D"ulink" href=3D"https://jira.spring.io/issues/?jql=3Dproject%20%=
3D%20SPR%20AND%20fixVersion%20in%20(%224.3%20RC1%22%2C%20%224.3%20RC2%22%2C=
%20%224.3%20GA%22)%20ORDER%20BY%20issuetype%20DESC&amp;startIndex=3D50" tar=
get=3D"_top">Issue Tracker tickets</a>
that were resolved as part of the 4.3 development process.</p>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"new-in-4.0" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.0"></a>3.&nbsp;New=
 Features and Enhancements in Spring Framework 4.0</h2></div></div></div>
<p>The Spring Framework was first released in 2004; since then there have b=
een significant
major revisions: Spring 2.0 provided XML namespaces and AspectJ support; Sp=
ring 2.5
embraced annotation-driven configuration; Spring 3.0 introduced a strong Ja=
va 5+ foundation
across the framework codebase, and features such as the Java-based <code cl=
ass=3D"literal">@Configuration</code> model.</p>
<p>Version 4.0 is the latest major release of the Spring Framework and the =
first to fully
support Java 8 features. You can still use Spring with older versions of Ja=
va, however,
the minimum requirement has now been raised to Java SE 6. We have also take=
n the
opportunity of a major release to remove many deprecated classes and method=
s.</p>
<p>A <a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-f=
ramework/wiki/Migrating-from-earlier-versions-of-the-spring-framework" targ=
et=3D"_top">migration guide for upgrading to Spring 4.0</a>
is available on the <a class=3D"ulink" href=3D"https://github.com/spring-pr=
ojects/spring-framework/wiki" target=3D"_top">Spring Framework GitHub Wiki<=
/a>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_improved_getting_started_experience" h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#_improved_getting_started_experience"></a>3.1&nbsp;Imp=
roved Getting Started Experience</h2></div></div></div>
<p>The new <a class=3D"ulink" href=3D"https://spring.io/" target=3D"_top">s=
pring.io</a> website provides a whole series of
<a class=3D"ulink" href=3D"https://spring.io/guides" target=3D"_top">"Getti=
ng Started"</a> guides to help you learn Spring. You
can read more about the guides in the <a class=3D"xref" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#overview-getting-started-with-spring" title=3D"1.&nbsp;Getting Started w=
ith Spring">Chapter&nbsp;1, <i>Getting Started with Spring</i></a> section
in this document. The new website also provides a comprehensive overview of=
 the many
additional projects that are released under the Spring umbrella.</p>
<p>If you are a Maven user you may also be interested in the helpful
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#overview-maven-bom" title=3D"Maven =
&quot;Bill Of Materials&quot; Dependency">bill of materials</a> POM file th=
at is now published with each Spring
Framework release.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_removed_deprecated_packages_and_method=
s" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#_removed_deprecated_packages_and_methods"></a>3.2&=
nbsp;Removed Deprecated Packages and Methods</h2></div></div></div>
<p>All deprecated packages, and many deprecated classes and methods have be=
en removed with
version 4.0. If you are upgrading from a previous release of Spring, you sh=
ould ensure
that you have fixed any deprecated calls that you were making to outdated A=
PIs.</p>
<p>For a complete set of changes, check out the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/3.2=
.4.RELEASE_to_4.0.0.RELEASE/" target=3D"_top">API
Differences Report</a>.</p>
<p>Note that optional third-party dependencies have been raised to a 2010/2=
011 minimum
(i.e. Spring 4 generally only supports versions released in late 2010 or la=
ter now):
notably, Hibernate 3.6+, EhCache 2.1+, Quartz 1.8+, Groovy 1.8+, and Joda-T=
ime 2.0+.
As an exception to the rule, Spring 4 requires the recent Hibernate Validat=
or 4.3+,
and support for Jackson has been focused on 2.0+ now (with Jackson 1.8/1.9 =
support
retained for the time being where Spring 3.2 had it; now just in deprecated=
 form).</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_java_8_as_well_as_6_and_7" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#_java_8_as_well_as_6_and_7"></a>3.3&nbsp;Java 8 (as well as 6 an=
d 7)</h2></div></div></div>
<p>Spring Framework 4.0 provides support for several Java 8 features. You c=
an make use of
<span class=3D"emphasis"><em>lambda expressions</em></span> and <span class=
=3D"emphasis"><em>method references</em></span> with Spring=92s callback in=
terfaces. There
is first-class support for <code class=3D"literal">java.time</code> (<a cla=
ss=3D"ulink" href=3D"https://jcp.org/en/jsr/detail?id=3D310" target=3D"_top=
">JSR-310</a>),
and several existing annotations have been retrofitted as <code class=3D"li=
teral">@Repeatable</code>. You can also
use Java 8=92s parameter name discovery (based on the <code class=3D"litera=
l">-parameters</code> compiler flag) as an
alternative to compiling your code with debug information enabled.</p>
<p>Spring remains compatible with older versions of Java and the JDK: concr=
etely, Java SE 6
(specifically, a minimum level equivalent to JDK 6 update 18, as released i=
n January 2010)
and above are still fully supported. However, for newly started development=
 projects
based on Spring 4, we recommend the use of Java 7 or 8.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As of late 2017, JDK 6 is being phased out and therefore also Spring=92s=
 JDK 6 support.
Oracle as well as IBM will terminate all commercial support efforts for JDK=
 6 in 2018.
While Spring will retain its JDK 6 runtime compatibility for the entire 4.3=
.x line,
we require an upgrade to JDK 7 or higher for any further support beyond thi=
s point:
in particular for JDK 6 specific bug fixes or other issues where an upgrade=
 to JDK 7
addresses the problem.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_java_ee_6_and_7" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#_java_ee_6_and_7"></a>3.4&nbsp;Java EE 6 and 7</h2></div></div></div>
<p>Java EE version 6 or above is now considered the baseline for Spring Fra=
mework 4, with
the JPA 2.0 and Servlet 3.0 specifications being of particular relevance. I=
n order to
remain compatible with Google App Engine and older application servers, it =
is possible
to deploy a Spring 4 application into a Servlet 2.5 environment. However, S=
ervlet 3.0+
is strongly recommended and a prerequisite in Spring=92s test and mock pack=
ages for test
setups in development environments.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you are a WebSphere 7 user, be sure to install the JPA 2.0 feature pa=
ck. On
WebLogic 10.3.4 or higher, install the JPA 2.0 patch that comes with it. Th=
is turns
both of those server generations into Spring 4 compatible deployment enviro=
nments.</p>
</td></tr></tbody></table></div>
<p>On a more forward-looking note, Spring Framework 4.0 supports the Java E=
E 7 level of
applicable specifications now: in particular, JMS 2.0, JTA 1.2, JPA 2.1, Be=
an Validation
1.1, and JSR-236 Concurrency Utilities. As usual, this support focuses on i=
ndividual
use of those specifications, e.g. on Tomcat or in standalone environments. =
However,
it works equally well when a Spring application is deployed to a Java EE 7 =
server.</p>
<p>Note that Hibernate 4.3 is a JPA 2.1 provider and therefore only support=
ed as of
Spring Framework 4.0. The same applies to Hibernate Validator 5.0 as a Bean=
 Validation
1.1 provider. Neither of the two are officially supported with Spring Frame=
work 3.2.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_groovy_bean_definition_dsl" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#_groovy_bean_definition_dsl"></a>3.5&nbsp;Groovy Bean Definitio=
n DSL</h2></div></div></div>
<p>Beginning with Spring Framework 4.0, it is possible to define external b=
ean configuration
using a Groovy DSL. This is similar in concept to using XML bean definition=
s but allows
for a more concise syntax. Using Groovy also allows you to easily embed bea=
n definitions
directly in your bootstrap code. For example:</p>
<pre class=3D"programlisting">def reader =3D <span class=3D"hl-keyword">new=
</span> GroovyBeanDefinitionReader(myApplicationContext)
reader.beans {
    dataSource(BasicDataSource) {
        driverClassName =3D <span class=3D"hl-string">"org.hsqldb.jdbcDrive=
r"</span>
        url =3D <span class=3D"hl-string">"jdbc:hsqldb:mem:grailsDB"</span>
        username =3D <span class=3D"hl-string">"sa"</span>
        password =3D <span class=3D"hl-string">""</span>
        settings =3D [mynew:<span class=3D"hl-string">"setting"</span>]
    }
    sessionFactory(SessionFactory) {
        dataSource =3D dataSource
    }
    myService(MyService) {
        nestedBean =3D { AnotherBean bean -&gt;
            dataSource =3D dataSource
        }
    }
}</pre>
<p>For more information consult the <code class=3D"literal">GroovyBeanDefin=
itionReader</code>
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/groovy/GroovyBean=
DefinitionReader.html" target=3D"_top">javadocs</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_core_container_improvements" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#_core_container_improvements"></a>3.6&nbsp;Core Container Impr=
ovements</h2></div></div></div>
<p>There have been several general improvements to the core container:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Spring now treats <a class=3D"link" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-generics-as=
-qualifiers" title=3D"7.9.5&nbsp;Using generics as autowiring qualifiers"><=
span class=3D"emphasis"><em>generic types</em></span> as a form of
<span class=3D"emphasis"><em>qualifier</em></span></a> when injecting Beans=
. For example, if you are using a Spring Data
<code class=3D"literal">Repository</code> you can now easily inject a speci=
fic implementation:
<code class=3D"literal">@Autowired Repository&lt;Customer&gt; customerRepos=
itory</code>.
</li><li class=3D"listitem">
If you use Spring=92s meta-annotation support, you can now develop custom a=
nnotations that
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-meta-annotations" title=3D"7.=
10.2&nbsp;Meta-annotations">expose specific attributes from the source anno=
tation</a>.
</li><li class=3D"listitem">
Beans can now be <span class=3D"emphasis"><em>ordered</em></span> when they=
 are <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#beans-autowired-annotation" ti=
tle=3D"7.9.2&nbsp;@Autowired">autowired into
lists and arrays</a>. Both the <code class=3D"literal">@Order</code> annota=
tion and <code class=3D"literal">Ordered</code> interface are
supported.
</li><li class=3D"listitem">
The <code class=3D"literal">@Lazy</code> annotation can now be used on inje=
ction points, as well as on <code class=3D"literal">@Bean</code>
definitions.
</li><li class=3D"listitem">
The <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-java-bean-description" ti=
tle=3D"Bean description"><code class=3D"literal">@Description</code> annota=
tion has been introduced</a> for
developers using Java-based configuration.
</li><li class=3D"listitem">
A generalized model for <a class=3D"link" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-=
conditional" title=3D"Conditionally include @Configuration classes or @Bean=
 methods">conditionally filtering beans</a> has
been added via the <code class=3D"literal">@Conditional</code> annotation. =
This is similar to <code class=3D"literal">@Profile</code> support but
allows for user-defined strategies to be developed programmatically.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-pfb-proxy-types" title=3D"12.5.=
3&nbsp;JDK- and CGLIB-based proxies">CGLIB-based proxy classes</a> no longe=
r require a default
constructor. Support is provided via the <a class=3D"ulink" href=3D"https:/=
/code.google.com/p/objenesis/" target=3D"_top">objenesis</a>
library which is repackaged <span class=3D"emphasis"><em>inline</em></span>=
 and distributed as part of the Spring Framework.
With this strategy, no constructor at all is being invoked for proxy instan=
ces anymore.
</li><li class=3D"listitem">
There is managed time zone support across the framework now, e.g. on <code =
class=3D"literal">LocaleContext</code>.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_general_web_improvements" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#_general_web_improvements"></a>3.7&nbsp;General Web Improvements<=
/h2></div></div></div>
<p>Deployment to Servlet 2.5 servers remains an option, but Spring Framewor=
k 4.0 is now
focused primarily on Servlet 3.0+ environments. If you are using the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-framework" title=3D=
"15.6&nbsp;Spring MVC Test Framework">Spring MVC Test Framework</a> you
will need to ensure that a Servlet 3.0 compatible JAR is in your <span clas=
s=3D"emphasis"><em>test classpath</em></span>.</p>
<p>In addition to the WebSocket support mentioned later, the following gene=
ral improvements
have been made to Spring=92s Web modules:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
You can use the <a class=3D"link" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-restcontrol=
ler" title=3D"Creating REST Controllers with the @RestController annotation=
">new <code class=3D"literal">@RestController</code> annotation</a> with Sp=
ring
MVC applications, removing the need to add <code class=3D"literal">@Respons=
eBody</code> to each of your
<code class=3D"literal">@RequestMapping</code> methods.
</li><li class=3D"listitem">
The <code class=3D"literal">AsyncRestTemplate</code> class has been added, =
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#rest-async-resttemplate" title=3D"2=
8.10.3&nbsp;Async RestTemplate">allowing
non-blocking asynchronous support</a> when developing REST clients.
</li><li class=3D"listitem">
Spring now offers <a class=3D"link" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-timezone" tit=
le=3D"22.8.1&nbsp;Obtaining Time Zone Information">comprehensive timezone s=
upport</a> when developing
Spring MVC applications.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_websocket_sockjs_and_stomp_messaging" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#_websocket_sockjs_and_stomp_messaging"></a>3.8&nbsp;W=
ebSocket, SockJS, and STOMP Messaging</h2></div></div></div>
<p>A new <code class=3D"literal">spring-websocket</code> module provides co=
mprehensive support for WebSocket-based,
two-way communication between client and server in web applications. It is =
compatible with
<a class=3D"ulink" href=3D"https://jcp.org/en/jsr/detail?id=3D356" target=
=3D"_top">JSR-356</a>, the Java WebSocket API, and in addition
provides SockJS-based fallback options (i.e. WebSocket emulation) for use i=
n browsers
that don=92t yet support the WebSocket protocol (e.g. Internet Explorer &lt=
; 10).</p>
<p>A new <code class=3D"literal">spring-messaging</code> module adds suppor=
t for STOMP as the WebSocket sub-protocol
to use in applications along with an annotation programming model for routi=
ng and
processing STOMP messages from WebSocket clients. As a result an <code clas=
s=3D"literal">@Controller</code>
can now contain both <code class=3D"literal">@RequestMapping</code> and <co=
de class=3D"literal">@MessageMapping</code> methods for handling
HTTP requests and messages from WebSocket-connected clients. The new <code =
class=3D"literal">spring-messaging</code>
module also contains key abstractions formerly from the
<a class=3D"ulink" href=3D"https://projects.spring.io/spring-integration/" =
target=3D"_top">Spring Integration</a> project such as
<code class=3D"literal">Message</code>, <code class=3D"literal">MessageChan=
nel</code>, <code class=3D"literal">MessageHandler</code>, and others to se=
rve as a foundation
for messaging-based applications.</p>
<p>For further details, including a more thorough introduction, see the <a =
class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sp=
ring-framework-reference/htmlsingle/#websocket" title=3D"26.&nbsp;WebSocket=
 Support">Chapter&nbsp;26, <i>WebSocket Support</i></a> section.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"_testing_improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#_testing_improvements"></a>3.9&nbsp;Testing Improvements</h2></div></=
div></div>
<p>In addition to pruning of deprecated code within the <code class=3D"lite=
ral">spring-test</code> module, Spring
Framework 4.0 introduces several new features for use in unit and integrati=
on testing.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Almost all annotations in the <code class=3D"literal">spring-test</code> mo=
dule (e.g., <code class=3D"literal">@ContextConfiguration</code>,
<code class=3D"literal">@WebAppConfiguration</code>, <code class=3D"literal=
">@ContextHierarchy</code>, <code class=3D"literal">@ActiveProfiles</code>,=
 etc.) can now be used
as <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#integration-testing-annotations-=
meta" title=3D"15.4.4&nbsp;Meta-Annotation Support for Testing">meta-annota=
tions</a> to create custom
<span class=3D"emphasis"><em>composed annotations</em></span> and reduce co=
nfiguration duplication across a test suite.
</li><li class=3D"listitem">
Active bean definition profiles can now be resolved programmatically, simpl=
y by
implementing a custom <a class=3D"link" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-c=
tx-management-env-profiles-ActiveProfilesResolver"><code class=3D"literal">=
ActiveProfilesResolver</code></a>
and registering it via the <code class=3D"literal">resolver</code> attribut=
e of <code class=3D"literal">@ActiveProfiles</code>.
</li><li class=3D"listitem">
A new <code class=3D"literal">SocketUtils</code> class has been introduced =
in the <code class=3D"literal">spring-core</code> module
which enables you to scan for free TCP and UDP server ports on localhost. T=
his
functionality is not specific to testing but can prove very useful when wri=
ting
integration tests that require the use of sockets, for example tests that s=
tart
an in-memory SMTP server, FTP server, Servlet container, etc.
</li><li class=3D"listitem">
As of Spring 4.0, the set of mocks in the <code class=3D"literal">org.sprin=
gframework.mock.web</code> package is
now based on the Servlet 3.0 API. Furthermore, several of the Servlet API m=
ocks
(e.g., <code class=3D"literal">MockHttpServletRequest</code>, <code class=
=3D"literal">MockServletContext</code>, etc.) have been updated with
minor enhancements and improved configurability.
</li></ul></div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"new-in-4.1" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.1"></a>4.&nbsp;New=
 Features and Enhancements in Spring Framework 4.1</h2></div></div></div>
<p>Version 4.1 included a number of improvements, as described in the follo=
wing sections:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_1-JMS-Improvements" title=3D"4.1=
&nbsp;JMS Improvements">Section&nbsp;4.1, =93JMS Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_1-Caching-Improvements" title=3D=
"4.2&nbsp;Caching Improvements">Section&nbsp;4.2, =93Caching Improvements=
=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_1-Web-Improvements" title=3D"4.3=
&nbsp;Web Improvements">Section&nbsp;4.3, =93Web Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_1-WebSocket-Messaging-Improvemen=
ts" title=3D"4.4&nbsp;WebSocket Messaging Improvements">Section&nbsp;4.4, =
=93WebSocket Messaging Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_1-Testing-Improvements" title=3D=
"4.5&nbsp;Testing Improvements">Section&nbsp;4.5, =93Testing Improvements=
=94</a>
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_1-JMS-Improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#v4_1-JMS-Improvements"></a>4.1&nbsp;JMS Improvements</h2></div></div>=
</div>
<p>Spring 4.1 introduces a much simpler infrastructure <a class=3D"link" hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#jms-annotated" title=3D"30.6&nbsp;Annotation-driven lis=
tener endpoints">to register JMS
listener endpoints</a> by annotating bean methods with
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/jms/annotation/JmsListener.html=
" target=3D"_top"><code class=3D"literal">@JmsListener</code></a>.
The XML namespace has been enhanced to support this new style (<code class=
=3D"literal">jms:annotation-driven</code>),
and it is also possible to fully configure the infrastructure using Java co=
nfig
(<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.=
3.21.RELEASE/javadoc-api/org/springframework/jms/annotation/EnableJms.html"=
 target=3D"_top"><code class=3D"literal">@EnableJms</code></a>,
<code class=3D"literal">JmsListenerContainerFactory</code>). It is also pos=
sible to register listener endpoints
programmatically using
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/jms/annotation/JmsListenerConfi=
gurer.html" target=3D"_top"><code class=3D"literal">JmsListenerConfigurer</=
code></a>.</p>
<p>Spring 4.1 also aligns its JMS support to allow you to benefit from the =
<code class=3D"literal">spring-messaging</code>
abstraction introduced in 4.0, that is:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Message listener endpoints can have a more flexible signature and benefit f=
rom
standard messaging annotations such as <code class=3D"literal">@Payload</co=
de>, <code class=3D"literal">@Header</code>, <code class=3D"literal">@Heade=
rs</code>, and <code class=3D"literal">@SendTo</code>. It
is also possible to use a standard <code class=3D"literal">Message</code> i=
n lieu of <code class=3D"literal">javax.jms.Message</code> as method
argument.
</li><li class=3D"listitem">
A new <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/do=
cs/4.3.21.RELEASE/javadoc-api/org/springframework/jms/core/JmsMessageOperat=
ions.html" target=3D"_top"><code class=3D"literal">JmsMessageOperations</co=
de></a>
interface is available and permits <code class=3D"literal">JmsTemplate</cod=
e> like operations using the <code class=3D"literal">Message</code>
abstraction.
</li></ul></div>
<p>Finally, Spring 4.1 provides additional miscellaneous improvements:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Synchronous request-reply operations support in <code class=3D"literal">Jms=
Template</code>
</li><li class=3D"listitem">
Listener priority can be specified per <code class=3D"literal">&lt;jms:list=
ener/&gt;</code> element
</li><li class=3D"listitem">
Recovery options for the message listener container are configurable using =
a
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/util/backoff/BackOff.html" targ=
et=3D"_top"><code class=3D"literal">BackOff</code></a> implementation
</li><li class=3D"listitem">
JMS 2.0 shared consumers are supported
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_1-Caching-Improvements" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#v4_1-Caching-Improvements"></a>4.2&nbsp;Caching Improvements</h2>=
</div></div></div>
<p>Spring 4.1 supports <a class=3D"link" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cache-jsr-10=
7" title=3D"36.4&nbsp;JCache (JSR-107) annotations">JCache (JSR-107) annota=
tions</a> using Spring=92s
existing cache configuration and infrastructure abstraction; no changes are=
 required
to use the standard annotations.</p>
<p>Spring 4.1 also improves its own caching abstraction significantly:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Caches can be resolved at runtime using a
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#cache-annotations-cacheable-cache-r=
esolver" title=3D"Custom cache resolution"><code class=3D"literal">CacheRes=
olver</code></a>. As a result the
<code class=3D"literal">value</code> argument defining the cache name(s) to=
 use is no longer mandatory.
</li><li class=3D"listitem">
More operation-level customizations: cache resolver, cache manager, key
generator
</li><li class=3D"listitem">
A new <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#cache-annotations-config" tit=
le=3D"36.3.5&nbsp;@CacheConfig annotation"><code class=3D"literal">@CacheCo=
nfig</code> class-level annotation</a> allows
common settings to be shared at the class level <span class=3D"strong"><str=
ong>without</strong></span> enabling any cache operation.
</li><li class=3D"listitem">
Better exception handling of cached methods using <code class=3D"literal">C=
acheErrorHandler</code>
</li></ul></div>
<p>Spring 4.1 also has a breaking change in the <code class=3D"literal">Cac=
he</code> interface as a new <code class=3D"literal">putIfAbsent</code>
method has been added.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_1-Web-Improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#v4_1-Web-Improvements"></a>4.3&nbsp;Web Improvements</h2></div></div>=
</div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The existing support for resource handling based on the <code class=3D"lite=
ral">ResourceHttpRequestHandler</code>
has been expanded with new abstractions <code class=3D"literal">ResourceRes=
olver</code>, <code class=3D"literal">ResourceTransformer</code>,
and <code class=3D"literal">ResourceUrlProvider</code>. A number of built-i=
n implementations provide support
for versioned resource URLs (for effective HTTP caching), locating gzipped =
resources,
generating an HTML 5 AppCache manifests, and more. See <a class=3D"xref" hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#mvc-config-static-resources" title=3D"22.16.9&nbsp;Serv=
ing of Resources">Section&nbsp;22.16.9, =93Serving of Resources=94</a>.
</li><li class=3D"listitem">
JDK 1.8=92s <code class=3D"literal">java.util.Optional</code> is now suppor=
ted for <code class=3D"literal">@RequestParam</code>, <code class=3D"litera=
l">@RequestHeader</code>,
and <code class=3D"literal">@MatrixVariable</code> controller method argume=
nts.
</li><li class=3D"listitem">
<code class=3D"literal">ListenableFuture</code> is supported as a return va=
lue alternative to <code class=3D"literal">DeferredResult</code>
where an underlying service (or perhaps a call to <code class=3D"literal">A=
syncRestTemplate</code>) already
returns <code class=3D"literal">ListenableFuture</code>.
</li><li class=3D"listitem">
<code class=3D"literal">@ModelAttribute</code> methods are now invoked in a=
n order that respects inter-dependencies.
See <a class=3D"ulink" href=3D"https://jira.spring.io/browse/SPR-6299" targ=
et=3D"_top">SPR-6299</a>.
</li><li class=3D"listitem">
Jackson=92s <code class=3D"literal">@JsonView</code> is supported directly =
on <code class=3D"literal">@ResponseBody</code> and <code class=3D"literal"=
>ResponseEntity</code>
controller methods for serializing different amounts of detail for the same=
 POJO (e.g.
summary vs. detail page). This is also supported with View-based rendering =
by
adding the serialization view type as a model attribute under a special key=
.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mvc-ann-jsonview" title=3D"Jack=
son Serialization View Support">the section called =93Jackson Serialization=
 View Support=94</a> for details.
</li><li class=3D"listitem">
JSONP is now supported with Jackson. See <a class=3D"xref" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#mvc-ann-jsonp" title=3D"Jackson JSONP Support">the section called =93=
Jackson JSONP Support=94</a>.
</li><li class=3D"listitem">
A new lifecycle option is available for intercepting <code class=3D"literal=
">@ResponseBody</code> and <code class=3D"literal">ResponseEntity</code>
methods just after the controller method returns and before the response is=
 written.
To take advantage declare an <code class=3D"literal">@ControllerAdvice</cod=
e> bean that implements <code class=3D"literal">ResponseBodyAdvice</code>.
The built-in support for <code class=3D"literal">@JsonView</code> and JSONP=
 take advantage of this.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mvc-handlermapping-interceptor"=
 title=3D"22.4.1&nbsp;Intercepting requests with a HandlerInterceptor">Sect=
ion&nbsp;22.4.1, =93Intercepting requests with a HandlerInterceptor=94</a>.
</li><li class=3D"listitem">
<p class=3D"simpara">There are three new <code class=3D"literal">HttpMessag=
eConverter</code> options:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
Gson&#8201;=97&#8201;lighter footprint than Jackson; has already been in us=
e in Spring Android.
</li><li class=3D"listitem">
Google Protocol Buffers&#8201;=97&#8201;efficient and effective as an inter=
-service communication
data protocol within an enterprise but can also be exposed as JSON and XML =
for browsers.
</li><li class=3D"listitem">
Jackson based XML serialization is now supported through the
<a class=3D"ulink" href=3D"https://github.com/FasterXML/jackson-dataformat-=
xml" target=3D"_top">jackson-dataformat-xml</a> extension.
When using <code class=3D"literal">@EnableWebMvc</code> or <code class=3D"l=
iteral">&lt;mvc:annotation-driven/&gt;</code>, this is used by default
instead of JAXB2 if <code class=3D"literal">jackson-dataformat-xml</code> i=
s in the classpath.
</li></ul></div>
</li><li class=3D"listitem">
Views such as JSPs can now build links to controllers by referring to contr=
oller mappings
by name. A default name is assigned to every <code class=3D"literal">@Reque=
stMapping</code>. For example <code class=3D"literal">FooController</code>
with method <code class=3D"literal">handleFoo</code> is named "FC#handleFoo=
". The naming strategy is pluggable.
It is also possible to name an <code class=3D"literal">@RequestMapping</cod=
e> explicitly through its name attribute.
A new <code class=3D"literal">mvcUrl</code> function in the Spring JSP tag =
library makes this easy to use in JSP pages.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mvc-links-to-controllers-from-v=
iews" title=3D"22.7.3&nbsp;Building URIs to Controllers and methods from vi=
ews">Section&nbsp;22.7.3, =93Building URIs to Controllers and methods from =
views=94</a>.
</li><li class=3D"listitem">
<code class=3D"literal">ResponseEntity</code> provides a builder-style API =
to guide controller methods
towards the preparation of server-side responses, e.g. <code class=3D"liter=
al">ResponseEntity.ok()</code>.
</li><li class=3D"listitem">
<code class=3D"literal">RequestEntity</code> is a new type that provides a =
builder-style API to guide client-side REST
code towards the preparation of HTTP requests.
</li><li class=3D"listitem">
<p class=3D"simpara">MVC Java config and XML namespace:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
View resolvers can now be configured including support for content
negotiation, see <a class=3D"xref" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-view-re=
solvers" title=3D"22.16.8&nbsp;View Resolvers">Section&nbsp;22.16.8, =93Vie=
w Resolvers=94</a>.
</li><li class=3D"listitem">
View controllers now have built-in support for redirects and for setting th=
e response
status. An application can use this to configure redirect URLs, render 404 =
responses
with a view, send "no content" responses, etc.
Some use cases are
<a class=3D"ulink" href=3D"https://jira.spring.io/browse/SPR-11543?focusedC=
ommentId=3D100308&amp;page=3Dcom.atlassian.jira.plugin.system.issuetabpanel=
s:comment-tabpanel#comment-100308" target=3D"_top">listed here</a>.
</li><li class=3D"listitem">
Path matching customizations are frequently used and now built-in.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mvc-config-path-matching" title=
=3D"22.16.11&nbsp;Path Matching">Section&nbsp;22.16.11, =93Path Matching=94=
</a>.
</li></ul></div>
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://groovy-lang.org/docs/groovy-2.3.6/html/do=
cumentation/markup-template-engine.html" target=3D"_top">Groovy markup temp=
late</a>
support (based on Groovy 2.3). See the <code class=3D"literal">GroovyMarkup=
Configurer</code> and respecitve
<code class=3D"literal">ViewResolver</code> and `View' implementations.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_1-WebSocket-Messaging-Improvements" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#v4_1-WebSocket-Messaging-Improvements"></a>4.4&nbsp;W=
ebSocket Messaging Improvements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
SockJS (Java) client-side support. See <code class=3D"literal">SockJsClient=
</code> and classes in same package.
</li><li class=3D"listitem">
New application context events <code class=3D"literal">SessionSubscribeEven=
t</code> and <code class=3D"literal">SessionUnsubscribeEvent</code> publish=
ed
when STOMP clients subscribe and unsubscribe.
</li><li class=3D"listitem">
New "websocket" scope. See <a class=3D"xref" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websocke=
t-stomp-websocket-scope" title=3D"26.4.16&nbsp;WebSocket Scope">Section&nbs=
p;26.4.16, =93WebSocket Scope=94</a>.
</li><li class=3D"listitem">
<code class=3D"literal">@SendToUser</code> can target only a single session=
 and does not require an authenticated user.
</li><li class=3D"listitem">
<code class=3D"literal">@MessageMapping</code> methods can use dot "." inst=
ead of slash "/" as path separator.
See <a class=3D"ulink" href=3D"https://jira.spring.io/browse/SPR-11660" tar=
get=3D"_top">SPR-11660</a>.
</li><li class=3D"listitem">
STOMP/WebSocket monitoring info collected and logged. See <a class=3D"xref"=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#websocket-stomp-stats" title=3D"26.4.18&nbsp;Monitor=
ing">Section&nbsp;26.4.18, =93Monitoring=94</a>.
</li><li class=3D"listitem">
Significantly optimized and improved logging that should remain very readab=
le
and compact even at DEBUG level.
</li><li class=3D"listitem">
Optimized message creation including support for temporary message mutabili=
ty
and avoiding automatic message id and timestamp creation. See Javadoc of
<code class=3D"literal">MessageHeaderAccessor</code>.
</li><li class=3D"listitem">
Close STOMP/WebSocket connections that have no activity within 60 seconds a=
fter the
WebSocket session is established. See <a class=3D"ulink" href=3D"https://ji=
ra.spring.io/browse/SPR-11884" target=3D"_top">SPR-11884</a>.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_1-Testing-Improvements" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#v4_1-Testing-Improvements"></a>4.5&nbsp;Testing Improvements</h2>=
</div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<p class=3D"simpara">Groovy scripts can now be used to configure the <code =
class=3D"literal">ApplicationContext</code> loaded for
integration tests in the TestContext framework.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management-groo=
vy" title=3D"Context configuration with Groovy scripts">the section called =
=93Context configuration with Groovy scripts=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">Test-managed transactions can now be programmatically =
started and ended within
transactional test methods via the new <code class=3D"literal">TestTransact=
ion</code> API.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-tx-programmatic-tx-=
mgt" title=3D"Programmatic transaction management">the section called =93Pr=
ogrammatic transaction management=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">SQL script execution can now be configured declarative=
ly via the new <code class=3D"literal">@Sql</code> and
<code class=3D"literal">@SqlConfig</code> annotations on a per-class or per=
-method basis.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-executing-sql" titl=
e=3D"15.5.8&nbsp;Executing SQL scripts">Section&nbsp;15.5.8, =93Executing S=
QL scripts=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">Test property sources which automatically override sys=
tem and application property
sources can be configured via the new <code class=3D"literal">@TestProperty=
Source</code> annotation.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management-prop=
erty-sources" title=3D"Context configuration with test property sources">th=
e section called =93Context configuration with test property sources=94</a>=
 for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">Default <code class=3D"literal">TestExecutionListener<=
/code>s can now be automatically discovered.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-tel-config-automati=
c-discovery" title=3D"Automatic discovery of default TestExecutionListeners=
">the section called =93Automatic discovery of default TestExecutionListene=
rs=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">Custom <code class=3D"literal">TestExecutionListener</=
code>s can now be automatically merged with the default
listeners.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-tel-config-merging"=
 title=3D"Merging TestExecutionListeners">the section called =93Merging Tes=
tExecutionListeners=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">The documentation for transactional testing support in=
 the TestContext framework has
been improved with more thorough explanations and additional examples.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-tx" title=3D"15.5.7=
&nbsp;Transaction management">Section&nbsp;15.5.7, =93Transaction managemen=
t=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
Various improvements to <code class=3D"literal">MockServletContext</code>, =
<code class=3D"literal">MockHttpServletRequest</code>, and other
Servlet API mocks.
</li><li class=3D"listitem">
<code class=3D"literal">AssertThrows</code> has been refactored to support =
<code class=3D"literal">Throwable</code> instead of <code class=3D"literal"=
>Exception</code>.
</li><li class=3D"listitem">
In Spring MVC Test, JSON responses can be asserted with <a class=3D"ulink" =
href=3D"https://github.com/skyscreamer/JSONassert" target=3D"_top">JSON Ass=
ert</a>
as an extra option to using JSONPath much like it has been possible to do f=
or XML with
XMLUnit.
</li><li class=3D"listitem">
<code class=3D"literal">MockMvcBuilder</code> <span class=3D"emphasis"><em>=
recipes</em></span> can now be created with the help of <code class=3D"lite=
ral">MockMvcConfigurer</code>. This
was added to make it easy to apply Spring Security setup but can be used to=
 encapsulate
common setup for any 3rd party framework or within a project.
</li><li class=3D"listitem">
<code class=3D"literal">MockRestServiceServer</code> now supports the <code=
 class=3D"literal">AsyncRestTemplate</code> for client-side testing.
</li></ul></div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"new-in-4.2" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.2"></a>5.&nbsp;New=
 Features and Enhancements in Spring Framework 4.2</h2></div></div></div>
<p>Version 4.2 included a number of improvements, as described in the follo=
wing sections:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-Core-Container-Improvements" t=
itle=3D"5.1&nbsp;Core Container Improvements">Section&nbsp;5.1, =93Core Con=
tainer Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-Data-Access-Improvements" titl=
e=3D"5.2&nbsp;Data Access Improvements">Section&nbsp;5.2, =93Data Access Im=
provements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-JMS-Improvements" title=3D"5.3=
&nbsp;JMS Improvements">Section&nbsp;5.3, =93JMS Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-Web-Improvements" title=3D"5.4=
&nbsp;Web Improvements">Section&nbsp;5.4, =93Web Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-WebSocket-Messaging-Improvemen=
ts" title=3D"5.5&nbsp;WebSocket Messaging Improvements">Section&nbsp;5.5, =
=93WebSocket Messaging Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_2-Testing-Improvements" title=3D=
"5.6&nbsp;Testing Improvements">Section&nbsp;5.6, =93Testing Improvements=
=94</a>
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_2-Core-Container-Improvements" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#v4_2-Core-Container-Improvements"></a>5.1&nbsp;Core Conta=
iner Improvements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Annotations such as <code class=3D"literal">@Bean</code> get detected and p=
rocessed on Java 8 default methods as well,
allowing for composing a configuration class from interfaces with default <=
code class=3D"literal">@Bean</code> methods.
</li><li class=3D"listitem">
Configuration classes may declare <code class=3D"literal">@Import</code> wi=
th regular component classes now, allowing
for a mix of imported configuration classes and component classes.
</li><li class=3D"listitem">
Configuration classes may declare an <code class=3D"literal">@Order</code> =
value, getting processed in a corresponding
order (e.g. for overriding beans by name) even when detected through classp=
ath scanning.
</li><li class=3D"listitem">
<code class=3D"literal">@Resource</code> injection points support an <code =
class=3D"literal">@Lazy</code> declaration, analogous to <code class=3D"lit=
eral">@Autowired</code>,
receiving a lazy-initializing proxy for the requested target bean.
</li><li class=3D"listitem">
<p class=3D"simpara">The application event infrastructure now offers an <a =
class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sp=
ring-framework-reference/htmlsingle/#context-functionality-events-annotatio=
n" title=3D"Annotation-based event listeners">annotation-based model</a> as=
 well as the ability to publish any arbitrary event.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
Any public method in a managed bean can be annotated with <code class=3D"li=
teral">@EventListener</code> to consume events.
</li><li class=3D"listitem">
<code class=3D"literal">@TransactionalEventListener</code> provides transac=
tion-bound event support.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">Spring Framework 4.2 introduces first-class support fo=
r declaring and
looking up aliases for annotation attributes. The new <code class=3D"litera=
l">@AliasFor</code>
annotation can be used to declare a pair of aliased attributes within
a single annotation or to declare an alias from one attribute in a
custom composed annotation to an attribute in a meta-annotation.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
The following annotations have been retrofitted with <code class=3D"literal=
">@AliasFor</code> support
in order to provide meaningful aliases for their <code class=3D"literal">va=
lue</code> attributes:
<code class=3D"literal">@Cacheable</code>, <code class=3D"literal">@CacheEv=
ict</code>, <code class=3D"literal">@CachePut</code>, <code class=3D"litera=
l">@ComponentScan</code>,
<code class=3D"literal">@ComponentScan.Filter</code>, <code class=3D"litera=
l">@ImportResource</code>, <code class=3D"literal">@Scope</code>, <code cla=
ss=3D"literal">@ManagedResource</code>,
<code class=3D"literal">@Header</code>, <code class=3D"literal">@Payload</c=
ode>, <code class=3D"literal">@SendToUser</code>, <code class=3D"literal">@=
ActiveProfiles</code>,
<code class=3D"literal">@ContextConfiguration</code>, <code class=3D"litera=
l">@Sql</code>, <code class=3D"literal">@TestExecutionListeners</code>,
<code class=3D"literal">@TestPropertySource</code>, <code class=3D"literal"=
>@Transactional</code>, <code class=3D"literal">@ControllerAdvice</code>,
<code class=3D"literal">@CookieValue</code>, <code class=3D"literal">@Cross=
Origin</code>, <code class=3D"literal">@MatrixVariable</code>, <code class=
=3D"literal">@RequestHeader</code>,
<code class=3D"literal">@RequestMapping</code>, <code class=3D"literal">@Re=
questParam</code>, <code class=3D"literal">@RequestPart</code>, <code class=
=3D"literal">@ResponseStatus</code>,
<code class=3D"literal">@SessionAttributes</code>, <code class=3D"literal">=
@ActionMapping</code>, <code class=3D"literal">@RenderMapping</code>,
<code class=3D"literal">@EventListener</code>, <code class=3D"literal">@Tra=
nsactionalEventListener</code>.
</li><li class=3D"listitem">
<p class=3D"simpara">For example, <code class=3D"literal">@ContextConfigura=
tion</code> from the <code class=3D"literal">spring-test</code> module
is now declared as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <em>=
<span class=3D"hl-annotation" style=3D"color: gray">@interface</span></em> =
ContextConfiguration {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AliasFor("loca=
tions")</span></em>
    String[] value() <span class=3D"hl-keyword">default</span> {};

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AliasFor("valu=
e")</span></em>
    String[] locations() <span class=3D"hl-keyword">default</span> {};

    <span class=3D"hl-comment">// ...</span>
}</pre>
</li><li class=3D"listitem">
Similarly, <span class=3D"emphasis"><em>composed annotations</em></span> th=
at override attributes from
meta-annotations can now use <code class=3D"literal">@AliasFor</code> for f=
ine-grained control
over exactly which attributes are overridden within an annotation
hierarchy. In fact, it is now possible to declare an alias for the
<code class=3D"literal">value</code> attribute of a meta-annotation.
</li><li class=3D"listitem">
<p class=3D"simpara">For example, one can now develop a composed annotation=
 with a custom
attribute override as follows.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> MyTestConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AliasFor(annot=
ation =3D ContextConfiguration.class, attribute =3D "value")</span></em>
    String[] xmlFiles();

    <span class=3D"hl-comment">// ...</span>
}</pre>
</li><li class=3D"listitem">
See <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#annotation-programming-model" t=
itle=3D"38.&nbsp;Spring Annotation Programming Model">Spring Annotation Pro=
gramming Model</a>.
</li></ul></div>
</li><li class=3D"listitem">
Numerous improvements to Spring=92s search algorithms used for finding
meta-annotations. For example, locally declared <span class=3D"emphasis"><e=
m>composed annotations</em></span>
are now favored over inherited annotations.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Composed annotations</em></span> that override=
 attributes from meta-annotations
can now be discovered on interfaces and on abstract, bridge, &amp; interfac=
e
methods as well as on classes, standard methods, constructors, and
fields.
</li><li class=3D"listitem">
Maps representing annotation attributes (and <code class=3D"literal">Annota=
tionAttributes</code> instances)
can be <span class=3D"emphasis"><em>synthesized</em></span> (i.e., converte=
d) into an annotation.
</li><li class=3D"listitem">
The features of field-based data binding (<code class=3D"literal">DirectFie=
ldAccessor</code>) have been aligned with the current
property-based data binding (<code class=3D"literal">BeanWrapper</code>). I=
n particular, field-based binding now supports
navigation for Collections, Arrays, and Maps.
</li><li class=3D"listitem">
<code class=3D"literal">DefaultConversionService</code> now provides out-of=
-the-box converters for <code class=3D"literal">Stream</code>, <code class=
=3D"literal">Charset</code>,
<code class=3D"literal">Currency</code>, and <code class=3D"literal">TimeZo=
ne</code>. Such converters can be added individually to any arbitrary
<code class=3D"literal">ConversionService</code> as well.
</li><li class=3D"listitem">
<code class=3D"literal">DefaultFormattingConversionService</code> comes wit=
h out-of-the-box support for the value types
in JSR-354 Money &amp; Currency (if the 'javax.money' API is present on the=
 classpath): namely,
<code class=3D"literal">MonetaryAmount</code> and <code class=3D"literal">C=
urrencyUnit</code>. This includes support for applying <code class=3D"liter=
al">@NumberFormat</code>.
</li><li class=3D"listitem">
<code class=3D"literal">@NumberFormat</code> can now be used as a meta-anno=
tation.
</li><li class=3D"listitem">
<code class=3D"literal">JavaMailSenderImpl</code> has a new <code class=3D"=
literal">testConnection()</code> method for checking connectivity to the se=
rver.
</li><li class=3D"listitem">
<code class=3D"literal">ScheduledTaskRegistrar</code> exposes scheduled tas=
ks.
</li><li class=3D"listitem">
Apache <code class=3D"literal">commons-pool2</code> is now supported for a =
pooling AOP <code class=3D"literal">CommonsPool2TargetSource</code>.
</li><li class=3D"listitem">
Introduced <code class=3D"literal">StandardScriptFactory</code> as a JSR-22=
3 based mechanism for scripted beans,
exposed through the <code class=3D"literal">lang:std</code> element in XML.=
 Supports e.g. JavaScript and JRuby.
(Note: JRubyScriptFactory and <code class=3D"literal">lang:jruby</code> are=
 deprecated now, in favor of using JSR-223.)
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_2-Data-Access-Improvements" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#v4_2-Data-Access-Improvements"></a>5.2&nbsp;Data Access Impro=
vements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">javax.transaction.Transactional</code> is now suppo=
rted via AspectJ.
</li><li class=3D"listitem">
<code class=3D"literal">SimpleJdbcCallOperations</code> now supports named =
binding.
</li><li class=3D"listitem">
Full support for Hibernate ORM 5.0: as a JPA provider (automatically adapte=
d) as well as
through its native API (covered by the new <code class=3D"literal">org.spri=
ngframework.orm.hibernate5</code> package).
</li><li class=3D"listitem">
Embedded databases can now be automatically assigned unique names, and
<code class=3D"literal">&lt;jdbc:embedded-database&gt;</code> supports a ne=
w <code class=3D"literal">database-name</code> attribute.
See "Testing Improvements" below for further details.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_2-JMS-Improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#v4_2-JMS-Improvements"></a>5.3&nbsp;JMS Improvements</h2></div></div>=
</div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The <code class=3D"literal">autoStartup</code> attribute can be controlled =
via <code class=3D"literal">JmsListenerContainerFactory</code>.
</li><li class=3D"listitem">
The type of the reply <code class=3D"literal">Destination</code> can now be=
 configured per listener container.
</li><li class=3D"listitem">
The value of the <code class=3D"literal">@SendTo</code> annotation can now =
use a SpEL expression.
</li><li class=3D"listitem">
The response destination can be <a class=3D"link" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jms=
-annotated-response" title=3D"30.6.4&nbsp;Response management">computed at =
runtime using <code class=3D"literal">JmsResponse</code></a>
</li><li class=3D"listitem">
<code class=3D"literal">@JmsListener</code> is now a repeatable annotation =
to declare several JMS containers on the same
method (use the newly introduced <code class=3D"literal">@JmsListeners</cod=
e> if you=92re not using Java8 yet).
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_2-Web-Improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#v4_2-Web-Improvements"></a>5.4&nbsp;Web Improvements</h2></div></div>=
</div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
HTTP Streaming and Server-Sent Events support, see <a class=3D"xref" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#mvc-ann-async-http-streaming" title=3D"HTTP Streaming">th=
e section called =93HTTP Streaming=94</a>.
</li><li class=3D"listitem">
Built-in support for CORS including global (MVC Java config and XML namespa=
ce) and
local (e.g. <code class=3D"literal">@CrossOrigin</code>) configuration. See=
 <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#cors" title=3D"27.&nbsp;CORS Suppo=
rt">Chapter&nbsp;27, <i>CORS Support</i></a> for details.
</li><li class=3D"listitem">
<p class=3D"simpara">HTTP caching updates:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
new <code class=3D"literal">CacheControl</code> builder; plugged into <code=
 class=3D"literal">ResponseEntity</code>, <code class=3D"literal">WebConten=
tGenerator</code>,
<code class=3D"literal">ResourceHttpRequestHandler</code>.
</li><li class=3D"listitem">
improved ETag/Last-Modified support in <code class=3D"literal">WebRequest</=
code>.
</li></ul></div>
</li><li class=3D"listitem">
Custom mapping annotations, using <code class=3D"literal">@RequestMapping</=
code> as a meta-annotation.
</li><li class=3D"listitem">
Public methods in <code class=3D"literal">AbstractHandlerMethodMapping</cod=
e> to register and unregister request
mappings at runtime.
</li><li class=3D"listitem">
Protected <code class=3D"literal">createDispatcherServlet</code> method in =
<code class=3D"literal">AbstractDispatcherServletInitializer</code> to
further customize the <code class=3D"literal">DispatcherServlet</code> inst=
ance to use.
</li><li class=3D"listitem">
<code class=3D"literal">HandlerMethod</code> as a method argument on <code =
class=3D"literal">@ExceptionHandler</code> methods, especially
handy in <code class=3D"literal">@ControllerAdvice</code> components.
</li><li class=3D"listitem">
<code class=3D"literal">java.util.concurrent.CompletableFuture</code> as an=
 <code class=3D"literal">@Controller</code> method return value type.
</li><li class=3D"listitem">
Byte-range request support in <code class=3D"literal">HttpHeaders</code> an=
d for serving static resources.
</li><li class=3D"listitem">
<code class=3D"literal">@ResponseStatus</code> detected on nested exception=
s.
</li><li class=3D"listitem">
<p class=3D"simpara"><code class=3D"literal">UriTemplateHandler</code> exte=
nsion point in the <code class=3D"literal">RestTemplate</code>.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
<code class=3D"literal">DefaultUriTemplateHandler</code> exposes <code clas=
s=3D"literal">baseUrl</code> property and path segment encoding options.
</li><li class=3D"listitem">
the extension point can also be used to plug in any URI template library.
</li></ul></div>
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"https://square.github.io/okhttp/" target=3D"_top=
">OkHTTP</a> integration with the <code class=3D"literal">RestTemplate</cod=
e>.
</li><li class=3D"listitem">
Custom <code class=3D"literal">baseUrl</code> alternative for methods in <c=
ode class=3D"literal">MvcUriComponentsBuilder</code>.
</li><li class=3D"listitem">
Serialization/deserialization exception messages are now logged at WARN lev=
el.
</li><li class=3D"listitem">
Default JSON prefix has been changed from "{} &amp;&amp; " to the safer ")]=
}', " one.
</li><li class=3D"listitem">
New <code class=3D"literal">RequestBodyAdvice</code> extension point and bu=
ilt-in implementation to support Jackson=92s
<code class=3D"literal">@JsonView</code> on <code class=3D"literal">@Reques=
tBody</code> method arguments.
</li><li class=3D"listitem">
When using GSON or Jackson 2.6+, the handler method return type is used to =
improve
serialization of parameterized types like <code class=3D"literal">List&lt;F=
oo&gt;</code>.
</li><li class=3D"listitem">
Introduced <code class=3D"literal">ScriptTemplateView</code> as a JSR-223 b=
ased mechanism for scripted web views,
with a focus on JavaScript view templating on Nashorn (JDK 8).
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_2-WebSocket-Messaging-Improvements" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#v4_2-WebSocket-Messaging-Improvements"></a>5.5&nbsp;W=
ebSocket Messaging Improvements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<p class=3D"simpara">Expose presence information about connected users and =
subscriptions:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
new <code class=3D"literal">SimpUserRegistry</code> exposed as a bean named=
 "userRegistry".
</li><li class=3D"listitem">
sharing of presence information across cluster of servers (see broker relay=
 config options).
</li></ul></div>
</li><li class=3D"listitem">
Resolve user destinations across cluster of servers (see broker relay confi=
g options).
</li><li class=3D"listitem">
<code class=3D"literal">StompSubProtocolErrorHandler</code> extension point=
 to customize and control STOMP ERROR frames to clients.
</li><li class=3D"listitem">
Global <code class=3D"literal">@MessageExceptionHandler</code> methods via =
<code class=3D"literal">@ControllerAdvice</code> components.
</li><li class=3D"listitem">
Heart-beats and a SpEL expression 'selector' header for subscriptions with =
<code class=3D"literal">SimpleBrokerMessageHandler</code>.
</li><li class=3D"listitem">
STOMP client for use over TCP and WebSocket; see <a class=3D"xref" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#websocket-stomp-client" title=3D"26.4.15&nbsp;STOMP Client">S=
ection&nbsp;26.4.15, =93STOMP Client=94</a>.
</li><li class=3D"listitem">
<code class=3D"literal">@SendTo</code> and <code class=3D"literal">@SendToU=
ser</code> can contain destination variable placeholders.
</li><li class=3D"listitem">
Jackson=92s <code class=3D"literal">@JsonView</code> supported for return v=
alues on <code class=3D"literal">@MessageMapping</code> and <code class=3D"=
literal">@SubscribeMapping</code> methods.
</li><li class=3D"listitem">
<code class=3D"literal">ListenableFuture</code> and <code class=3D"literal"=
>CompletableFuture</code> as return value types from
<code class=3D"literal">@MessageMapping</code> and <code class=3D"literal">=
@SubscribeMapping</code> methods.
</li><li class=3D"listitem">
<code class=3D"literal">MarshallingMessageConverter</code> for XML payloads=
.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_2-Testing-Improvements" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#v4_2-Testing-Improvements"></a>5.6&nbsp;Testing Improvements</h2>=
</div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<p class=3D"simpara">JUnit-based integration tests can now be executed with=
 JUnit rules instead of the
<code class=3D"literal">SpringJUnit4ClassRunner</code>. This allows Spring-=
based integration tests to be run with
alternative runners like JUnit=92s <code class=3D"literal">Parameterized</c=
ode> or third-party runners such as the
<code class=3D"literal">MockitoJUnitRunner</code>.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testcontext-junit4-rules" title=
=3D"Spring JUnit 4 Rules">the section called =93Spring JUnit 4 Rules=94</a>=
 for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">The Spring MVC Test framework now provides first-class=
 support for HtmlUnit,
including integration with Selenium=92s WebDriver, allowing for page-based
web application testing without the need to deploy to a Servlet container.<=
/p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit=
" title=3D"15.6.2&nbsp;HtmlUnit Integration">Section&nbsp;15.6.2, =93HtmlUn=
it Integration=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara"><code class=3D"literal">AopTestUtils</code> is a new t=
esting utility that allows developers to
obtain a reference to the underlying target object hidden behind one
or more Spring proxies.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#unit-testing-utilities" title=
=3D"14.2.1&nbsp;General testing utilities">Section&nbsp;14.2.1, =93General =
testing utilities=94</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<code class=3D"literal">ReflectionTestUtils</code> now supports setting and=
 getting <code class=3D"literal">static</code> fields,
including constants.
</li><li class=3D"listitem">
The original ordering of bean definition profiles declared via
<code class=3D"literal">@ActiveProfiles</code> is now retained in order to =
support use cases such
as Spring Boot=92s <code class=3D"literal">ConfigFileApplicationListener</c=
ode> which loads
configuration files based on the names of active profiles.
</li><li class=3D"listitem">
<code class=3D"literal">@DirtiesContext</code> supports new <code class=3D"=
literal">BEFORE_METHOD</code>, <code class=3D"literal">BEFORE_CLASS</code>,=
 and
<code class=3D"literal">BEFORE_EACH_TEST_METHOD</code> modes for closing th=
e <code class=3D"literal">ApplicationContext</code>
<span class=3D"emphasis"><em>before</em></span> a test&#8201;=97&#8201;for =
example, if some rogue (i.e., yet to be
determined) test within a large test suite has corrupted the original
configuration for the <code class=3D"literal">ApplicationContext</code>.
</li><li class=3D"listitem">
<code class=3D"literal">@Commit</code> is a new annotation that may be used=
 as a direct replacement for
<code class=3D"literal">@Rollback(false)</code>.
</li><li class=3D"listitem">
<p class=3D"simpara"><code class=3D"literal">@Rollback</code> may now be us=
ed to configure class-level <span class=3D"emphasis"><em>default rollback</=
em></span> semantics.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
Consequently, <code class=3D"literal">@TransactionConfiguration</code> is n=
ow deprecated and will be removed in a
subsequent release.
</li></ul></div>
</li><li class=3D"listitem">
<code class=3D"literal">@Sql</code> now supports execution of <span class=
=3D"emphasis"><em>inlined SQL statements</em></span> via a new
<code class=3D"literal">statements</code> attribute.
</li><li class=3D"listitem">
The <code class=3D"literal">ContextCache</code> that is used for caching <c=
ode class=3D"literal">ApplicationContext</code>s
between tests is now a public API with a default implementation that
can be replaced for custom caching needs.
</li><li class=3D"listitem">
<code class=3D"literal">DefaultTestContext</code>, <code class=3D"literal">=
DefaultBootstrapContext</code>, and
<code class=3D"literal">DefaultCacheAwareContextLoaderDelegate</code> are n=
ow public classes in the
<code class=3D"literal">support</code> subpackage, allowing for custom exte=
nsions.
</li><li class=3D"listitem">
<code class=3D"literal">TestContextBootstrapper</code>s are now responsible=
 for building the
<code class=3D"literal">TestContext</code>.
</li><li class=3D"listitem">
In the Spring MVC Test framework, <code class=3D"literal">MvcResult</code> =
details can now be logged
at <code class=3D"literal">DEBUG</code> level or written to a custom <code =
class=3D"literal">OutputStream</code> or <code class=3D"literal">Writer</co=
de>. See
the new <code class=3D"literal">log()</code>, <code class=3D"literal">print=
(OutputStream)</code>, and <code class=3D"literal">print(Writer)</code> met=
hods in
<code class=3D"literal">MockMvcResultHandlers</code> for details.
</li><li class=3D"listitem">
The JDBC XML namespace supports a new <code class=3D"literal">database-name=
</code> attribute in
<code class=3D"literal">&lt;jdbc:embedded-database&gt;</code>, allowing dev=
elopers to set unique names
for embedded databases =96- for example, via a SpEL expression or a
property placeholder that is influenced by the current active bean
definition profiles.
</li><li class=3D"listitem">
<p class=3D"simpara">Embedded databases can now be automatically assigned a=
 unique name,
allowing common test database configuration to be reused in different
<code class=3D"literal">ApplicationContext</code>s within a test suite.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database-unique-n=
ames" title=3D"19.8.6&nbsp;Generating unique names for embedded databases">=
Section&nbsp;19.8.6, =93Generating unique names for embedded databases=94</=
a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<code class=3D"literal">MockHttpServletRequest</code> and <code class=3D"li=
teral">MockHttpServletResponse</code> now provide better
support for date header formatting via the <code class=3D"literal">getDateH=
eader</code> and <code class=3D"literal">setDateHeader</code>
methods.
</li></ul></div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"new-in-4.3" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.3"></a>6.&nbsp;New=
 Features and Enhancements in Spring Framework 4.3</h2></div></div></div>
<p>Version 4.3 included a number of improvements, as described in the follo=
wing sections:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-Core-Container-Improvements" t=
itle=3D"6.1&nbsp;Core Container Improvements">Section&nbsp;6.1, =93Core Con=
tainer Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-Data-Access-Improvements" titl=
e=3D"6.2&nbsp;Data Access Improvements">Section&nbsp;6.2, =93Data Access Im=
provements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-Caching-Improvements" title=3D=
"6.3&nbsp;Caching Improvements">Section&nbsp;6.3, =93Caching Improvements=
=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-JMS-Improvements" title=3D"6.4=
&nbsp;JMS Improvements">Section&nbsp;6.4, =93JMS Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-Web-Improvements" title=3D"6.5=
&nbsp;Web Improvements">Section&nbsp;6.5, =93Web Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-WebSocket-Messaging-Improvemen=
ts" title=3D"6.6&nbsp;WebSocket Messaging Improvements">Section&nbsp;6.6, =
=93WebSocket Messaging Improvements=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-Testing-Improvements" title=3D=
"6.7&nbsp;Testing Improvements">Section&nbsp;6.7, =93Testing Improvements=
=94</a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#v4_3-Support-for-new-library-and-se=
rver-generations" title=3D"6.8&nbsp;Support for new library and server gene=
rations">Section&nbsp;6.8, =93Support for new library and server generation=
s=94</a>
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-Core-Container-Improvements" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#v4_3-Core-Container-Improvements"></a>6.1&nbsp;Core Conta=
iner Improvements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Core container exceptions provide richer metadata to evaluate programmatica=
lly.
</li><li class=3D"listitem">
Java 8 default methods get detected as bean property getters/setters.
</li><li class=3D"listitem">
Lazy candidate beans are not being created in case of injecting a primary b=
ean.
</li><li class=3D"listitem">
It is no longer necessary to specify the <code class=3D"literal">@Autowired=
</code> annotation if the target
bean only defines one constructor.
</li><li class=3D"listitem">
<code class=3D"literal">@Configuration</code> classes support constructor i=
njection.
</li><li class=3D"listitem">
Any SpEL expression used to specify the <code class=3D"literal">condition</=
code> of an <code class=3D"literal">@EventListener</code> can
now refer to beans (e.g. <code class=3D"literal">@beanName.method()</code>)=
.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Composed annotations</em></span> can now overr=
ide array attributes in meta-annotations
with a single element of the component type of the array. For example, the
<code class=3D"literal">String[] path</code> attribute of <code class=3D"li=
teral">@RequestMapping</code> can be overridden with
<code class=3D"literal">String path</code> in a composed annotation.
</li><li class=3D"listitem">
<code class=3D"literal">@PersistenceContext</code>/<code class=3D"literal">=
@PersistenceUnit</code> selects a primary <code class=3D"literal">EntityMan=
agerFactory</code>
bean if declared as such.
</li><li class=3D"listitem">
<code class=3D"literal">@Scheduled</code> and <code class=3D"literal">@Sche=
dules</code> may now be used as <span class=3D"emphasis"><em>meta-annotatio=
ns</em></span> to create
custom <span class=3D"emphasis"><em>composed annotations</em></span> with a=
ttribute overrides.
</li><li class=3D"listitem">
<code class=3D"literal">@Scheduled</code> is properly supported on beans of=
 any scope.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-Data-Access-Improvements" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#v4_3-Data-Access-Improvements"></a>6.2&nbsp;Data Access Impro=
vements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">jdbc:initialize-database</code> and <code class=3D"=
literal">jdbc:embedded-database</code> support a configurable
separator to be applied to each script.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-Caching-Improvements" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#v4_3-Caching-Improvements"></a>6.3&nbsp;Caching Improvements</h2>=
</div></div></div>
<p>Spring 4.3 allows concurrent calls on a given key to be synchronized so =
that the
value is only computed once. This is an opt-in feature that should be enabl=
ed via
the new <code class=3D"literal">sync</code> attribute on <code class=3D"lit=
eral">@Cacheable</code>. This features introduces a breaking
change in the <code class=3D"literal">Cache</code> interface as a <code cla=
ss=3D"literal">get(Object key, Callable&lt;T&gt; valueLoader)</code>
method has been added.</p>
<p>Spring 4.3 also improves the caching abstraction as follows:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
SpEL expressions in caches-related annotations can now refer to beans (i.e.
<code class=3D"literal">@beanName.method()</code>).
</li><li class=3D"listitem">
<code class=3D"literal">ConcurrentMapCacheManager</code> and <code class=3D=
"literal">ConcurrentMapCache</code> now support the serialization
of cache entries via a new <code class=3D"literal">storeByValue</code> attr=
ibute.
</li><li class=3D"listitem">
<code class=3D"literal">@Cacheable</code>, <code class=3D"literal">@CacheEv=
ict</code>, <code class=3D"literal">@CachePut</code>, and <code class=3D"li=
teral">@Caching</code> may now be used as
<span class=3D"emphasis"><em>meta-annotations</em></span> to create custom =
<span class=3D"emphasis"><em>composed annotations</em></span> with attribut=
e overrides.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-JMS-Improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#v4_3-JMS-Improvements"></a>6.4&nbsp;JMS Improvements</h2></div></div>=
</div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">@SendTo</code> can now be specified at the class le=
vel to share a common reply destination.
</li><li class=3D"listitem">
<code class=3D"literal">@JmsListener</code> and <code class=3D"literal">@Jm=
sListeners</code> may now be used as <span class=3D"emphasis"><em>meta-anno=
tations</em></span> to create
custom <span class=3D"emphasis"><em>composed annotations</em></span> with a=
ttribute overrides.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-Web-Improvements" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#v4_3-Web-Improvements"></a>6.5&nbsp;Web Improvements</h2></div></div>=
</div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Built-in support for <a class=3D"link" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-reques=
tmapping-head-options" title=3D"HTTP HEAD and HTTP OPTIONS">HTTP HEAD and H=
TTP OPTIONS</a>.
</li><li class=3D"listitem">
<p class=3D"simpara">New <code class=3D"literal">@GetMapping</code>, <code =
class=3D"literal">@PostMapping</code>, <code class=3D"literal">@PutMapping<=
/code>, <code class=3D"literal">@DeleteMapping</code>, and <code class=3D"l=
iteral">@PatchMapping</code>
<span class=3D"emphasis"><em>composed annotations</em></span> for <code cla=
ss=3D"literal">@RequestMapping</code>.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-composed=
" title=3D"Composed @RequestMapping Variants">Composed @RequestMapping Vari=
ants</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
<p class=3D"simpara">New <code class=3D"literal">@RequestScope</code>, <cod=
e class=3D"literal">@SessionScope</code>, and <code class=3D"literal">@Appl=
icationScope</code> <span class=3D"emphasis"><em>composed annotations</em><=
/span>
for web scopes.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: circle; "><li class=3D"listitem">
See <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-request" t=
itle=3D"Request scope">Request scope</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-session" title=
=3D"Session scope">Session scope</a>, and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-application" t=
itle=3D"Application scope">Application scope</a> for details.
</li></ul></div>
</li><li class=3D"listitem">
New <code class=3D"literal">@RestControllerAdvice</code> annotation with co=
mbined <code class=3D"literal">@ControllerAdvice</code> with <code class=3D=
"literal">@ResponseBody</code> semantics.
</li><li class=3D"listitem">
<code class=3D"literal">@ResponseStatus</code> is now supported at the clas=
s level and inherited by all methods.
</li><li class=3D"listitem">
New <code class=3D"literal">@SessionAttribute</code> annotation for access =
to session attributes (see <a class=3D"link" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-=
sessionattrib-global" title=3D"Using @SessionAttribute to access pre-existi=
ng global session attributes">example</a>).
</li><li class=3D"listitem">
New <code class=3D"literal">@RequestAttribute</code> annotation for access =
to request attributes (see <a class=3D"link" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-=
requestattrib" title=3D"Using @RequestAttribute to access request attribute=
s">example</a>).
</li><li class=3D"listitem">
<code class=3D"literal">@ModelAttribute</code> allows preventing data bindi=
ng via <code class=3D"literal">binding=3Dfalse</code> attribute (see <a cla=
ss=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#mvc-ann-modelattrib-method-args" title=3D=
"Using @ModelAttribute on a method argument">reference</a>).
</li><li class=3D"listitem">
<code class=3D"literal">@PathVariable</code> may be declared as optional (f=
or use on <code class=3D"literal">@ModelAttribute</code> methods).
</li><li class=3D"listitem">
Consistent exposure of Errors and custom Throwables to MVC exception handle=
rs.
</li><li class=3D"listitem">
Consistent charset handling in HTTP message converters, including a UTF-8 d=
efault for multipart text content.
</li><li class=3D"listitem">
Static resource handling uses the configured <code class=3D"literal">Conten=
tNegotiationManager</code> for media type determination.
</li><li class=3D"listitem">
<code class=3D"literal">RestTemplate</code> and <code class=3D"literal">Asy=
ncRestTemplate</code> support strict URI variable encoding via <code class=
=3D"literal">DefaultUriTemplateHandler</code>.
</li><li class=3D"listitem">
<code class=3D"literal">AsyncRestTemplate</code> supports request intercept=
ion.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-WebSocket-Messaging-Improvements" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#v4_3-WebSocket-Messaging-Improvements"></a>6.6&nbsp;W=
ebSocket Messaging Improvements</h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">@SendTo</code> and <code class=3D"literal">@SendToU=
ser</code> can now be specified at class-level to share a common destinatio=
n.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-Testing-Improvements" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#v4_3-Testing-Improvements"></a>6.7&nbsp;Testing Improvements</h2>=
</div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The JUnit support in the <span class=3D"emphasis"><em>Spring TestContext Fr=
amework</em></span> now requires JUnit 4.12 or higher.
</li><li class=3D"listitem">
New <code class=3D"literal">SpringRunner</code> <span class=3D"emphasis"><e=
m>alias</em></span> for the <code class=3D"literal">SpringJUnit4ClassRunner=
</code>.
</li><li class=3D"listitem">
Test related annotations may now be declared on interfaces&#8201;=97&#8201;=
for example, for use with
<span class=3D"emphasis"><em>test interfaces</em></span> that make use of J=
ava 8 based interface default methods.
</li><li class=3D"listitem">
An empty declaration of <code class=3D"literal">@ContextConfiguration</code=
> can now be completely omitted if default
XML files, Groovy scripts, or <code class=3D"literal">@Configuration</code>=
 classes are detected.
</li><li class=3D"listitem">
<code class=3D"literal">@Transactional</code> test methods are no longer re=
quired to be <code class=3D"literal">public</code> (e.g., in TestNG and JUn=
it 5).
</li><li class=3D"listitem">
<code class=3D"literal">@BeforeTransaction</code> and <code class=3D"litera=
l">@AfterTransaction</code> methods are no longer required to be <code clas=
s=3D"literal">public</code>
and may now be declared on Java 8 based interface default methods.
</li><li class=3D"listitem">
The <code class=3D"literal">ApplicationContext</code> cache in the <span cl=
ass=3D"emphasis"><em>Spring TestContext Framework</em></span> is now bounde=
d with a
default maximum size of 32 and a <span class=3D"emphasis"><em>least recentl=
y used</em></span> eviction policy. The maximum size
can be configured by setting a JVM system property or Spring property calle=
d
<code class=3D"literal">spring.test.context.cache.maxSize</code>.
</li><li class=3D"listitem">
New <code class=3D"literal">ContextCustomizer</code> API for customizing a =
test <code class=3D"literal">ApplicationContext</code> <span class=3D"empha=
sis"><em>after</em></span> bean
definitions have been loaded into the context but <span class=3D"emphasis">=
<em>before</em></span> the context has been refreshed.
Customizers can be registered globally by third parties, foregoing the need=
 to implement a
custom <code class=3D"literal">ContextLoader</code>.
</li><li class=3D"listitem">
<code class=3D"literal">@Sql</code> and <code class=3D"literal">@SqlGroup</=
code> may now be used as <span class=3D"emphasis"><em>meta-annotations</em>=
</span> to create custom <span class=3D"emphasis"><em>composed
annotations</em></span> with attribute overrides.
</li><li class=3D"listitem">
<code class=3D"literal">ReflectionTestUtils</code> now automatically unwrap=
s proxies when setting or getting a field.
</li><li class=3D"listitem">
Server-side Spring MVC Test supports expectations on response headers with =
multiple values.
</li><li class=3D"listitem">
Server-side Spring MVC Test parses form data request content and populates =
request parameters.
</li><li class=3D"listitem">
Server-side Spring MVC Test supports mock-like assertions for invoked handl=
er methods.
</li><li class=3D"listitem">
Client-side REST test support allows indicating how many times a request is=
 expected and
whether the order of declaration for expectations should be ignored (see <a=
 class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/s=
pring-framework-reference/htmlsingle/#spring-mvc-test-client" title=3D"15.6=
.3&nbsp;Client-Side REST Tests">Section&nbsp;15.6.3, =93Client-Side REST Te=
sts=94</a>).
</li><li class=3D"listitem">
Client-side REST Test supports expectations for form data in the request bo=
dy.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"v4_3-Support-for-new-library-and-server=
-generations" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spr=
ing-framework-reference/htmlsingle/#v4_3-Support-for-new-library-and-server=
-generations"></a>6.8&nbsp;Support for new library and server generations</=
h2></div></div></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Hibernate ORM 5.2 (still supporting 4.2/4.3 and 5.0/5.1 as well, with 3.6 d=
eprecated now)
</li><li class=3D"listitem">
Hibernate Validator 5.3 (minimum remains at 4.3)
</li><li class=3D"listitem">
Jackson 2.8 (minimum raised to Jackson 2.6+ as of Spring 4.3)
</li><li class=3D"listitem">
OkHttp 3.x (still supporting OkHttp 2.x side by side)
</li><li class=3D"listitem">
Tomcat 8.5 as well as 9.0 milestones
</li><li class=3D"listitem">
Netty 4.1
</li><li class=3D"listitem">
Undertow 1.4
</li><li class=3D"listitem">
WildFly 10.1
</li></ul></div>
<p>Furthermore, Spring Framework 4.3 embeds the updated ASM 5.1, CGLIB 3.2.=
4, and Objenesis 2.4
in <code class=3D"literal">spring-core.jar</code>.</p>
</div>
</div>
</div>
<div class=3D"part"><div class=3D"titlepage"><div><div><h1 class=3D"title">=
<a name=3D"spring-core" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#spring-core"></a>Part&nbsp;II=
I.&nbsp;Core Technologies</h1></div></div></div>
<div class=3D"partintro"><div></div>
<p>This part of the reference documentation covers all of those technologie=
s that are
absolutely integral to the Spring Framework.</p>
<p>Foremost amongst these is the Spring Framework=92s Inversion of Control =
(IoC) container. A
thorough treatment of the Spring Framework=92s IoC container is closely fol=
lowed by
comprehensive coverage of Spring=92s Aspect-Oriented Programming (AOP) tech=
nologies. The
Spring Framework has its own AOP framework, which is conceptually easy to u=
nderstand,
and which successfully addresses the 80% sweet spot of AOP requirements in =
Java
enterprise programming.</p>
<p>Coverage of Spring=92s integration with AspectJ (currently the richest -=
 in terms of
features - and certainly most mature AOP implementation in the Java enterpr=
ise space) is
also provided.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans" title=3D"7.&nbsp;The IoC con=
tainer">Chapter&nbsp;7, <i>The IoC container</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#resources" title=3D"8.&nbsp;Resourc=
es">Chapter&nbsp;8, <i>Resources</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#validation" title=3D"9.&nbsp;Valida=
tion, Data Binding, and Type Conversion">Chapter&nbsp;9, <i>Validation, Dat=
a Binding, and Type Conversion</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#expressions" title=3D"10.&nbsp;Spri=
ng Expression Language (SpEL)">Chapter&nbsp;10, <i>Spring Expression Langua=
ge (SpEL)</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop" title=3D"11.&nbsp;Aspect Orien=
ted Programming with Spring">Chapter&nbsp;11, <i>Aspect Oriented Programmin=
g with Spring</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-api" title=3D"12.&nbsp;Spring A=
OP APIs">Chapter&nbsp;12, <i>Spring AOP APIs</i></a>
</li></ul></div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"beans" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#beans"></a>7.&nbsp;The IoC conta=
iner</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-introduction" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-introduction"></a>7.1&nbsp;Introduction to the Spring IoC containe=
r and beans</h2></div></div></div>
<p>This chapter covers the Spring Framework implementation of the Inversion=
 of Control
(IoC) <a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-f=
ramework-reference/htmlsingle/#ftn.d5e1829" class=3D"footnote" name=3D"d5e1=
829"><sup class=3D"footnote">[1]</sup></a> principle. IoC
is also known as <span class=3D"emphasis"><em>dependency injection</em></sp=
an> (DI). It is a process whereby objects define
their dependencies, that is, the other objects they work with, only through=
 constructor
arguments, arguments to a factory method, or properties that are set on the=
 object
instance after it is constructed or returned from a factory method. The con=
tainer then
<span class=3D"emphasis"><em>injects</em></span> those dependencies when it=
 creates the bean. This process is fundamentally
the inverse, hence the name <span class=3D"emphasis"><em>Inversion of Contr=
ol</em></span> (IoC), of the bean itself
controlling the instantiation or location of its dependencies by using dire=
ct
construction of classes, or a mechanism such as the <span class=3D"emphasis=
"><em>Service Locator</em></span> pattern.</p>
<p>The <code class=3D"literal">org.springframework.beans</code> and <code c=
lass=3D"literal">org.springframework.context</code> packages are the basis
for Spring Framework=92s IoC container. The
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html"=
 target=3D"_top"><code class=3D"literal">BeanFactory</code></a>
interface provides an advanced configuration mechanism capable of managing =
any type of
object.
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html=
" target=3D"_top"><code class=3D"literal">ApplicationContext</code></a>
is a sub-interface of <code class=3D"literal">BeanFactory</code>. It adds e=
asier integration with Spring=92s AOP
features; message resource handling (for use in internationalization), even=
t
publication; and application-layer specific contexts such as the <code clas=
s=3D"literal">WebApplicationContext</code>
for use in web applications.</p>
<p>In short, the <code class=3D"literal">BeanFactory</code> provides the co=
nfiguration framework and basic
functionality, and the <code class=3D"literal">ApplicationContext</code> ad=
ds more enterprise-specific functionality.
The <code class=3D"literal">ApplicationContext</code> is a complete superse=
t of the <code class=3D"literal">BeanFactory</code>, and is used
exclusively in this chapter in descriptions of Spring=92s IoC container. Fo=
r more
information on using the <code class=3D"literal">BeanFactory</code> instead=
 of the <code class=3D"literal">ApplicationContext,</code> refer to
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-beanfactory" title=3D"7.16&nb=
sp;The BeanFactory">Section&nbsp;7.16, =93The BeanFactory=94</a>.</p>
<p>In Spring, the objects that form the backbone of your application and th=
at are managed
by the Spring IoC <span class=3D"emphasis"><em>container</em></span> are ca=
lled <span class=3D"emphasis"><em>beans</em></span>. A bean is an object th=
at is
instantiated, assembled, and otherwise managed by a Spring IoC container. O=
therwise, a
bean is simply one of many objects in your application. Beans, and the <spa=
n class=3D"emphasis"><em>dependencies</em></span>
among them, are reflected in the <span class=3D"emphasis"><em>configuration=
 metadata</em></span> used by a container.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-basics" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bea=
ns-basics"></a>7.2&nbsp;Container overview</h2></div></div></div>
<p>The interface <code class=3D"literal">org.springframework.context.Applic=
ationContext</code> represents the Spring IoC
container and is responsible for instantiating, configuring, and assembling=
 the
aforementioned beans. The container gets its instructions on what objects t=
o
instantiate, configure, and assemble by reading configuration metadata. The
configuration metadata is represented in XML, Java annotations, or Java cod=
e. It allows
you to express the objects that compose your application and the rich inter=
dependencies
between such objects.</p>
<p>Several implementations of the <code class=3D"literal">ApplicationContex=
t</code> interface are supplied
out-of-the-box with Spring. In standalone applications it is common to crea=
te an
instance of
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApp=
licationContext.html" target=3D"_top"><code class=3D"literal">ClassPathXmlA=
pplicationContext</code></a>
or <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/=
4.3.21.RELEASE/javadoc-api/org/springframework/context/support/FileSystemXm=
lApplicationContext.html" target=3D"_top"><code class=3D"literal">FileSyste=
mXmlApplicationContext</code></a>.
While XML has been the traditional format for defining configuration metada=
ta you can
instruct the container to use Java annotations or code as the metadata form=
at by
providing a small amount of XML configuration to declaratively enable suppo=
rt for these
additional metadata formats.</p>
<p>In most application scenarios, explicit user code is not required to ins=
tantiate one or
more instances of a Spring IoC container. For example, in a web application=
 scenario, a
simple eight (or so) lines of boilerplate web descriptor XML in the <code c=
lass=3D"literal">web.xml</code> file
of the application will typically suffice (see <a class=3D"xref" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#context-create" title=3D"7.15.4&nbsp;Convenient ApplicationCont=
ext instantiation for web applications">Section&nbsp;7.15.4, =93Convenient =
ApplicationContext instantiation for web applications=94</a>). If you are u=
sing the
<a class=3D"ulink" href=3D"https://spring.io/tools/sts" target=3D"_top">Spr=
ing Tool Suite</a> Eclipse-powered development
environment this boilerplate configuration can be easily created with few m=
ouse clicks or
keystrokes.</p>
<p>The following diagram is a high-level view of how Spring works. Your app=
lication classes
are combined with configuration metadata so that after the <code class=3D"l=
iteral">ApplicationContext</code> is
created and initialized, you have a fully configured and executable system =
or
application.</p>
<div class=3D"figure"><a name=3D"d5e1874" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d5e1874"></=
a><p class=3D"title"><b>Figure&nbsp;7.1.&nbsp;The Spring IoC container</b><=
/p><div class=3D"figure-contents">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/container-magic.=
png" alt=3D"container magic"></div>
</div></div><br class=3D"figure-break">
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-metadata" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-m=
etadata"></a>7.2.1&nbsp;Configuration metadata</h3></div></div></div>
<p>As the preceding diagram shows, the Spring IoC container consumes a form=
 of
<span class=3D"emphasis"><em>configuration metadata</em></span>; this confi=
guration metadata represents how you as an
application developer tell the Spring container to instantiate, configure, =
and assemble
the objects in your application.</p>
<p>Configuration metadata is traditionally supplied in a simple and intuiti=
ve XML format,
which is what most of this chapter uses to convey key concepts and features=
 of the
Spring IoC container.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>XML-based metadata is <span class=3D"emphasis"><em>not</em></span> the o=
nly allowed form of configuration metadata. The
Spring IoC container itself is <span class=3D"emphasis"><em>totally</em></s=
pan> decoupled from the format in which this
configuration metadata is actually written. These days many developers choo=
se
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-java" title=3D"7.12&nbsp;Java=
-based container configuration">Java-based configuration</a> for their Spri=
ng applications.</p>
</td></tr></tbody></table></div>
<p>For information about using other forms of metadata with the Spring cont=
ainer, see:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-annotation-config" title=3D"7=
.9&nbsp;Annotation-based container configuration">Annotation-based configur=
ation</a>: Spring 2.5 introduced
support for annotation-based configuration metadata.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-java" title=3D"7.12&nbsp;Java=
-based container configuration">Java-based configuration</a>: Starting with=
 Spring 3.0, many features
provided by the Spring JavaConfig project became part of the core Spring Fr=
amework.
Thus you can define beans external to your application classes by using Jav=
a rather
than XML files. To use these new features, see the <code class=3D"literal">=
@Configuration</code>, <code class=3D"literal">@Bean</code>, <code class=3D=
"literal">@Import</code>
and <code class=3D"literal">@DependsOn</code> annotations.
</li></ul></div>
<p>Spring configuration consists of at least one and typically more than on=
e bean
definition that the container must manage. XML-based configuration metadata=
 shows these
beans configured as <code class=3D"literal">&lt;bean/&gt;</code> elements i=
nside a top-level <code class=3D"literal">&lt;beans/&gt;</code> element. Ja=
va
configuration typically uses <code class=3D"literal">@Bean</code> annotated=
 methods within a <code class=3D"literal">@Configuration</code> class.</p>
<p>These bean definitions correspond to the actual objects that make up you=
r application.
Typically you define service layer objects, data access objects (DAOs), pre=
sentation
objects such as Struts <code class=3D"literal">Action</code> instances, inf=
rastructure objects such as Hibernate
<code class=3D"literal">SessionFactories</code>, JMS <code class=3D"literal=
">Queues</code>, and so forth. Typically one does not configure
fine-grained domain objects in the container, because it is usually the res=
ponsibility
of DAOs and business logic to create and load domain objects. However, you =
can use
Spring=92s integration with AspectJ to configure objects that have been cre=
ated outside
the control of an IoC container. See <a class=3D"link" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-atconfigurable" title=3D"11.8.1&nbsp;Using AspectJ to dependency inje=
ct domain objects with Spring">Using AspectJ to
dependency-inject domain objects with Spring</a>.</p>
<p>The following example shows the basic structure of XML-based configurati=
on metadata:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"..."</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"hl-tag"=
>&gt;</span>
        <span class=3D"hl-comment">&lt;!-- collaborators and configuration =
for this bean go here --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"..."</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"hl-tag"=
>&gt;</span>
        <span class=3D"hl-comment">&lt;!-- collaborators and configuration =
for this bean go here --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- more bean definitions go here --&gt;=
</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The <code class=3D"literal">id</code> attribute is a string that you use=
 to identify the individual bean definition.
The <code class=3D"literal">class</code> attribute defines the type of the =
bean and uses the fully qualified
classname. The value of the id attribute refers to collaborating objects. T=
he XML for
referring to collaborating objects is not shown in this example; see
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-dependencies" title=3D"7.4&nb=
sp;Dependencies">Dependencies</a> for more information.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-instantiation" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fact=
ory-instantiation"></a>7.2.2&nbsp;Instantiating a container</h3></div></div=
></div>
<p>Instantiating a Spring IoC container is straightforward. The location pa=
th or paths
supplied to an <code class=3D"literal">ApplicationContext</code> constructo=
r are actually resource strings that allow
the container to load configuration metadata from a variety of external res=
ources such
as the local file system, from the Java <code class=3D"literal">CLASSPATH</=
code>, and so on.</p>
<pre class=3D"programlisting">ApplicationContext context =3D <span class=3D=
"hl-keyword">new</span> ClassPathXmlApplicationContext(<span class=3D"hl-st=
ring">"services.xml"</span>, <span class=3D"hl-string">"daos.xml"</span>);<=
/pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>After you learn about Spring=92s IoC container, you may want to know mor=
e about Spring=92s
<code class=3D"literal">Resource</code> abstraction, as described in <a cla=
ss=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sprin=
g-framework-reference/htmlsingle/#resources" title=3D"8.&nbsp;Resources">Ch=
apter&nbsp;8, <i>Resources</i></a>, which provides a convenient
mechanism for reading an InputStream from locations defined in a URI syntax=
. In
particular, <code class=3D"literal">Resource</code> paths are used to const=
ruct applications contexts as described in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#resources-app-ctx" title=3D"8.7&nbs=
p;Application contexts and Resource paths">Section&nbsp;8.7, =93Application=
 contexts and Resource paths=94</a>.</p>
</td></tr></tbody></table></div>
<p>The following example shows the service layer objects <code class=3D"lit=
eral">(services.xml)</code> configuration file:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- services --&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"petStore"</span> <span class=3D"hl-attri=
bute">class</span>=3D<span class=3D"hl-value">"org.springframework.samples.=
jpetstore.services.PetStoreServiceImpl"</span><span class=3D"hl-tag">&gt;</=
span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"accountDao"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"accountDao"</span>=
<span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"itemDao"</span> <span class=3D=
"hl-attribute">ref</span>=3D<span class=3D"hl-value">"itemDao"</span><span =
class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-comment">&lt;!-- additional collaborators and con=
figuration for this bean go here --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- more bean definitions for services g=
o here --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The following example shows the data access objects <code class=3D"liter=
al">daos.xml</code> file:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"accountDao"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao"</span><span=
 class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- additional collaborators and con=
figuration for this bean go here --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"itemDao"</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"org.springframework.samples.j=
petstore.dao.jpa.JpaItemDao"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- additional collaborators and con=
figuration for this bean go here --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- more bean definitions for data acces=
s objects go here --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>In the preceding example, the service layer consists of the class <code =
class=3D"literal">PetStoreServiceImpl</code>,
and two data access objects of the type <code class=3D"literal">JpaAccountD=
ao</code> and <code class=3D"literal">JpaItemDao</code> (based
on the JPA Object/Relational mapping standard). The <code class=3D"literal"=
>property name</code> element refers to the
name of the JavaBean property, and the <code class=3D"literal">ref</code> e=
lement refers to the name of another bean
definition. This linkage between <code class=3D"literal">id</code> and <cod=
e class=3D"literal">ref</code> elements expresses the dependency between
collaborating objects. For details of configuring an object=92s dependencie=
s, see
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-dependencies" title=3D"7.4&nb=
sp;Dependencies">Dependencies</a>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-xml-import" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory=
-xml-import"></a>Composing XML-based configuration metadata</h4></div></div=
></div>
<p>It can be useful to have bean definitions span multiple XML files. Often=
 each individual
XML configuration file represents a logical layer or module in your archite=
cture.</p>
<p>You can use the application context constructor to load bean definitions=
 from all these
XML fragments. This constructor takes multiple <code class=3D"literal">Reso=
urce</code> locations, as was shown in the
previous section. Alternatively, use one or more occurrences of the <code c=
lass=3D"literal">&lt;import/&gt;</code> element
to load bean definitions from another file or files. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;import</span> <span class=3D"hl-attribute">r=
esource</span>=3D<span class=3D"hl-value">"services.xml"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;import</span> <span class=3D"hl-attribute">r=
esource</span>=3D<span class=3D"hl-value">"resources/messageSource.xml"</sp=
an><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;import</span> <span class=3D"hl-attribute">r=
esource</span>=3D<span class=3D"hl-value">"/resources/themeSource.xml"</spa=
n><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"bean1"</span> <span class=3D"hl-attribut=
e">class</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"hl-ta=
g">/&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"bean2"</span> <span class=3D"hl-attribut=
e">class</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"hl-ta=
g">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>In the preceding example, external bean definitions are loaded from thre=
e files:
<code class=3D"literal">services.xml</code>, <code class=3D"literal">messag=
eSource.xml</code>, and <code class=3D"literal">themeSource.xml</code>. All=
 location paths are
relative to the definition file doing the importing, so <code class=3D"lite=
ral">services.xml</code> must be in the
same directory or classpath location as the file doing the importing, while
<code class=3D"literal">messageSource.xml</code> and <code class=3D"literal=
">themeSource.xml</code> must be in a <code class=3D"literal">resources</co=
de> location below the
location of the importing file. As you can see, a leading slash is ignored,=
 but given
that these paths are relative, it is better form not to use the slash at al=
l. The
contents of the files being imported, including the top level <code class=
=3D"literal">&lt;beans/&gt;</code> element, must
be valid XML bean definitions according to the Spring Schema.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>It is possible, but not recommended, to reference files in parent direct=
ories using a
relative "../" path. Doing so creates a dependency on a file that is outsid=
e the current
application. In particular, this reference is not recommended for "classpat=
h:" URLs (for
example, "classpath:../services.xml"), where the runtime resolution process=
 chooses the
"nearest" classpath root and then looks into its parent directory. Classpat=
h
configuration changes may lead to the choice of a different, incorrect dire=
ctory.</p>
<p>You can always use fully qualified resource locations instead of relativ=
e paths: for
example, "file:C:/config/services.xml" or "classpath:/config/services.xml".=
 However, be
aware that you are coupling your application=92s configuration to specific =
absolute
locations. It is generally preferable to keep an indirection for such absol=
ute
locations, for example, through "${=85&#8203;}" placeholders that are resol=
ved against JVM
system properties at runtime.</p>
</td></tr></tbody></table></div>
<p>The import directive is a feature provided by the beans namespace itself=
. Further
configuration features beyond plain bean definitions are available in a sel=
ection
of XML namespaces provided by Spring, e.g. the "context" and the "util" nam=
espace.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"groovy-bean-definition-dsl" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#groovy-bean=
-definition-dsl"></a>The Groovy Bean Definition DSL</h4></div></div></div>
<p>As a further example for externalized configuration metadata, bean defin=
itions can also
be expressed in Spring=92s Groovy Bean Definition DSL, as known from the Gr=
ails framework.
Typically, such configuration will live in a ".groovy" file with a structur=
e as follows:</p>
<pre class=3D"programlisting">beans {
    dataSource(BasicDataSource) {
        driverClassName =3D <span class=3D"hl-string">"org.hsqldb.jdbcDrive=
r"</span>
        url =3D <span class=3D"hl-string">"jdbc:hsqldb:mem:grailsDB"</span>
        username =3D <span class=3D"hl-string">"sa"</span>
        password =3D <span class=3D"hl-string">""</span>
        settings =3D [mynew:<span class=3D"hl-string">"setting"</span>]
    }
    sessionFactory(SessionFactory) {
        dataSource =3D dataSource
    }
    myService(MyService) {
        nestedBean =3D { AnotherBean bean -&gt;
            dataSource =3D dataSource
        }
    }
}</pre>
<p>This configuration style is largely equivalent to XML bean definitions a=
nd even
supports Spring=92s XML configuration namespaces. It also allows for import=
ing XML
bean definition files through an "importBeans" directive.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-client" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-cli=
ent"></a>7.2.3&nbsp;Using the container</h3></div></div></div>
<p>The <code class=3D"literal">ApplicationContext</code> is the interface f=
or an advanced factory capable of maintaining
a registry of different beans and their dependencies. Using the method <cod=
e class=3D"literal">T getBean(String
name, Class&lt;T&gt; requiredType)</code> you can retrieve instances of you=
r beans.</p>
<p>The <code class=3D"literal">ApplicationContext</code> enables you to rea=
d bean definitions and access them as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// create and conf=
igure beans</span>
ApplicationContext context =3D <span class=3D"hl-keyword">new</span> ClassP=
athXmlApplicationContext(<span class=3D"hl-string">"services.xml"</span>, <=
span class=3D"hl-string">"daos.xml"</span>);

<span class=3D"hl-comment">// retrieve configured instance</span>
PetStoreService service =3D context.getBean(<span class=3D"hl-string">"petS=
tore"</span>, PetStoreService.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// use configured instance</span>
List&lt;String&gt; userList =3D service.getUsernameList();</pre>
<p>With Groovy configuration, bootstrapping looks very similar, just a diff=
erent context
implementation class which is Groovy-aware (but also understands XML bean d=
efinitions):</p>
<pre class=3D"programlisting">ApplicationContext context =3D <span class=3D=
"hl-keyword">new</span> GenericGroovyApplicationContext(<span class=3D"hl-s=
tring">"services.groovy"</span>, <span class=3D"hl-string">"daos.groovy"</s=
pan>);</pre>
<p>The most flexible variant is <code class=3D"literal">GenericApplicationC=
ontext</code> in combination with reader
delegates, e.g. with <code class=3D"literal">XmlBeanDefinitionReader</code>=
 for XML files:</p>
<pre class=3D"programlisting">GenericApplicationContext context =3D <span c=
lass=3D"hl-keyword">new</span> GenericApplicationContext();
<span class=3D"hl-keyword">new</span> XmlBeanDefinitionReader(context).load=
BeanDefinitions(<span class=3D"hl-string">"services.xml"</span>, <span clas=
s=3D"hl-string">"daos.xml"</span>);
context.refresh();</pre>
<p>Or with <code class=3D"literal">GroovyBeanDefinitionReader</code> for Gr=
oovy files:</p>
<pre class=3D"programlisting">GenericApplicationContext context =3D <span c=
lass=3D"hl-keyword">new</span> GenericApplicationContext();
<span class=3D"hl-keyword">new</span> GroovyBeanDefinitionReader(context).l=
oadBeanDefinitions(<span class=3D"hl-string">"services.groovy"</span>, <spa=
n class=3D"hl-string">"daos.groovy"</span>);
context.refresh();</pre>
<p>Such reader delegates can be mixed and matched on the same <code class=
=3D"literal">ApplicationContext</code>,
reading bean definitions from diverse configuration sources, if desired.</p=
>
<p>You can then use <code class=3D"literal">getBean</code> to retrieve inst=
ances of your beans. The <code class=3D"literal">ApplicationContext</code>
interface has a few other methods for retrieving beans, but ideally your ap=
plication
code should never use them. Indeed, your application code should have no ca=
lls to the
<code class=3D"literal">getBean()</code> method at all, and thus no depende=
ncy on Spring APIs at all. For example,
Spring=92s integration with web frameworks provides dependency injection fo=
r various web
framework components such as controllers and JSF-managed beans, allowing yo=
u to declare
a dependency on a specific bean through metadata (e.g. an autowiring annota=
tion).</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-definition" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-definition"></a>7.3&nbsp;Bean overview</h2></div></div></div>
<p>A Spring IoC container manages one or more <span class=3D"emphasis"><em>=
beans</em></span>. These beans are created with the
configuration metadata that you supply to the container, for example, in th=
e form of XML
<code class=3D"literal">&lt;bean/&gt;</code> definitions.</p>
<p>Within the container itself, these bean definitions are represented as <=
code class=3D"literal">BeanDefinition</code>
objects, which contain (among other information) the following metadata:</p=
>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>A package-qualified class name:</em></span> ty=
pically the actual implementation class of the
bean being defined.
</li><li class=3D"listitem">
Bean behavioral configuration elements, which state how the bean should beh=
ave in the
container (scope, lifecycle callbacks, and so forth).
</li><li class=3D"listitem">
References to other beans that are needed for the bean to do its work; thes=
e
references are also called <span class=3D"emphasis"><em>collaborators</em><=
/span> or <span class=3D"emphasis"><em>dependencies</em></span>.
</li><li class=3D"listitem">
Other configuration settings to set in the newly created object, for exampl=
e, the
number of connections to use in a bean that manages a connection pool, or t=
he size
limit of the pool.
</li></ul></div>
<p>This metadata translates to a set of properties that make up each bean d=
efinition.</p>
<div class=3D"table"><a name=3D"beans-factory-bean-definition-tbl" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#beans-factory-bean-definition-tbl"></a><p class=3D"title"><b>=
Table&nbsp;7.1.&nbsp;The bean definition</b></p><div class=3D"table-content=
s">
<table summary=3D"The bean definition" style=3D"border-collapse: collapse;b=
order-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt so=
lid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col cla=
ss=3D"col_2"></colgroup><thead><tr><th style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Property</th>=
<th style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">E=
xplained in=85&#8203;</th></tr></thead><tbody><tr><td style=3D"border-right=
: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top=
"><p>class</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p><a class=3D"xref" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-=
class" title=3D"7.3.2&nbsp;Instantiating beans">Section&nbsp;7.3.2, =93Inst=
antiating beans=94</a></p></td></tr><tr><td style=3D"border-right: 0.5pt so=
lid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>name<=
/p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top"><p><a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname" title=
=3D"7.3.1&nbsp;Naming beans">Section&nbsp;7.3.1, =93Naming beans=94</a></p>=
</td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top"><p>scope</p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xre=
f" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-factory-scopes" title=3D"7.5&nbsp;Bean scope=
s">Section&nbsp;7.5, =93Bean scopes=94</a></p></td></tr><tr><td style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top"><p>constructor arguments</p></td><td style=3D"border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xref" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#beans-factory-collaborators" title=3D"7.4.1&nbsp;Dependency Inj=
ection">Section&nbsp;7.4.1, =93Dependency Injection=94</a></p></td></tr><tr=
><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " al=
ign=3D"left" valign=3D"top"><p>properties</p></td><td style=3D"border-botto=
m: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xref" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-factory-collaborators" title=3D"7.4.1&nbsp;Dependen=
cy Injection">Section&nbsp;7.4.1, =93Dependency Injection=94</a></p></td></=
tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid =
; " align=3D"left" valign=3D"top"><p>autowiring mode</p></td><td style=3D"b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"=
xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#beans-factory-autowire" title=3D"7.4.5&nbsp;Aut=
owiring collaborators">Section&nbsp;7.4.5, =93Autowiring collaborators=94</=
a></p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>lazy-initialization mode<=
/p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top"><p><a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lazy-init=
" title=3D"7.4.4&nbsp;Lazy-initialized beans">Section&nbsp;7.4.4, =93Lazy-i=
nitialized beans=94</a></p></td></tr><tr><td style=3D"border-right: 0.5pt s=
olid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>init=
ialization method</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p><a class=3D"xref" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-f=
actory-lifecycle-initializingbean" title=3D"Initialization callbacks">the s=
ection called =93Initialization callbacks=94</a></p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>destruct=
ion method</p></td><td style=3D"" align=3D"left" valign=3D"top"><p><a class=
=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean" tit=
le=3D"Destruction callbacks">the section called =93Destruction callbacks=94=
</a></p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>In addition to bean definitions that contain information on how to creat=
e a specific
bean, the <code class=3D"literal">ApplicationContext</code> implementations=
 also permit the registration of existing
objects that are created outside the container, by users. This is done by a=
ccessing the
ApplicationContext=92s BeanFactory via the method <code class=3D"literal">g=
etBeanFactory()</code> which returns the
BeanFactory implementation <code class=3D"literal">DefaultListableBeanFacto=
ry</code>. <code class=3D"literal">DefaultListableBeanFactory</code>
supports this registration through the methods <code class=3D"literal">regi=
sterSingleton(..)</code> and
<code class=3D"literal">registerBeanDefinition(..)</code>. However, typical=
 applications work solely with beans
defined through metadata bean definitions.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Bean metadata and manually supplied singleton instances need to be regis=
tered as early
as possible, in order for the container to properly reason about them durin=
g autowiring
and other introspection steps. While overriding of existing metadata and ex=
isting
singleton instances is supported to some degree, the registration of new be=
ans at
runtime (concurrently with live access to factory) is not officially suppor=
ted and may
lead to concurrent access exceptions and/or inconsistent state in the bean =
container.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-beanname" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname"></a>7.3=
.1&nbsp;Naming beans</h3></div></div></div>
<p>Every bean has one or more identifiers. These identifiers must be unique=
 within the
container that hosts the bean. A bean usually has only one identifier, but =
if it
requires more than one, the extra ones can be considered aliases.</p>
<p>In XML-based configuration metadata, you use the <code class=3D"literal"=
>id</code> and/or <code class=3D"literal">name</code> attributes
to specify the bean identifier(s). The <code class=3D"literal">id</code> at=
tribute allows you to specify
exactly one id. Conventionally these names are alphanumeric ('myBean',
'fooService', etc.), but may contain special characters as well. If you wan=
t to
introduce other aliases to the bean, you can also specify them in the <code=
 class=3D"literal">name</code>
attribute, separated by a comma (<code class=3D"literal">,</code>), semicol=
on (<code class=3D"literal">;</code>), or white space. As a
historical note, in versions prior to Spring 3.1, the <code class=3D"litera=
l">id</code> attribute was
defined as an <code class=3D"literal">xsd:ID</code> type, which constrained=
 possible characters. As of 3.1,
it is defined as an <code class=3D"literal">xsd:string</code> type. Note th=
at bean <code class=3D"literal">id</code> uniqueness is still
enforced by the container, though no longer by XML parsers.</p>
<p>You are not required to supply a name or id for a bean. If no name or id=
 is supplied
explicitly, the container generates a unique name for that bean. However, i=
f you want to
refer to that bean by name, through the use of the <code class=3D"literal">=
ref</code> element or
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-servicelocator" title=3D"7.16=
.2&nbsp;Glue code and the evil singleton">Service Locator</a> style lookup,=
 you must provide a name.
Motivations for not supplying a name are related to using <a class=3D"link"=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#beans-inner-beans" title=3D"Inner beans">inner
beans</a> and <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowir=
e" title=3D"7.4.5&nbsp;Autowiring collaborators">autowiring collaborators</=
a>.</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Bean Naming Conventions</b></p></div></div></div>
<p>The convention is to use the standard Java convention for instance field=
 names when
naming beans. That is, bean names start with a lowercase letter, and are ca=
mel-cased
from then on. Examples of such names would be (without quotes) <code class=
=3D"literal">'accountManager'</code>,
<code class=3D"literal">'accountService'</code>, <code class=3D"literal">'u=
serDao'</code>, <code class=3D"literal">'loginController'</code>, and so fo=
rth.</p>
<p>Naming beans consistently makes your configuration easier to read and un=
derstand, and if
you are using Spring AOP it helps a lot when applying advice to a set of be=
ans related
by name.</p>
</div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>With component scanning in the classpath, Spring generates bean names fo=
r unnamed
components, following the rules above: essentially, taking the simple class=
 name
and turning its initial character to lower-case. However, in the (unusual) =
special
case when there is more than one character and both the first and second ch=
aracters
are upper case, the original casing gets preserved. These are the same rule=
s as
defined by <code class=3D"literal">java.beans.Introspector.decapitalize</co=
de> (which Spring is using here).</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-beanname-alias" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname-al=
ias"></a>Aliasing a bean outside the bean definition</h4></div></div></div>
<p>In a bean definition itself, you can supply more than one name for the b=
ean, by using a
combination of up to one name specified by the <code class=3D"literal">id</=
code> attribute, and any number of other
names in the <code class=3D"literal">name</code> attribute. These names can=
 be equivalent aliases to the same bean,
and are useful for some situations, such as allowing each component in an a=
pplication to
refer to a common dependency by using a bean name that is specific to that =
component
itself.</p>
<p>Specifying all aliases where the bean is actually defined is not always =
adequate,
however. It is sometimes desirable to introduce an alias for a bean that is=
 defined
elsewhere. This is commonly the case in large systems where configuration i=
s split
amongst each subsystem, each subsystem having its own set of object definit=
ions. In
XML-based configuration metadata, you can use the <code class=3D"literal">&=
lt;alias/&gt;</code> element to accomplish this.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;alias</span> <span=
 class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"fromName"</=
span> <span class=3D"hl-attribute">alias</span>=3D<span class=3D"hl-value">=
"toName"</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>In this case, a bean (in the same container) named <code class=3D"litera=
l">fromName</code> may also,
after the use of this alias definition, be referred to as <code class=3D"li=
teral">toName</code>.</p>
<p>For example, the configuration metadata for subsystem A may refer to a D=
ataSource by the
name of <code class=3D"literal">subsystemA-dataSource</code>. The configura=
tion metadata for subsystem B may refer to
a DataSource by the name of <code class=3D"literal">subsystemB-dataSource</=
code>. When composing the main application
that uses both these subsystems, the main application refers to the DataSou=
rce by the
name of <code class=3D"literal">myApp-dataSource</code>. To have all three =
names refer to the same object, you can
add the following alias definitions to the configuration metadata:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;alias</span> <span=
 class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"myApp-dataS=
ource"</span> <span class=3D"hl-attribute">alias</span>=3D<span class=3D"hl=
-value">"subsystemA-dataSource"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;alias</span> <span class=3D"hl-attribute">name</=
span>=3D<span class=3D"hl-value">"myApp-dataSource"</span> <span class=3D"h=
l-attribute">alias</span>=3D<span class=3D"hl-value">"subsystemB-dataSource=
"</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>Now each component and the main application can refer to the dataSource =
through a name
that is unique and guaranteed not to clash with any other definition (effec=
tively
creating a namespace), yet they refer to the same bean.</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Java-configuration</b></p></div></div></div>
<p>If you are using Java-configuration, the <code class=3D"literal">@Bean</=
code> annotation can be used to provide aliases
see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-java-bean-annotation" tit=
le=3D"7.12.3&nbsp;Using the @Bean annotation">Section&nbsp;7.12.3, =93Using=
 the @Bean annotation=94</a> for details.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-class" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-clas=
s"></a>7.3.2&nbsp;Instantiating beans</h3></div></div></div>
<p>A bean definition essentially is a recipe for creating one or more objec=
ts. The
container looks at the recipe for a named bean when asked, and uses the con=
figuration
metadata encapsulated by that bean definition to create (or acquire) an act=
ual object.</p>
<p>If you use XML-based configuration metadata, you specify the type (or cl=
ass) of object
that is to be instantiated in the <code class=3D"literal">class</code> attr=
ibute of the <code class=3D"literal">&lt;bean/&gt;</code> element. This
<code class=3D"literal">class</code> attribute, which internally is a <code=
 class=3D"literal">Class</code> property on a <code class=3D"literal">BeanD=
efinition</code>
instance, is usually mandatory. (For exceptions, see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-class-instance-factor=
y-method" title=3D"Instantiation using an instance factory method">the sect=
ion called =93Instantiation using an instance factory method=94</a> and <a =
class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sp=
ring-framework-reference/htmlsingle/#beans-child-bean-definitions" title=3D=
"7.7&nbsp;Bean definition inheritance">Section&nbsp;7.7, =93Bean definition=
 inheritance=94</a>.)
You use the <code class=3D"literal">Class</code> property in one of two way=
s:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Typically, to specify the bean class to be constructed in the case where th=
e container
itself directly creates the bean by calling its constructor reflectively, s=
omewhat
equivalent to Java code using the <code class=3D"literal">new</code> operat=
or.
</li><li class=3D"listitem">
To specify the actual class containing the <code class=3D"literal">static</=
code> factory method that will be
invoked to create the object, in the less common case where the container i=
nvokes a
<code class=3D"literal">static</code> <span class=3D"emphasis"><em>factory<=
/em></span> method on a class to create the bean. The object type returned
from the invocation of the <code class=3D"literal">static</code> factory me=
thod may be the same class or another
class entirely.
</li></ul></div>
<div class=3D"sidebar"><div class=3D"titlepage"></div>
<p>
<b>Inner class names.&nbsp;</b>
If you want to configure a bean definition for a <code class=3D"literal">st=
atic</code> nested class, you have to use
the <span class=3D"emphasis"><em>binary</em></span> name of the nested clas=
s.
</p>
<p>For example, if you have a class called <code class=3D"literal">Foo</cod=
e> in the <code class=3D"literal">com.example</code> package, and this
<code class=3D"literal">Foo</code> class has a <code class=3D"literal">stat=
ic</code> nested class called <code class=3D"literal">Bar</code>, the value=
 of the <code class=3D"literal">'class'</code>
attribute on a bean definition would be=85&#8203;</p>
<p><code class=3D"literal">com.example.Foo$Bar</code></p>
<p>Notice the use of the <code class=3D"literal">$</code> character in the =
name to separate the nested class name from
the outer class name.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-class-ctor" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory=
-class-ctor"></a>Instantiation with a constructor</h4></div></div></div>
<p>When you create a bean by the constructor approach, all normal classes a=
re usable by and
compatible with Spring. That is, the class being developed does not need to=
 implement
any specific interfaces or to be coded in a specific fashion. Simply specif=
ying the bean
class should suffice. However, depending on what type of IoC you use for th=
at specific
bean, you may need a default (empty) constructor.</p>
<p>The Spring IoC container can manage virtually <span class=3D"emphasis"><=
em>any</em></span> class you want it to manage; it is
not limited to managing true JavaBeans. Most Spring users prefer actual Jav=
aBeans with
only a default (no-argument) constructor and appropriate setters and getter=
s modeled
after the properties in the container. You can also have more exotic non-be=
an-style
classes in your container. If, for example, you need to use a legacy connec=
tion pool
that absolutely does not adhere to the JavaBean specification, Spring can m=
anage it as
well.</p>
<p>With XML-based configuration metadata you can specify your bean class as=
 follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">name</s=
pan>=3D<span class=3D"hl-value">"anotherExample"</span> <span class=3D"hl-a=
ttribute">class</span>=3D<span class=3D"hl-value">"examples.ExampleBeanTwo"=
</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>For details about the mechanism for supplying arguments to the construct=
or (if required)
and setting object instance properties after the object is constructed, see
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-collaborators" title=
=3D"7.4.1&nbsp;Dependency Injection">Injecting Dependencies</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-class-static-factory-method" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#beans-factory-class-static-factory-method"></a>Instantiation with a sta=
tic factory method</h4></div></div></div>
<p>When defining a bean that you create with a static factory method, you u=
se the <code class=3D"literal">class</code>
attribute to specify the class containing the <code class=3D"literal">stati=
c</code> factory method and an attribute
named <code class=3D"literal">factory-method</code> to specify the name of =
the factory method itself. You should be
able to call this method (with optional arguments as described later) and r=
eturn a live
object, which subsequently is treated as if it had been created through a c=
onstructor.
One use for such a bean definition is to call <code class=3D"literal">stati=
c</code> factories in legacy code.</p>
<p>The following bean definition specifies that the bean will be created by=
 calling a
factory-method. The definition does not specify the type (class) of the ret=
urned object,
only the class containing the factory method. In this example, the <code cl=
ass=3D"literal">createInstance()</code>
method must be a <span class=3D"emphasis"><em>static</em></span> method.</p=
>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"clientService"=
</span>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"e=
xamples.ClientService"</span>
    <span class=3D"hl-attribute">factory-method</span>=3D<span class=3D"hl-=
value">"createInstance"</span><span class=3D"hl-tag">/&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ClientService {
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> ClientService clientService =3D <span class=3D"hl-keyword">new<=
/span> ClientService();
    <span class=3D"hl-keyword">private</span> ClientService() {}

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> ClientService createInstance() {
        <span class=3D"hl-keyword">return</span> clientService;
    }
}</pre>
<p>For details about the mechanism for supplying (optional) arguments to th=
e factory method
and setting object instance properties after the object is returned from th=
e factory,
see <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-factory-properties-detail=
ed" title=3D"7.4.2&nbsp;Dependencies and configuration in detail">Dependenc=
ies and configuration in detail</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-class-instance-factory-method" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#beans-factory-class-instance-factory-method"></a>Instantiation using =
an instance factory method</h4></div></div></div>
<p>Similar to instantiation through a <a class=3D"link" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-factory-class-static-factory-method" title=3D"Instantiation with a=
 static factory method">static
factory method</a>, instantiation with an instance factory method invokes a=
 non-static
method of an existing bean from the container to create a new bean. To use =
this
mechanism, leave the <code class=3D"literal">class</code> attribute empty, =
and in the <code class=3D"literal">factory-bean</code> attribute,
specify the name of a bean in the current (or parent/ancestor) container th=
at contains
the instance method that is to be invoked to create the object. Set the nam=
e of the
factory method itself with the <code class=3D"literal">factory-method</code=
> attribute.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- the factor=
y bean, which contains a method called createInstance() --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"serviceLocator"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"examples.DefaultServiceLoc=
ator"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- inject any dependencies required by =
this locator bean --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-comment">&lt;!-- the bean to be created via the factory b=
ean --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"clientService"</span>
    <span class=3D"hl-attribute">factory-bean</span>=3D<span class=3D"hl-va=
lue">"serviceLocator"</span>
    <span class=3D"hl-attribute">factory-method</span>=3D<span class=3D"hl-=
value">"createClientServiceInstance"</span><span class=3D"hl-tag">/&gt;</sp=
an></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> DefaultServiceLocator {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> ClientService clientService =3D <span class=3D"hl-keyword">new<=
/span> ClientServiceImpl();

    <span class=3D"hl-keyword">public</span> ClientService createClientServ=
iceInstance() {
        <span class=3D"hl-keyword">return</span> clientService;
    }
}</pre>
<p>One factory class can also hold more than one factory method as shown he=
re:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"serviceLocator=
"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-valu=
e">"examples.DefaultServiceLocator"</span><span class=3D"hl-tag">&gt;</span=
>
    <span class=3D"hl-comment">&lt;!-- inject any dependencies required by =
this locator bean --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"clientService"</span>
    <span class=3D"hl-attribute">factory-bean</span>=3D<span class=3D"hl-va=
lue">"serviceLocator"</span>
    <span class=3D"hl-attribute">factory-method</span>=3D<span class=3D"hl-=
value">"createClientServiceInstance"</span><span class=3D"hl-tag">/&gt;</sp=
an>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"accountService"</span>
    <span class=3D"hl-attribute">factory-bean</span>=3D<span class=3D"hl-va=
lue">"serviceLocator"</span>
    <span class=3D"hl-attribute">factory-method</span>=3D<span class=3D"hl-=
value">"createAccountServiceInstance"</span><span class=3D"hl-tag">/&gt;</s=
pan></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> DefaultServiceLocator {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> ClientService clientService =3D <span class=3D"hl-keyword">new<=
/span> ClientServiceImpl();

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> AccountService accountService =3D <span class=3D"hl-keyword">ne=
w</span> AccountServiceImpl();

    <span class=3D"hl-keyword">public</span> ClientService createClientServ=
iceInstance() {
        <span class=3D"hl-keyword">return</span> clientService;
    }

    <span class=3D"hl-keyword">public</span> AccountService createAccountSe=
rviceInstance() {
        <span class=3D"hl-keyword">return</span> accountService;
    }
}</pre>
<p>This approach shows that the factory bean itself can be managed and conf=
igured through
dependency injection (DI). See <a class=3D"link" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-factory-properties-detailed" title=3D"7.4.2&nbsp;Dependencies and configu=
ration in detail">Dependencies and
configuration in detail</a>.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>In Spring documentation,<span class=3D"emphasis"><em> factory bean</em><=
/span> refers to a bean that is configured in the
Spring container that will create objects through an
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-class-instance-factor=
y-method" title=3D"Instantiation using an instance factory method">instance=
</a> or
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-class-static-factory-=
method" title=3D"Instantiation with a static factory method">static</a> fac=
tory method. By contrast,
<code class=3D"literal">FactoryBean</code> (notice the capitalization) refe=
rs to a Spring-specific
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-extension-factorybean=
" title=3D"7.8.3&nbsp;Customizing instantiation logic with a FactoryBean"><=
code class=3D"literal">FactoryBean</code></a>.</p>
</td></tr></tbody></table></div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-dependencies" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-dependencies"></a>7.4&nbsp;Dependencies</h2></div></div></div>
<p>A typical enterprise application does not consist of a single object (or=
 bean in the
Spring parlance). Even the simplest application has a few objects that work=
 together to
present what the end-user sees as a coherent application. This next section=
 explains how
you go from defining a number of bean definitions that stand alone to a ful=
ly realized
application where objects collaborate to achieve a goal.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-collaborators" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fact=
ory-collaborators"></a>7.4.1&nbsp;Dependency Injection</h3></div></div></di=
v>
<p><span class=3D"emphasis"><em>Dependency injection</em></span> (DI) is a =
process whereby objects define their dependencies,
that is, the other objects they work with, only through constructor argumen=
ts, arguments
to a factory method, or properties that are set on the object instance afte=
r it is
constructed or returned from a factory method. The container then <span cla=
ss=3D"emphasis"><em>injects</em></span> those
dependencies when it creates the bean. This process is fundamentally the in=
verse, hence
the name <span class=3D"emphasis"><em>Inversion of Control</em></span> (IoC=
), of the bean itself controlling the instantiation
or location of its dependencies on its own by using direct construction of =
classes, or
the <span class=3D"emphasis"><em>Service Locator</em></span> pattern.</p>
<p>Code is cleaner with the DI principle and decoupling is more effective w=
hen objects are
provided with their dependencies. The object does not look up its dependenc=
ies, and does
not know the location or class of the dependencies. As such, your classes b=
ecome easier
to test, in particular when the dependencies are on interfaces or abstract =
base classes,
which allow for stub or mock implementations to be used in unit tests.</p>
<p>DI exists in two major variants, <a class=3D"link" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-constructor-injection" title=3D"Constructor-based dependency injecti=
on">Constructor-based
dependency injection</a> and <a class=3D"link" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-=
setter-injection" title=3D"Setter-based dependency injection">Setter-based =
dependency injection</a>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-constructor-injection" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-cons=
tructor-injection"></a>Constructor-based dependency injection</h4></div></d=
iv></div>
<p><span class=3D"emphasis"><em>Constructor-based</em></span> DI is accompl=
ished by the container invoking a constructor with a
number of arguments, each representing a dependency. Calling a <code class=
=3D"literal">static</code> factory method
with specific arguments to construct the bean is nearly equivalent, and thi=
s discussion
treats arguments to a constructor and to a <code class=3D"literal">static</=
code> factory method similarly. The
following example shows a class that can only be dependency-injected with c=
onstructor
injection. Notice that there is nothing <span class=3D"emphasis"><em>specia=
l</em></span> about this class, it is a POJO that
has no dependencies on container specific interfaces, base classes or annot=
ations.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-comment">// the SimpleMovieLister has a dependency on=
 a MovieFinder</span>
    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <span class=3D"hl-comment">// a constructor so that the Spring containe=
r can inject a MovieFinder</span>
    <span class=3D"hl-keyword">public</span> SimpleMovieLister(MovieFinder =
movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// business logic that actually uses the inj=
ected MovieFinder is omitted...</span>
}</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-factory-ctor-arguments-resolution" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-factory-ctor-arguments-resolution"></a>Constructor argument resolut=
ion</h5></div></div></div>
<p>Constructor argument resolution matching occurs using the argument=92s t=
ype. If no
potential ambiguity exists in the constructor arguments of a bean definitio=
n, then the
order in which the constructor arguments are defined in a bean definition i=
s the order
in which those arguments are supplied to the appropriate constructor when t=
he bean is
being instantiated. Consider the following class:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> x.y=
;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> Foo {

    <span class=3D"hl-keyword">public</span> Foo(Bar bar, Baz baz) {
        <span class=3D"hl-comment">// ...</span>
    }
}</pre>
<p>No potential ambiguity exists, assuming that <code class=3D"literal">Bar=
</code> and <code class=3D"literal">Baz</code> classes are not related by
inheritance. Thus the following configuration works fine, and you do not ne=
ed to specify
the constructor argument indexes and/or types explicitly in the <code class=
=3D"literal">&lt;constructor-arg/&gt;</code>
element.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"foo"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Foo"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"bar"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"baz"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"bar"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Bar"</span><span class=3D"hl-=
tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"baz"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Baz"</span><span class=3D"hl-=
tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>When another bean is referenced, the type is known, and matching can occ=
ur (as was the
case with the preceding example). When a simple type is used, such as
<code class=3D"literal">&lt;value&gt;true&lt;/value&gt;</code>, Spring cann=
ot determine the type of the value, and so cannot match
by type without help. Consider the following class:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> exa=
mples;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExampleBean {

    <span class=3D"hl-comment">// Number of years to calculate the Ultimate=
 Answer</span>
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> years;

    <span class=3D"hl-comment">// The Answer to Life, the Universe, and Eve=
rything</span>
    <span class=3D"hl-keyword">private</span> String ultimateAnswer;

    <span class=3D"hl-keyword">public</span> ExampleBean(<span class=3D"hl-=
keyword">int</span> years, String ultimateAnswer) {
        <span class=3D"hl-keyword">this</span>.years =3D years;
        <span class=3D"hl-keyword">this</span>.ultimateAnswer =3D ultimateA=
nswer;
    }
}</pre>
<p>In the preceding scenario, the container <span class=3D"emphasis"><em>ca=
n</em></span> use type matching with simple types if
you explicitly specify the type of the constructor argument using the <code=
 class=3D"literal">type</code> attribute.
For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">type</span>=3D<span class=3D"hl-value">"int"</span> <span class=3D"=
hl-attribute">value</span>=3D<span class=3D"hl-value">"7500000"</span><span=
 class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">type</span>=3D<span class=3D"hl-value">"java.lang.String"</span> <s=
pan class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"42"</sp=
an><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Use the <code class=3D"literal">index</code> attribute to specify explic=
itly the index of constructor arguments. For
example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">index</span>=3D<span class=3D"hl-value">"0"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"7500000"</span><span =
class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">index</span>=3D<span class=3D"hl-value">"1"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"42"</span><span class=
=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>In addition to resolving the ambiguity of multiple simple values, specif=
ying an index
resolves ambiguity where a constructor has two arguments of the same type. =
Note that the
<span class=3D"emphasis"><em>index is 0 based</em></span>.</p>
<p>You can also use the constructor parameter name for value disambiguation=
:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">name</span>=3D<span class=3D"hl-value">"years"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"7500000"</span><=
span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">name</span>=3D<span class=3D"hl-value">"ultimateAnswer"</span> <spa=
n class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"42"</span=
><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Keep in mind that to make this work out of the box your code must be com=
piled with the
debug flag enabled so that Spring can look up the parameter name from the c=
onstructor.
If you can=92t compile your code with debug flag (or don=92t want to) you c=
an use
<a class=3D"ulink" href=3D"https://download.oracle.com/javase/6/docs/api/ja=
va/beans/ConstructorProperties.html" target=3D"_top">@ConstructorProperties=
</a>
JDK annotation to explicitly name your constructor arguments. The sample cl=
ass would
then have to look as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> exa=
mples;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExampleBean {

    <span class=3D"hl-comment">// Fields omitted</span>

    <em><span class=3D"hl-annotation" style=3D"color: gray">@ConstructorPro=
perties({"years", "ultimateAnswer"})</span></em>
    <span class=3D"hl-keyword">public</span> ExampleBean(<span class=3D"hl-=
keyword">int</span> years, String ultimateAnswer) {
        <span class=3D"hl-keyword">this</span>.years =3D years;
        <span class=3D"hl-keyword">this</span>.ultimateAnswer =3D ultimateA=
nswer;
    }
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-setter-injection" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-setter-in=
jection"></a>Setter-based dependency injection</h4></div></div></div>
<p><span class=3D"emphasis"><em>Setter-based</em></span> DI is accomplished=
 by the container calling setter methods on your
beans after invoking a no-argument constructor or no-argument <code class=
=3D"literal">static</code> factory method to
instantiate your bean.</p>
<p>The following example shows a class that can only be dependency-injected=
 using pure
setter injection. This class is conventional Java. It is a POJO that has no=
 dependencies
on container specific interfaces, base classes or annotations.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-comment">// the SimpleMovieLister has a dependency on=
 the MovieFinder</span>
    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <span class=3D"hl-comment">// a setter method so that the Spring contai=
ner can inject a MovieFinder</span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// business logic that actually uses the inj=
ected MovieFinder is omitted...</span>
}</pre>
<p>The <code class=3D"literal">ApplicationContext</code> supports construct=
or-based and setter-based DI for the beans it
manages. It also supports setter-based DI after some dependencies have alre=
ady been
injected through the constructor approach. You configure the dependencies i=
n the form of
a <code class=3D"literal">BeanDefinition</code>, which you use in conjuncti=
on with <code class=3D"literal">PropertyEditor</code> instances to
convert properties from one format to another. However, most Spring users d=
o not work
with these classes directly (i.e., programmatically) but rather with XML <c=
ode class=3D"literal">bean</code>
definitions, annotated components (i.e., classes annotated with <code class=
=3D"literal">@Component</code>,
<code class=3D"literal">@Controller</code>, etc.), or <code class=3D"litera=
l">@Bean</code> methods in Java-based <code class=3D"literal">@Configuratio=
n</code> classes. These
sources are then converted internally into instances of <code class=3D"lite=
ral">BeanDefinition</code> and used to
load an entire Spring IoC container instance.</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Constructor-based or setter-based DI?</b></p></div></div></div>
<p>Since you can mix constructor-based and setter-based DI, it is a good ru=
le of thumb to
use constructors for <span class=3D"emphasis"><em>mandatory dependencies</e=
m></span> and setter methods or configuration methods
for <span class=3D"emphasis"><em>optional dependencies</em></span>. Note th=
at use of the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-required-annota=
tion" title=3D"7.9.1&nbsp;@Required">@Required</a>
annotation on a setter method can be used to make the property a required d=
ependency.</p>
<p>The Spring team generally advocates constructor injection as it enables =
one to implement
application components as <span class=3D"emphasis"><em>immutable objects</e=
m></span> and to ensure that required dependencies
are not <code class=3D"literal">null</code>. Furthermore constructor-inject=
ed components are always returned to client
(calling) code in a fully initialized state. As a side note, a large number=
 of constructor
arguments is a <span class=3D"emphasis"><em>bad code smell</em></span>, imp=
lying that the class likely has too many
responsibilities and should be refactored to better address proper separati=
on of concerns.</p>
<p>Setter injection should primarily only be used for optional dependencies=
 that can be
assigned reasonable default values within the class. Otherwise, not-null ch=
ecks must be
performed everywhere the code uses the dependency. One benefit of setter in=
jection is that
setter methods make objects of that class amenable to reconfiguration or re=
-injection
later. Management through <a class=3D"link" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jmx" titl=
e=3D"31.&nbsp;JMX">JMX MBeans</a> is therefore a compelling use case for se=
tter
injection.</p>
<p>Use the DI style that makes the most sense for a particular class. Somet=
imes, when dealing
with third-party classes for which you do not have the source, the choice i=
s made for you.
For example, if a third-party class does not expose any setter methods, the=
n constructor
injection may be the only available form of DI.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-dependency-resolution" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-depe=
ndency-resolution"></a>Dependency resolution process</h4></div></div></div>
<p>The container performs bean dependency resolution as follows:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The <code class=3D"literal">ApplicationContext</code> is created and initia=
lized with configuration metadata that
describes all the beans. Configuration metadata can be specified via XML, J=
ava code, or
annotations.
</li><li class=3D"listitem">
For each bean, its dependencies are expressed in the form of properties, co=
nstructor
arguments, or arguments to the static-factory method if you are using that =
instead of
a normal constructor. These dependencies are provided to the bean, <span cl=
ass=3D"emphasis"><em>when the bean is
actually created</em></span>.
</li><li class=3D"listitem">
Each property or constructor argument is an actual definition of the value =
to set, or
a reference to another bean in the container.
</li><li class=3D"listitem">
Each property or constructor argument which is a value is converted from it=
s specified
format to the actual type of that property or constructor argument. By defa=
ult Spring
can convert a value supplied in string format to all built-in types, such a=
s <code class=3D"literal">int</code>,
<code class=3D"literal">long</code>, <code class=3D"literal">String</code>,=
 <code class=3D"literal">boolean</code>, etc.
</li></ul></div>
<p>The Spring container validates the configuration of each bean as the con=
tainer is created.
However, the bean properties themselves are not set until the bean <span cl=
ass=3D"emphasis"><em>is actually created</em></span>.
Beans that are singleton-scoped and set to be pre-instantiated (the default=
) are created
when the container is created. Scopes are defined in <a class=3D"xref" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-factory-scopes" title=3D"7.5&nbsp;Bean scopes">Sect=
ion&nbsp;7.5, =93Bean scopes=94</a>. Otherwise,
the bean is created only when it is requested. Creation of a bean potential=
ly causes a
graph of beans to be created, as the bean=92s dependencies and its dependen=
cies'
dependencies (and so on) are created and assigned. Note that resolution mis=
matches among
those dependencies may show up late, i.e. on first creation of the affected=
 bean.</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Circular dependencies</b></p></div></div></div>
<p>If you use predominantly constructor injection, it is possible to create=
 an unresolvable
circular dependency scenario.</p>
<p>For example: Class A requires an instance of class B through constructor=
 injection, and
class B requires an instance of class A through constructor injection. If y=
ou configure
beans for classes A and B to be injected into each other, the Spring IoC co=
ntainer
detects this circular reference at runtime, and throws a
<code class=3D"literal">BeanCurrentlyInCreationException</code>.</p>
<p>One possible solution is to edit the source code of some classes to be c=
onfigured by
setters rather than constructors. Alternatively, avoid constructor injectio=
n and use
setter injection only. In other words, although it is not recommended, you =
can configure
circular dependencies with setter injection.</p>
<p>Unlike the <span class=3D"emphasis"><em>typical</em></span> case (with n=
o circular dependencies), a circular dependency
between bean A and bean B forces one of the beans to be injected into the o=
ther prior to
being fully initialized itself (a classic chicken/egg scenario).</p>
</div>
<p>You can generally trust Spring to do the right thing. It detects configu=
ration problems,
such as references to non-existent beans and circular dependencies, at cont=
ainer
load-time. Spring sets properties and resolves dependencies as late as poss=
ible, when
the bean is actually created. This means that a Spring container which has =
loaded
correctly can later generate an exception when you request an object if the=
re is a
problem creating that object or one of its dependencies. For example, the b=
ean throws an
exception as a result of a missing or invalid property. This potentially de=
layed
visibility of some configuration issues is why <code class=3D"literal">Appl=
icationContext</code> implementations by
default pre-instantiate singleton beans. At the cost of some upfront time a=
nd memory to
create these beans before they are actually needed, you discover configurat=
ion issues
when the <code class=3D"literal">ApplicationContext</code> is created, not =
later. You can still override this default
behavior so that singleton beans will lazy-initialize, rather than be pre-i=
nstantiated.</p>
<p>If no circular dependencies exist, when one or more collaborating beans =
are being
injected into a dependent bean, each collaborating bean is <span class=3D"e=
mphasis"><em>totally</em></span> configured prior
to being injected into the dependent bean. This means that if bean A has a =
dependency on
bean B, the Spring IoC container completely configures bean B prior to invo=
king the
setter method on bean A. In other words, the bean is instantiated (if not a
pre-instantiated singleton), its dependencies are set, and the relevant lif=
ecycle
methods (such as a <a class=3D"link" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-li=
fecycle-initializingbean" title=3D"Initialization callbacks">configured ini=
t method</a>
or the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-init=
ializingbean" title=3D"Initialization callbacks">InitializingBean callback =
method</a>)
are invoked.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-some-examples" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-some-example=
s"></a>Examples of dependency injection</h4></div></div></div>
<p>The following example uses XML-based configuration metadata for setter-b=
ased DI. A small
part of a Spring XML configuration file specifies some bean definitions:</p=
>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- setter injection using the nested re=
f element --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"beanOne"</span><span class=3D"hl-t=
ag">&gt;</span>
        <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribute">=
bean</span>=3D<span class=3D"hl-value">"anotherExampleBean"</span><span cla=
ss=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>

    <span class=3D"hl-comment">&lt;!-- setter injection using the neater re=
f attribute --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"beanTwo"</span> <span class=3D"hl-=
attribute">ref</span>=3D<span class=3D"hl-value">"yetAnotherBean"</span><sp=
an class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"integerProperty"</span> <span clas=
s=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"1"</span><span =
class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"anotherExampleBean"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"examples.AnotherBean"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"yetAnotherBean"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"examples.YetAnotherBean"</=
span><span class=3D"hl-tag">/&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ExampleBean {

    <span class=3D"hl-keyword">private</span> AnotherBean beanOne;

    <span class=3D"hl-keyword">private</span> YetAnotherBean beanTwo;

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> i;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setBeanOne(AnotherBean beanOne) {
        <span class=3D"hl-keyword">this</span>.beanOne =3D beanOne;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setBeanTwo(YetAnotherBean beanTwo) {
        <span class=3D"hl-keyword">this</span>.beanTwo =3D beanTwo;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setIntegerProperty(<span class=3D"hl-keyword">int</span> i) {
        <span class=3D"hl-keyword">this</span>.i =3D i;
    }
}</pre>
<p>In the preceding example, setters are declared to match against the prop=
erties specified
in the XML file. The following example uses constructor-based DI:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- constructor injection using the nest=
ed ref element --&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg&gt;</span>
        <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribute">=
bean</span>=3D<span class=3D"hl-value">"anotherExampleBean"</span><span cla=
ss=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/constructor-arg&gt;</span>

    <span class=3D"hl-comment">&lt;!-- constructor injection using the neat=
er ref attribute --&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">ref</span>=3D<span class=3D"hl-value">"yetAnotherBean"</span><span =
class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">type</span>=3D<span class=3D"hl-value">"int"</span> <span class=3D"=
hl-attribute">value</span>=3D<span class=3D"hl-value">"1"</span><span class=
=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"anotherExampleBean"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"examples.AnotherBean"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"yetAnotherBean"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"examples.YetAnotherBean"</=
span><span class=3D"hl-tag">/&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ExampleBean {

    <span class=3D"hl-keyword">private</span> AnotherBean beanOne;

    <span class=3D"hl-keyword">private</span> YetAnotherBean beanTwo;

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> i;

    <span class=3D"hl-keyword">public</span> ExampleBean(
        AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class=
=3D"hl-keyword">int</span> i) {
        <span class=3D"hl-keyword">this</span>.beanOne =3D anotherBean;
        <span class=3D"hl-keyword">this</span>.beanTwo =3D yetAnotherBean;
        <span class=3D"hl-keyword">this</span>.i =3D i;
    }
}</pre>
<p>The constructor arguments specified in the bean definition will be used =
as arguments to
the constructor of the <code class=3D"literal">ExampleBean</code>.</p>
<p>Now consider a variant of this example, where instead of using a constru=
ctor, Spring is
told to call a <code class=3D"literal">static</code> factory method to retu=
rn an instance of the object:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleBean"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"examples.ExampleBean"</span> <span class=3D"hl-attribute">factory-method</=
span>=3D<span class=3D"hl-value">"createInstance"</span><span class=3D"hl-t=
ag">&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">ref</span>=3D<span class=3D"hl-value">"anotherExampleBean"</span><s=
pan class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">ref</span>=3D<span class=3D"hl-value">"yetAnotherBean"</span><span =
class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"1"</span><span class=3D"hl=
-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"anotherExampleBean"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"examples.AnotherBean"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"yetAnotherBean"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"examples.YetAnotherBean"</=
span><span class=3D"hl-tag">/&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ExampleBean {

    <span class=3D"hl-comment">// a private constructor</span>
    <span class=3D"hl-keyword">private</span> ExampleBean(...) {
        ...
    }

    <span class=3D"hl-comment">// a static factory method; the arguments to=
 this method can be</span>
    <span class=3D"hl-comment">// considered the dependencies of the bean t=
hat is returned,</span>
    <span class=3D"hl-comment">// regardless of how those arguments are act=
ually used.</span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> ExampleBean createInstance (
        AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class=
=3D"hl-keyword">int</span> i) {

        ExampleBean eb =3D <span class=3D"hl-keyword">new</span> ExampleBea=
n (...);
        <span class=3D"hl-comment">// some other operations...</span>
        <span class=3D"hl-keyword">return</span> eb;
    }
}</pre>
<p>Arguments to the <code class=3D"literal">static</code> factory method ar=
e supplied via <code class=3D"literal">&lt;constructor-arg/&gt;</code> elem=
ents,
exactly the same as if a constructor had actually been used. The type of th=
e class being
returned by the factory method does not have to be of the same type as the =
class that
contains the <code class=3D"literal">static</code> factory method, although=
 in this example it is. An instance
(non-static) factory method would be used in an essentially identical fashi=
on (aside
from the use of the <code class=3D"literal">factory-bean</code> attribute i=
nstead of the <code class=3D"literal">class</code> attribute), so
details will not be discussed here.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-properties-detailed" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-factory-properties-detailed"></a>7.4.2&nbsp;Dependencies and configuratio=
n in detail</h3></div></div></div>
<p>As mentioned in the previous section, you can define bean properties and=
 constructor
arguments as references to other managed beans (collaborators), or as value=
s defined
inline. Spring=92s XML-based configuration metadata supports sub-element ty=
pes within its
<code class=3D"literal">&lt;property/&gt;</code> and <code class=3D"literal=
">&lt;constructor-arg/&gt;</code> elements for this purpose.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-value-element" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-value-elemen=
t"></a>Straight values (primitives, Strings, and so on)</h4></div></div></d=
iv>
<p>The <code class=3D"literal">value</code> attribute of the <code class=3D=
"literal">&lt;property/&gt;</code> element specifies a property or construc=
tor
argument as a human-readable string representation. Spring=92s
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#core-convert-ConversionService-API"=
 title=3D"9.5.4&nbsp;ConversionService API">conversion service</a> is used =
to convert these
values from a <code class=3D"literal">String</code> to the actual type of t=
he property or argument.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myDataSource"<=
/span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value"=
>"org.apache.commons.dbcp.BasicDataSource"</span> <span class=3D"hl-attribu=
te">destroy-method</span>=3D<span class=3D"hl-value">"close"</span><span cl=
ass=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- results in a setDriverClassName(Stri=
ng) call --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span clas=
s=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"com.mysql.jdbc.=
Driver"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-attr=
ibute">value</span>=3D<span class=3D"hl-value">"jdbc:mysql://localhost:3306=
/mydb"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"username"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"root"</span><span clas=
s=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"password"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"masterkaoli"</span><sp=
an class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The following example uses the <a class=3D"link" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#b=
eans-p-namespace" title=3D"XML shortcut with the p-namespace">p-namespace</=
a> for even more succinct
XML configuration.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"http://www=
.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:p</span>=3D<span class=3D"hl-value">=
"http://www.springframework.org/schema/p"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"myDataSource"</span> <span class=3D"hl-a=
ttribute">class</span>=3D<span class=3D"hl-value">"org.apache.commons.dbcp.=
BasicDataSource"</span>
        <span class=3D"hl-attribute">destroy-method</span>=3D<span class=3D=
"hl-value">"close"</span>
        <span class=3D"hl-attribute">p:driverClassName</span>=3D<span class=
=3D"hl-value">"com.mysql.jdbc.Driver"</span>
        <span class=3D"hl-attribute">p:url</span>=3D<span class=3D"hl-value=
">"jdbc:mysql://localhost:3306/mydb"</span>
        <span class=3D"hl-attribute">p:username</span>=3D<span class=3D"hl-=
value">"root"</span>
        <span class=3D"hl-attribute">p:password</span>=3D<span class=3D"hl-=
value">"masterkaoli"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The preceding XML is more succinct; however, typos are discovered at run=
time rather than
design time, unless you use an IDE such as <a class=3D"ulink" href=3D"http:=
//www.jetbrains.com/idea/" target=3D"_top">IntelliJ
IDEA</a> or the <a class=3D"ulink" href=3D"https://spring.io/tools/sts" tar=
get=3D"_top">Spring Tool Suite</a> (STS)
that support automatic property completion when you create bean definitions=
. Such IDE
assistance is highly recommended.</p>
<p>You can also configure a <code class=3D"literal">java.util.Properties</c=
ode> instance as:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"mappings"</spa=
n>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</spa=
n><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- typed as a java.util.Properties --&g=
t;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"properties"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;value&gt;</span>
            jdbc.driver.className=3Dcom.mysql.jdbc.Driver
            jdbc.url=3Djdbc:mysql://localhost:3306/mydb
        <span class=3D"hl-tag">&lt;/value&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The Spring container converts the text inside the <code class=3D"literal=
">&lt;value/&gt;</code> element into a
<code class=3D"literal">java.util.Properties</code> instance by using the J=
avaBeans <code class=3D"literal">PropertyEditor</code> mechanism. This
is a nice shortcut, and is one of a few places where the Spring team do fav=
or the use of
the nested <code class=3D"literal">&lt;value/&gt;</code> element over the <=
code class=3D"literal">value</code> attribute style.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-idref-element" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-idref-elemen=
t"></a>The idref element</h5></div></div></div>
<p>The <code class=3D"literal">idref</code> element is simply an error-proo=
f way to pass the <span class=3D"emphasis"><em>id</em></span> (string value=
 - not
a reference) of another bean in the container to a <code class=3D"literal">=
&lt;constructor-arg/&gt;</code> or <code class=3D"literal">&lt;property/&gt=
;</code>
element.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"theTargetBean"=
</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"..."</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"theClientBean"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"h=
l-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetName"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;idref</span> <span class=3D"hl-attribute=
">bean</span>=3D<span class=3D"hl-value">"theTargetBean"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The above bean definition snippet is <span class=3D"emphasis"><em>exactl=
y</em></span> equivalent (at runtime) to the
following snippet:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"theTargetBean"=
</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"..."</span><span class=3D"hl-tag"> /&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"client"</span> <span class=3D"hl-attribute">=
class</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"hl-tag">=
&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetName"</span> <span class=3D"=
hl-attribute">value</span>=3D<span class=3D"hl-value">"theTargetBean"</span=
><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The first form is preferable to the second, because using the <code clas=
s=3D"literal">idref</code> tag allows the
container to validate <span class=3D"emphasis"><em>at deployment time</em><=
/span> that the referenced, named bean actually
exists. In the second variation, no validation is performed on the value th=
at is passed
to the <code class=3D"literal">targetName</code> property of the <code clas=
s=3D"literal">client</code> bean. Typos are only discovered (with most
likely fatal results) when the <code class=3D"literal">client</code> bean i=
s actually instantiated. If the <code class=3D"literal">client</code>
bean is a <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes" tit=
le=3D"7.5&nbsp;Bean scopes">prototype</a> bean, this typo and the resulting=
 exception
may only be discovered long after the container is deployed.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">local</code> attribute on the <code class=3D=
"literal">idref</code> element is no longer supported in the 4.0 beans xsd
since it does not provide value over a regular <code class=3D"literal">bean=
</code> reference anymore. Simply change
your existing <code class=3D"literal">idref local</code> references to <cod=
e class=3D"literal">idref bean</code> when upgrading to the 4.0 schema.</p>
</td></tr></tbody></table></div>
<p>A common place (at least in versions earlier than Spring 2.0) where the =
<code class=3D"literal">&lt;idref/&gt;</code> element
brings value is in the configuration of <a class=3D"link" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#aop-pfb-1" title=3D"12.5.1&nbsp;Basics">AOP interceptors</a> in a
<code class=3D"literal">ProxyFactoryBean</code> bean definition. Using <cod=
e class=3D"literal">&lt;idref/&gt;</code> elements when you specify the
interceptor names prevents you from misspelling an interceptor id.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-ref-element" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-ref-element"><=
/a>References to other beans (collaborators)</h4></div></div></div>
<p>The <code class=3D"literal">ref</code> element is the final element insi=
de a <code class=3D"literal">&lt;constructor-arg/&gt;</code> or <code class=
=3D"literal">&lt;property/&gt;</code>
definition element. Here you set the value of the specified property of a b=
ean to be a
reference to another bean (a collaborator) managed by the container. The re=
ferenced bean
is a dependency of the bean whose property will be set, and it is initializ=
ed on demand
as needed before the property is set. (If the collaborator is a singleton b=
ean, it may
be initialized already by the container.) All references are ultimately a r=
eference to
another object. Scoping and validation depend on whether you specify the id=
/name of the
other object through the <code class=3D"literal">bean</code>, <code class=
=3D"literal">local,</code> or <code class=3D"literal">parent</code> attribu=
tes.</p>
<p>Specifying the target bean through the <code class=3D"literal">bean</cod=
e> attribute of the <code class=3D"literal">&lt;ref/&gt;</code> tag is the =
most
general form, and allows creation of a reference to any bean in the same co=
ntainer or
parent container, regardless of whether it is in the same XML file. The val=
ue of the
<code class=3D"literal">bean</code> attribute may be the same as the <code =
class=3D"literal">id</code> attribute of the target bean, or as one of
the values in the <code class=3D"literal">name</code> attribute of the targ=
et bean.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;ref</span> <span c=
lass=3D"hl-attribute">bean</span>=3D<span class=3D"hl-value">"someBean"</sp=
an><span class=3D"hl-tag">/&gt;</span></pre>
<p>Specifying the target bean through the <code class=3D"literal">parent</c=
ode> attribute creates a reference to a bean
that is in a parent container of the current container. The value of the <c=
ode class=3D"literal">parent</code>
attribute may be the same as either the <code class=3D"literal">id</code> a=
ttribute of the target bean, or one of the
values in the <code class=3D"literal">name</code> attribute of the target b=
ean, and the target bean must be in a
parent container of the current one. You use this bean reference variant ma=
inly when you
have a hierarchy of containers and you want to wrap an existing bean in a p=
arent
container with a proxy that will have the same name as the parent bean.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- in the par=
ent context --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"accountService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"com.foo.SimpleAccountServi=
ce"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- insert dependencies as required as h=
ere --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- in the chi=
ld (descendant) context --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"accountService"</span> <span class=3D"hl-att=
ribute">&lt;!--</span> <span class=3D"hl-attribute">bean</span> <span class=
=3D"hl-attribute">name</span> <span class=3D"hl-attribute">is</span> <span =
class=3D"hl-attribute">the</span> <span class=3D"hl-attribute">same</span> =
<span class=3D"hl-attribute">as</span> <span class=3D"hl-attribute">the</sp=
an> <span class=3D"hl-attribute">parent</span> <span class=3D"hl-attribute"=
>bean</span> <span class=3D"hl-attribute">--&gt;</span>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.aop.framework.ProxyFactoryBean"</span><span class=3D"hl-=
tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span><span class=3D"hl-ta=
g">&gt;</span>
        <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribute">=
parent</span>=3D<span class=3D"hl-value">"accountService"</span><span class=
=3D"hl-tag">/&gt;</span> <span class=3D"hl-comment">&lt;!-- notice how we r=
efer to the parent bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-comment">&lt;!-- insert other configuration and depen=
dencies as required here --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">local</code> attribute on the <code class=3D=
"literal">ref</code> element is no longer supported in the 4.0 beans xsd
since it does not provide value over a regular <code class=3D"literal">bean=
</code> reference anymore. Simply change
your existing <code class=3D"literal">ref local</code> references to <code =
class=3D"literal">ref bean</code> when upgrading to the 4.0 schema.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-inner-beans" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-inner-beans"><=
/a>Inner beans</h4></div></div></div>
<p>A <code class=3D"literal">&lt;bean/&gt;</code> element inside the <code =
class=3D"literal">&lt;property/&gt;</code> or <code class=3D"literal">&lt;c=
onstructor-arg/&gt;</code> elements defines a
so-called <span class=3D"emphasis"><em>inner bean</em></span>.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"outer"</span> =
<span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"..."<=
/span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- instead of using a reference to a ta=
rget bean, simply define the target bean inline --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span><span class=3D"hl-ta=
g">&gt;</span>
        <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"com.example.Person"</span><span c=
lass=3D"hl-tag">&gt;</span> <span class=3D"hl-comment">&lt;!-- this is the =
inner bean --&gt;</span>
            <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-at=
tribute">name</span>=3D<span class=3D"hl-value">"name"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Fiona Apple"</sp=
an><span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-at=
tribute">name</span>=3D<span class=3D"hl-value">"age"</span> <span class=3D=
"hl-attribute">value</span>=3D<span class=3D"hl-value">"25"</span><span cla=
ss=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/bean&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>An inner bean definition does not require a defined id or name; if speci=
fied, the container
does not use such a value as an identifier. The container also ignores the =
<code class=3D"literal">scope</code> flag on
creation: Inner beans are <span class=3D"emphasis"><em>always</em></span> a=
nonymous and they are <span class=3D"emphasis"><em>always</em></span> creat=
ed with the outer
bean. It is <span class=3D"emphasis"><em>not</em></span> possible to inject=
 inner beans into collaborating beans other than into
the enclosing bean or to access them independently.</p>
<p>As a corner case, it is possible to receive destruction callbacks from a=
 custom scope, e.g.
for a request-scoped inner bean contained within a singleton bean: The crea=
tion of the inner
bean instance will be tied to its containing bean, but destruction callback=
s allow it to
participate in the request scope=92s lifecycle. This is not a common scenar=
io; inner beans
typically simply share their containing bean=92s scope.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-collection-elements" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-collec=
tion-elements"></a>Collections</h4></div></div></div>
<p>In the <code class=3D"literal">&lt;list/&gt;</code>, <code class=3D"lite=
ral">&lt;set/&gt;</code>, <code class=3D"literal">&lt;map/&gt;</code>, and =
<code class=3D"literal">&lt;props/&gt;</code> elements, you set the propert=
ies
and arguments of the Java <code class=3D"literal">Collection</code> types <=
code class=3D"literal">List</code>, <code class=3D"literal">Set</code>, <co=
de class=3D"literal">Map</code>, and <code class=3D"literal">Properties</co=
de>,
respectively.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"moreComplexObj=
ect"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"example.ComplexObject"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- results in a setAdminEmails(java.uti=
l.Properties) call --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"adminEmails"</span><span class=3D"=
hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;props&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"administrator"</span><span clas=
s=3D"hl-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/email-p=
rotection" class=3D"__cf_email__" data-cfemail=3D"0160656c686f6872757360756=
e73416479606c716d642f6e7366">[email&nbsp;protected]</a><span class=3D"hl-ta=
g">&lt;/prop&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"support"</span><span class=3D"h=
l-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/email-protect=
ion" class=3D"__cf_email__" data-cfemail=3D"a7d4d2d7d7c8d5d3e7c2dfc6cad7cbc=
289c8d5c0">[email&nbsp;protected]</a><span class=3D"hl-tag">&lt;/prop&gt;</=
span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"development"</span><span class=
=3D"hl-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/email-pr=
otection" class=3D"__cf_email__" data-cfemail=3D"b2d6d7c4d7deddc2dfd7dcc6f2=
d7cad3dfc2ded79cddc0d5">[email&nbsp;protected]</a><span class=3D"hl-tag">&l=
t;/prop&gt;</span>
        <span class=3D"hl-tag">&lt;/props&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-comment">&lt;!-- results in a setSomeList(java.util.L=
ist) call --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"someList"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>a list element follo=
wed by a reference<span class=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribu=
te">bean</span>=3D<span class=3D"hl-value">"myDataSource"</span><span class=
=3D"hl-tag"> /&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-comment">&lt;!-- results in a setSomeMap(java.util.Ma=
p) call --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"someMap"</span><span class=3D"hl-t=
ag">&gt;</span>
        <span class=3D"hl-tag">&lt;map&gt;</span>
            <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-attri=
bute">key</span>=3D<span class=3D"hl-value">"an entry"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"just some string=
"</span><span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-attri=
bute">key</span> =3D<span class=3D"hl-value">"a ref"</span> <span class=3D"=
hl-attribute">value-ref</span>=3D<span class=3D"hl-value">"myDataSource"</s=
pan><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/map&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-comment">&lt;!-- results in a setSomeSet(java.util.Se=
t) call --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"someSet"</span><span class=3D"hl-t=
ag">&gt;</span>
        <span class=3D"hl-tag">&lt;set&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>just some string<spa=
n class=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribu=
te">bean</span>=3D<span class=3D"hl-value">"myDataSource"</span><span class=
=3D"hl-tag"> /&gt;</span>
        <span class=3D"hl-tag">&lt;/set&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p><span class=3D"emphasis"><em>The value of a map key or value, or a set v=
alue, can also again be any of the
following elements:</em></span></p>
<pre class=3D"programlisting">bean | ref | idref | list | set | map | props=
 | value | null</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-collection-elements-merging" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-collection-elements-merging"></a>Collection merging</h5></div></div></div=
>
<p>The Spring container also supports the <span class=3D"emphasis"><em>merg=
ing</em></span> of collections. An application
developer can define a parent-style <code class=3D"literal">&lt;list/&gt;</=
code>, <code class=3D"literal">&lt;map/&gt;</code>, <code class=3D"literal"=
>&lt;set/&gt;</code> or <code class=3D"literal">&lt;props/&gt;</code> eleme=
nt,
and have child-style <code class=3D"literal">&lt;list/&gt;</code>, <code cl=
ass=3D"literal">&lt;map/&gt;</code>, <code class=3D"literal">&lt;set/&gt;</=
code> or <code class=3D"literal">&lt;props/&gt;</code> elements inherit and
override values from the parent collection. That is, the child collection=
=92s values are
the result of merging the elements of the parent and child collections, wit=
h the child=92s
collection elements overriding values specified in the parent collection.</=
p>
<p><span class=3D"emphasis"><em>This section on merging discusses the paren=
t-child bean mechanism. Readers unfamiliar
with parent and child bean definitions may wish to read the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-child-bean-definitions" title=
=3D"7.7&nbsp;Bean definition inheritance">relevant section</a> before conti=
nuing.</em></span></p>
<p>The following example demonstrates collection merging:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"parent"</span> <span class=3D"hl-attribu=
te">abstract</span>=3D<span class=3D"hl-value">"true"</span> <span class=3D=
"hl-attribute">class</span>=3D<span class=3D"hl-value">"example.ComplexObje=
ct"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"adminEmails"</span><span class=
=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;props&gt;</span>
                <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-at=
tribute">key</span>=3D<span class=3D"hl-value">"administrator"</span><span =
class=3D"hl-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/ema=
il-protection" class=3D"__cf_email__" data-cfemail=3D"3150555c585f584245435=
0455e43715449505c415d541f525e5c">[email&nbsp;protected]</a><span class=3D"h=
l-tag">&lt;/prop&gt;</span>
                <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-at=
tribute">key</span>=3D<span class=3D"hl-value">"support"</span><span class=
=3D"hl-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/email-pr=
otection" class=3D"__cf_email__" data-cfemail=3D"f1828481819e8385b19489909c=
819d94df929e9c">[email&nbsp;protected]</a><span class=3D"hl-tag">&lt;/prop&=
gt;</span>
            <span class=3D"hl-tag">&lt;/props&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"child"</span> <span class=3D"hl-attribut=
e">parent</span>=3D<span class=3D"hl-value">"parent"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"adminEmails"</span><span class=
=3D"hl-tag">&gt;</span>
            <span class=3D"hl-comment">&lt;!-- the merge is specified on th=
e child collection definition --&gt;</span>
            <span class=3D"hl-tag">&lt;props</span> <span class=3D"hl-attri=
bute">merge</span>=3D<span class=3D"hl-value">"true"</span><span class=3D"h=
l-tag">&gt;</span>
                <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-at=
tribute">key</span>=3D<span class=3D"hl-value">"sales"</span><span class=3D=
"hl-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/email-prote=
ction" class=3D"__cf_email__" data-cfemail=3D"3340525f564073564b525e435f561=
d505c5e">[email&nbsp;protected]</a><span class=3D"hl-tag">&lt;/prop&gt;</sp=
an>
                <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-at=
tribute">key</span>=3D<span class=3D"hl-value">"support"</span><span class=
=3D"hl-tag">&gt;</span><a href=3D"https://docs.spring.io/cdn-cgi/l/email-pr=
otection" class=3D"__cf_email__" data-cfemail=3D"fc8f898c8c938e88bc99849d91=
8c9099d29f93d28997">[email&nbsp;protected]</a><span class=3D"hl-tag">&lt;/p=
rop&gt;</span>
            <span class=3D"hl-tag">&lt;/props&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;beans&gt;</span></pre>
<p>Notice the use of the <code class=3D"literal">merge=3Dtrue</code> attrib=
ute on the <code class=3D"literal">&lt;props/&gt;</code> element of the
<code class=3D"literal">adminEmails</code> property of the <code class=3D"l=
iteral">child</code> bean definition. When the <code class=3D"literal">chil=
d</code> bean is resolved
and instantiated by the container, the resulting instance has an <code clas=
s=3D"literal">adminEmails</code>
<code class=3D"literal">Properties</code> collection that contains the resu=
lt of the merging of the child=92s
<code class=3D"literal">adminEmails</code> collection with the parent=92s <=
code class=3D"literal">adminEmails</code> collection.</p>
<pre class=3D"literallayout"><a href=3D"https://docs.spring.io/cdn-cgi/l/em=
ail-protection" class=3D"__cf_email__" data-cfemail=3D"aecfcac3c7c0c7dddadc=
cfdac1dc93cfcac3c7c0c7dddadccfdac1dceecbd6cfc3dec2cb80cdc1c3">[email&nbsp;p=
rotected]</a>
<a href=3D"https://docs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf=
_email__" data-cfemail=3D"097a68656c7a347a68656c7a496c71686479656c276a6664"=
>[email&nbsp;protected]</a>
<a href=3D"https://docs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf=
_email__" data-cfemail=3D"8cfff9fcfce3fef8b1fff9fcfce3fef8cce9f4ede1fce0e9a=
2efe3a2f9e7">[email&nbsp;protected]</a></pre>
<p>The child <code class=3D"literal">Properties</code> collection=92s value=
 set inherits all property elements from the
parent <code class=3D"literal">&lt;props/&gt;</code>, and the child=92s val=
ue for the <code class=3D"literal">support</code> value overrides the value=
 in
the parent collection.</p>
<p>This merging behavior applies similarly to the <code class=3D"literal">&=
lt;list/&gt;</code>, <code class=3D"literal">&lt;map/&gt;</code>, and <code=
 class=3D"literal">&lt;set/&gt;</code>
collection types. In the specific case of the <code class=3D"literal">&lt;l=
ist/&gt;</code> element, the semantics
associated with the <code class=3D"literal">List</code> collection type, th=
at is, the notion of an <code class=3D"literal">ordered</code>
collection of values, is maintained; the parent=92s values precede all of t=
he child list=92s
values. In the case of the <code class=3D"literal">Map</code>, <code class=
=3D"literal">Set</code>, and <code class=3D"literal">Properties</code> coll=
ection types, no ordering
exists. Hence no ordering semantics are in effect for the collection types =
that underlie
the associated <code class=3D"literal">Map</code>, <code class=3D"literal">=
Set</code>, and <code class=3D"literal">Properties</code> implementation ty=
pes that the container
uses internally.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-collection-merge-limitations" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bea=
ns-collection-merge-limitations"></a>Limitations of collection merging</h5>=
</div></div></div>
<p>You cannot merge different collection types (such as a <code class=3D"li=
teral">Map</code> and a <code class=3D"literal">List</code>), and if you
do attempt to do so an appropriate <code class=3D"literal">Exception</code>=
 is thrown. The <code class=3D"literal">merge</code> attribute must be
specified on the lower, inherited, child definition; specifying the <code c=
lass=3D"literal">merge</code> attribute on
a parent collection definition is redundant and will not result in the desi=
red merging.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-collection-elements-strongly-typed" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-collection-elements-strongly-typed"></a>Strongly-typed collection<=
/h5></div></div></div>
<p>With the introduction of generic types in Java 5, you can use strongly t=
yped collections.
That is, it is possible to declare a <code class=3D"literal">Collection</co=
de> type such that it can only contain
<code class=3D"literal">String</code> elements (for example). If you are us=
ing Spring to dependency-inject a
strongly-typed <code class=3D"literal">Collection</code> into a bean, you c=
an take advantage of Spring=92s
type-conversion support such that the elements of your strongly-typed <code=
 class=3D"literal">Collection</code>
instances are converted to the appropriate type prior to being added to the=
 <code class=3D"literal">Collection</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Foo {

    <span class=3D"hl-keyword">private</span> Map&lt;String, Float&gt; acco=
unts;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setAccounts(Map&lt;String, Float&gt; accounts) {
        <span class=3D"hl-keyword">this</span>.accounts =3D accounts;
    }
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"foo"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Foo"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"accounts"</span><span class=3D=
"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;map&gt;</span>
                <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"one"</span> <span class=3D=
"hl-attribute">value</span>=3D<span class=3D"hl-value">"9.99"</span><span c=
lass=3D"hl-tag">/&gt;</span>
                <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"two"</span> <span class=3D=
"hl-attribute">value</span>=3D<span class=3D"hl-value">"2.75"</span><span c=
lass=3D"hl-tag">/&gt;</span>
                <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"six"</span> <span class=3D=
"hl-attribute">value</span>=3D<span class=3D"hl-value">"3.99"</span><span c=
lass=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;/map&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>When the <code class=3D"literal">accounts</code> property of the <code c=
lass=3D"literal">foo</code> bean is prepared for injection, the generics
information about the element type of the strongly-typed <code class=3D"lit=
eral">Map&lt;String, Float&gt;</code> is
available by reflection. Thus Spring=92s type conversion infrastructure rec=
ognizes the
various value elements as being of type <code class=3D"literal">Float</code=
>, and the string values <code class=3D"literal">9.99, 2.75</code>, and
<code class=3D"literal">3.99</code> are converted into an actual <code clas=
s=3D"literal">Float</code> type.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-null-element" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-null-element"=
></a>Null and empty string values</h4></div></div></div>
<p>Spring treats empty arguments for properties and the like as empty <code=
 class=3D"literal">Strings</code>. The
following XML-based configuration metadata snippet sets the email property =
to the empty
<code class=3D"literal">String</code> value ("").</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"ExampleBean=
"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"email"</span> <span class=3D"hl-at=
tribute">value</span>=3D<span class=3D"hl-value">""</span><span class=3D"hl=
-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The preceding example is equivalent to the following Java code:</p>
<pre class=3D"programlisting">exampleBean.setEmail(<span class=3D"hl-string=
">""</span>);</pre>
<p>The <code class=3D"literal">&lt;null/&gt;</code> element handles <code c=
lass=3D"literal">null</code> values. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"ExampleBean=
"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"email"</span><span class=3D"hl-tag=
">&gt;</span>
        <span class=3D"hl-tag">&lt;null/&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The above configuration is equivalent to the following Java code:</p>
<pre class=3D"programlisting">exampleBean.setEmail(null);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-p-namespace" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-p-namespace"><=
/a>XML shortcut with the p-namespace</h4></div></div></div>
<p>The p-namespace enables you to use the <code class=3D"literal">bean</cod=
e> element=92s attributes, instead of nested
<code class=3D"literal">&lt;property/&gt;</code> elements, to describe your=
 property values and/or collaborating beans.</p>
<p>Spring supports extensible configuration formats <a class=3D"link" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#xsd-configuration" title=3D"41.&nbsp;XML Schema-based con=
figuration">with namespaces</a>, which are
based on an XML Schema definition. The <code class=3D"literal">beans</code>=
 configuration format discussed in this
chapter is defined in an XML Schema document. However, the p-namespace is n=
ot defined in
an XSD file and exists only in the core of Spring.</p>
<p>The following example shows two XML snippets that resolve to the same re=
sult: The first
uses standard XML format and the second uses the p-namespace.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"http://www=
.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:p</span>=3D<span class=3D"hl-value">=
"http://www.springframework.org/schema/p"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">nam=
e</span>=3D<span class=3D"hl-value">"classic"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"com.example.ExampleBean"</s=
pan><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"email"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"<a href=3D"https://do=
cs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfemai=
l=3D"d2b4bdbd92b0b3a0fcb1bdbf">[email&nbsp;protected]</a>"</span><span clas=
s=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">nam=
e</span>=3D<span class=3D"hl-value">"p-namespace"</span> <span class=3D"hl-=
attribute">class</span>=3D<span class=3D"hl-value">"com.example.ExampleBean=
"</span>
        <span class=3D"hl-attribute">p:email</span>=3D<span class=3D"hl-val=
ue">"<a href=3D"https://docs.spring.io/cdn-cgi/l/email-protection" class=3D=
"__cf_email__" data-cfemail=3D"03656c6c436162712d606c6e">[email&nbsp;protec=
ted]</a>"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The example shows an attribute in the p-namespace called email in the be=
an definition.
This tells Spring to include a property declaration. As previously mentione=
d, the
p-namespace does not have a schema definition, so you can set the name of t=
he attribute
to the property name.</p>
<p>This next example includes two more bean definitions that both have a re=
ference to
another bean:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"http://www=
.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:p</span>=3D<span class=3D"hl-value">=
"http://www.springframework.org/schema/p"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">nam=
e</span>=3D<span class=3D"hl-value">"john-classic"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"com.example.Person"</s=
pan><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"John Doe"</span><span =
class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"spouse"</span> <span class=3D"=
hl-attribute">ref</span>=3D<span class=3D"hl-value">"jane"</span><span clas=
s=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">nam=
e</span>=3D<span class=3D"hl-value">"john-modern"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"com.example.Person"</span>
        <span class=3D"hl-attribute">p:name</span>=3D<span class=3D"hl-valu=
e">"John Doe"</span>
        <span class=3D"hl-attribute">p:spouse-ref</span>=3D<span class=3D"h=
l-value">"jane"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">nam=
e</span>=3D<span class=3D"hl-value">"jane"</span> <span class=3D"hl-attribu=
te">class</span>=3D<span class=3D"hl-value">"com.example.Person"</span><spa=
n class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"Jane Doe"</span><span =
class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>As you can see, this example includes not only a property value using th=
e p-namespace,
but also uses a special format to declare property references. Whereas the =
first bean
definition uses <code class=3D"literal">&lt;property name=3D"spouse" ref=3D=
"jane"/&gt;</code> to create a reference from bean
<code class=3D"literal">john</code> to bean <code class=3D"literal">jane</c=
ode>, the second bean definition uses <code class=3D"literal">p:spouse-ref=
=3D"jane"</code> as an
attribute to do the exact same thing. In this case <code class=3D"literal">=
spouse</code> is the property name,
whereas the <code class=3D"literal">-ref</code> part indicates that this is=
 not a straight value but rather a
reference to another bean.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The p-namespace is not as flexible as the standard XML format. For examp=
le, the format
for declaring property references clashes with properties that end in <code=
 class=3D"literal">Ref</code>, whereas the
standard XML format does not. We recommend that you choose your approach ca=
refully and
communicate this to your team members, to avoid producing XML documents tha=
t use all
three approaches at the same time.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-c-namespace" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-c-namespace"><=
/a>XML shortcut with the c-namespace</h4></div></div></div>
<p>Similar to the <a class=3D"xref" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-p-namespace=
" title=3D"XML shortcut with the p-namespace">the section called =93XML sho=
rtcut with the p-namespace=94</a>, the <span class=3D"emphasis"><em>c-names=
pace</em></span>, newly introduced in Spring
3.1, allows usage of inlined attributes for configuring the constructor arg=
uments rather
then nested <code class=3D"literal">constructor-arg</code> elements.</p>
<p>Let=92s review the examples from <a class=3D"xref" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-constructor-injection" title=3D"Constructor-based dependency injecti=
on">the section called =93Constructor-based dependency injection=94</a> wit=
h the <code class=3D"literal">c:</code> namespace:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"http://www=
.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:c</span>=3D<span class=3D"hl-value">=
"http://www.springframework.org/schema/c"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"bar"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Bar"</span><span class=3D"hl-=
tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"baz"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Baz"</span><span class=3D"hl-=
tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- traditional declaration --&gt;</span=
>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"foo"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Foo"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"bar"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"baz"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"<a href=3D"https://doc=
s.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfemail=
=3D"a9cfc6c6e9cbc8db87cac6c4">[email&nbsp;protected]</a>"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- c-namespace declaration --&gt;</span=
>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"foo"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Foo"</span> <span class=3D"hl=
-attribute">c:bar-ref</span>=3D<span class=3D"hl-value">"bar"</span> <span =
class=3D"hl-attribute">c:baz-ref</span>=3D<span class=3D"hl-value">"baz"</s=
pan> <span class=3D"hl-attribute">c:email</span>=3D<span class=3D"hl-value"=
>"<a href=3D"https://docs.spring.io/cdn-cgi/l/email-protection" class=3D"__=
cf_email__" data-cfemail=3D"a1c7cecee1c3c0d38fc2cecc">[email&nbsp;protected=
]</a>"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The <code class=3D"literal">c:</code> namespace uses the same convention=
s as the <code class=3D"literal">p:</code> one (trailing <code class=3D"lit=
eral">-ref</code> for bean
references) for setting the constructor arguments by their names. And just =
as well, it
needs to be declared even though it is not defined in an XSD schema (but it=
 exists
inside the Spring core).</p>
<p>For the rare cases where the constructor argument names are not availabl=
e (usually if
the bytecode was compiled without debugging information), one can use fallb=
ack to the
argument indexes:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- c-namespac=
e index declaration --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"foo"</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"x.y.Foo"</span> <span class=3D"hl-att=
ribute">c:_0-ref</span>=3D<span class=3D"hl-value">"bar"</span> <span class=
=3D"hl-attribute">c:_1-ref</span>=3D<span class=3D"hl-value">"baz"</span><s=
pan class=3D"hl-tag">/&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Due to the XML grammar, the index notation requires the presence of the =
leading <code class=3D"literal">_</code> as
XML attribute names cannot start with a number (even though some IDE allow =
it).</p>
</td></tr></tbody></table></div>
<p>In practice, the constructor resolution
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-ctor-arguments-resolu=
tion" title=3D"Constructor argument resolution">mechanism</a> is quite effi=
cient in matching
arguments so unless one really needs to, we recommend using the name notati=
on
through-out your configuration.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-compound-property-names" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-co=
mpound-property-names"></a>Compound property names</h4></div></div></div>
<p>You can use compound or nested property names when you set bean properti=
es, as long as
all components of the path except the final property name are not <code cla=
ss=3D"literal">null</code>. Consider the
following bean definition.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"foo"</span> <s=
pan class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"foo.Bar=
"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"fred.bob.sammy"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"123"</span><span=
 class=3D"hl-tag"> /&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The <code class=3D"literal">foo</code> bean has a <code class=3D"literal=
">fred</code> property, which has a <code class=3D"literal">bob</code> prop=
erty, which has a <code class=3D"literal">sammy</code>
property, and that final <code class=3D"literal">sammy</code> property is b=
eing set to the value <code class=3D"literal">123</code>. In order for
this to work, the <code class=3D"literal">fred</code> property of <code cla=
ss=3D"literal">foo</code>, and the <code class=3D"literal">bob</code> prope=
rty of <code class=3D"literal">fred</code> must not be
<code class=3D"literal">null</code> after the bean is constructed, or a <co=
de class=3D"literal">NullPointerException</code> is thrown.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-dependson" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-=
dependson"></a>7.4.3&nbsp;Using depends-on</h3></div></div></div>
<p>If a bean is a dependency of another that usually means that one bean is=
 set as a
property of another. Typically you accomplish this with the <a class=3D"lin=
k" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-ref-element" title=3D"References to other be=
ans (collaborators)"><code class=3D"literal">&lt;ref/&gt;</code>
element</a> in XML-based configuration metadata. However, sometimes depende=
ncies between
beans are less direct; for example, a static initializer in a class needs t=
o be
triggered, such as database driver registration. The <code class=3D"literal=
">depends-on</code> attribute can
explicitly force one or more beans to be initialized before the bean using =
this element
is initialized. The following example uses the <code class=3D"literal">depe=
nds-on</code> attribute to express a
dependency on a single bean:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"beanOne"</span=
> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"Exa=
mpleBean"</span> <span class=3D"hl-attribute">depends-on</span>=3D<span cla=
ss=3D"hl-value">"manager"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"manager"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"ManagerBean"</span><span class=3D=
"hl-tag"> /&gt;</span></pre>
<p>To express a dependency on multiple beans, supply a list of bean names a=
s the value of
the <code class=3D"literal">depends-on</code> attribute, with commas, white=
space and semicolons, used as valid
delimiters:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"beanOne"</span=
> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"Exa=
mpleBean"</span> <span class=3D"hl-attribute">depends-on</span>=3D<span cla=
ss=3D"hl-value">"manager,accountDao"</span><span class=3D"hl-tag">&gt;</spa=
n>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"manager"</span> <span class=3D"hl-=
attribute">ref</span>=3D<span class=3D"hl-value">"manager"</span><span clas=
s=3D"hl-tag"> /&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"manager"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"ManagerBean"</span><span class=3D=
"hl-tag"> /&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"accountDao"</span> <span class=3D"hl-attribu=
te">class</span>=3D<span class=3D"hl-value">"x.y.jdbc.JdbcAccountDao"</span=
><span class=3D"hl-tag"> /&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">depends-on</code> attribute in the bean defi=
nition can specify both an initialization-time
dependency and, in the case of <a class=3D"link" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-factory-scopes-singleton" title=3D"7.5.1&nbsp;The singleton scope">single=
ton</a> beans only,
a corresponding destruction-time dependency. Dependent beans that define a =
<code class=3D"literal">depends-on</code>
relationship with a given bean are destroyed first, prior to the given bean=
 itself being
destroyed. Thus <code class=3D"literal">depends-on</code> can also control =
shutdown order.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-lazy-init" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-=
lazy-init"></a>7.4.4&nbsp;Lazy-initialized beans</h3></div></div></div>
<p>By default, <code class=3D"literal">ApplicationContext</code> implementa=
tions eagerly create and configure all
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" tit=
le=3D"7.5.1&nbsp;The singleton scope">singleton</a> beans as part of the in=
itialization
process. Generally, this pre-instantiation is desirable, because errors in =
the
configuration or surrounding environment are discovered immediately, as opp=
osed to hours
or even days later. When this behavior is <span class=3D"emphasis"><em>not<=
/em></span> desirable, you can prevent
pre-instantiation of a singleton bean by marking the bean definition as
lazy-initialized. A lazy-initialized bean tells the IoC container to create=
 a bean
instance when it is first requested, rather than at startup.</p>
<p>In XML, this behavior is controlled by the <code class=3D"literal">lazy-=
init</code> attribute on the <code class=3D"literal">&lt;bean/&gt;</code>
element; for example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"lazy"</span> <=
span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"com.fo=
o.ExpensiveToCreateBean"</span> <span class=3D"hl-attribute">lazy-init</spa=
n>=3D<span class=3D"hl-value">"true"</span><span class=3D"hl-tag">/&gt;</sp=
an>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">name</s=
pan>=3D<span class=3D"hl-value">"not.lazy"</span> <span class=3D"hl-attribu=
te">class</span>=3D<span class=3D"hl-value">"com.foo.AnotherBean"</span><sp=
an class=3D"hl-tag">/&gt;</span></pre>
<p>When the preceding configuration is consumed by an <code class=3D"litera=
l">ApplicationContext</code>, the bean named
<code class=3D"literal">lazy</code> is not eagerly pre-instantiated when th=
e <code class=3D"literal">ApplicationContext</code> is starting up,
whereas the <code class=3D"literal">not.lazy</code> bean is eagerly pre-ins=
tantiated.</p>
<p>However, when a lazy-initialized bean is a dependency of a singleton bea=
n that is
<span class=3D"emphasis"><em>not</em></span> lazy-initialized, the <code cl=
ass=3D"literal">ApplicationContext</code> creates the lazy-initialized bean=
 at
startup, because it must satisfy the singleton=92s dependencies. The lazy-i=
nitialized bean
is injected into a singleton bean elsewhere that is not lazy-initialized.</=
p>
<p>You can also control lazy-initialization at the container level by using=
 the
<code class=3D"literal">default-lazy-init</code> attribute on the <code cla=
ss=3D"literal">&lt;beans/&gt;</code> element; for example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">default-lazy-init</span>=3D<span class=3D"hl-value"=
>"true"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- no beans will be pre-instantiated...=
 --&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-autowire" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-a=
utowire"></a>7.4.5&nbsp;Autowiring collaborators</h3></div></div></div>
<p>The Spring container can <span class=3D"emphasis"><em>autowire</em></spa=
n> relationships between collaborating beans. You can
allow Spring to resolve collaborators (other beans) automatically for your =
bean by
inspecting the contents of the <code class=3D"literal">ApplicationContext</=
code>. Autowiring has the following
advantages:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Autowiring can significantly reduce the need to specify properties or const=
ructor
arguments. (Other mechanisms such as a bean template
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-child-bean-definitions" title=
=3D"7.7&nbsp;Bean definition inheritance">discussed elsewhere in this chapt=
er</a> are also valuable
in this regard.)
</li><li class=3D"listitem">
Autowiring can update a configuration as your objects evolve. For example, =
if you need
to add a dependency to a class, that dependency can be satisfied automatica=
lly without
you needing to modify the configuration. Thus autowiring can be especially =
useful
during development, without negating the option of switching to explicit wi=
ring when
the code base becomes more stable.
</li></ul></div>
<p>When using XML-based configuration metadata <a href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ftn=
.d5e2674" class=3D"footnote" name=3D"d5e2674"><sup class=3D"footnote">[2]</=
sup></a>, you specify autowire
mode for a bean definition with the <code class=3D"literal">autowire</code>=
 attribute of the <code class=3D"literal">&lt;bean/&gt;</code> element. The
autowiring functionality has four modes. You specify autowiring <span class=
=3D"emphasis"><em>per</em></span> bean and thus
can choose which ones to autowire.</p>
<div class=3D"table"><a name=3D"beans-factory-autowiring-modes-tbl" href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#beans-factory-autowiring-modes-tbl"></a><p class=3D"title"><=
b>Table&nbsp;7.2.&nbsp;Autowiring modes</b></p><div class=3D"table-contents=
">
<table summary=3D"Autowiring modes" style=3D"border-collapse: collapse;bord=
er-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid=
 ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=
=3D"col_2"></colgroup><thead><tr><th style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Mode</th><th st=
yle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Explana=
tion</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>no</p></td><=
td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
>(Default) No autowiring. Bean references must be defined via a <code class=
=3D"literal">ref</code> element. Changing
the default setting is not recommended for larger deployments, because spec=
ifying
collaborators explicitly gives greater control and clarity. To some extent,=
 it
documents the structure of a system.</p></td></tr><tr><td style=3D"border-r=
ight: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top"><p>byName</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>Autowiring by property name. Spring looks for a=
 bean with the same name as the
property that needs to be autowired. For example, if a bean definition is s=
et to
autowire by name, and it contains a <span class=3D"emphasis"><em>master</em=
></span> property (that is, it has a
<span class=3D"emphasis"><em>setMaster(..)</em></span> method), Spring look=
s for a bean definition named <code class=3D"literal">master</code>, and us=
es
it to set the property.</p></td></tr><tr><td style=3D"border-right: 0.5pt s=
olid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>byTy=
pe</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valig=
n=3D"top"><p>Allows a property to be autowired if exactly one bean of the p=
roperty type exists in
the container. If more than one exists, a fatal exception is thrown, which =
indicates
that you may not use <span class=3D"emphasis"><em>byType</em></span> autowi=
ring for that bean. If there are no matching
beans, nothing happens; the property is not set.</p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>construc=
tor</p></td><td style=3D"" align=3D"left" valign=3D"top"><p>Analogous to <s=
pan class=3D"emphasis"><em>byType</em></span>, but applies to constructor a=
rguments. If there is not exactly
one bean of the constructor argument type in the container, a fatal error i=
s raised.</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>With <span class=3D"emphasis"><em>byType</em></span> or <span class=3D"e=
mphasis"><em>constructor</em></span> autowiring mode, you can wire arrays a=
nd
typed-collections. In such cases <span class=3D"emphasis"><em>all</em></spa=
n> autowire candidates within the container that
match the expected type are provided to satisfy the dependency. You can aut=
owire
strongly-typed Maps if the expected key type is <code class=3D"literal">Str=
ing</code>. An autowired Maps values will
consist of all bean instances that match the expected type, and the Maps ke=
ys will
contain the corresponding bean names.</p>
<p>You can combine autowire behavior with dependency checking, which is per=
formed after
autowiring completes.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-autowired-exceptions" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-autow=
ired-exceptions"></a>Limitations and disadvantages of autowiring</h4></div>=
</div></div>
<p>Autowiring works best when it is used consistently across a project. If =
autowiring is
not used in general, it might be confusing to developers to use it to wire =
only one or
two bean definitions.</p>
<p>Consider the limitations and disadvantages of autowiring:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Explicit dependencies in <code class=3D"literal">property</code> and <code =
class=3D"literal">constructor-arg</code> settings always override
autowiring. You cannot autowire so-called <span class=3D"emphasis"><em>simp=
le</em></span> properties such as primitives,
<code class=3D"literal">Strings</code>, and <code class=3D"literal">Classes=
</code> (and arrays of such simple properties). This limitation is
by-design.
</li><li class=3D"listitem">
Autowiring is less exact than explicit wiring. Although, as noted in the ab=
ove table,
Spring is careful to avoid guessing in case of ambiguity that might have un=
expected
results, the relationships between your Spring-managed objects are no longe=
r
documented explicitly.
</li><li class=3D"listitem">
Wiring information may not be available to tools that may generate document=
ation from
a Spring container.
</li><li class=3D"listitem">
Multiple bean definitions within the container may match the type specified=
 by the
setter method or constructor argument to be autowired. For arrays, collecti=
ons, or
Maps, this is not necessarily a problem. However for dependencies that expe=
ct a single
value, this ambiguity is not arbitrarily resolved. If no unique bean defini=
tion is
available, an exception is thrown.
</li></ul></div>
<p>In the latter scenario, you have several options:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Abandon autowiring in favor of explicit wiring.
</li><li class=3D"listitem">
Avoid autowiring for a bean definition by setting its <code class=3D"litera=
l">autowire-candidate</code> attributes
to <code class=3D"literal">false</code> as described in the next section.
</li><li class=3D"listitem">
Designate a single bean definition as the <span class=3D"emphasis"><em>prim=
ary</em></span> candidate by setting the
<code class=3D"literal">primary</code> attribute of its <code class=3D"lite=
ral">&lt;bean/&gt;</code> element to <code class=3D"literal">true</code>.
</li><li class=3D"listitem">
Implement the more fine-grained control available
with annotation-based configuration, as described in <a class=3D"xref" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-annotation-config" title=3D"7.9&nbsp;Annotation-bas=
ed container configuration">Section&nbsp;7.9, =93Annotation-based container=
 configuration=94</a>.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-autowire-candidate" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-factory-autowire-candidate"></a>Excluding a bean from autowiring</h4></div=
></div></div>
<p>On a per-bean basis, you can exclude a bean from autowiring. In Spring=
=92s XML format, set
the <code class=3D"literal">autowire-candidate</code> attribute of the <cod=
e class=3D"literal">&lt;bean/&gt;</code> element to <code class=3D"literal"=
>false</code>; the container
makes that specific bean definition unavailable to the autowiring infrastru=
cture
(including annotation style configurations such as <a class=3D"link" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-autowired-annotation" title=3D"7.9.2&nbsp;@Autowire=
d"><code class=3D"literal">@Autowired</code></a>).</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">autowire-candidate</code> attribute is desig=
ned to only affect type-based autowiring.
It does not affect explicit references by name, which will get resolved eve=
n if the
specified bean is not marked as an autowire candidate. As a consequence, au=
towiring
by name will nevertheless inject a bean if the name matches.</p>
</td></tr></tbody></table></div>
<p>You can also limit autowire candidates based on pattern-matching against=
 bean names. The
top-level <code class=3D"literal">&lt;beans/&gt;</code> element accepts one=
 or more patterns within its
<code class=3D"literal">default-autowire-candidates</code> attribute. For e=
xample, to limit autowire candidate status
to any bean whose name ends with <span class=3D"emphasis"><em>Repository,</=
em></span> provide a value of *Repository. To
provide multiple patterns, define them in a comma-separated list. An explic=
it value of
<code class=3D"literal">true</code> or <code class=3D"literal">false</code>=
 for a bean definitions <code class=3D"literal">autowire-candidate</code> a=
ttribute always takes
precedence, and for such beans, the pattern matching rules do not apply.</p=
>
<p>These techniques are useful for beans that you never want to be injected=
 into other
beans by autowiring. It does not mean that an excluded bean cannot itself b=
e configured
using autowiring. Rather, the bean itself is not a candidate for autowiring=
 other beans.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-method-injection" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-f=
actory-method-injection"></a>7.4.6&nbsp;Method injection</h3></div></div></=
div>
<p>In most application scenarios, most beans in the container are
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton" tit=
le=3D"7.5.1&nbsp;The singleton scope">singletons</a>. When a singleton bean=
 needs to
collaborate with another singleton bean, or a non-singleton bean needs to c=
ollaborate
with another non-singleton bean, you typically handle the dependency by def=
ining one
bean as a property of the other. A problem arises when the bean lifecycles =
are
different. Suppose singleton bean A needs to use non-singleton (prototype) =
bean B,
perhaps on each method invocation on A. The container only creates the sing=
leton bean A
once, and thus only gets one opportunity to set the properties. The contain=
er cannot
provide bean A with a new instance of bean B every time one is needed.</p>
<p>A solution is to forego some inversion of control. You can <a class=3D"l=
ink" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#beans-factory-aware" title=3D"7.6.2&nbsp;Applica=
tionContextAware and BeanNameAware">make
bean A aware of the container</a> by implementing the <code class=3D"litera=
l">ApplicationContextAware</code> interface,
and by <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#beans-factory-client" title=
=3D"7.2.3&nbsp;Using the container">making a getBean("B") call to the conta=
iner</a> ask for (a
typically new) bean B instance every time bean A needs it. The following is=
 an example
of this approach:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// a class that us=
es a stateful Command-style class to perform some processing</span>
<span class=3D"hl-keyword">package</span> fiona.apple;

<span class=3D"hl-comment">// Spring-API imports</span>
<span class=3D"hl-keyword">import</span> org.springframework.beans.BeansExc=
eption;
<span class=3D"hl-keyword">import</span> org.springframework.context.Applic=
ationContext;
<span class=3D"hl-keyword">import</span> org.springframework.context.Applic=
ationContextAware;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> CommandManager <span class=3D"hl-keyword">implements</span> Applicati=
onContextAware {

    <span class=3D"hl-keyword">private</span> ApplicationContext applicatio=
nContext;

    <span class=3D"hl-keyword">public</span> Object process(Map commandStat=
e) {
        <span class=3D"hl-comment">// grab a new instance of the appropriat=
e Command</span>
        Command command =3D createCommand();
        <span class=3D"hl-comment">// set the state on the (hopefully brand=
 new) Command instance</span>
        command.setState(commandState);
        <span class=3D"hl-keyword">return</span> command.execute();
    }

    <span class=3D"hl-keyword">protected</span> Command createCommand() {
        <span class=3D"hl-comment">// notice the Spring API dependency!</sp=
an>
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.applicationContext.getBean(<span class=3D"hl-string">"command"=
</span>, Command.<span class=3D"hl-keyword">class</span>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setApplicationContext(
            ApplicationContext applicationContext) <span class=3D"hl-keywor=
d">throws</span> BeansException {
        <span class=3D"hl-keyword">this</span>.applicationContext =3D appli=
cationContext;
    }
}</pre>
<p>The preceding is not desirable, because the business code is aware of an=
d coupled to the
Spring Framework. Method Injection, a somewhat advanced feature of the Spri=
ng IoC
container, allows this use case to be handled in a clean fashion.</p>
<div class=3D"sidebar"><div class=3D"titlepage"></div>
<p>You can read more about the motivation for Method Injection in
<a class=3D"ulink" href=3D"https://spring.io/blog/2004/08/06/method-injecti=
on/" target=3D"_top">this blog entry</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-lookup-method-injection" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
beans-factory-lookup-method-injection"></a>Lookup method injection</h4></di=
v></div></div>
<p>Lookup method injection is the ability of the container to override meth=
ods on
<span class=3D"emphasis"><em>container managed beans</em></span>, to return=
 the lookup result for another named bean in the
container. The lookup typically involves a prototype bean as in the scenari=
o described
in the preceding section. The Spring Framework implements this method injec=
tion by using
bytecode generation from the CGLIB library to generate dynamically a subcla=
ss that
overrides the method.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
For this dynamic subclassing to work, the class that the Spring bean contai=
ner will
subclass cannot be <code class=3D"literal">final</code>, and the method to =
be overridden cannot be <code class=3D"literal">final</code> either.
</li><li class=3D"listitem">
Unit-testing a class that has an <code class=3D"literal">abstract</code> me=
thod requires you to subclass the class
yourself and to supply a stub implementation of the <code class=3D"literal"=
>abstract</code> method.
</li><li class=3D"listitem">
Concrete methods are also necessary for component scanning which requires c=
oncrete
classes to pick up.
</li><li class=3D"listitem">
A further key limitation is that lookup methods won=92t work with factory m=
ethods and
in particular not with <code class=3D"literal">@Bean</code> methods in conf=
iguration classes, since the container
is not in charge of creating the instance in that case and therefore cannot=
 create
a runtime-generated subclass on the fly.
</li></ul></div>
</td></tr></tbody></table></div>
<p>Looking at the <code class=3D"literal">CommandManager</code> class in th=
e previous code snippet, you see that the
Spring container will dynamically override the implementation of the <code =
class=3D"literal">createCommand()</code>
method. Your <code class=3D"literal">CommandManager</code> class will not h=
ave any Spring dependencies, as can be
seen in the reworked example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> fio=
na.apple;

<span class=3D"hl-comment">// no more Spring imports!</span>

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">abstrac=
t</span> <span class=3D"hl-keyword">class</span> CommandManager {

    <span class=3D"hl-keyword">public</span> Object process(Object commandS=
tate) {
        <span class=3D"hl-comment">// grab a new instance of the appropriat=
e Command interface</span>
        Command command =3D createCommand();
        <span class=3D"hl-comment">// set the state on the (hopefully brand=
 new) Command instance</span>
        command.setState(commandState);
        <span class=3D"hl-keyword">return</span> command.execute();
    }

    <span class=3D"hl-comment">// okay... but where is the implementation o=
f this method?</span>
    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
abstract</span> Command createCommand();
}</pre>
<p>In the client class containing the method to be injected (the <code clas=
s=3D"literal">CommandManager</code> in this
case), the method to be injected requires a signature of the following form=
:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;public|protected&g=
t;</span> [abstract] <span class=3D"hl-tag">&lt;return-type&gt;</span> theM=
ethodName(no-arguments);</pre>
<p>If the method is <code class=3D"literal">abstract</code>, the dynamicall=
y-generated subclass implements the method.
Otherwise, the dynamically-generated subclass overrides the concrete method=
 defined in
the original class. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- a stateful=
 bean deployed as a prototype (non-singleton) --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"myCommand"</span> <span class=3D"hl-attribut=
e">class</span>=3D<span class=3D"hl-value">"fiona.apple.AsyncCommand"</span=
> <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-value">"pro=
totype"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- inject dependencies here as required=
 --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-comment">&lt;!-- commandProcessor uses statefulCommandHel=
per --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"commandManager"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"fiona.apple.CommandManager=
"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;lookup-method</span> <span class=3D"hl-attri=
bute">name</span>=3D<span class=3D"hl-value">"createCommand"</span> <span c=
lass=3D"hl-attribute">bean</span>=3D<span class=3D"hl-value">"myCommand"</s=
pan><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The bean identified as <span class=3D"emphasis"><em>commandManager</em><=
/span> calls its own method <code class=3D"literal">createCommand()</code>
whenever it needs a new instance of the <span class=3D"emphasis"><em>myComm=
and</em></span> bean. You must be careful to deploy
the <code class=3D"literal">myCommand</code> bean as a prototype, if that i=
s actually what is needed. If it is
as a <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-singleton=
" title=3D"7.5.1&nbsp;The singleton scope">singleton</a>, the same instance=
 of the <code class=3D"literal">myCommand</code>
bean is returned each time.</p>
<p>Alternatively, within the annotation-based component model, you may decl=
are a lookup
method through the <code class=3D"literal">@Lookup</code> annotation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">abstract</span> <span class=3D"hl-keyword">class</sp=
an> CommandManager {

    <span class=3D"hl-keyword">public</span> Object process(Object commandS=
tate) {
        Command command =3D createCommand();
        command.setState(commandState);
        <span class=3D"hl-keyword">return</span> command.execute();
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Lookup("myComm=
and")</span></em>
    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
abstract</span> Command createCommand();
}</pre>
<p>Or, more idiomatically, you may rely on the target bean getting resolved=
 against the
declared return type of the lookup method:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">abstract</span> <span class=3D"hl-keyword">class</sp=
an> CommandManager {

    <span class=3D"hl-keyword">public</span> Object process(Object commandS=
tate) {
        MyCommand command =3D createCommand();
        command.setState(commandState);
        <span class=3D"hl-keyword">return</span> command.execute();
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Lookup</span><=
/em>
    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
abstract</span> MyCommand createCommand();
}</pre>
<p>Note that you will typically declare such annotated lookup methods with =
a concrete
stub implementation, in order for them to be compatible with Spring=92s com=
ponent
scanning rules where abstract classes get ignored by default. This limitati=
on does not
apply in case of explicitly registered or explicitly imported bean classes.=
</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Another way of accessing differently scoped target beans is an <code cla=
ss=3D"literal">ObjectFactory</code>/
<code class=3D"literal">Provider</code> injection point. Check out <a class=
=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#beans-factory-scopes-other-injection" title=
=3D"Scoped beans as dependencies">the section called =93Scoped beans as dep=
endencies=94</a>.</p>
<p>The interested reader may also find the <code class=3D"literal">ServiceL=
ocatorFactoryBean</code> (in the
<code class=3D"literal">org.springframework.beans.factory.config</code> pac=
kage) to be of use.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-arbitrary-method-replacement" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-arbitrary-method-replacement"></a>Arbitrary method repla=
cement</h4></div></div></div>
<p>A less useful form of method injection than lookup method injection is t=
he ability to
replace arbitrary methods in a managed bean with another method implementat=
ion. Users
may safely skip the rest of this section until the functionality is actuall=
y needed.</p>
<p>With XML-based configuration metadata, you can use the <code class=3D"li=
teral">replaced-method</code> element to
replace an existing method implementation with another, for a deployed bean=
. Consider
the following class, with a method computeValue, which we want to override:=
</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MyValueCalculator {

    <span class=3D"hl-keyword">public</span> String computeValue(String inp=
ut) {
        <span class=3D"hl-comment">// some real code...</span>
    }

    <span class=3D"hl-comment">// some other methods...</span>
}</pre>
<p>A class implementing the <code class=3D"literal">org.springframework.bea=
ns.factory.support.MethodReplacer</code>
interface provides the new method definition.</p>
<pre class=3D"programlisting"><strong class=3D"hl-tag" style=3D"color: blue=
">/**
 * meant to be used to override the existing computeValue(String)
 * implementation in MyValueCalculator
 */</strong>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ReplacementComputeValue <span class=3D"hl-keyword">implements</span> =
MethodReplacer {

    <span class=3D"hl-keyword">public</span> Object reimplement(Object o, M=
ethod m, Object[] args) <span class=3D"hl-keyword">throws</span> Throwable =
{
        <span class=3D"hl-comment">// get the input value, work with it, an=
d return a computed result</span>
        String input =3D (String) args[<span class=3D"hl-number">0</span>];
        ...
        <span class=3D"hl-keyword">return</span> ...;
    }
}</pre>
<p>The bean definition to deploy the original class and specify the method =
override would
look like this:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myValueCalcula=
tor"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"x.y.z.MyValueCalculator"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- arbitrary method replacement --&gt;<=
/span>
    <span class=3D"hl-tag">&lt;replaced-method</span> <span class=3D"hl-att=
ribute">name</span>=3D<span class=3D"hl-value">"computeValue"</span> <span =
class=3D"hl-attribute">replacer</span>=3D<span class=3D"hl-value">"replacem=
entComputeValue"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;arg-type&gt;</span>String<span class=3D"=
hl-tag">&lt;/arg-type&gt;</span>
    <span class=3D"hl-tag">&lt;/replaced-method&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"replacementComputeValue"</span> <span class=
=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"a.b.c.Replacemen=
tComputeValue"</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>You can use one or more contained <code class=3D"literal">&lt;arg-type/&=
gt;</code> elements within the <code class=3D"literal">&lt;replaced-method/=
&gt;</code>
element to indicate the method signature of the method being overridden. Th=
e signature
for the arguments is necessary only if the method is overloaded and multipl=
e variants
exist within the class. For convenience, the type string for an argument ma=
y be a
substring of the fully qualified type name. For example, the following all =
match
<code class=3D"literal">java.lang.String</code>:</p>
<pre class=3D"programlisting">java.lang.String
String
Str</pre>
<p>Because the number of arguments is often enough to distinguish between e=
ach possible
choice, this shortcut can save a lot of typing, by allowing you to type onl=
y the
shortest string that will match an argument type.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-factory-scopes" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-scopes"></a>7.5&nbsp;Bean scopes</h2></div></div></div>
<p>When you create a bean definition, you create a <span class=3D"emphasis"=
><em>recipe</em></span> for creating actual instances
of the class defined by that bean definition. The idea that a bean definiti=
on is a
recipe is important, because it means that, as with a class, you can create=
 many object
instances from a single recipe.</p>
<p>You can control not only the various dependencies and configuration valu=
es that are to
be plugged into an object that is created from a particular bean definition=
, but also
the <span class=3D"emphasis"><em>scope</em></span> of the objects created f=
rom a particular bean definition. This approach is
powerful and flexible in that you can <span class=3D"emphasis"><em>choose</=
em></span> the scope of the objects you create
through configuration instead of having to bake in the scope of an object a=
t the Java
class level. Beans can be defined to be deployed in one of a number of scop=
es: out of
the box, the Spring Framework supports seven scopes, five of which are avai=
lable only if
you use a web-aware <code class=3D"literal">ApplicationContext</code>.</p>
<p>The following scopes are supported out of the box. You can also create
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom" title=
=3D"7.5.5&nbsp;Custom scopes">a custom scope.</a></p>
<div class=3D"table"><a name=3D"beans-factory-scopes-tbl" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-scopes-tbl"></a><p class=3D"title"><b>Table&nbsp;7.3.&nb=
sp;Bean scopes</b></p><div class=3D"table-contents">
<table summary=3D"Bean scopes" style=3D"border-collapse: collapse;border-to=
p: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; bo=
rder-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=3D"co=
l_2"></colgroup><thead><tr><th style=3D"border-right: 0.5pt solid ; border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Scope</th><th style=
=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Descriptio=
n</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"lin=
k" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-factory-scopes-singleton" title=3D"7.5.1&nbs=
p;The singleton scope">singleton</a></p></td><td style=3D"border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top"><p>(Default) Scopes a single be=
an definition to a single object instance per Spring IoC
container.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border=
-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"link"=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#beans-factory-scopes-prototype" title=3D"7.5.2&nbsp;=
The prototype scope">prototype</a></p></td><td style=3D"border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><p>Scopes a single bean definitio=
n to any number of object instances.</p></td></tr><tr><td style=3D"border-r=
ight: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top"><p><a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-reque=
st" title=3D"Request scope">request</a></p></td><td style=3D"border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Scopes a single bean defi=
nition to the lifecycle of a single HTTP request; that is,
each HTTP request has its own instance of a bean created off the back of a =
single bean
definition. Only valid in the context of a web-aware Spring <code class=3D"=
literal">ApplicationContext</code>.</p></td></tr><tr><td style=3D"border-ri=
ght: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"=
top"><p><a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-sessio=
n" title=3D"Session scope">session</a></p></td><td style=3D"border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>Scopes a single bean defin=
ition to the lifecycle of an HTTP <code class=3D"literal">Session</code>. O=
nly valid in
the context of a web-aware Spring <code class=3D"literal">ApplicationContex=
t</code>.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"link" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#beans-factory-scopes-global-session" title=3D"Global =
session scope">globalSession</a></p></td><td style=3D"border-bottom: 0.5pt =
solid ; " align=3D"left" valign=3D"top"><p>Scopes a single bean definition =
to the lifecycle of a global HTTP <code class=3D"literal">Session</code>. T=
ypically
only valid when used in a Portlet context. Only valid in the context of a w=
eb-aware
Spring <code class=3D"literal">ApplicationContext</code>.</p></td></tr><tr>=
<td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " ali=
gn=3D"left" valign=3D"top"><p><a class=3D"link" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-factory-scopes-application" title=3D"Application scope">application</a></p=
></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"=
top"><p>Scopes a single bean definition to the lifecycle of a <code class=
=3D"literal">ServletContext</code>. Only valid in
the context of a web-aware Spring <code class=3D"literal">ApplicationContex=
t</code>.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p><a class=3D"link" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#websock=
et-stomp-websocket-scope" title=3D"26.4.16&nbsp;WebSocket Scope">websocket<=
/a></p></td><td style=3D"" align=3D"left" valign=3D"top"><p>Scopes a single=
 bean definition to the lifecycle of a <code class=3D"literal">WebSocket</c=
ode>. Only valid in
the context of a web-aware Spring <code class=3D"literal">ApplicationContex=
t</code>.</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As of Spring 3.0, a <span class=3D"emphasis"><em>thread scope</em></span=
> is available, but is not registered by default. For
more information, see the documentation for
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/support/SimpleThreadSco=
pe.html" target=3D"_top"><code class=3D"literal">SimpleThreadScope</code></=
a>.
For instructions on how to register this or any other custom scope, see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-custom-using" =
title=3D"Using a custom scope">the section called =93Using a custom scope=
=94</a>.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-scopes-singleton" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-f=
actory-scopes-singleton"></a>7.5.1&nbsp;The singleton scope</h3></div></div=
></div>
<p>Only one <span class=3D"emphasis"><em>shared</em></span> instance of a s=
ingleton bean is managed, and all requests for beans
with an id or ids matching that bean definition result in that one specific=
 bean
instance being returned by the Spring container.</p>
<p>To put it another way, when you define a bean definition and it is scope=
d as a
singleton, the Spring IoC container creates <span class=3D"emphasis"><em>ex=
actly one</em></span> instance of the object
defined by that bean definition. This single instance is stored in a cache =
of such
singleton beans, and <span class=3D"emphasis"><em>all subsequent requests a=
nd references</em></span> for that named bean
return the cached object.</p>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/singleton.png" a=
lt=3D"singleton"></div>
</div>
<p>Spring=92s concept of a singleton bean differs from the Singleton patter=
n as defined in
the Gang of Four (GoF) patterns book. The GoF Singleton hard-codes the scop=
e of an
object such that one <span class=3D"emphasis"><em>and only one</em></span> =
instance of a particular class is created <span class=3D"emphasis"><em>per
ClassLoader</em></span>. The scope of the Spring singleton is best describe=
d as <span class=3D"emphasis"><em>per container
and per bean</em></span>. This means that if you define one bean for a part=
icular class in a
single Spring container, then the Spring container creates one <span class=
=3D"emphasis"><em>and only one</em></span> instance
of the class defined by that bean definition. <span class=3D"emphasis"><em>=
The singleton scope is the default scope
in Spring</em></span>. To define a bean as a singleton in XML, you would wr=
ite, for example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"accountService=
"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-valu=
e">"com.foo.DefaultAccountService"</span><span class=3D"hl-tag">/&gt;</span=
>

<span class=3D"hl-comment">&lt;!-- the following is equivalent, though redu=
ndant (singleton scope is the default) --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"accountService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"com.foo.DefaultAccountServ=
ice"</span> <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-v=
alue">"singleton"</span><span class=3D"hl-tag">/&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-scopes-prototype" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-f=
actory-scopes-prototype"></a>7.5.2&nbsp;The prototype scope</h3></div></div=
></div>
<p>The non-singleton, prototype scope of bean deployment results in the <sp=
an class=3D"emphasis"><em>creation of a new
bean instance</em></span> every time a request for that specific bean is ma=
de. That is, the bean
is injected into another bean or you request it through a <code class=3D"li=
teral">getBean()</code> method call on the
container. As a rule, use the prototype scope for all stateful beans and th=
e singleton
scope for stateless beans.</p>
<p>The following diagram illustrates the Spring prototype scope. <span clas=
s=3D"emphasis"><em>A data access object
(DAO) is not typically configured as a prototype, because a typical DAO doe=
s not hold
any conversational state; it was just easier for this author to reuse the c=
ore of the
singleton diagram.</em></span></p>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/prototype.png" a=
lt=3D"prototype"></div>
</div>
<p>The following example defines a bean as a prototype in XML:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"accountService=
"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-valu=
e">"com.foo.DefaultAccountService"</span> <span class=3D"hl-attribute">scop=
e</span>=3D<span class=3D"hl-value">"prototype"</span><span class=3D"hl-tag=
">/&gt;</span></pre>
<p>In contrast to the other scopes, Spring does not manage the complete lif=
ecycle of a
prototype bean: the container instantiates, configures, and otherwise assem=
bles a
prototype object, and hands it to the client, with no further record of tha=
t prototype
instance. Thus, although<span class=3D"emphasis"><em> initialization</em></=
span> lifecycle callback methods are called on all
objects regardless of scope, in the case of prototypes, configured <span cl=
ass=3D"emphasis"><em>destruction</em></span>
lifecycle callbacks are <span class=3D"emphasis"><em>not</em></span> called=
. The client code must clean up prototype-scoped
objects and release expensive resources that the prototype bean(s) are hold=
ing. To get
the Spring container to release resources held by prototype-scoped beans, t=
ry using a
custom <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp"=
 title=3D"7.8.1&nbsp;Customizing beans using a BeanPostProcessor">bean post=
-processor</a>, which holds a reference to
beans that need to be cleaned up.</p>
<p>In some respects, the Spring container=92s role in regard to a prototype=
-scoped bean is a
replacement for the Java <code class=3D"literal">new</code> operator. All l=
ifecycle management past that point must
be handled by the client. (For details on the lifecycle of a bean in the Sp=
ring
container, see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecy=
cle" title=3D"7.6.1&nbsp;Lifecycle callbacks">Section&nbsp;7.6.1, =93Lifecy=
cle callbacks=94</a>.)</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-scopes-sing-prot-interaction" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-scopes-sing-prot-interaction"></a>7.5.3&nbsp;Singleton b=
eans with prototype-bean dependencies</h3></div></div></div>
<p>When you use singleton-scoped beans with dependencies on prototype beans=
, be aware that
<span class=3D"emphasis"><em>dependencies are resolved at instantiation tim=
e</em></span>. Thus if you dependency-inject a
prototype-scoped bean into a singleton-scoped bean, a new prototype bean is=
 instantiated
and then dependency-injected into the singleton bean. The prototype instanc=
e is the sole
instance that is ever supplied to the singleton-scoped bean.</p>
<p>However, suppose you want the singleton-scoped bean to acquire a new ins=
tance of the
prototype-scoped bean repeatedly at runtime. You cannot dependency-inject a
prototype-scoped bean into your singleton bean, because that injection occu=
rs only
<span class=3D"emphasis"><em>once</em></span>, when the Spring container is=
 instantiating the singleton bean and resolving
and injecting its dependencies. If you need a new instance of a prototype b=
ean at
runtime more than once, see <a class=3D"xref" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-f=
actory-method-injection" title=3D"7.4.6&nbsp;Method injection">Section&nbsp=
;7.4.6, =93Method injection=94</a></p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-scopes-other" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-facto=
ry-scopes-other"></a>7.5.4&nbsp;Request, session, global session, applicati=
on, and WebSocket scopes</h3></div></div></div>
<p>The <code class=3D"literal">request</code>, <code class=3D"literal">sess=
ion</code>, <code class=3D"literal">globalSession</code>, <code class=3D"li=
teral">application</code>, and <code class=3D"literal">websocket</code> sco=
pes are
<span class=3D"emphasis"><em>only</em></span> available if you use a web-aw=
are Spring <code class=3D"literal">ApplicationContext</code> implementation
(such as <code class=3D"literal">XmlWebApplicationContext</code>). If you u=
se these scopes with regular Spring IoC
containers such as the <code class=3D"literal">ClassPathXmlApplicationConte=
xt</code>, an <code class=3D"literal">IllegalStateException</code> will
be thrown complaining about an unknown bean scope.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-other-web-configuration" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#beans-factory-scopes-other-web-configuration"></a>Initial web config=
uration</h4></div></div></div>
<p>To support the scoping of beans at the <code class=3D"literal">request</=
code>, <code class=3D"literal">session</code>, <code class=3D"literal">glob=
alSession</code>,
<code class=3D"literal">application</code>, and <code class=3D"literal">web=
socket</code> levels (web-scoped beans), some minor initial
configuration is required before you define your beans. (This initial setup=
 is <span class=3D"emphasis"><em>not</em></span>
required for the standard scopes, <code class=3D"literal">singleton</code> =
and <code class=3D"literal">prototype</code>.)</p>
<p>How you accomplish this initial setup depends on your particular Servlet=
 environment.</p>
<p>If you access scoped beans within Spring Web MVC, in effect, within a re=
quest that is
processed by the Spring <code class=3D"literal">DispatcherServlet</code> or=
 <code class=3D"literal">DispatcherPortlet</code>, then no special
setup is necessary: <code class=3D"literal">DispatcherServlet</code> and <c=
ode class=3D"literal">DispatcherPortlet</code> already expose all
relevant state.</p>
<p>If you use a Servlet 2.5 web container, with requests processed outside =
of Spring=92s
<code class=3D"literal">DispatcherServlet</code> (for example, when using J=
SF or Struts), you need to register the
<code class=3D"literal">org.springframework.web.context.request.RequestCont=
extListener</code> <code class=3D"literal">ServletRequestListener</code>.
For Servlet 3.0+, this can be done programmatically via the <code class=3D"=
literal">WebApplicationInitializer</code>
interface. Alternatively, or for older containers, add the following declar=
ation to
your web application=92s <code class=3D"literal">web.xml</code> file:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;web-app&gt;</span>
    ...
    <span class=3D"hl-tag">&lt;listener&gt;</span>
        <span class=3D"hl-tag">&lt;listener-class&gt;</span>
            org.springframework.web.context.request.RequestContextListener
        <span class=3D"hl-tag">&lt;/listener-class&gt;</span>
    <span class=3D"hl-tag">&lt;/listener&gt;</span>
    ...
<span class=3D"hl-tag">&lt;/web-app&gt;</span></pre>
<p>Alternatively, if there are issues with your listener setup, consider us=
ing Spring=92s
<code class=3D"literal">RequestContextFilter</code>. The filter mapping dep=
ends on the surrounding web
application configuration, so you have to change it as appropriate.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;web-app&gt;</span>
    ...
    <span class=3D"hl-tag">&lt;filter&gt;</span>
        <span class=3D"hl-tag">&lt;filter-name&gt;</span>requestContextFilt=
er<span class=3D"hl-tag">&lt;/filter-name&gt;</span>
        <span class=3D"hl-tag">&lt;filter-class&gt;</span>org.springframewo=
rk.web.filter.RequestContextFilter<span class=3D"hl-tag">&lt;/filter-class&=
gt;</span>
    <span class=3D"hl-tag">&lt;/filter&gt;</span>
    <span class=3D"hl-tag">&lt;filter-mapping&gt;</span>
        <span class=3D"hl-tag">&lt;filter-name&gt;</span>requestContextFilt=
er<span class=3D"hl-tag">&lt;/filter-name&gt;</span>
        <span class=3D"hl-tag">&lt;url-pattern&gt;</span>/*<span class=3D"h=
l-tag">&lt;/url-pattern&gt;</span>
    <span class=3D"hl-tag">&lt;/filter-mapping&gt;</span>
    ...
<span class=3D"hl-tag">&lt;/web-app&gt;</span></pre>
<p><code class=3D"literal">DispatcherServlet</code>, <code class=3D"literal=
">RequestContextListener</code>, and <code class=3D"literal">RequestContext=
Filter</code> all do exactly
the same thing, namely bind the HTTP request object to the <code class=3D"l=
iteral">Thread</code> that is servicing
that request. This makes beans that are request- and session-scoped availab=
le further
down the call chain.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-request" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fac=
tory-scopes-request"></a>Request scope</h4></div></div></div>
<p>Consider the following XML configuration for a bean definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"loginAction"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"com.foo.LoginAction"</span> <span class=3D"hl-attribute">scope</span>=3D<s=
pan class=3D"hl-value">"request"</span><span class=3D"hl-tag">/&gt;</span><=
/pre>
<p>The Spring container creates a new instance of the <code class=3D"litera=
l">LoginAction</code> bean by using the
<code class=3D"literal">loginAction</code> bean definition for each and eve=
ry HTTP request. That is, the
<code class=3D"literal">loginAction</code> bean is scoped at the HTTP reque=
st level. You can change the internal
state of the instance that is created as much as you want, because other in=
stances
created from the same <code class=3D"literal">loginAction</code> bean defin=
ition will not see these changes in state;
they are particular to an individual request. When the request completes pr=
ocessing, the
bean that is scoped to the request is discarded.</p>
<p>When using annotation-driven components or Java Config, the <code class=
=3D"literal">@RequestScope</code> annotation
can be used to assign a component to the <code class=3D"literal">request</c=
ode> scope.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@RequestScope<=
/strong></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Component</span></=
em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> LoginAction {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-session" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fac=
tory-scopes-session"></a>Session scope</h4></div></div></div>
<p>Consider the following XML configuration for a bean definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"userPreference=
s"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"com.foo.UserPreferences"</span> <span class=3D"hl-attribute">scope</sp=
an>=3D<span class=3D"hl-value">"session"</span><span class=3D"hl-tag">/&gt;=
</span></pre>
<p>The Spring container creates a new instance of the <code class=3D"litera=
l">UserPreferences</code> bean by using the
<code class=3D"literal">userPreferences</code> bean definition for the life=
time of a single HTTP <code class=3D"literal">Session</code>. In other
words, the <code class=3D"literal">userPreferences</code> bean is effective=
ly scoped at the HTTP <code class=3D"literal">Session</code> level. As
with <code class=3D"literal">request-scoped</code> beans, you can change th=
e internal state of the instance that is
created as much as you want, knowing that other HTTP <code class=3D"literal=
">Session</code> instances that are also
using instances created from the same <code class=3D"literal">userPreferenc=
es</code> bean definition do not see these
changes in state, because they are particular to an individual HTTP <code c=
lass=3D"literal">Session</code>. When the
HTTP <code class=3D"literal">Session</code> is eventually discarded, the be=
an that is scoped to that particular HTTP
<code class=3D"literal">Session</code> is also discarded.</p>
<p>When using annotation-driven components or Java Config, the <code class=
=3D"literal">@SessionScope</code> annotation
can be used to assign a component to the <code class=3D"literal">session</c=
ode> scope.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@SessionScope<=
/strong></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Component</span></=
em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> UserPreferences {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-global-session" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-factory-scopes-global-session"></a>Global session scope</h4></div></div=
></div>
<p>Consider the following bean definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"userPreference=
s"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"com.foo.UserPreferences"</span> <span class=3D"hl-attribute">scope</sp=
an>=3D<span class=3D"hl-value">"globalSession"</span><span class=3D"hl-tag"=
>/&gt;</span></pre>
<p>The <code class=3D"literal">globalSession</code> scope is similar to the=
 standard HTTP <code class=3D"literal">Session</code> scope
(<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#beans-factory-scopes-session" titl=
e=3D"Session scope">described above</a>), and applies only in the context o=
f
portlet-based web applications. The portlet specification defines the notio=
n of a global
<code class=3D"literal">Session</code> that is shared among all portlets th=
at make up a single portlet web
application. Beans defined at the <code class=3D"literal">globalSession</co=
de> scope are scoped (or bound) to the
lifetime of the global portlet <code class=3D"literal">Session</code>.</p>
<p>If you write a standard Servlet-based web application and you define one=
 or more beans
as having <code class=3D"literal">globalSession</code> scope, the standard =
HTTP <code class=3D"literal">Session</code> scope is used, and no
error is raised.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-application" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-factory-scopes-application"></a>Application scope</h4></div></div></div>
<p>Consider the following XML configuration for a bean definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"appPreferences=
"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-valu=
e">"com.foo.AppPreferences"</span> <span class=3D"hl-attribute">scope</span=
>=3D<span class=3D"hl-value">"application"</span><span class=3D"hl-tag">/&g=
t;</span></pre>
<p>The Spring container creates a new instance of the <code class=3D"litera=
l">AppPreferences</code> bean by using the
<code class=3D"literal">appPreferences</code> bean definition once for the =
entire web application. That is, the
<code class=3D"literal">appPreferences</code> bean is scoped at the <code c=
lass=3D"literal">ServletContext</code> level, stored as a regular
<code class=3D"literal">ServletContext</code> attribute. This is somewhat s=
imilar to a Spring singleton bean but
differs in two important ways: It is a singleton per <code class=3D"literal=
">ServletContext</code>, not per Spring
'ApplicationContext' (for which there may be several in any given web appli=
cation),
and it is actually exposed and therefore visible as a <code class=3D"litera=
l">ServletContext</code> attribute.</p>
<p>When using annotation-driven components or Java Config, the <code class=
=3D"literal">@ApplicationScope</code>
annotation can be used to assign a component to the <code class=3D"literal"=
>application</code> scope.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ApplicationSc=
ope</strong></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Component</span></=
em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppPreferences {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-other-injection" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#b=
eans-factory-scopes-other-injection"></a>Scoped beans as dependencies</h4><=
/div></div></div>
<p>The Spring IoC container manages not only the instantiation of your obje=
cts (beans),
but also the wiring up of collaborators (or dependencies). If you want to i=
nject (for
example) an HTTP request scoped bean into another bean of a longer-lived sc=
ope, you may
choose to inject an AOP proxy in place of the scoped bean. That is, you nee=
d to inject
a proxy object that exposes the same public interface as the scoped object =
but that can
also retrieve the real target object from the relevant scope (such as an HT=
TP request)
and delegate method calls onto the real object.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>You may also use <code class=3D"literal">&lt;aop:scoped-proxy/&gt;</code=
> between beans that are scoped as <code class=3D"literal">singleton</code>=
,
with the reference then going through an intermediate proxy that is seriali=
zable
and therefore able to re-obtain the target singleton bean on deserializatio=
n.</p>
<p>When declaring <code class=3D"literal">&lt;aop:scoped-proxy/&gt;</code> =
against a bean of scope <code class=3D"literal">prototype</code>, every met=
hod
call on the shared proxy will lead to the creation of a new target instance=
 which the
call is then being forwarded to.</p>
<p>Also, scoped proxies are not the only way to access beans from shorter s=
copes in a
lifecycle-safe fashion. You may also simply declare your injection point (i=
.e. the
constructor/setter argument or autowired field) as <code class=3D"literal">=
ObjectFactory&lt;MyTargetBean&gt;</code>,
allowing for a <code class=3D"literal">getObject()</code> call to retrieve =
the current instance on demand every
time it is needed - without holding on to the instance or storing it separa=
tely.</p>
<p>As an extended variant, you may declare <code class=3D"literal">ObjectPr=
ovider&lt;MyTargetBean&gt;</code> which delivers
several additional access variants, including <code class=3D"literal">getIf=
Available</code> and <code class=3D"literal">getIfUnique</code>.</p>
<p>The JSR-330 variant of this is called <code class=3D"literal">Provider</=
code>, used with a <code class=3D"literal">Provider&lt;MyTargetBean&gt;</co=
de>
declaration and a corresponding <code class=3D"literal">get()</code> call f=
or every retrieval attempt.
See <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-standard-annotations" tit=
le=3D"7.11&nbsp;Using JSR 330 Standard Annotations">here</a> for more detai=
ls on JSR-330 overall.</p>
</td></tr></tbody></table></div>
<p>The configuration in the following example is only one line, but it is i=
mportant to
understand the "why" as well as the "how" behind it.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- an HTTP Session-scoped bean exposed =
as a proxy --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"userPreferences"</span> <span class=3D"h=
l-attribute">class</span>=3D<span class=3D"hl-value">"com.foo.UserPreferenc=
es"</span> <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-va=
lue">"session"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- instructs the container to proxy=
 the surrounding bean --&gt;</span>
        <span class=3D"hl-tag">&lt;aop:scoped-proxy/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- a singleton-scoped bean injected wit=
h a proxy to the above bean --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"userService"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"com.foo.SimpleUserService=
"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- a reference to the proxied userP=
references bean --&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"userPreferences"</span> <span =
class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"userPreferenc=
es"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>To create such a proxy, you insert a child <code class=3D"literal">&lt;a=
op:scoped-proxy/&gt;</code> element into a scoped
bean definition (see <a class=3D"xref" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-=
scopes-other-injection-proxies" title=3D"Choosing the type of proxy to crea=
te">the section called =93Choosing the type of proxy to create=94</a> and
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#xsd-configuration" title=3D"41.&nbs=
p;XML Schema-based configuration">Chapter&nbsp;41, <i>XML Schema-based conf=
iguration</i></a>). Why do definitions of beans scoped at the <code class=
=3D"literal">request</code>, <code class=3D"literal">session</code>,
<code class=3D"literal">globalSession</code> and custom-scope levels requir=
e the <code class=3D"literal">&lt;aop:scoped-proxy/&gt;</code> element?
Let=92s examine the following singleton bean definition and contrast it wit=
h what you need
to define for the aforementioned scopes (note that the following <code clas=
s=3D"literal">userPreferences</code> bean
definition as it stands is <span class=3D"emphasis"><em>incomplete</em></sp=
an>).</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"userPreference=
s"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"com.foo.UserPreferences"</span> <span class=3D"hl-attribute">scope</sp=
an>=3D<span class=3D"hl-value">"session"</span><span class=3D"hl-tag">/&gt;=
</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"userManager"</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"com.foo.UserManager"</span><s=
pan class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"userPreferences"</span> <span clas=
s=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"userPreferences"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>In the preceding example, the singleton bean <code class=3D"literal">use=
rManager</code> is injected with a reference
to the HTTP <code class=3D"literal">Session</code>-scoped bean <code class=
=3D"literal">userPreferences</code>. The salient point here is that the
<code class=3D"literal">userManager</code> bean is a singleton: it will be =
instantiated <span class=3D"emphasis"><em>exactly once</em></span> per
container, and its dependencies (in this case only one, the <code class=3D"=
literal">userPreferences</code> bean) are
also injected only once. This means that the <code class=3D"literal">userMa=
nager</code> bean will only operate on the
exact same <code class=3D"literal">userPreferences</code> object, that is, =
the one that it was originally injected
with.</p>
<p>This is <span class=3D"emphasis"><em>not</em></span> the behavior you wa=
nt when injecting a shorter-lived scoped bean into a
longer-lived scoped bean, for example injecting an HTTP <code class=3D"lite=
ral">Session</code>-scoped collaborating
bean as a dependency into singleton bean. Rather, you need a single <code c=
lass=3D"literal">userManager</code>
object, and for the lifetime of an HTTP <code class=3D"literal">Session</co=
de>, you need a <code class=3D"literal">userPreferences</code> object
that is specific to said HTTP <code class=3D"literal">Session</code>. Thus =
the container creates an object that
exposes the exact same public interface as the <code class=3D"literal">User=
Preferences</code> class (ideally an
object that <span class=3D"emphasis"><em>is a</em></span> <code class=3D"li=
teral">UserPreferences</code> instance) which can fetch the real
<code class=3D"literal">UserPreferences</code> object from the scoping mech=
anism (HTTP request, <code class=3D"literal">Session</code>, etc.). The
container injects this proxy object into the <code class=3D"literal">userMa=
nager</code> bean, which is unaware that
this <code class=3D"literal">UserPreferences</code> reference is a proxy. I=
n this example, when a <code class=3D"literal">UserManager</code>
instance invokes a method on the dependency-injected <code class=3D"literal=
">UserPreferences</code> object, it
actually is invoking a method on the proxy. The proxy then fetches the real
<code class=3D"literal">UserPreferences</code> object from (in this case) t=
he HTTP <code class=3D"literal">Session</code>, and delegates the
method invocation onto the retrieved real <code class=3D"literal">UserPrefe=
rences</code> object.</p>
<p>Thus you need the following, correct and complete, configuration when in=
jecting
<code class=3D"literal">request-</code>, <code class=3D"literal">session-</=
code>, and <code class=3D"literal">globalSession-scoped</code> beans into c=
ollaborating objects:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"userPreference=
s"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"com.foo.UserPreferences"</span> <span class=3D"hl-attribute">scope</sp=
an>=3D<span class=3D"hl-value">"session"</span><span class=3D"hl-tag">&gt;<=
/span>
    <span class=3D"hl-tag">&lt;aop:scoped-proxy/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"userManager"</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"com.foo.UserManager"</span><s=
pan class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"userPreferences"</span> <span clas=
s=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"userPreferences"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-factory-scopes-other-injection-proxies" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#beans-factory-scopes-other-injection-proxies"></a>Choosing the type =
of proxy to create</h5></div></div></div>
<p>By default, when the Spring container creates a proxy for a bean that is=
 marked up with
the <code class=3D"literal">&lt;aop:scoped-proxy/&gt;</code> element, <span=
 class=3D"emphasis"><em>a CGLIB-based class proxy is created</em></span>.</=
p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>CGLIB proxies only intercept public method calls! Do not call non-public=
 methods
on such a proxy; they will not be delegated to the actual scoped target obj=
ect.</p>
</td></tr></tbody></table></div>
<p>Alternatively, you can configure the Spring container to create standard=
 JDK
interface-based proxies for such scoped beans, by specifying <code class=3D=
"literal">false</code> for the value of
the <code class=3D"literal">proxy-target-class</code> attribute of the <cod=
e class=3D"literal">&lt;aop:scoped-proxy/&gt;</code> element. Using JDK
interface-based proxies means that you do not need additional libraries in =
your
application classpath to effect such proxying. However, it also means that =
the class of
the scoped bean must implement at least one interface, and <span class=3D"e=
mphasis"><em>that all</em></span> collaborators
into which the scoped bean is injected must reference the bean through one =
of its
interfaces.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- DefaultUse=
rPreferences implements the UserPreferences interface --&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"userPreferences"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"com.foo.DefaultUserPrefer=
ences"</span> <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl=
-value">"session"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;aop:scoped-proxy</span> <span class=3D"hl-at=
tribute">proxy-target-class</span>=3D<span class=3D"hl-value">"false"</span=
><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"userManager"</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"com.foo.UserManager"</span><s=
pan class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"userPreferences"</span> <span clas=
s=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"userPreferences"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>For more detailed information about choosing class-based or interface-ba=
sed proxying,
see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#aop-proxying" title=3D"11.6&nbs=
p;Proxying mechanisms">Section&nbsp;11.6, =93Proxying mechanisms=94</a>.</p=
>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-scopes-custom" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fact=
ory-scopes-custom"></a>7.5.5&nbsp;Custom scopes</h3></div></div></div>
<p>The bean scoping mechanism is extensible; You can define your own
scopes, or even redefine existing scopes, although the latter is considered=
 bad practice
and you <span class=3D"emphasis"><em>cannot</em></span> override the built-=
in <code class=3D"literal">singleton</code> and <code class=3D"literal">pro=
totype</code> scopes.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-custom-creating" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#b=
eans-factory-scopes-custom-creating"></a>Creating a custom scope</h4></div>=
</div></div>
<p>To integrate your custom scope(s) into the Spring container, you need to=
 implement the
<code class=3D"literal">org.springframework.beans.factory.config.Scope</cod=
e> interface, which is described in this
section. For an idea of how to implement your own scopes, see the <code cla=
ss=3D"literal">Scope</code>
implementations that are supplied with the Spring Framework itself and the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/config/Scope.html=
" target=3D"_top"><code class=3D"literal">Scope</code> javadocs</a>,
which explains the methods you need to implement in more detail.</p>
<p>The <code class=3D"literal">Scope</code> interface has four methods to g=
et objects from the scope, remove them from
the scope, and allow them to be destroyed.</p>
<p>The following method returns the object from the underlying scope. The s=
ession scope
implementation, for example, returns the session-scoped bean (and if it doe=
s not exist,
the method returns a new instance of the bean, after having bound it to the=
 session for
future reference).</p>
<pre class=3D"programlisting">Object get(String name, ObjectFactory objectF=
actory)</pre>
<p>The following method removes the object from the underlying scope. The s=
ession scope
implementation for example, removes the session-scoped bean from the underl=
ying session.
The object should be returned, but you can return null if the object with t=
he specified
name is not found.</p>
<pre class=3D"programlisting">Object remove(String name)</pre>
<p>The following method registers the callbacks the scope should execute wh=
en it is
destroyed or when the specified object in the scope is destroyed. Refer to =
the javadocs
or a Spring scope implementation for more information on destruction callba=
cks.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">void</span> regist=
erDestructionCallback(String name, Runnable destructionCallback)</pre>
<p>The following method obtains the conversation identifier for the underly=
ing scope. This
identifier is different for each scope. For a session scoped implementation=
, this
identifier can be the session identifier.</p>
<pre class=3D"programlisting">String getConversationId()</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-scopes-custom-using" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-factory-scopes-custom-using"></a>Using a custom scope</h4></div></div></d=
iv>
<p>After you write and test one or more custom <code class=3D"literal">Scop=
e</code> implementations, you need to make
the Spring container aware of your new scope(s). The following method is th=
e central
method to register a new <code class=3D"literal">Scope</code> with the Spri=
ng container:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">void</span> regist=
erScope(String scopeName, Scope scope);</pre>
<p>This method is declared on the <code class=3D"literal">ConfigurableBeanF=
actory</code> interface, which is available
on most of the concrete <code class=3D"literal">ApplicationContext</code> i=
mplementations that ship with Spring via
the BeanFactory property.</p>
<p>The first argument to the <code class=3D"literal">registerScope(..)</cod=
e> method is the unique name associated with
a scope; examples of such names in the Spring container itself are <code cl=
ass=3D"literal">singleton</code> and
<code class=3D"literal">prototype</code>. The second argument to the <code =
class=3D"literal">registerScope(..)</code> method is an actual instance
of the custom <code class=3D"literal">Scope</code> implementation that you =
wish to register and use.</p>
<p>Suppose that you write your custom <code class=3D"literal">Scope</code> =
implementation, and then register it as below.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The example below uses <code class=3D"literal">SimpleThreadScope</code> =
which is included with Spring, but not
registered by default. The instructions would be the same for your own cust=
om <code class=3D"literal">Scope</code>
implementations.</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting">Scope threadScope =3D <span class=3D"hl-keywo=
rd">new</span> SimpleThreadScope();
beanFactory.registerScope(<span class=3D"hl-string">"thread"</span>, thread=
Scope);</pre>
<p>You then create bean definitions that adhere to the scoping rules of you=
r custom <code class=3D"literal">Scope</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"..."</span> <s=
pan class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"..."</s=
pan> <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-value">"=
thread"</span><span class=3D"hl-tag">&gt;</span></pre>
<p>With a custom <code class=3D"literal">Scope</code> implementation, you a=
re not limited to programmatic registration
of the scope. You can also do the <code class=3D"literal">Scope</code> regi=
stration declaratively, using the
<code class=3D"literal">CustomScopeConfigurer</code> class:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"org.springframework.beans.factory.con=
fig.CustomScopeConfigurer"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"scopes"</span><span class=3D"h=
l-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;map&gt;</span>
                <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"thread"</span><span class=
=3D"hl-tag">&gt;</span>
                    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"h=
l-attribute">class</span>=3D<span class=3D"hl-value">"org.springframework.c=
ontext.support.SimpleThreadScope"</span><span class=3D"hl-tag">/&gt;</span>
                <span class=3D"hl-tag">&lt;/entry&gt;</span>
            <span class=3D"hl-tag">&lt;/map&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"bar"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Bar"</span> <span class=3D"hl=
-attribute">scope</span>=3D<span class=3D"hl-value">"thread"</span><span cl=
ass=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"Rick"</span><span clas=
s=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;aop:scoped-proxy/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"foo"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"x.y.Foo"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"bar"</span> <span class=3D"hl-=
attribute">ref</span>=3D<span class=3D"hl-value">"bar"</span><span class=3D=
"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>When you place <code class=3D"literal">&lt;aop:scoped-proxy/&gt;</code> =
in a <code class=3D"literal">FactoryBean</code> implementation, it is the f=
actory
bean itself that is scoped, not the object returned from <code class=3D"lit=
eral">getObject()</code>.</p>
</td></tr></tbody></table></div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-factory-nature" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-nature"></a>7.6&nbsp;Customizing the nature of a bean</h=
2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-lifecycle" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-=
lifecycle"></a>7.6.1&nbsp;Lifecycle callbacks</h3></div></div></div>
<p>To interact with the container=92s management of the bean lifecycle, you=
 can implement the
Spring <code class=3D"literal">InitializingBean</code> and <code class=3D"l=
iteral">DisposableBean</code> interfaces. The container calls
<code class=3D"literal">afterPropertiesSet()</code> for the former and <cod=
e class=3D"literal">destroy()</code> for the latter to allow the bean
to perform certain actions upon initialization and destruction of your bean=
s.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>The JSR-250 <code class=3D"literal">@PostConstruct</code> and <code clas=
s=3D"literal">@PreDestroy</code> annotations are generally considered best
practice for receiving lifecycle callbacks in a modern Spring application. =
Using these
annotations means that your beans are not coupled to Spring specific interf=
aces. For
details see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and=
-predestroy-annotations" title=3D"7.9.8&nbsp;@PostConstruct and @PreDestroy=
">Section&nbsp;7.9.8, =93@PostConstruct and @PreDestroy=94</a>.</p>
<p>If you don=92t want to use the JSR-250 annotations but you are still loo=
king to remove
coupling consider the use of init-method and destroy-method object definiti=
on metadata.</p>
</td></tr></tbody></table></div>
<p>Internally, the Spring Framework uses <code class=3D"literal">BeanPostPr=
ocessor</code> implementations to process any
callback interfaces it can find and call the appropriate methods. If you ne=
ed custom
features or other lifecycle behavior Spring does not offer out-of-the-box, =
you can
implement a <code class=3D"literal">BeanPostProcessor</code> yourself. For =
more information, see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-extension" title=3D"7=
.8&nbsp;Container Extension Points">Section&nbsp;7.8, =93Container Extensio=
n Points=94</a>.</p>
<p>In addition to the initialization and destruction callbacks, Spring-mana=
ged objects may
also implement the <code class=3D"literal">Lifecycle</code> interface so th=
at those objects can participate in the
startup and shutdown process as driven by the container=92s own lifecycle.<=
/p>
<p>The lifecycle callback interfaces are described in this section.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-lifecycle-initializingbean" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-factory-lifecycle-initializingbean"></a>Initialization callbacks</=
h4></div></div></div>
<p>The <code class=3D"literal">org.springframework.beans.factory.Initializi=
ngBean</code> interface allows a bean to
perform initialization work after all necessary properties on the bean have=
 been set by
the container. The <code class=3D"literal">InitializingBean</code> interfac=
e specifies a single method:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">void</span> afterP=
ropertiesSet() <span class=3D"hl-keyword">throws</span> Exception;</pre>
<p>It is recommended that you do not use the <code class=3D"literal">Initia=
lizingBean</code> interface because it
unnecessarily couples the code to Spring. Alternatively, use
the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predest=
roy-annotations" title=3D"7.9.8&nbsp;@PostConstruct and @PreDestroy"><code =
class=3D"literal">@PostConstruct</code></a> annotation or
specify a POJO initialization method. In the case of XML-based configuratio=
n metadata,
you use the <code class=3D"literal">init-method</code> attribute to specify=
 the name of the method that has a void
no-argument signature. With Java config, you use the <code class=3D"literal=
">initMethod</code> attribute of <code class=3D"literal">@Bean</code>,
see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-java-lifecycle-callbacks"=
 title=3D"Receiving lifecycle callbacks">the section called =93Receiving li=
fecycle callbacks=94</a>. For example, the following:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleInitBea=
n"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"examples.ExampleBean"</span> <span class=3D"hl-attribute">init-method<=
/span>=3D<span class=3D"hl-value">"init"</span><span class=3D"hl-tag">/&gt;=
</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ExampleBean {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> init() {
        <span class=3D"hl-comment">// do some initialization work</span>
    }
}</pre>
<p>=85&#8203;is exactly the same as=85&#8203;</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleInitBea=
n"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"examples.AnotherExampleBean"</span><span class=3D"hl-tag">/&gt;</span>=
</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> AnotherExampleBean <span class=3D"hl-ke=
yword">implements</span> InitializingBean {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> afterPropertiesSet() {
        <span class=3D"hl-comment">// do some initialization work</span>
    }
}</pre>
<p>but does not couple the code to Spring.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-lifecycle-disposablebean" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-factory-lifecycle-disposablebean"></a>Destruction callbacks</h4></di=
v></div></div>
<p>Implementing the <code class=3D"literal">org.springframework.beans.facto=
ry.DisposableBean</code> interface allows a
bean to get a callback when the container containing it is destroyed. The
<code class=3D"literal">DisposableBean</code> interface specifies a single =
method:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">void</span> destro=
y() <span class=3D"hl-keyword">throws</span> Exception;</pre>
<p>It is recommended that you do not use the <code class=3D"literal">Dispos=
ableBean</code> callback interface because it
unnecessarily couples the code to Spring. Alternatively, use
the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predest=
roy-annotations" title=3D"7.9.8&nbsp;@PostConstruct and @PreDestroy"><code =
class=3D"literal">@PreDestroy</code></a> annotation or
specify a generic method that is supported by bean definitions. With XML-ba=
sed
configuration metadata, you use the <code class=3D"literal">destroy-method<=
/code> attribute on the <code class=3D"literal">&lt;bean/&gt;</code>.
With Java config, you use the <code class=3D"literal">destroyMethod</code> =
attribute of <code class=3D"literal">@Bean</code>, see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-java-lifecycle-callbacks" tit=
le=3D"Receiving lifecycle callbacks">the section called =93Receiving lifecy=
cle callbacks=94</a>. For example, the following definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleInitBea=
n"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"examples.ExampleBean"</span> <span class=3D"hl-attribute">destroy-meth=
od</span>=3D<span class=3D"hl-value">"cleanup"</span><span class=3D"hl-tag"=
>/&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ExampleBean {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> cleanup() {
        <span class=3D"hl-comment">// do some destruction work (like releas=
ing pooled connections)</span>
    }
}</pre>
<p>is exactly the same as:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"exampleInitBea=
n"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-val=
ue">"examples.AnotherExampleBean"</span><span class=3D"hl-tag">/&gt;</span>=
</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> AnotherExampleBean <span class=3D"hl-ke=
yword">implements</span> DisposableBean {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> destroy() {
        <span class=3D"hl-comment">// do some destruction work (like releas=
ing pooled connections)</span>
    }
}</pre>
<p>but does not couple the code to Spring.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>The <code class=3D"literal">destroy-method</code> attribute of a <code c=
lass=3D"literal">&lt;bean&gt;</code> element can be assigned a special
<code class=3D"literal">(inferred)</code> value which instructs Spring to a=
utomatically detect a public <code class=3D"literal">close</code> or
<code class=3D"literal">shutdown</code> method on the specific bean class (=
any class that implements
<code class=3D"literal">java.lang.AutoCloseable</code> or <code class=3D"li=
teral">java.io.Closeable</code> would therefore match). This special
<code class=3D"literal">(inferred)</code> value can also be set on the <cod=
e class=3D"literal">default-destroy-method</code> attribute of a
<code class=3D"literal">&lt;beans&gt;</code> element to apply this behavior=
 to an entire set of beans (see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-default-ini=
t-destroy-methods" title=3D"Default initialization and destroy methods">the=
 section called =93Default initialization and destroy methods=94</a>). Note=
 that this is the
default behavior with Java config.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-lifecycle-default-init-destroy-methods" href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#beans-factory-lifecycle-default-init-destroy-methods"></a>De=
fault initialization and destroy methods</h4></div></div></div>
<p>When you write initialization and destroy method callbacks that do not u=
se the
Spring-specific <code class=3D"literal">InitializingBean</code> and <code c=
lass=3D"literal">DisposableBean</code> callback interfaces, you
typically write methods with names such as <code class=3D"literal">init()</=
code>, <code class=3D"literal">initialize()</code>, <code class=3D"literal"=
>dispose()</code>, and so
on. Ideally, the names of such lifecycle callback methods are standardized =
across a
project so that all developers use the same method names and ensure consist=
ency.</p>
<p>You can configure the Spring container to <code class=3D"literal">look</=
code> for named initialization and destroy
callback method names on <span class=3D"emphasis"><em>every</em></span> bea=
n. This means that you, as an application
developer, can write your application classes and use an initialization cal=
lback called
<code class=3D"literal">init()</code>, without having to configure an <code=
 class=3D"literal">init-method=3D"init"</code> attribute with each bean
definition. The Spring IoC container calls that method when the bean is cre=
ated (and in
accordance with the standard lifecycle callback contract described previous=
ly). This
feature also enforces a consistent naming convention for initialization and=
 destroy
method callbacks.</p>
<p>Suppose that your initialization callback methods are named <code class=
=3D"literal">init()</code> and destroy
callback methods are named <code class=3D"literal">destroy()</code>. Your c=
lass will resemble the class in the
following example.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> DefaultBlogService <span class=3D"hl-ke=
yword">implements</span> BlogService {

    <span class=3D"hl-keyword">private</span> BlogDao blogDao;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setBlogDao(BlogDao blogDao) {
        <span class=3D"hl-keyword">this</span>.blogDao =3D blogDao;
    }

    <span class=3D"hl-comment">// this is (unsurprisingly) the initializati=
on callback method</span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> init() {
        <span class=3D"hl-keyword">if</span> (<span class=3D"hl-keyword">th=
is</span>.blogDao =3D=3D null) {
            <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keywo=
rd">new</span> IllegalStateException(<span class=3D"hl-string">"The [blogDa=
o] property must be set."</span>);
        }
    }
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">default-init-method</span>=3D<span class=3D"hl-valu=
e">"init"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"blogService"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"com.foo.DefaultBlogServic=
e"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"blogDao"</span> <span class=3D=
"hl-attribute">ref</span>=3D<span class=3D"hl-value">"blogDao"</span><span =
class=3D"hl-tag"> /&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The presence of the <code class=3D"literal">default-init-method</code> a=
ttribute on the top-level <code class=3D"literal">&lt;beans/&gt;</code> ele=
ment
attribute causes the Spring IoC container to recognize a method called <cod=
e class=3D"literal">init</code> on beans
as the initialization method callback. When a bean is created and assembled=
, if the bean
class has such a method, it is invoked at the appropriate time.</p>
<p>You configure destroy method callbacks similarly (in XML, that is) by us=
ing the
<code class=3D"literal">default-destroy-method</code> attribute on the top-=
level <code class=3D"literal">&lt;beans/&gt;</code> element.</p>
<p>Where existing bean classes already have callback methods that are named=
 at variance
with the convention, you can override the default by specifying (in XML, th=
at is) the
method name using the <code class=3D"literal">init-method</code> and <code =
class=3D"literal">destroy-method</code> attributes of the <code class=3D"li=
teral">&lt;bean/&gt;</code>
itself.</p>
<p>The Spring container guarantees that a configured initialization callbac=
k is called
immediately after a bean is supplied with all dependencies. Thus the initia=
lization
callback is called on the raw bean reference, which means that AOP intercep=
tors and so
forth are not yet applied to the bean. A target bean is fully created <span=
 class=3D"emphasis"><em>first</em></span>,
<span class=3D"emphasis"><em>then</em></span> an AOP proxy (for example) wi=
th its interceptor chain is applied. If the target
bean and the proxy are defined separately, your code can even interact with=
 the raw
target bean, bypassing the proxy. Hence, it would be inconsistent to apply =
the
interceptors to the init method, because doing so would couple the lifecycl=
e of the
target bean with its proxy/interceptors and leave strange semantics when yo=
ur code
interacts directly to the raw target bean.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-lifecycle-combined-effects" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-factory-lifecycle-combined-effects"></a>Combining lifecycle mechan=
isms</h4></div></div></div>
<p>As of Spring 2.5, you have three options for controlling bean lifecycle =
behavior: the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializin=
gbean" title=3D"Initialization callbacks"><code class=3D"literal">Initializ=
ingBean</code></a> and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposableb=
ean" title=3D"Destruction callbacks"><code class=3D"literal">DisposableBean=
</code></a> callback interfaces; custom
<code class=3D"literal">init()</code> and <code class=3D"literal">destroy()=
</code> methods; and the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-=
annotations" title=3D"7.9.8&nbsp;@PostConstruct and @PreDestroy"><code clas=
s=3D"literal">@PostConstruct</code> and <code class=3D"literal">@PreDestroy=
</code>
annotations</a>. You can combine these mechanisms to control a given bean.<=
/p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If multiple lifecycle mechanisms are configured for a bean, and each mec=
hanism is
configured with a different method name, then each configured method is exe=
cuted in the
order listed below. However, if the same method name is configured - for ex=
ample,
<code class=3D"literal">init()</code> for an initialization method - for mo=
re than one of these lifecycle mechanisms,
that method is executed once, as explained in the preceding section.</p>
</td></tr></tbody></table></div>
<p>Multiple lifecycle mechanisms configured for the same bean, with differe=
nt
initialization methods, are called as follows:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Methods annotated with <code class=3D"literal">@PostConstruct</code>
</li><li class=3D"listitem">
<code class=3D"literal">afterPropertiesSet()</code> as defined by the <code=
 class=3D"literal">InitializingBean</code> callback interface
</li><li class=3D"listitem">
A custom configured <code class=3D"literal">init()</code> method
</li></ul></div>
<p>Destroy methods are called in the same order:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Methods annotated with <code class=3D"literal">@PreDestroy</code>
</li><li class=3D"listitem">
<code class=3D"literal">destroy()</code> as defined by the <code class=3D"l=
iteral">DisposableBean</code> callback interface
</li><li class=3D"listitem">
A custom configured <code class=3D"literal">destroy()</code> method
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-lifecycle-processor" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-factory-lifecycle-processor"></a>Startup and shutdown callbacks</h4></div=
></div></div>
<p>The <code class=3D"literal">Lifecycle</code> interface defines the essen=
tial methods for any object that has its own
lifecycle requirements (e.g. starts and stops some background process):</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Lifecycle {

    <span class=3D"hl-keyword">void</span> start();

    <span class=3D"hl-keyword">void</span> stop();

    <span class=3D"hl-keyword">boolean</span> isRunning();
}</pre>
<p>Any Spring-managed object may implement that interface. Then, when the
<code class=3D"literal">ApplicationContext</code> itself receives start and=
 stop signals, e.g. for a stop/restart
scenario at runtime, it will cascade those calls to all <code class=3D"lite=
ral">Lifecycle</code> implementations
defined within that context. It does this by delegating to a <code class=3D=
"literal">LifecycleProcessor</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> LifecycleProcessor <span class=3D"h=
l-keyword">extends</span> Lifecycle {

    <span class=3D"hl-keyword">void</span> onRefresh();

    <span class=3D"hl-keyword">void</span> onClose();
}</pre>
<p>Notice that the <code class=3D"literal">LifecycleProcessor</code> is its=
elf an extension of the <code class=3D"literal">Lifecycle</code>
interface. It also adds two other methods for reacting to the context being=
 refreshed
and closed.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Note that the regular <code class=3D"literal">org.springframework.contex=
t.Lifecycle</code> interface is just a plain
contract for explicit start/stop notifications and does NOT imply auto-star=
tup at context
refresh time. Consider implementing <code class=3D"literal">org.springframe=
work.context.SmartLifecycle</code> instead
for fine-grained control over auto-startup of a specific bean (including st=
artup phases).
Also, please note that stop notifications are not guaranteed to come before=
 destruction:
On regular shutdown, all <code class=3D"literal">Lifecycle</code> beans wil=
l first receive a stop notification before
the general destruction callbacks are being propagated; however, on hot ref=
resh during a
context=92s lifetime or on aborted refresh attempts, only destroy methods w=
ill be called.</p>
</td></tr></tbody></table></div>
<p>The order of startup and shutdown invocations can be important. If a "de=
pends-on"
relationship exists between any two objects, the dependent side will start =
<span class=3D"emphasis"><em>after</em></span> its
dependency, and it will stop <span class=3D"emphasis"><em>before</em></span=
> its dependency. However, at times the direct
dependencies are unknown. You may only know that objects of a certain type =
should start
prior to objects of another type. In those cases, the <code class=3D"litera=
l">SmartLifecycle</code> interface defines
another option, namely the <code class=3D"literal">getPhase()</code> method=
 as defined on its super-interface,
<code class=3D"literal">Phased</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Phased {

    <span class=3D"hl-keyword">int</span> getPhase();
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> SmartLifecycle <span class=3D"hl-ke=
yword">extends</span> Lifecycle, Phased {

    <span class=3D"hl-keyword">boolean</span> isAutoStartup();

    <span class=3D"hl-keyword">void</span> stop(Runnable callback);
}</pre>
<p>When starting, the objects with the lowest phase start first, and when s=
topping, the
reverse order is followed. Therefore, an object that implements <code class=
=3D"literal">SmartLifecycle</code> and
whose <code class=3D"literal">getPhase()</code> method returns <code class=
=3D"literal">Integer.MIN_VALUE</code> would be among the first to start
and the last to stop. At the other end of the spectrum, a phase value of
<code class=3D"literal">Integer.MAX_VALUE</code> would indicate that the ob=
ject should be started last and stopped
first (likely because it depends on other processes to be running). When co=
nsidering the
phase value, it=92s also important to know that the default phase for any "=
normal"
<code class=3D"literal">Lifecycle</code> object that does not implement <co=
de class=3D"literal">SmartLifecycle</code> would be 0. Therefore, any
negative phase value would indicate that an object should start before thos=
e standard
components (and stop after them), and vice versa for any positive phase val=
ue.</p>
<p>As you can see the stop method defined by <code class=3D"literal">SmartL=
ifecycle</code> accepts a callback. Any
implementation <span class=3D"emphasis"><em>must</em></span> invoke that ca=
llback=92s <code class=3D"literal">run()</code> method after that implement=
ation=92s
shutdown process is complete. That enables asynchronous shutdown where nece=
ssary since
the default implementation of the <code class=3D"literal">LifecycleProcesso=
r</code> interface,
<code class=3D"literal">DefaultLifecycleProcessor</code>, will wait up to i=
ts timeout value for the group of objects
within each phase to invoke that callback. The default per-phase timeout is=
 30 seconds.
You can override the default lifecycle processor instance by defining a bea=
n named
"lifecycleProcessor" within the context. If you only want to modify the tim=
eout, then
defining the following would be sufficient:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"lifecycleProce=
ssor"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-=
value">"org.springframework.context.support.DefaultLifecycleProcessor"</spa=
n><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- timeout value in milliseconds --&gt;=
</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"timeoutPerShutdownPhase"</span> <s=
pan class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"10000"<=
/span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>As mentioned, the <code class=3D"literal">LifecycleProcessor</code> inte=
rface defines callback methods for the
refreshing and closing of the context as well. The latter will simply drive=
 the shutdown
process as if <code class=3D"literal">stop()</code> had been called explici=
tly, but it will happen when the context is
closing. The 'refresh' callback on the other hand enables another feature o=
f
<code class=3D"literal">SmartLifecycle</code> beans. When the context is re=
freshed (after all objects have been
instantiated and initialized), that callback will be invoked, and at that p=
oint the
default lifecycle processor will check the boolean value returned by each
<code class=3D"literal">SmartLifecycle</code> object=92s <code class=3D"lit=
eral">isAutoStartup()</code> method. If "true", then that object will be
started at that point rather than waiting for an explicit invocation of the=
 context=92s or
its own <code class=3D"literal">start()</code> method (unlike the context r=
efresh, the context start does not happen
automatically for a standard context implementation). The "phase" value as =
well as any
"depends-on" relationships will determine the startup order in the same way=
 as described
above.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-shutdown" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-s=
hutdown"></a>Shutting down the Spring IoC container gracefully in non-web a=
pplications</h4></div></div></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This section applies only to non-web applications. Spring=92s web-based
<code class=3D"literal">ApplicationContext</code> implementations already h=
ave code in place to shut down the Spring
IoC container gracefully when the relevant web application is shut down.</p=
>
</td></tr></tbody></table></div>
<p>If you are using Spring=92s IoC container in a non-web application envir=
onment; for
example, in a rich client desktop environment; you register a shutdown hook=
 with the
JVM. Doing so ensures a graceful shutdown and calls the relevant destroy me=
thods on your
singleton beans so that all resources are released. Of course, you must sti=
ll configure
and implement these destroy callbacks correctly.</p>
<p>To register a shutdown hook, you call the <code class=3D"literal">regist=
erShutdownHook()</code> method that is
declared on the <code class=3D"literal">ConfigurableApplicationContext</cod=
e> interface:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
springframework.context.ConfigurableApplicationContext;
<span class=3D"hl-keyword">import</span> org.springframework.context.suppor=
t.ClassPathXmlApplicationContext;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> Boot {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(<span class=3D"hl-ke=
yword">final</span> String[] args) <span class=3D"hl-keyword">throws</span>=
 Exception {
        ConfigurableApplicationContext ctx =3D <span class=3D"hl-keyword">n=
ew</span> ClassPathXmlApplicationContext(<span class=3D"hl-string">"beans.x=
ml"</span>);

        <span class=3D"hl-comment">// add a shutdown hook for the above con=
text...</span>
        ctx.registerShutdownHook();

        <span class=3D"hl-comment">// app runs here...</span>

        <span class=3D"hl-comment">// main method exits, hook is called pri=
or to the app shutting down...</span>
    }
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-aware" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-awar=
e"></a>7.6.2&nbsp;ApplicationContextAware and BeanNameAware</h3></div></div=
></div>
<p>When an <code class=3D"literal">ApplicationContext</code> creates an obj=
ect instance that implements the
<code class=3D"literal">org.springframework.context.ApplicationContextAware=
</code> interface, the instance is provided
with a reference to that <code class=3D"literal">ApplicationContext</code>.=
</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> ApplicationContextAware {

    <span class=3D"hl-keyword">void</span> setApplicationContext(Applicatio=
nContext applicationContext) <span class=3D"hl-keyword">throws</span> Beans=
Exception;
}</pre>
<p>Thus beans can manipulate programmatically the <code class=3D"literal">A=
pplicationContext</code> that created them,
through the <code class=3D"literal">ApplicationContext</code> interface, or=
 by casting the reference to a known
subclass of this interface, such as <code class=3D"literal">ConfigurableApp=
licationContext</code>, which exposes
additional functionality. One use would be the programmatic retrieval of ot=
her beans.
Sometimes this capability is useful; however, in general you should avoid i=
t, because it
couples the code to Spring and does not follow the Inversion of Control sty=
le, where
collaborators are provided to beans as properties. Other methods of the
<code class=3D"literal">ApplicationContext</code> provide access to file re=
sources, publishing application events, and
accessing a <code class=3D"literal">MessageSource</code>. These additional =
features are described in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#context-introduction" title=3D"7.15=
&nbsp;Additional capabilities of the ApplicationContext">Section&nbsp;7.15,=
 =93Additional capabilities of the ApplicationContext=94</a></p>
<p>As of Spring 2.5, autowiring is another alternative to obtain reference =
to the
<code class=3D"literal">ApplicationContext</code>. The "traditional" <code =
class=3D"literal">constructor</code> and <code class=3D"literal">byType</co=
de> autowiring modes (as
described in <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire=
" title=3D"7.4.5&nbsp;Autowiring collaborators">Section&nbsp;7.4.5, =93Auto=
wiring collaborators=94</a>) can provide a dependency of type
<code class=3D"literal">ApplicationContext</code> for a constructor argumen=
t or setter method parameter,
respectively. For more flexibility, including the ability to autowire field=
s and
multiple parameter methods, use the new annotation-based autowiring feature=
s. If you do,
the <code class=3D"literal">ApplicationContext</code> is autowired into a f=
ield, constructor argument, or method
parameter that is expecting the <code class=3D"literal">ApplicationContext<=
/code> type if the field, constructor, or
method in question carries the <code class=3D"literal">@Autowired</code> an=
notation. For more information, see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-autowired-annotation" title=
=3D"7.9.2&nbsp;@Autowired">Section&nbsp;7.9.2, =93@Autowired=94</a>.</p>
<p>When an <code class=3D"literal">ApplicationContext</code> creates a clas=
s that implements the
<code class=3D"literal">org.springframework.beans.factory.BeanNameAware</co=
de> interface, the class is provided with
a reference to the name defined in its associated object definition.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> BeanNameAware {

    <span class=3D"hl-keyword">void</span> setBeanName(String name) <span c=
lass=3D"hl-keyword">throws</span> BeansException;
}</pre>
<p>The callback is invoked after population of normal bean properties but b=
efore an
initialization callback such as <code class=3D"literal">InitializingBean</c=
ode> <span class=3D"emphasis"><em>afterPropertiesSet</em></span> or a custo=
m
init-method.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aware-list" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#aware-list"></a>7.6.3&nbsp;=
Other Aware interfaces</h3></div></div></div>
<p>Besides <code class=3D"literal">ApplicationContextAware</code> and <code=
 class=3D"literal">BeanNameAware</code> discussed above, Spring offers a
range of <code class=3D"literal">Aware</code> interfaces that allow beans t=
o indicate to the container that they
require a certain <span class=3D"emphasis"><em>infrastructure</em></span> d=
ependency. The most important <code class=3D"literal">Aware</code> interfac=
es
are summarized below - as a general rule, the name is a good indication of =
the
dependency type:</p>
<div class=3D"table"><a name=3D"beans-factory-nature-aware-list" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#beans-factory-nature-aware-list"></a><p class=3D"title"><b>Tabl=
e&nbsp;7.4.&nbsp;Aware interfaces</b></p><div class=3D"table-contents">
<table summary=3D"Aware interfaces" style=3D"border-collapse: collapse;bord=
er-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid=
 ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=
=3D"col_2"><col class=3D"col_3"></colgroup><thead><tr><th style=3D"border-r=
ight: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top">Name</th><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top">Injected Dependency</th><th style=
=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Explained =
in=85&#8203;</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt s=
olid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><cod=
e class=3D"literal">ApplicationContextAware</code></p></td><td style=3D"bor=
der-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p>Declaring <code class=3D"literal">ApplicationContext</code></=
p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top"><p><a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-aware" title=
=3D"7.6.2&nbsp;ApplicationContextAware and BeanNameAware">Section&nbsp;7.6.=
2, =93ApplicationContextAware and BeanNameAware=94</a></p></td></tr><tr><td=
 style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p><code class=3D"literal">ApplicationEventPublish=
erAware</code></p></td><td style=3D"border-right: 0.5pt solid ; border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Event publisher of the=
 enclosing <code class=3D"literal">ApplicationContext</code></p></td><td st=
yle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a c=
lass=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spr=
ing-framework-reference/htmlsingle/#context-introduction" title=3D"7.15&nbs=
p;Additional capabilities of the ApplicationContext">Section&nbsp;7.15, =93=
Additional capabilities of the ApplicationContext=94</a></p></td></tr><tr><=
td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " alig=
n=3D"left" valign=3D"top"><p><code class=3D"literal">BeanClassLoaderAware</=
code></p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top"><p>Class loader used to load the b=
ean classes.</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"l=
eft" valign=3D"top"><p><a class=3D"xref" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factor=
y-class" title=3D"7.3.2&nbsp;Instantiating beans">Section&nbsp;7.3.2, =93In=
stantiating beans=94</a></p></td></tr><tr><td style=3D"border-right: 0.5pt =
solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><co=
de class=3D"literal">BeanFactoryAware</code></p></td><td style=3D"border-ri=
ght: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"=
top"><p>Declaring <code class=3D"literal">BeanFactory</code></p></td><td st=
yle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a c=
lass=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spr=
ing-framework-reference/htmlsingle/#beans-factory-aware" title=3D"7.6.2&nbs=
p;ApplicationContextAware and BeanNameAware">Section&nbsp;7.6.2, =93Applica=
tionContextAware and BeanNameAware=94</a></p></td></tr><tr><td style=3D"bor=
der-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p><code class=3D"literal">BeanNameAware</code></p></td><td styl=
e=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p>Name of the declaring bean</p></td><td style=3D"borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xref=
" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#beans-factory-aware" title=3D"7.6.2&nbsp;Applicatio=
nContextAware and BeanNameAware">Section&nbsp;7.6.2, =93ApplicationContextA=
ware and BeanNameAware=94</a></p></td></tr><tr><td style=3D"border-right: 0=
.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><=
p><code class=3D"literal">BootstrapContextAware</code></p></td><td style=3D=
"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" =
valign=3D"top"><p>Resource adapter <code class=3D"literal">BootstrapContext=
</code> the container runs in. Typically available only in
JCA aware <code class=3D"literal">ApplicationContext</code>s</p></td><td st=
yle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a c=
lass=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spr=
ing-framework-reference/htmlsingle/#cci" title=3D"32.&nbsp;JCA CCI">Chapter=
&nbsp;32, <i>JCA CCI</i></a></p></td></tr><tr><td style=3D"border-right: 0.=
5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
><code class=3D"literal">LoadTimeWeaverAware</code></p></td><td style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top"><p>Defined <span class=3D"emphasis"><em>weaver</em></span> for =
processing class definition at load time</p></td><td style=3D"border-bottom=
: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xref" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#aop-aj-ltw" title=3D"11.8.4&nbsp;Load-time weaving with A=
spectJ in the Spring Framework">Section&nbsp;11.8.4, =93Load-time weaving w=
ith AspectJ in the Spring Framework=94</a></p></td></tr><tr><td style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top"><p><code class=3D"literal">MessageSourceAware</code></p></td><t=
d style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>Configured strategy for resolving messages (wit=
h support for parametrization and
internationalization)</p></td><td style=3D"border-bottom: 0.5pt solid ; " a=
lign=3D"left" valign=3D"top"><p><a class=3D"xref" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#con=
text-introduction" title=3D"7.15&nbsp;Additional capabilities of the Applic=
ationContext">Section&nbsp;7.15, =93Additional capabilities of the Applicat=
ionContext=94</a></p></td></tr><tr><td style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code clas=
s=3D"literal">NotificationPublisherAware</code></p></td><td style=3D"border=
-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top"><p>Spring JMX notification publisher</p></td><td style=3D"border-b=
ottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xref" h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#jmx-notifications" title=3D"31.7&nbsp;Notifications">S=
ection&nbsp;31.7, =93Notifications=94</a></p></td></tr><tr><td style=3D"bor=
der-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p><code class=3D"literal">PortletConfigAware</code></p></td><td=
 style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>Current <code class=3D"literal">PortletConfig</=
code> the container runs in. Valid only in a web-aware Spring
<code class=3D"literal">ApplicationContext</code></p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xre=
f" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#portlet" title=3D"25.&nbsp;Portlet MVC Framework">=
Chapter&nbsp;25, <i>Portlet MVC Framework</i></a></p></td></tr><tr><td styl=
e=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p><code class=3D"literal">PortletContextAware</code></p=
></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ;=
 " align=3D"left" valign=3D"top"><p>Current <code class=3D"literal">Portlet=
Context</code> the container runs in. Valid only in a web-aware Spring
<code class=3D"literal">ApplicationContext</code></p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xre=
f" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#portlet" title=3D"25.&nbsp;Portlet MVC Framework">=
Chapter&nbsp;25, <i>Portlet MVC Framework</i></a></p></td></tr><tr><td styl=
e=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p><code class=3D"literal">ResourceLoaderAware</code></p=
></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ;=
 " align=3D"left" valign=3D"top"><p>Configured loader for low-level access =
to resources</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"l=
eft" valign=3D"top"><p><a class=3D"xref" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resources" t=
itle=3D"8.&nbsp;Resources">Chapter&nbsp;8, <i>Resources</i></a></p></td></t=
r><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ;=
 " align=3D"left" valign=3D"top"><p><code class=3D"literal">ServletConfigAw=
are</code></p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>Current <code class=3D"lit=
eral">ServletConfig</code> the container runs in. Valid only in a web-aware=
 Spring
<code class=3D"literal">ApplicationContext</code></p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"xre=
f" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#mvc" title=3D"22.&nbsp;Web MVC framework">Chapter&=
nbsp;22, <i>Web MVC framework</i></a></p></td></tr><tr><td style=3D"border-=
right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"lite=
ral">ServletContextAware</code></p></td><td style=3D"border-right: 0.5pt so=
lid ; " align=3D"left" valign=3D"top"><p>Current <code class=3D"literal">Se=
rvletContext</code> the container runs in. Valid only in a web-aware Spring
<code class=3D"literal">ApplicationContext</code></p></td><td style=3D"" al=
ign=3D"left" valign=3D"top"><p><a class=3D"xref" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc"=
 title=3D"22.&nbsp;Web MVC framework">Chapter&nbsp;22, <i>Web MVC framework=
</i></a></p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>Note again that usage of these interfaces ties your code to the Spring A=
PI and does not
follow the Inversion of Control style. As such, they are recommended for in=
frastructure
beans that require programmatic access to the container.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-child-bean-definitions" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#beans-child-bean-definitions"></a>7.7&nbsp;Bean definition inh=
eritance</h2></div></div></div>
<p>A bean definition can contain a lot of configuration information, includ=
ing constructor
arguments, property values, and container-specific information such as init=
ialization
method, static factory method name, and so on. A child bean definition inhe=
rits
configuration data from a parent definition. The child definition can overr=
ide some
values, or add others, as needed. Using parent and child bean definitions c=
an save a lot
of typing. Effectively, this is a form of templating.</p>
<p>If you work with an <code class=3D"literal">ApplicationContext</code> in=
terface programmatically, child bean
definitions are represented by the <code class=3D"literal">ChildBeanDefinit=
ion</code> class. Most users do not work
with them on this level, instead configuring bean definitions declaratively=
 in something
like the <code class=3D"literal">ClassPathXmlApplicationContext</code>. Whe=
n you use XML-based configuration
metadata, you indicate a child bean definition by using the <code class=3D"=
literal">parent</code> attribute,
specifying the parent bean as the value of this attribute.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"inheritedTestB=
ean"</span> <span class=3D"hl-attribute">abstract</span>=3D<span class=3D"h=
l-value">"true"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.beans.TestBean"</span><span class=3D"hl-tag">&gt;</s=
pan>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"parent"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"age"</span> <span class=3D"hl-attr=
ibute">value</span>=3D<span class=3D"hl-value">"1"</span><span class=3D"hl-=
tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"inheritsWithDifferentClass"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.beans.DerivedTestBean"</span>
        <span class=3D"strong"><strong>parent=3D"inheritedTestBean"</strong=
></span> init-method=3D"initialize"&gt;
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"override"</span><span clas=
s=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-comment">&lt;!-- the age property value of 1 will be =
inherited from parent --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>A child bean definition uses the bean class from the parent definition i=
f none is
specified, but can also override it. In the latter case, the child bean cla=
ss must be
compatible with the parent, that is, it must accept the parent=92s property=
 values.</p>
<p>A child bean definition inherits scope, constructor argument values, pro=
perty values, and
method overrides from the parent, with the option to add new values. Any sc=
ope, initialization
method, destroy method, and/or <code class=3D"literal">static</code> factor=
y method settings that you specify will
override the corresponding parent settings.</p>
<p>The remaining settings are <span class=3D"emphasis"><em>always</em></spa=
n> taken from the child definition: <span class=3D"emphasis"><em>depends on=
</em></span>,
<span class=3D"emphasis"><em>autowire mode</em></span>, <span class=3D"emph=
asis"><em>dependency check</em></span>, <span class=3D"emphasis"><em>single=
ton</em></span>, <span class=3D"emphasis"><em>lazy init</em></span>.</p>
<p>The preceding example explicitly marks the parent bean definition as abs=
tract by using
the <code class=3D"literal">abstract</code> attribute. If the parent defini=
tion does not specify a class, explicitly
marking the parent bean definition as <code class=3D"literal">abstract</cod=
e> is required, as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"inheritedTestB=
eanWithoutClass"</span> <span class=3D"hl-attribute">abstract</span>=3D<spa=
n class=3D"hl-value">"true"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"parent"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"age"</span> <span class=3D"hl-attr=
ibute">value</span>=3D<span class=3D"hl-value">"1"</span><span class=3D"hl-=
tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"inheritsWithClass"</span> <span class=3D"hl-=
attribute">class</span>=3D<span class=3D"hl-value">"org.springframework.bea=
ns.DerivedTestBean"</span>
        <span class=3D"hl-attribute">parent</span>=3D<span class=3D"hl-valu=
e">"inheritedTestBeanWithoutClass"</span> <span class=3D"hl-attribute">init=
-method</span>=3D<span class=3D"hl-value">"initialize"</span><span class=3D=
"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"override"</span><span clas=
s=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-comment">&lt;!-- age will inherit the value of 1 from=
 the parent bean definition--&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The parent bean cannot be instantiated on its own because it is incomple=
te, and it is
also explicitly marked as <code class=3D"literal">abstract</code>. When a d=
efinition is <code class=3D"literal">abstract</code> like this, it is
usable only as a pure template bean definition that serves as a parent defi=
nition for
child definitions. Trying to use such an <code class=3D"literal">abstract</=
code> parent bean on its own, by referring
to it as a ref property of another bean or doing an explicit <code class=3D=
"literal">getBean()</code> call with the
parent bean id, returns an error. Similarly, the container=92s internal
<code class=3D"literal">preInstantiateSingletons()</code> method ignores be=
an definitions that are defined as
abstract.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">ApplicationContext</code> pre-instantiates all s=
ingletons by default. Therefore, it is
important (at least for singleton beans) that if you have a (parent) bean d=
efinition
which you intend to use only as a template, and this definition specifies a=
 class, you
must make sure to set the <span class=3D"emphasis"><em>abstract</em></span>=
 attribute to <span class=3D"emphasis"><em>true</em></span>, otherwise the =
application
context will actually (attempt to) pre-instantiate the <code class=3D"liter=
al">abstract</code> bean.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-factory-extension" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-factory-extension"></a>7.8&nbsp;Container Extension Points</h=
2></div></div></div>
<p>Typically, an application developer does not need to subclass <code clas=
s=3D"literal">ApplicationContext</code>
implementation classes. Instead, the Spring IoC container can be extended b=
y plugging in
implementations of special integration interfaces. The next few sections de=
scribe these
integration interfaces.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-extension-bpp" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-fact=
ory-extension-bpp"></a>7.8.1&nbsp;Customizing beans using a BeanPostProcess=
or</h3></div></div></div>
<p>The <code class=3D"literal">BeanPostProcessor</code> interface defines <=
span class=3D"emphasis"><em>callback methods</em></span> that you can imple=
ment to
provide your own (or override the container=92s default) instantiation logi=
c,
dependency-resolution logic, and so forth. If you want to implement some cu=
stom logic
after the Spring container finishes instantiating, configuring, and initial=
izing a bean,
you can plug in one or more <code class=3D"literal">BeanPostProcessor</code=
> implementations.</p>
<p>You can configure multiple <code class=3D"literal">BeanPostProcessor</co=
de> instances, and you can control the order
in which these <code class=3D"literal">BeanPostProcessor</code>s execute by=
 setting the <code class=3D"literal">order</code> property. You can
set this property only if the <code class=3D"literal">BeanPostProcessor</co=
de> implements the <code class=3D"literal">Ordered</code> interface; if
you write your own <code class=3D"literal">BeanPostProcessor</code> you sho=
uld consider implementing the <code class=3D"literal">Ordered</code>
interface too. For further details, consult the javadocs of the <code class=
=3D"literal">BeanPostProcessor</code> and
<code class=3D"literal">Ordered</code> interfaces. See also the note below =
on
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-programmatically-regi=
stering-beanpostprocessors" title=3D"Programmatically registering BeanPostP=
rocessors">programmatic
registration of <code class=3D"literal">BeanPostProcessor</code>s</a>.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">BeanPostProcessor</code>s operate on bean (or ob=
ject) <span class=3D"emphasis"><em>instances</em></span>; that is to say, t=
he
Spring IoC container instantiates a bean instance and <span class=3D"emphas=
is"><em>then</em></span> <code class=3D"literal">BeanPostProcessor</code>s =
do
their work.</p>
<p><code class=3D"literal">BeanPostProcessor</code>s are scoped <span class=
=3D"emphasis"><em>per-container</em></span>. This is only relevant if you a=
re
using container hierarchies. If you define a <code class=3D"literal">BeanPo=
stProcessor</code> in one container, it
will <span class=3D"emphasis"><em>only</em></span> post-process the beans i=
n that container. In other words, beans that are
defined in one container are not post-processed by a <code class=3D"literal=
">BeanPostProcessor</code> defined in
another container, even if both containers are part of the same hierarchy.<=
/p>
<p>To change the actual bean definition (i.e., the <span class=3D"emphasis"=
><em>blueprint</em></span> that defines the bean),
you instead need to use a <code class=3D"literal">BeanFactoryPostProcessor<=
/code> as described in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-extension-factory-pos=
tprocessors" title=3D"7.8.2&nbsp;Customizing configuration metadata with a =
BeanFactoryPostProcessor">Section&nbsp;7.8.2, =93Customizing configuration =
metadata with a BeanFactoryPostProcessor=94</a>.</p>
</td></tr></tbody></table></div>
<p>The <code class=3D"literal">org.springframework.beans.factory.config.Bea=
nPostProcessor</code> interface consists of
exactly two callback methods. When such a class is registered as a post-pro=
cessor with
the container, for each bean instance that is created by the container, the
post-processor gets a callback from the container both <span class=3D"empha=
sis"><em>before</em></span> container
initialization methods (such as InitializingBean=92s <span class=3D"emphasi=
s"><em>afterPropertiesSet()</em></span> and any
declared init method) are called as well as <span class=3D"emphasis"><em>af=
ter</em></span> any bean initialization callbacks.
The post-processor can take any action with the bean instance, including ig=
noring the
callback completely. A bean post-processor typically checks for callback in=
terfaces or
may wrap a bean with a proxy. Some Spring AOP infrastructure classes are im=
plemented as
bean post-processors in order to provide proxy-wrapping logic.</p>
<p>An <code class=3D"literal">ApplicationContext</code> <span class=3D"emph=
asis"><em>automatically detects</em></span> any beans that are defined in t=
he
configuration metadata which implement the <code class=3D"literal">BeanPost=
Processor</code> interface. The
<code class=3D"literal">ApplicationContext</code> registers these beans as =
post-processors so that they can be called
later upon bean creation. Bean post-processors can be deployed in the conta=
iner just
like any other beans.</p>
<p>Note that when declaring a <code class=3D"literal">BeanPostProcessor</co=
de> using an <code class=3D"literal">@Bean</code> factory method on a
configuration class, the return type of the factory method should be the im=
plementation
class itself or at least the <code class=3D"literal">org.springframework.be=
ans.factory.config.BeanPostProcessor</code>
interface, clearly indicating the post-processor nature of that bean. Other=
wise, the
<code class=3D"literal">ApplicationContext</code> won=92t be able to autode=
tect it by type before fully creating it.
Since a <code class=3D"literal">BeanPostProcessor</code> needs to be instan=
tiated early in order to apply to the
initialization of other beans in the context, this early type detection is =
critical.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: Programmatically registering BeanPostProce=
ssors"><tbody><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=
=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/images/note.png"></td><th a=
lign=3D"left"><a name=3D"beans-factory-programmatically-registering-beanpos=
tprocessors" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#beans-factory-programmatically-registeri=
ng-beanpostprocessors"></a>Programmatically registering BeanPostProcessors<=
/th></tr><tr><td align=3D"left" valign=3D"top">
<p>While the recommended approach for <code class=3D"literal">BeanPostProce=
ssor</code> registration is through
<code class=3D"literal">ApplicationContext</code> auto-detection (as descri=
bed above), it is also possible to
register them <span class=3D"emphasis"><em>programmatically</em></span> aga=
inst a <code class=3D"literal">ConfigurableBeanFactory</code> using the
<code class=3D"literal">addBeanPostProcessor</code> method. This can be use=
ful when needing to evaluate conditional
logic before registration, or even for copying bean post processors across =
contexts in a
hierarchy. Note however that <code class=3D"literal">BeanPostProcessor</cod=
e>s added programmatically <span class=3D"emphasis"><em>do not
respect the <code class=3D"literal">Ordered</code> interface</em></span>. H=
ere it is the <span class=3D"emphasis"><em>order of registration</em></span=
> that
dictates the order of execution. Note also that <code class=3D"literal">Bea=
nPostProcessor</code>s registered
programmatically are always processed before those registered through auto-=
detection,
regardless of any explicit ordering.</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: BeanPostProcessors and AOP auto-proxying">=
<tbody><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><=
img alt=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/images/note.png"></td><th align=3D"l=
eft">BeanPostProcessors and AOP auto-proxying</th></tr><tr><td align=3D"lef=
t" valign=3D"top">
<p>Classes that implement the <code class=3D"literal">BeanPostProcessor</co=
de> interface are <span class=3D"emphasis"><em>special</em></span> and are =
treated
differently by the container. All <code class=3D"literal">BeanPostProcessor=
</code>s <span class=3D"emphasis"><em>and beans that they reference
directly</em></span> are instantiated on startup, as part of the special st=
artup phase of the
<code class=3D"literal">ApplicationContext</code>. Next, all <code class=3D=
"literal">BeanPostProcessor</code>s are registered in a sorted fashion
and applied to all further beans in the container. Because AOP auto-proxyin=
g is
implemented as a <code class=3D"literal">BeanPostProcessor</code> itself, n=
either <code class=3D"literal">BeanPostProcessor</code>s nor the beans
they reference directly are eligible for auto-proxying, and thus do not hav=
e aspects
woven into them.</p>
<p>For any such bean, you should see an informational log message: "<span c=
lass=3D"emphasis"><em>Bean foo is not
eligible for getting processed by all BeanPostProcessor interfaces (for exa=
mple: not
eligible for auto-proxying)</em></span>".</p>
<p>Note that if you have beans wired into your <code class=3D"literal">Bean=
PostProcessor</code> using autowiring or
<code class=3D"literal">@Resource</code> (which may fall back to autowiring=
), Spring might access unexpected beans
when searching for type-matching dependency candidates, and therefore make =
them
ineligible for auto-proxying or other kinds of bean post-processing. For ex=
ample, if you
have a dependency annotated with <code class=3D"literal">@Resource</code> w=
here the field/setter name does not
directly correspond to the declared name of a bean and no name attribute is=
 used, then
Spring will access other beans for matching them by type.</p>
</td></tr></tbody></table></div>
<p>The following examples show how to write, register, and use <code class=
=3D"literal">BeanPostProcessor</code>s in an
<code class=3D"literal">ApplicationContext</code>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-extension-bpp-examples-hw" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-factory-extension-bpp-examples-hw"></a>Example: Hello World, BeanPo=
stProcessor-style</h4></div></div></div>
<p>This first example illustrates basic usage. The example shows a custom
<code class=3D"literal">BeanPostProcessor</code> implementation that invoke=
s the <code class=3D"literal">toString()</code> method of each bean as
it is created by the container and prints the resulting string to the syste=
m console.</p>
<p>Find below the custom <code class=3D"literal">BeanPostProcessor</code> i=
mplementation class definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> scr=
ipting;

<span class=3D"hl-keyword">import</span> org.springframework.beans.factory.=
config.BeanPostProcessor;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> InstantiationTracingBeanPostProcessor <span class=3D"hl-keyword">impl=
ements</span> BeanPostProcessor {

    <span class=3D"hl-comment">// simply return the instantiated bean as-is=
</span>
    <span class=3D"hl-keyword">public</span> Object postProcessBeforeInitia=
lization(Object bean, String beanName) {
        <span class=3D"hl-keyword">return</span> bean; <span class=3D"hl-co=
mment">// we could potentially return any object reference here...</span>
    }

    <span class=3D"hl-keyword">public</span> Object postProcessAfterInitial=
ization(Object bean, String beanName) {
        System.out.println(<span class=3D"hl-string">"Bean '"</span> + bean=
Name + <span class=3D"hl-string">"' created : "</span> + bean.toString());
        <span class=3D"hl-keyword">return</span> bean;
    }
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:lang</span>=3D<span class=3D"hl-valu=
e">"http://www.springframework.org/schema/lang"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang.xsd"</span><=
span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;lang:groovy</span> <span class=3D"hl-attribu=
te">id</span>=3D<span class=3D"hl-value">"messenger"</span>
            <span class=3D"hl-attribute">script-source</span>=3D<span class=
=3D"hl-value">"classpath:org/springframework/scripting/groovy/Messenger.gro=
ovy"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;lang:property</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"message"</span> <span cla=
ss=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Fiona Apple Is=
 Just So Dreamy."</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/lang:groovy&gt;</span>

    <span class=3D"hl-comment">&lt;!--
    when the above bean (messenger) is instantiated, this custom
    BeanPostProcessor implementation will output the fact to the system con=
sole
    --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"scripting.InstantiationTracingBeanPos=
tProcessor"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>Notice how the <code class=3D"literal">InstantiationTracingBeanPostProce=
ssor</code> is simply defined. It does not
even have a name, and because it is a bean it can be dependency-injected ju=
st like any
other bean. (The preceding configuration also defines a bean that is backed=
 by a Groovy
script. The Spring dynamic language support is detailed in the chapter enti=
tled
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#dynamic-language" title=3D"35.&nbsp=
;Dynamic language support">Chapter&nbsp;35, <i>Dynamic language support</i>=
</a>.)</p>
<p>The following simple Java application executes the preceding code and co=
nfiguration:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
springframework.context.ApplicationContext;
<span class=3D"hl-keyword">import</span> org.springframework.context.suppor=
t.ClassPathXmlApplicationContext;
<span class=3D"hl-keyword">import</span> org.springframework.scripting.Mess=
enger;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> Boot {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(<span class=3D"hl-ke=
yword">final</span> String[] args) <span class=3D"hl-keyword">throws</span>=
 Exception {
        ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Cl=
assPathXmlApplicationContext(<span class=3D"hl-string">"scripting/beans.xml=
"</span>);
        Messenger messenger =3D (Messenger) ctx.getBean(<span class=3D"hl-s=
tring">"messenger"</span>);
        System.out.println(messenger);
    }

}</pre>
<p>The output of the preceding application resembles the following:</p>
<pre class=3D"literallayout">Bean 'messenger' created : <a href=3D"https://=
docs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfem=
ail=3D"7e110c19500d0e0c171019180c1f131b09110c15500d1d0c170e0a17101950190c11=
11080750390c11110807331b0d0d1b10191b0c3e4c494c47484f">[email&nbsp;protected=
]</a>
<a href=3D"https://docs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf=
_email__" data-cfemail=3D"b3dcc1d49dc0c3c1daddd4d5c1d2ded6c4dcc1d89dc0d0c1d=
ac3c7daddd49dd4c1dcdcc5ca9df4c1dcdcc5cafed6c0c0d6ddd4d6c1f38184818a8582">[e=
mail&nbsp;protected]</a></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-extension-bpp-examples-rabpp" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-factory-extension-bpp-examples-rabpp"></a>Example: The RequiredA=
nnotationBeanPostProcessor</h4></div></div></div>
<p>Using callback interfaces or annotations in conjunction with a custom
<code class=3D"literal">BeanPostProcessor</code> implementation is a common=
 means of extending the Spring IoC
container. An example is Spring=92s <code class=3D"literal">RequiredAnnotat=
ionBeanPostProcessor</code> - a
<code class=3D"literal">BeanPostProcessor</code> implementation that ships =
with the Spring distribution which ensures
that JavaBean properties on beans that are marked with an (arbitrary) annot=
ation are
actually (configured to be) dependency-injected with a value.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-extension-factory-postprocessors" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#beans-factory-extension-factory-postprocessors"></a>7.8.2&nbsp;Cus=
tomizing configuration metadata with a BeanFactoryPostProcessor</h3></div><=
/div></div>
<p>The next extension point that we will look at is the
<code class=3D"literal">org.springframework.beans.factory.config.BeanFactor=
yPostProcessor</code>. The semantics of
this interface are similar to those of the <code class=3D"literal">BeanPost=
Processor</code>, with one major
difference: <code class=3D"literal">BeanFactoryPostProcessor</code> operate=
s on the <span class=3D"emphasis"><em>bean configuration metadata</em></spa=
n>;
that is, the Spring IoC container allows a <code class=3D"literal">BeanFact=
oryPostProcessor</code> to read the
configuration metadata and potentially change it <span class=3D"emphasis"><=
em>before</em></span> the container instantiates
any beans other than <code class=3D"literal">BeanFactoryPostProcessor</code=
>s.</p>
<p>You can configure multiple <code class=3D"literal">BeanFactoryPostProces=
sor</code>s, and you can control the order in
which these <code class=3D"literal">BeanFactoryPostProcessor</code>s execut=
e by setting the <code class=3D"literal">order</code> property.
However, you can only set this property if the <code class=3D"literal">Bean=
FactoryPostProcessor</code> implements the
<code class=3D"literal">Ordered</code> interface. If you write your own <co=
de class=3D"literal">BeanFactoryPostProcessor</code>, you should
consider implementing the <code class=3D"literal">Ordered</code> interface =
too. Consult the javadocs of the
<code class=3D"literal">BeanFactoryPostProcessor</code> and <code class=3D"=
literal">Ordered</code> interfaces for more details.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you want to change the actual bean <span class=3D"emphasis"><em>insta=
nces</em></span> (i.e., the objects that are created
from the configuration metadata), then you instead need to use a <code clas=
s=3D"literal">BeanPostProcessor</code>
(described above in <a class=3D"xref" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-e=
xtension-bpp" title=3D"7.8.1&nbsp;Customizing beans using a BeanPostProcess=
or">Section&nbsp;7.8.1, =93Customizing beans using a BeanPostProcessor=94</=
a>). While it is technically possible
to work with bean instances within a <code class=3D"literal">BeanFactoryPos=
tProcessor</code> (e.g., using
<code class=3D"literal">BeanFactory.getBean()</code>), doing so causes prem=
ature bean instantiation, violating the
standard container lifecycle. This may cause negative side effects such as =
bypassing
bean post processing.</p>
<p>Also, <code class=3D"literal">BeanFactoryPostProcessor</code>s are scope=
d <span class=3D"emphasis"><em>per-container</em></span>. This is only rele=
vant if
you are using container hierarchies. If you define a <code class=3D"literal=
">BeanFactoryPostProcessor</code> in one
container, it will <span class=3D"emphasis"><em>only</em></span> be applied=
 to the bean definitions in that container. Bean
definitions in one container will not be post-processed by <code class=3D"l=
iteral">BeanFactoryPostProcessor</code>s
in another container, even if both containers are part of the same hierarch=
y.</p>
</td></tr></tbody></table></div>
<p>A bean factory post-processor is executed automatically when it is decla=
red inside an
<code class=3D"literal">ApplicationContext</code>, in order to apply change=
s to the configuration metadata that
define the container. Spring includes a number of predefined bean factory
post-processors, such as <code class=3D"literal">PropertyOverrideConfigurer=
</code> and
<code class=3D"literal">PropertyPlaceholderConfigurer</code>. A custom <cod=
e class=3D"literal">BeanFactoryPostProcessor</code> can also be used,
for example, to register custom property editors.</p>
<p><a name=3D"null" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#null"></a>An <code class=3D"liter=
al">ApplicationContext</code> automatically detects any beans that are depl=
oyed into it that
implement the <code class=3D"literal">BeanFactoryPostProcessor</code> inter=
face. It uses these beans as bean factory
post-processors, at the appropriate time. You can deploy these post-process=
or beans as
you would any other bean.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As with <code class=3D"literal">BeanPostProcessor</code>s , you typicall=
y do not want to configure
<code class=3D"literal">BeanFactoryPostProcessor</code>s for lazy initializ=
ation. If no other bean references a
<code class=3D"literal">Bean(Factory)PostProcessor</code>, that post-proces=
sor will not get instantiated at all.
Thus, marking it for lazy initialization will be ignored, and the
<code class=3D"literal">Bean(Factory)PostProcessor</code> will be instantia=
ted eagerly even if you set the
<code class=3D"literal">default-lazy-init</code> attribute to <code class=
=3D"literal">true</code> on the declaration of your <code class=3D"literal"=
>&lt;beans /&gt;</code> element.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-placeholderconfigurer" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-factory-placeholderconfigurer"></a>Example: the Class name substitution=
 PropertyPlaceholderConfigurer</h4></div></div></div>
<p>You use the <code class=3D"literal">PropertyPlaceholderConfigurer</code>=
 to externalize property values from a bean
definition in a separate file using the standard Java <code class=3D"litera=
l">Properties</code> format. Doing so
enables the person deploying an application to customize environment-specif=
ic properties
such as database URLs and passwords, without the complexity or risk of modi=
fying the
main XML definition file or files for the container.</p>
<p>Consider the following XML-based configuration metadata fragment, where =
a <code class=3D"literal">DataSource</code>
with placeholder values is defined. The example shows properties configured=
 from an
external <code class=3D"literal">Properties</code> file. At runtime, a <cod=
e class=3D"literal">PropertyPlaceholderConfigurer</code> is applied to
the metadata that will replace some properties of the DataSource. The value=
s to replace
are specified as <span class=3D"emphasis"><em>placeholders</em></span> of t=
he form <code class=3D"literal">${property-name}</code> which follows the A=
nt /
log4j / JSP EL style.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span cl=
ass=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"locations"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"classpath:com/foo/jdb=
c.properties"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"hl-attribu=
te">destroy-method</span>=3D<span class=3D"hl-value">"close"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.apache.commons.dbcp.BasicDataSource"</span><span class=3D"hl-tag">&g=
t;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span clas=
s=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.driverCl=
assName}"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-attr=
ibute">value</span>=3D<span class=3D"hl-value">"${jdbc.url}"</span><span cl=
ass=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"username"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.username}"</spa=
n><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"password"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.password}"</spa=
n><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The actual values come from another file in the standard Java <code clas=
s=3D"literal">Properties</code> format:</p>
<pre class=3D"literallayout">jdbc.driverClassName=3Dorg.hsqldb.jdbcDriver
jdbc.url=3Djdbc:hsqldb:hsql://production:9002
jdbc.username=3Dsa
jdbc.password=3Droot</pre>
<p>Therefore, the string <code class=3D"literal">${jdbc.username}</code> is=
 replaced at runtime with the value 'sa', and
the same applies for other placeholder values that match keys in the proper=
ties file.
The <code class=3D"literal">PropertyPlaceholderConfigurer</code> checks for=
 placeholders in most properties and
attributes of a bean definition. Furthermore, the placeholder prefix and su=
ffix can be
customized.</p>
<p>With the <code class=3D"literal">context</code> namespace introduced in =
Spring 2.5, it is possible to configure
property placeholders with a dedicated configuration element. One or more l=
ocations can
be provided as a comma-separated list in the <code class=3D"literal">locati=
on</code> attribute.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;context:property-p=
laceholder</span> <span class=3D"hl-attribute">location</span>=3D<span clas=
s=3D"hl-value">"classpath:com/foo/jdbc.properties"</span><span class=3D"hl-=
tag">/&gt;</span></pre>
<p>The <code class=3D"literal">PropertyPlaceholderConfigurer</code> not onl=
y looks for properties in the <code class=3D"literal">Properties</code>
file you specify. By default it also checks against the Java <code class=3D=
"literal">System</code> properties if it
cannot find a property in the specified properties files. You can customize=
 this
behavior by setting the <code class=3D"literal">systemPropertiesMode</code>=
 property of the configurer with one of
the following three supported integer values:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>never</em></span> (0): Never check system prop=
erties
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>fallback</em></span> (1): Check system propert=
ies if not resolvable in the specified
properties files. This is the default.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>override</em></span> (2): Check system propert=
ies first, before trying the specified
properties files. This allows system properties to override any other prope=
rty source.
</li></ul></div>
<p>Consult the <code class=3D"literal">PropertyPlaceholderConfigurer</code>=
 javadocs for more information.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>You can use the <code class=3D"literal">PropertyPlaceholderConfigurer</c=
ode> to substitute class names, which is
sometimes useful when you have to pick a particular implementation class at=
 runtime. For
example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span cl=
ass=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"locations"</span><span class=3D"hl=
-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;value&gt;</span>classpath:com/foo/strate=
gy.properties<span class=3D"hl-tag">&lt;/value&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"properties"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;value&gt;</span>custom.strategy.class=3D=
com.foo.DefaultStrategy<span class=3D"hl-tag">&lt;/value&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"serviceStrategy"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"${custom.strategy.class}"=
</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>If the class cannot be resolved at runtime to a valid class, resolution =
of the bean
fails when it is about to be created, which is during the <code class=3D"li=
teral">preInstantiateSingletons()</code>
phase of an <code class=3D"literal">ApplicationContext</code> for a non-laz=
y-init bean.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-factory-overrideconfigurer" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-factory-overrideconfigurer"></a>Example: the PropertyOverrideConfigurer</h=
4></div></div></div>
<p>The <code class=3D"literal">PropertyOverrideConfigurer</code>, another b=
ean factory post-processor, resembles the
<code class=3D"literal">PropertyPlaceholderConfigurer</code>, but unlike th=
e latter, the original definitions can
have default values or no values at all for bean properties. If an overridi=
ng
<code class=3D"literal">Properties</code> file does not have an entry for a=
 certain bean property, the default
context definition is used.</p>
<p>Note that the bean definition is <span class=3D"emphasis"><em>not</em></=
span> aware of being overridden, so it is not
immediately obvious from the XML definition file that the override configur=
er is being
used. In case of multiple <code class=3D"literal">PropertyOverrideConfigure=
r</code> instances that define different
values for the same bean property, the last one wins, due to the overriding=
 mechanism.</p>
<p>Properties file configuration lines take this format:</p>
<pre class=3D"literallayout">beanName.property=3Dvalue</pre>
<p>For example:</p>
<pre class=3D"literallayout">dataSource.driverClassName=3Dcom.mysql.jdbc.Dr=
iver
dataSource.url=3Djdbc:mysql:mydb</pre>
<p>This example file can be used with a container definition that contains =
a bean called
<span class=3D"emphasis"><em>dataSource</em></span>, which has <span class=
=3D"emphasis"><em>driver</em></span> and <span class=3D"emphasis"><em>url</=
em></span> properties.</p>
<p>Compound property names are also supported, as long as every component o=
f the path
except the final property being overridden is already non-null (presumably =
initialized
by the constructors). In this example=85&#8203;</p>
<pre class=3D"literallayout">foo.fred.bob.sammy=3D123</pre>
<div class=3D"orderedlist"><ol class=3D"orderedlist" type=3D"i"><li class=
=3D"listitem">
the <code class=3D"literal">sammy</code> property of the <code class=3D"lit=
eral">bob</code> property of the <code class=3D"literal">fred</code> proper=
ty of the <code class=3D"literal">foo</code> bean
is set to the scalar value <code class=3D"literal">123</code>.
</li></ol></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Specified override values are always <span class=3D"emphasis"><em>litera=
l</em></span> values; they are not translated into
bean references. This convention also applies when the original value in th=
e XML bean
definition specifies a bean reference.</p>
</td></tr></tbody></table></div>
<p>With the <code class=3D"literal">context</code> namespace introduced in =
Spring 2.5, it is possible to configure
property overriding with a dedicated configuration element:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;context:property-o=
verride</span> <span class=3D"hl-attribute">location</span>=3D<span class=
=3D"hl-value">"classpath:override.properties"</span><span class=3D"hl-tag">=
/&gt;</span></pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factory-extension-factorybean" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-factory-extension-factorybean"></a>7.8.3&nbsp;Customizing instantiation=
 logic with a FactoryBean</h3></div></div></div>
<p>Implement the <code class=3D"literal">org.springframework.beans.factory.=
FactoryBean</code> interface for objects that
<span class=3D"emphasis"><em>are themselves factories</em></span>.</p>
<p>The <code class=3D"literal">FactoryBean</code> interface is a point of p=
luggability into the Spring IoC container=92s
instantiation logic. If you have complex initialization code that is better=
 expressed in
Java as opposed to a (potentially) verbose amount of XML, you can create yo=
ur own
<code class=3D"literal">FactoryBean</code>, write the complex initializatio=
n inside that class, and then plug your
custom <code class=3D"literal">FactoryBean</code> into the container.</p>
<p>The <code class=3D"literal">FactoryBean</code> interface provides three =
methods:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">Object getObject()</code>: returns an instance of t=
he object this factory creates. The
instance can possibly be shared, depending on whether this factory returns =
singletons
or prototypes.
</li><li class=3D"listitem">
<code class=3D"literal">boolean isSingleton()</code>: returns <code class=
=3D"literal">true</code> if this <code class=3D"literal">FactoryBean</code>=
 returns singletons,
<code class=3D"literal">false</code> otherwise.
</li><li class=3D"listitem">
<code class=3D"literal">Class getObjectType()</code>: returns the object ty=
pe returned by the <code class=3D"literal">getObject()</code> method
or <code class=3D"literal">null</code> if the type is not known in advance.
</li></ul></div>
<p>The <code class=3D"literal">FactoryBean</code> concept and interface is =
used in a number of places within the Spring
Framework; more than 50 implementations of the <code class=3D"literal">Fact=
oryBean</code> interface ship with Spring
itself.</p>
<p>When you need to ask a container for an actual <code class=3D"literal">F=
actoryBean</code> instance itself instead of
the bean it produces, preface the bean=92s id with the ampersand symbol ( <=
code class=3D"literal">&amp;</code>) when
calling the <code class=3D"literal">getBean()</code> method of the <code cl=
ass=3D"literal">ApplicationContext</code>. So for a given <code class=3D"li=
teral">FactoryBean</code>
with an id of <code class=3D"literal">myBean</code>, invoking <code class=
=3D"literal">getBean("myBean")</code> on the container returns the
product of the <code class=3D"literal">FactoryBean</code>; whereas, invokin=
g <code class=3D"literal">getBean("&amp;myBean")</code> returns the
<code class=3D"literal">FactoryBean</code> instance itself.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-annotation-config" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-annotation-config"></a>7.9&nbsp;Annotation-based container co=
nfiguration</h2></div></div></div>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Are annotations better than XML for configuring Spring?</b></p></div><=
/div></div>
<p>The introduction of annotation-based configurations raised the question =
of whether this
approach is 'better' than XML. The short answer is <span class=3D"emphasis"=
><em>it depends</em></span>. The long answer is
that each approach has its pros and cons, and usually it is up to the devel=
oper to
decide which strategy suits them better. Due to the way they are defined, a=
nnotations
provide a lot of context in their declaration, leading to shorter and more =
concise
configuration. However, XML excels at wiring up components without touching=
 their source
code or recompiling them. Some developers prefer having the wiring close to=
 the source
while others argue that annotated classes are no longer POJOs and, furtherm=
ore, that the
configuration becomes decentralized and harder to control.</p>
<p>No matter the choice, Spring can accommodate both styles and even mix th=
em together.
It=92s worth pointing out that through its <a class=3D"link" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-java" title=3D"7.12&nbsp;Java-based container configuration">=
JavaConfig</a> option, Spring allows
annotations to be used in a non-invasive way, without touching the target c=
omponents
source code and that in terms of tooling, all configuration styles are supp=
orted by the
<a class=3D"ulink" href=3D"https://spring.io/tools/sts" target=3D"_top">Spr=
ing Tool Suite</a>.</p>
</div>
<p>An alternative to XML setups is provided by annotation-based configurati=
on which rely on
the bytecode metadata for wiring up components instead of angle-bracket dec=
larations.
Instead of using XML to describe a bean wiring, the developer moves the con=
figuration
into the component class itself by using annotations on the relevant class,=
 method, or
field declaration. As mentioned in <a class=3D"xref" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
beans-factory-extension-bpp-examples-rabpp" title=3D"Example: The RequiredA=
nnotationBeanPostProcessor">the section called =93Example: The RequiredAnno=
tationBeanPostProcessor=94</a>, using
a <code class=3D"literal">BeanPostProcessor</code> in conjunction with anno=
tations is a common means of extending the
Spring IoC container. For example, Spring 2.0 introduced the possibility of=
 enforcing
required properties with the <a class=3D"link" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-=
required-annotation" title=3D"7.9.1&nbsp;@Required">@Required</a> annotatio=
n. Spring
2.5 made it possible to follow that same general approach to drive Spring=
=92s dependency
injection. Essentially, the <code class=3D"literal">@Autowired</code> annot=
ation provides the same capabilities as
described in <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-autowire=
" title=3D"7.4.5&nbsp;Autowiring collaborators">Section&nbsp;7.4.5, =93Auto=
wiring collaborators=94</a> but with more fine-grained control and wider
applicability. Spring 2.5 also added support for JSR-250 annotations such a=
s
<code class=3D"literal">@PostConstruct</code>, and <code class=3D"literal">=
@PreDestroy</code>. Spring 3.0 added support for JSR-330 (Dependency
Injection for Java) annotations contained in the javax.inject package such =
as <code class=3D"literal">@Inject</code>
and <code class=3D"literal">@Named</code>. Details about those annotations =
can be found in the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-standard-annotations" title=
=3D"7.11&nbsp;Using JSR 330 Standard Annotations">relevant section</a>.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Annotation injection is performed <span class=3D"emphasis"><em>before</e=
m></span> XML injection, thus the latter
configuration will override the former for properties wired through both ap=
proaches.</p>
</td></tr></tbody></table></div>
<p>As always, you can register them as individual bean definitions, but the=
y can also be
implicitly registered by including the following tag in an XML-based Spring
configuration (notice the inclusion of the <code class=3D"literal">context<=
/code> namespace):</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:annotation-config/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>(The implicitly registered post-processors include
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowi=
redAnnotationBeanPostProcessor.html" target=3D"_top"><code class=3D"literal=
">AutowiredAnnotationBeanPostProcessor</code></a>,
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/annotation/CommonAnnota=
tionBeanPostProcessor.html" target=3D"_top"><code class=3D"literal">CommonA=
nnotationBeanPostProcessor</code></a>,
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/orm/jpa/support/PersistenceAnno=
tationBeanPostProcessor.html" target=3D"_top"><code class=3D"literal">Persi=
stenceAnnotationBeanPostProcessor</code></a>,
as well as the aforementioned
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Requir=
edAnnotationBeanPostProcessor.html" target=3D"_top"><code class=3D"literal"=
>RequiredAnnotationBeanPostProcessor</code></a>.)</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">&lt;context:annotation-config/&gt;</code> only l=
ooks for annotations on beans in the same
application context in which it is defined. This means that, if you put
<code class=3D"literal">&lt;context:annotation-config/&gt;</code> in a <cod=
e class=3D"literal">WebApplicationContext</code> for a <code class=3D"liter=
al">DispatcherServlet</code>,
it only checks for <code class=3D"literal">@Autowired</code> beans in your =
controllers, and not your services. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#mvc-servlet" title=3D"22.2&nbsp;The=
 DispatcherServlet">Section&nbsp;22.2, =93The DispatcherServlet=94</a> for =
more information.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-required-annotation" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-requir=
ed-annotation"></a>7.9.1&nbsp;@Required</h3></div></div></div>
<p>The <code class=3D"literal">@Required</code> annotation applies to bean =
property setter methods, as in the following
example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Required</span=
></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>This annotation simply indicates that the affected bean property must be=
 populated at
configuration time, through an explicit property value in a bean definition=
 or through
autowiring. The container throws an exception if the affected bean property=
 has not been
populated; this allows for eager and explicit failure, avoiding <code class=
=3D"literal">NullPointerException</code>s
or the like later on. It is still recommended that you put assertions into =
the bean
class itself, for example, into an init method. Doing so enforces those req=
uired
references and values even when you use the class outside of a container.</=
p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-autowired-annotation" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-autow=
ired-annotation"></a>7.9.2&nbsp;@Autowired</h3></div></div></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>JSR 330=92s <code class=3D"literal">@Inject</code> annotation can be use=
d in place of Spring=92s <code class=3D"literal">@Autowired</code> annotati=
on
in the examples below. See <a class=3D"link" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-st=
andard-annotations" title=3D"7.11&nbsp;Using JSR 330 Standard Annotations">=
here</a> for more details.</p>
</td></tr></tbody></table></div>
<p>You can apply the <code class=3D"literal">@Autowired</code> annotation t=
o constructors:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> CustomerPreferenceDao customerPreferenceDao;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> MovieRecommender(CustomerPrefe=
renceDao customerPreferenceDao) {
        <span class=3D"hl-keyword">this</span>.customerPreferenceDao =3D cu=
stomerPreferenceDao;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As of Spring Framework 4.3, an <code class=3D"literal">@Autowired</code>=
 annotation on such a constructor is
no longer necessary if the target bean only defines one constructor to begi=
n with.
However, if several constructors are available, at least one must be annota=
ted to
teach the container which one to use.</p>
</td></tr></tbody></table></div>
<p>As expected, you can also apply the <code class=3D"literal">@Autowired</=
code> annotation to "traditional" setter
methods:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>You can also apply the annotation to methods with arbitrary names and/or=
 multiple
arguments:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class=3D"hl-keyword">private</span> CustomerPreferenceDao custome=
rPreferenceDao;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> prepare(MovieCatalog movieCatalog,
            CustomerPreferenceDao customerPreferenceDao) {
        <span class=3D"hl-keyword">this</span>.movieCatalog =3D movieCatalo=
g;
        <span class=3D"hl-keyword">this</span>.customerPreferenceDao =3D cu=
stomerPreferenceDao;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>You can apply <code class=3D"literal">@Autowired</code> to fields as wel=
l and even mix it with constructors:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> CustomerPreferenceDao customerPreferenceDao;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog movieCatalog;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> MovieRecommender(CustomerPrefe=
renceDao customerPreferenceDao) {
        <span class=3D"hl-keyword">this</span>.customerPreferenceDao =3D cu=
stomerPreferenceDao;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Make sure that your target components (e.g. <code class=3D"literal">Movi=
eCatalog</code>, <code class=3D"literal">CustomerPreferenceDao</code>)
are consistently declared by the type that you are using for your <code cla=
ss=3D"literal">@Autowired</code>-annotated
injection points. Otherwise injection may fail due to no type match found a=
t runtime.</p>
<p>For XML-defined beans or component classes found through a classpath sca=
n, the container
usually knows the concrete type upfront. However, for <code class=3D"litera=
l">@Bean</code> factory methods, you need
to make sure that the declared return type is sufficiently expressive. For =
components
implementing several interfaces or for components potentially referred to b=
y their
implementation type, consider declaring the most specific return type on yo=
ur factory
method (at least as specific as required by the injection points referring =
to your bean).</p>
</td></tr></tbody></table></div>
<p>It is also possible to provide <span class=3D"emphasis"><em>all</em></sp=
an> beans of a particular type from the
<code class=3D"literal">ApplicationContext</code> by adding the annotation =
to a field or method that expects an array
of that type:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog[] movieCatalogs;

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The same applies for typed collections:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> Set&lt;MovieCatalog&gt; movie=
Catalogs;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieCatalogs(Set&lt;MovieCatalog&gt; movieCatalogs) {
        <span class=3D"hl-keyword">this</span>.movieCatalogs =3D movieCatal=
ogs;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Your target beans can implement the <code class=3D"literal">org.springfr=
amework.core.Ordered</code> interface or use
the <code class=3D"literal">@Order</code> or standard <code class=3D"litera=
l">@Priority</code> annotation if you want items in the array or list
to be sorted in a specific order. Otherwise their order will follow the reg=
istration
order of the corresponding target bean definitions in the container.</p>
<p>The <code class=3D"literal">@Order</code> annotation may be declared at =
target class level but also on <code class=3D"literal">@Bean</code> methods=
,
potentially being very individual per bean definition (in case of multiple =
definitions
with the same bean class). <code class=3D"literal">@Order</code> values may=
 influence priorities at injection points,
but please be aware that they do not influence singleton startup order whic=
h is an
orthogonal concern determined by dependency relationships and <code class=
=3D"literal">@DependsOn</code> declarations.</p>
<p>Note that the standard <code class=3D"literal">javax.annotation.Priority=
</code> annotation is not available at the
<code class=3D"literal">@Bean</code> level since it cannot be declared on m=
ethods. Its semantics can be modeled
through <code class=3D"literal">@Order</code> values in combination with <c=
ode class=3D"literal">@Primary</code> on a single bean per type.</p>
</td></tr></tbody></table></div>
<p>Even typed Maps can be autowired as long as the expected key type is <co=
de class=3D"literal">String</code>. The Map
values will contain all beans of the expected type, and the keys will conta=
in the
corresponding bean names:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> Map&lt;String, MovieCatalog&g=
t; movieCatalogs;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieCatalogs(Map&lt;String, MovieCatalog&gt; movieCatalogs) {
        <span class=3D"hl-keyword">this</span>.movieCatalogs =3D movieCatal=
ogs;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>By default, the autowiring fails whenever <span class=3D"emphasis"><em>z=
ero</em></span> candidate beans are available; the
default behavior is to treat annotated methods, constructors, and fields as
indicating <span class=3D"emphasis"><em>required</em></span> dependencies. =
This behavior can be changed as demonstrated below.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired(requ=
ired =3D false)</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Only <span class=3D"emphasis"><em>one annotated constructor per-class</e=
m></span> can be marked as <span class=3D"emphasis"><em>required</em></span=
>, but multiple
non-required constructors can be annotated. In that case, each is considere=
d among the
candidates and Spring uses the <span class=3D"emphasis"><em>greediest</em><=
/span> constructor whose dependencies can be
satisfied, that is the constructor that has the largest number of arguments=
.</p>
<p>The <span class=3D"emphasis"><em>required</em></span> attribute of <code=
 class=3D"literal">@Autowired</code> is recommended over the <code class=3D=
"literal">@Required</code> annotation.
The <span class=3D"emphasis"><em>required</em></span> attribute indicates t=
hat the property is not required for autowiring
purposes, the property is ignored if it cannot be autowired. <code class=3D=
"literal">@Required</code>, on the other
hand, is stronger in that it enforces the property that was set by any mean=
s supported
by the container. If no value is injected, a corresponding exception is rai=
sed.</p>
</td></tr></tbody></table></div>
<p>Alternatively, you may express the non-required nature of a particular d=
ependency
through Java 8=92s <code class=3D"literal">java.util.Optional</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(Optional&lt;MovieFinder&gt; movieFinder) {
        ...
    }
}</pre>
<p>You can also use <code class=3D"literal">@Autowired</code> for interface=
s that are well-known resolvable
dependencies: <code class=3D"literal">BeanFactory</code>, <code class=3D"li=
teral">ApplicationContext</code>, <code class=3D"literal">Environment</code=
>, <code class=3D"literal">ResourceLoader</code>,
<code class=3D"literal">ApplicationEventPublisher</code>, and <code class=
=3D"literal">MessageSource</code>. These interfaces and their extended
interfaces, such as <code class=3D"literal">ConfigurableApplicationContext<=
/code> or <code class=3D"literal">ResourcePatternResolver</code>, are
automatically resolved, with no special setup necessary.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> ApplicationContext context;

    <span class=3D"hl-keyword">public</span> MovieRecommender() {
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@Autowired</code>, <code class=3D"literal">@Inje=
ct</code>, <code class=3D"literal">@Resource</code>, and <code class=3D"lit=
eral">@Value</code> annotations are handled by Spring
<code class=3D"literal">BeanPostProcessor</code> implementations which in t=
urn means that you <span class=3D"emphasis"><em>cannot</em></span> apply th=
ese
annotations within your own <code class=3D"literal">BeanPostProcessor</code=
> or <code class=3D"literal">BeanFactoryPostProcessor</code> types (if
any). These types must be 'wired up' explicitly via XML or using a Spring <=
code class=3D"literal">@Bean</code> method.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-autowired-annotation-primary" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bea=
ns-autowired-annotation-primary"></a>7.9.3&nbsp;Fine-tuning annotation-base=
d autowiring with @Primary</h3></div></div></div>
<p>Because autowiring by type may lead to multiple candidates, it is often =
necessary to have
more control over the selection process. One way to accomplish this is with=
 Spring=92s
<code class=3D"literal">@Primary</code> annotation. <code class=3D"literal"=
>@Primary</code> indicates that a particular bean should be given
preference when multiple beans are candidates to be autowired to a single-v=
alued
dependency. If exactly one 'primary' bean exists among the candidates, it w=
ill be the
autowired value.</p>
<p>Let=92s assume we have the following configuration that defines <code cl=
ass=3D"literal">firstMovieCatalog</code> as the
<span class=3D"emphasis"><em>primary</em></span> <code class=3D"literal">Mo=
vieCatalog</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MovieConfiguration {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"strong"><strong>@Primary</strong></span>
    <span class=3D"hl-keyword">public</span> MovieCatalog firstMovieCatalog=
() { ... }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> MovieCatalog secondMovieCatalo=
g() { ... }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>With such configuration, the following <code class=3D"literal">MovieReco=
mmender</code> will be autowired with the
<code class=3D"literal">firstMovieCatalog</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The corresponding bean definitions appear as follows.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span> <s=
pan class=3D"strong"><strong>primary=3D"true"</strong></span>&gt;
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"movieRecommender"</span> <span class=3D"=
hl-attribute">class</span>=3D<span class=3D"hl-value">"example.MovieRecomme=
nder"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-autowired-annotation-qualifiers" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
beans-autowired-annotation-qualifiers"></a>7.9.4&nbsp;Fine-tuning annotatio=
n-based autowiring with qualifiers</h3></div></div></div>
<p><code class=3D"literal">@Primary</code> is an effective way to use autow=
iring by type with several instances when one
primary candidate can be determined. When more control over the selection p=
rocess is
required, Spring=92s <code class=3D"literal">@Qualifier</code> annotation c=
an be used. You can associate qualifier values
with specific arguments, narrowing the set of type matches so that a specif=
ic bean is
chosen for each argument. In the simplest case, this can be a plain descrip=
tive value:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"strong"><strong>@Qualifier("main")</strong></span>
    <span class=3D"hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The <code class=3D"literal">@Qualifier</code> annotation can also be spe=
cified on individual constructor arguments or
method parameters:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> MovieCatalog movieCatalog;

    <span class=3D"hl-keyword">private</span> CustomerPreferenceDao custome=
rPreferenceDao;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> prepare(<span class=3D"strong"><strong>@Qualifier("main")</strong>=
</span>MovieCatalog movieCatalog,
            CustomerPreferenceDao customerPreferenceDao) {
        <span class=3D"hl-keyword">this</span>.movieCatalog =3D movieCatalo=
g;
        <span class=3D"hl-keyword">this</span>.customerPreferenceDao =3D cu=
stomerPreferenceDao;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The corresponding bean definitions appear as follows. The bean with qual=
ifier value
"main" is wired with the constructor argument that is qualified with the sa=
me value.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"strong"><strong>&lt;qualifier value=3D"main"/&gt;</s=
trong></span>

        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"strong"><strong>&lt;qualifier value=3D"action"/&gt;<=
/strong></span>

        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"movieRecommender"</span> <span class=3D"=
hl-attribute">class</span>=3D<span class=3D"hl-value">"example.MovieRecomme=
nder"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>For a fallback match, the bean name is considered a default qualifier va=
lue. Thus you
can define the bean with an id "main" instead of the nested qualifier eleme=
nt, leading
to the same matching result. However, although you can use this convention =
to refer to
specific beans by name, <code class=3D"literal">@Autowired</code> is fundam=
entally about type-driven injection with
optional semantic qualifiers. This means that qualifier values, even with t=
he bean name
fallback, always have narrowing semantics within the set of type matches; t=
hey do not
semantically express a reference to a unique bean id. Good qualifier values=
 are "main"
or "EMEA" or "persistent", expressing characteristics of a specific compone=
nt that are
independent from the bean <code class=3D"literal">id</code>, which may be a=
uto-generated in case of an anonymous bean
definition like the one in the preceding example.</p>
<p>Qualifiers also apply to typed collections, as discussed above, for exam=
ple, to
<code class=3D"literal">Set&lt;MovieCatalog&gt;</code>. In this case, all m=
atching beans according to the declared
qualifiers are injected as a collection. This implies that qualifiers do no=
t have to be
unique; they rather simply constitute filtering criteria. For example, you =
can define
multiple <code class=3D"literal">MovieCatalog</code> beans with the same qu=
alifier value "action", all of which would
be injected into a <code class=3D"literal">Set&lt;MovieCatalog&gt;</code> a=
nnotated with <code class=3D"literal">@Qualifier("action")</code>.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Letting qualifier values select against target bean names, within the ty=
pe-matching
candidates, doesn=92t even require a <code class=3D"literal">@Qualifier</co=
de> annotation at the injection point.
If there is no other resolution indicator (e.g. a qualifier or a primary ma=
rker),
for a non-unique dependency situation, Spring will match the injection poin=
t name
(i.e. field name or parameter name) against the target bean names and choos=
e the
same-named candidate, if any.</p>
<p>That said, if you intend to express annotation-driven injection by name,=
 do not
primarily use <code class=3D"literal">@Autowired</code>, even if is capable=
 of selecting by bean name among
type-matching candidates. Instead, use the JSR-250 <code class=3D"literal">=
@Resource</code> annotation, which is
semantically defined to identify a specific target component by its unique =
name, with
the declared type being irrelevant for the matching process. <code class=3D=
"literal">@Autowired</code> has rather
different semantics: After selecting candidate beans by type, the specified=
 String
qualifier value will be considered within those type-selected candidates on=
ly, e.g.
matching an "account" qualifier against beans marked with the same qualifie=
r label.</p>
<p>For beans that are themselves defined as a collection/map or array type,=
 <code class=3D"literal">@Resource</code>
is a fine solution, referring to the specific collection or array bean by u=
nique name.
That said, as of 4.3, collection/map and array types can be matched through=
 Spring=92s
<code class=3D"literal">@Autowired</code> type matching algorithm as well, =
as long as the element type information
is preserved in <code class=3D"literal">@Bean</code> return type signatures=
 or collection inheritance hierarchies.
In this case, qualifier values can be used to select among same-typed colle=
ctions,
as outlined in the previous paragraph.</p>
<p>As of 4.3, <code class=3D"literal">@Autowired</code> also considers self=
 references for injection, i.e. references
back to the bean that is currently injected. Note that self injection is a =
fallback;
regular dependencies on other components always have precedence. In that se=
nse, self
references do not participate in regular candidate selection and are theref=
ore in
particular never primary; on the contrary, they always end up as lowest pre=
cedence.
In practice, use self references as a last resort only, e.g. for calling ot=
her methods
on the same instance through the bean=92s transactional proxy: Consider fac=
toring out
the affected methods to a separate delegate bean in such a scenario. Altern=
atively,
use <code class=3D"literal">@Resource</code> which may obtain a proxy back =
to the current bean by its unique name.</p>
<p><code class=3D"literal">@Autowired</code> applies to fields, constructor=
s, and multi-argument methods, allowing for
narrowing through qualifier annotations at the parameter level. By contrast=
, <code class=3D"literal">@Resource</code>
is supported only for fields and bean property setter methods with a single=
 argument.
As a consequence, stick with qualifiers if your injection target is a const=
ructor or a
multi-argument method.</p>
</td></tr></tbody></table></div>
<p>You can create your own custom qualifier annotations. Simply define an a=
nnotation and
provide the <code class=3D"literal">@Qualifier</code> annotation within you=
r definition:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target({ElementType.FIELD, ElementType.PARAMETER})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<span class=3D"strong"><strong>@Qualifier</strong></span>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Genre {

    String value();
}</pre>
<p>Then you can provide the custom qualifier on autowired fields and parame=
ters:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"strong"><strong>@Genre("Action")</strong></span>
    <span class=3D"hl-keyword">private</span> MovieCatalog actionCatalog;

    <span class=3D"hl-keyword">private</span> MovieCatalog comedyCatalog;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setComedyCatalog(<span class=3D"strong"><strong>@Genre("Comedy")</=
strong></span> MovieCatalog comedyCatalog) {
        <span class=3D"hl-keyword">this</span>.comedyCatalog =3D comedyCata=
log;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Next, provide the information for the candidate bean definitions. You ca=
n add
<code class=3D"literal">&lt;qualifier/&gt;</code> tags as sub-elements of t=
he <code class=3D"literal">&lt;bean/&gt;</code> tag and then specify the <c=
ode class=3D"literal">type</code> and
<code class=3D"literal">value</code> to match your custom qualifier annotat=
ions. The type is matched against the
fully-qualified class name of the annotation. Or, as a convenience if no ri=
sk of
conflicting names exists, you can use the short class name. Both approaches=
 are
demonstrated in the following example.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"strong"><strong>&lt;qualifier type=3D"Genre" value=
=3D"Action"/&gt;</strong></span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"strong"><strong>&lt;qualifier type=3D"example.Genre"=
 value=3D"Comedy"/&gt;</strong></span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"movieRecommender"</span> <span class=3D"=
hl-attribute">class</span>=3D<span class=3D"hl-value">"example.MovieRecomme=
nder"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>In <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#beans-classpath-scanning" tit=
le=3D"7.10&nbsp;Classpath scanning and managed components">Section&nbsp;7.1=
0, =93Classpath scanning and managed components=94</a>, you will see an ann=
otation-based alternative to
providing the qualifier metadata in XML. Specifically, see <a class=3D"xref=
" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#beans-scanning-qualifiers" title=3D"7.10.8&nbsp;Pro=
viding qualifier metadata with annotations">Section&nbsp;7.10.8, =93Providi=
ng qualifier metadata with annotations=94</a>.</p>
<p>In some cases, it may be sufficient to use an annotation without a value=
. This may be
useful when the annotation serves a more generic purpose and can be applied=
 across
several different types of dependencies. For example, you may provide an <s=
pan class=3D"emphasis"><em>offline</em></span>
catalog that would be searched when no Internet connection is available. Fi=
rst define
the simple annotation:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target({ElementType.FIELD, ElementType.PARAMETER})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Qualifier</span></=
em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Offline {

}</pre>
<p>Then add the annotation to the field or property to be autowired:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"strong"><strong>@Offline</strong></span>
    <span class=3D"hl-keyword">private</span> MovieCatalog offlineCatalog;

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Now the bean definition only needs a qualifier <code class=3D"literal">t=
ype</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"example.Sim=
pleMovieCatalog"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"strong"><strong>&lt;qualifier type=3D"Offline"/&gt;</str=
ong></span>
    <span class=3D"hl-comment">&lt;!-- inject any dependencies required by =
this bean --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>You can also define custom qualifier annotations that accept named attri=
butes in
addition to or instead of the simple <code class=3D"literal">value</code> a=
ttribute. If multiple attribute values are
then specified on a field or parameter to be autowired, a bean definition m=
ust match
<span class=3D"emphasis"><em>all</em></span> such attribute values to be co=
nsidered an autowire candidate. As an example,
consider the following annotation definition:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target({ElementType.FIELD, ElementType.PARAMETER})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Qualifier</span></=
em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> MovieQualifier {

    String genre();

    Format format();
}</pre>
<p>In this case <code class=3D"literal">Format</code> is an enum:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> enum=
 Format {
    VHS, DVD, BLURAY
}</pre>
<p>The fields to be autowired are annotated with the custom qualifier and i=
nclude values
for both attributes: <code class=3D"literal">genre</code> and <code class=
=3D"literal">format</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@MovieQualifier=
(format=3DFormat.VHS, genre=3D"Action")</span></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog actionVhsCatalog=
;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@MovieQualifier=
(format=3DFormat.VHS, genre=3D"Comedy")</span></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog comedyVhsCatalog=
;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@MovieQualifier=
(format=3DFormat.DVD, genre=3D"Action")</span></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog actionDvdCatalog=
;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@MovieQualifier=
(format=3DFormat.BLURAY, genre=3D"Comedy")</span></em>
    <span class=3D"hl-keyword">private</span> MovieCatalog comedyBluRayCata=
log;

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Finally, the bean definitions should contain matching qualifier values. =
This example
also demonstrates that bean <span class=3D"emphasis"><em>meta</em></span> a=
ttributes may be used instead of the
<code class=3D"literal">&lt;qualifier/&gt;</code> sub-elements. If availabl=
e, the <code class=3D"literal">&lt;qualifier/&gt;</code> and its attributes=
 take
precedence, but the autowiring mechanism falls back on the values provided =
within the
<code class=3D"literal">&lt;meta/&gt;</code> tags if no such qualifier is p=
resent, as in the last two bean definitions in
the following example.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:annotation-config/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;qualifier</span> <span class=3D"hl-attri=
bute">type</span>=3D<span class=3D"hl-value">"MovieQualifier"</span><span c=
lass=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;attribute</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"format"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"VHS"</span><span=
 class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;attribute</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"genre"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Action"</span><s=
pan class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/qualifier&gt;</span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;qualifier</span> <span class=3D"hl-attri=
bute">type</span>=3D<span class=3D"hl-value">"MovieQualifier"</span><span c=
lass=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;attribute</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"format"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"VHS"</span><span=
 class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;attribute</span> <span class=3D"hl-a=
ttribute">key</span>=3D<span class=3D"hl-value">"genre"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Comedy"</span><s=
pan class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/qualifier&gt;</span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;meta</span> <span class=3D"hl-attribute"=
>key</span>=3D<span class=3D"hl-value">"format"</span> <span class=3D"hl-at=
tribute">value</span>=3D<span class=3D"hl-value">"DVD"</span><span class=3D=
"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;meta</span> <span class=3D"hl-attribute"=
>key</span>=3D<span class=3D"hl-value">"genre"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"Action"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"example.SimpleMovieCatalog"</span><sp=
an class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;meta</span> <span class=3D"hl-attribute"=
>key</span>=3D<span class=3D"hl-value">"format"</span> <span class=3D"hl-at=
tribute">value</span>=3D<span class=3D"hl-value">"BLURAY"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;meta</span> <span class=3D"hl-attribute"=
>key</span>=3D<span class=3D"hl-value">"genre"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"Comedy"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-comment">&lt;!-- inject any dependencies required=
 by this bean --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-generics-as-qualifiers" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-gen=
erics-as-qualifiers"></a>7.9.5&nbsp;Using generics as autowiring qualifiers=
</h3></div></div></div>
<p>In addition to the <code class=3D"literal">@Qualifier</code> annotation,=
 it is also possible to use Java generic types
as an implicit form of qualification. For example, suppose you have the fol=
lowing
configuration:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyConfiguration {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> StringStore stringStore() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> StringStore();
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> IntegerStore integerStore() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> IntegerStore();
    }
}</pre>
<p>Assuming that beans above implement a generic interface, i.e. <code clas=
s=3D"literal">Store&lt;String&gt;</code> and
<code class=3D"literal">Store&lt;Integer&gt;</code>, you can <code class=3D=
"literal">@Autowire</code> the <code class=3D"literal">Store</code> interfa=
ce and the <span class=3D"emphasis"><em>generic</em></span> will
be used as a qualifier:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Autowired</span></em>
<span class=3D"hl-keyword">private</span> Store&lt;String&gt; s1; <span cla=
ss=3D"hl-comment">// &lt;String&gt; qualifier, injects the stringStore bean=
</span>

<em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</span></=
em>
<span class=3D"hl-keyword">private</span> Store&lt;Integer&gt; s2; <span cl=
ass=3D"hl-comment">// &lt;Integer&gt; qualifier, injects the integerStore b=
ean</span></pre>
<p>Generic qualifiers also apply when autowiring Lists, Maps and Arrays:</p=
>
<pre class=3D"programlisting"><span class=3D"hl-comment">// Inject all Stor=
e beans as long as they have an &lt;Integer&gt; generic</span>
<span class=3D"hl-comment">// Store&lt;String&gt; beans will not appear in =
this list</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</span></=
em>
<span class=3D"hl-keyword">private</span> List&lt;Store&lt;Integer&gt;&gt; =
s;</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-custom-autowire-configurer" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-custom-autowire-configurer"></a>7.9.6&nbsp;CustomAutowireConfigurer</h3></=
div></div></div>
<p>The
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Custom=
AutowireConfigurer.html" target=3D"_top"><code class=3D"literal">CustomAuto=
wireConfigurer</code></a>
is a <code class=3D"literal">BeanFactoryPostProcessor</code> that enables y=
ou to register your own custom qualifier
annotation types even if they are not annotated with Spring=92s <code class=
=3D"literal">@Qualifier</code> annotation.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"customAutowire=
Configurer"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.beans.factory.annotation.CustomAutowireConfigurer"</=
span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"customQualifierTypes"</span><span =
class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;set&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>example.CustomQualif=
ier<span class=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/set&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The <code class=3D"literal">AutowireCandidateResolver</code> determines =
autowire candidates by:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the <code class=3D"literal">autowire-candidate</code> value of each bean de=
finition
</li><li class=3D"listitem">
any <code class=3D"literal">default-autowire-candidates</code> pattern(s) a=
vailable on the <code class=3D"literal">&lt;beans/&gt;</code> element
</li><li class=3D"listitem">
the presence of <code class=3D"literal">@Qualifier</code> annotations and a=
ny custom annotations registered
with the <code class=3D"literal">CustomAutowireConfigurer</code>
</li></ul></div>
<p>When multiple beans qualify as autowire candidates, the determination of=
 a "primary" is
the following: if exactly one bean definition among the candidates has a <c=
ode class=3D"literal">primary</code>
attribute set to <code class=3D"literal">true</code>, it will be selected.<=
/p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-resource-annotation" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-resour=
ce-annotation"></a>7.9.7&nbsp;@Resource</h3></div></div></div>
<p>Spring also supports injection using the JSR-250 <code class=3D"literal"=
>@Resource</code> annotation on fields or
bean property setter methods. This is a common pattern in Java EE 5 and 6, =
for example
in JSF 1.2 managed beans or JAX-WS 2.0 endpoints. Spring supports this patt=
ern for
Spring-managed objects as well.</p>
<p><code class=3D"literal">@Resource</code> takes a name attribute, and by =
default Spring interprets that value as the
bean name to be injected. In other words, it follows <span class=3D"emphasi=
s"><em>by-name</em></span> semantics, as
demonstrated in this example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <span class=3D"strong"><strong>@Resource(name=3D"myMovieFinder")</stron=
g></span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }
}</pre>
<p>If no name is specified explicitly, the default name is derived from the=
 field name or
setter method. In case of a field, it takes the field name; in case of a se=
tter method,
it takes the bean property name. So the following example is going to have =
the bean with
name "movieFinder" injected into its setter method:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <span class=3D"strong"><strong>@Resource</strong></span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The name provided with the annotation is resolved as a bean name by the
<code class=3D"literal">ApplicationContext</code> of which the <code class=
=3D"literal">CommonAnnotationBeanPostProcessor</code> is aware. The
names can be resolved through JNDI if you configure Spring=92s
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/jndi/support/SimpleJndiBeanFact=
ory.html" target=3D"_top"><code class=3D"literal">SimpleJndiBeanFactory</co=
de></a>
explicitly. However, it is recommended that you rely on the default behavio=
r and simply
use Spring=92s JNDI lookup capabilities to preserve the level of indirectio=
n.</p>
</td></tr></tbody></table></div>
<p>In the exclusive case of <code class=3D"literal">@Resource</code> usage =
with no explicit name specified, and similar
to <code class=3D"literal">@Autowired</code>, <code class=3D"literal">@Reso=
urce</code> finds a primary type match instead of a specific named bean
and resolves well-known resolvable dependencies: the <code class=3D"literal=
">BeanFactory</code>,
<code class=3D"literal">ApplicationContext</code>, <code class=3D"literal">=
ResourceLoader</code>, <code class=3D"literal">ApplicationEventPublisher</c=
ode>, and <code class=3D"literal">MessageSource</code>
interfaces.</p>
<p>Thus in the following example, the <code class=3D"literal">customerPrefe=
renceDao</code> field first looks for a bean
named customerPreferenceDao, then falls back to a primary type match for th=
e type
<code class=3D"literal">CustomerPreferenceDao</code>. The "context" field i=
s injected based on the known resolvable
dependency type <code class=3D"literal">ApplicationContext</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Resource</span=
></em>
    <span class=3D"hl-keyword">private</span> CustomerPreferenceDao custome=
rPreferenceDao;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Resource</span=
></em>
    <span class=3D"hl-keyword">private</span> ApplicationContext context;

    <span class=3D"hl-keyword">public</span> MovieRecommender() {
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-postconstruct-and-predestroy-annotations" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#beans-postconstruct-and-predestroy-annotations"></a>7.9.8&nbsp;@Po=
stConstruct and @PreDestroy</h3></div></div></div>
<p>The <code class=3D"literal">CommonAnnotationBeanPostProcessor</code> not=
 only recognizes the <code class=3D"literal">@Resource</code> annotation
but also the JSR-250 <span class=3D"emphasis"><em>lifecycle</em></span> ann=
otations. Introduced in Spring 2.5, the support
for these annotations offers yet another alternative to those described in
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializin=
gbean" title=3D"Initialization callbacks">initialization callbacks</a> and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposableb=
ean" title=3D"Destruction callbacks">destruction callbacks</a>. Provided th=
at the
<code class=3D"literal">CommonAnnotationBeanPostProcessor</code> is registe=
red within the Spring
<code class=3D"literal">ApplicationContext</code>, a method carrying one of=
 these annotations is invoked at the same
point in the lifecycle as the corresponding Spring lifecycle interface meth=
od or
explicitly declared callback method. In the example below, the cache will b=
e
pre-populated upon initialization and cleared upon destruction.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CachingMovieLister {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@PostConstruct<=
/span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> populateMovieCache() {
        <span class=3D"hl-comment">// populates the movie cache upon initia=
lization...</span>
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@PreDestroy</sp=
an></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> clearMovieCache() {
        <span class=3D"hl-comment">// clears the movie cache upon destructi=
on...</span>
    }
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>For details about the effects of combining various lifecycle mechanisms,=
 see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-combined-ef=
fects" title=3D"Combining lifecycle mechanisms">the section called =93Combi=
ning lifecycle mechanisms=94</a>.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-classpath-scanning" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#beans-classpath-scanning"></a>7.10&nbsp;Classpath scanning and man=
aged components</h2></div></div></div>
<p>Most examples in this chapter use XML to specify the configuration metad=
ata that produces
each <code class=3D"literal">BeanDefinition</code> within the Spring contai=
ner. The previous section
(<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#beans-annotation-config" title=3D"=
7.9&nbsp;Annotation-based container configuration">Section&nbsp;7.9, =93Ann=
otation-based container configuration=94</a>) demonstrates how to provide a=
 lot of the configuration
metadata through source-level annotations. Even in those examples, however,=
 the "base"
bean definitions are explicitly defined in the XML file, while the annotati=
ons only drive
the dependency injection. This section describes an option for implicitly d=
etecting the
<span class=3D"emphasis"><em>candidate components</em></span> by scanning t=
he classpath. Candidate components are classes that
match against a filter criteria and have a corresponding bean definition re=
gistered with
the container. This removes the need to use XML to perform bean registratio=
n; instead you
can use annotations (for example <code class=3D"literal">@Component</code>)=
, AspectJ type expressions, or your own
custom filter criteria to select which classes will have bean definitions r=
egistered with
the container.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Starting with Spring 3.0, many features provided by the Spring JavaConfi=
g project are
part of the core Spring Framework. This allows you to define beans using Ja=
va rather
than using the traditional XML files. Take a look at the <code class=3D"lit=
eral">@Configuration</code>, <code class=3D"literal">@Bean</code>,
<code class=3D"literal">@Import</code>, and <code class=3D"literal">@Depend=
sOn</code> annotations for examples of how to use these new features.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-stereotype-annotations" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-ste=
reotype-annotations"></a>7.10.1&nbsp;@Component and further stereotype anno=
tations</h3></div></div></div>
<p>The <code class=3D"literal">@Repository</code> annotation is a marker fo=
r any class that fulfills the role or
<span class=3D"emphasis"><em>stereotype</em></span> of a repository (also k=
nown as Data Access Object or DAO). Among the uses
of this marker is the automatic translation of exceptions as described in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#orm-exception-translation" title=3D=
"20.2.2&nbsp;Exception translation">Section&nbsp;20.2.2, =93Exception trans=
lation=94</a>.</p>
<p>Spring provides further stereotype annotations: <code class=3D"literal">=
@Component</code>, <code class=3D"literal">@Service</code>, and
<code class=3D"literal">@Controller</code>. <code class=3D"literal">@Compon=
ent</code> is a generic stereotype for any Spring-managed component.
<code class=3D"literal">@Repository</code>, <code class=3D"literal">@Servic=
e</code>, and <code class=3D"literal">@Controller</code> are specialization=
s of <code class=3D"literal">@Component</code> for
more specific use cases, for example, in the persistence, service, and pres=
entation
layers, respectively. Therefore, you can annotate your component classes wi=
th
<code class=3D"literal">@Component</code>, but by annotating them with <cod=
e class=3D"literal">@Repository</code>, <code class=3D"literal">@Service</c=
ode>, or <code class=3D"literal">@Controller</code>
instead, your classes are more properly suited for processing by tools or a=
ssociating
with aspects. For example, these stereotype annotations make ideal targets =
for
pointcuts. It is also possible that <code class=3D"literal">@Repository</co=
de>, <code class=3D"literal">@Service</code>, and <code class=3D"literal">@=
Controller</code> may
carry additional semantics in future releases of the Spring Framework. Thus=
, if you are
choosing between using <code class=3D"literal">@Component</code> or <code c=
lass=3D"literal">@Service</code> for your service layer, <code class=3D"lit=
eral">@Service</code> is
clearly the better choice. Similarly, as stated above, <code class=3D"liter=
al">@Repository</code> is already
supported as a marker for automatic exception translation in your persisten=
ce layer.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-meta-annotations" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-meta-anno=
tations"></a>7.10.2&nbsp;Meta-annotations</h3></div></div></div>
<p>Many of the annotations provided by Spring can be used as <span class=3D=
"emphasis"><em>meta-annotations</em></span> in your
own code. A meta-annotation is simply an annotation that can be applied to =
another
annotation. For example, the <code class=3D"literal">@Service</code> annota=
tion mentioned above is meta-annotated with
<code class=3D"literal">@Component</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target(ElementType.TYPE)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Documented</span><=
/em>
<span class=3D"strong"><strong>@Component</strong></span> <span class=3D"hl=
-comment">// Spring will see this and treat @Service in the same way as @Co=
mponent</span>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Service {

    <span class=3D"hl-comment">// ....</span>
}</pre>
<p>Meta-annotations can also be combined to create <span class=3D"emphasis"=
><em>composed annotations</em></span>. For example,
the <code class=3D"literal">@RestController</code> annotation from Spring M=
VC is <span class=3D"emphasis"><em>composed</em></span> of <code class=3D"l=
iteral">@Controller</code> and
<code class=3D"literal">@ResponseBody</code>.</p>
<p>In addition, composed annotations may optionally redeclare attributes fr=
om
meta-annotations to allow user customization. This can be particularly usef=
ul when you
want to only expose a subset of the meta-annotation=92s attributes. For exa=
mple, Spring=92s
<code class=3D"literal">@SessionScope</code> annotation hardcodes the scope=
 name to <code class=3D"literal">session</code> but still allows
customization of the <code class=3D"literal">proxyMode</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target({ElementType.TYPE, ElementType.METHOD})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Documented</span><=
/em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Scope(WebApplicati=
onContext.SCOPE_SESSION)</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> SessionScope {

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * Alias for {@link Scope#proxyMode}.
     * &lt;p&gt;Defaults to {@link ScopedProxyMode#TARGET_CLASS}.
     */</strong>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@AliasFor(annot=
ation =3D Scope.class)</span></em>
    ScopedProxyMode proxyMode() <span class=3D"hl-keyword">default</span> S=
copedProxyMode.TARGET_CLASS;

}</pre>
<p><code class=3D"literal">@SessionScope</code> can then be used without de=
claring the <code class=3D"literal">proxyMode</code> as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Service</span></em>
<span class=3D"strong"><strong>@SessionScope</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SessionScopedService {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Or with an overridden value for the <code class=3D"literal">proxyMode</c=
ode> as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Service</span></em>
<span class=3D"strong"><strong>@SessionScope(proxyMode =3D ScopedProxyMode.=
INTERFACES)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SessionScopedUserService <span class=3D"hl-keyword">implements</span>=
 UserService {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>For further details, consult the <a class=3D"link" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#annotation-programming-model" title=3D"38.&nbsp;Spring Annotation Programm=
ing Model">Spring Annotation Programming Model</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-scanning-autodetection" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-sca=
nning-autodetection"></a>7.10.3&nbsp;Automatically detecting classes and re=
gistering bean definitions</h3></div></div></div>
<p>Spring can automatically detect stereotyped classes and register corresp=
onding
<code class=3D"literal">BeanDefinition</code>s with the <code class=3D"lite=
ral">ApplicationContext</code>. For example, the following two classes
are eligible for such autodetection:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Service</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> SimpleMovieLister(MovieFinder =
movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Repository</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> JpaMovieFinder <span class=3D"hl-keyword">implements</span> MovieFind=
er {
    <span class=3D"hl-comment">// implementation elided for clarity</span>
}</pre>
<p>To autodetect these classes and register the corresponding beans, you ne=
ed to add
<code class=3D"literal">@ComponentScan</code> to your <code class=3D"litera=
l">@Configuration</code> class, where the <code class=3D"literal">basePacka=
ges</code> attribute
is a common parent package for the two classes. (Alternatively, you can spe=
cify a
comma/semicolon/space-separated list that includes the parent package of ea=
ch class.)</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "org.example")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig  {
    ...
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>For concision, the above may have used the <code class=3D"literal">value=
</code> attribute of the
annotation, i.e. <code class=3D"literal">@ComponentScan("org.example")</cod=
e></p>
</td></tr></tbody></table></div>
<p>The following is an alternative using XML</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"org.example"=
</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>The use of <code class=3D"literal">&lt;context:component-scan&gt;</code>=
 implicitly enables the functionality of
<code class=3D"literal">&lt;context:annotation-config&gt;</code>. There is =
usually no need to include the
<code class=3D"literal">&lt;context:annotation-config&gt;</code> element wh=
en using <code class=3D"literal">&lt;context:component-scan&gt;</code>.</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The scanning of classpath packages requires the presence of correspondin=
g directory
entries in the classpath. When you build JARs with Ant, make sure that you =
do <span class=3D"emphasis"><em>not</em></span>
activate the files-only switch of the JAR task. Also, classpath directories=
 may not
get exposed based on security policies in some environments, e.g. standalon=
e apps on
JDK 1.7.0_45 and higher (which requires 'Trusted-Library' setup in your man=
ifests; see
<a class=3D"ulink" href=3D"https://stackoverflow.com/questions/19394570/jav=
a-jre-7u45-breaks-classloader-getresources" target=3D"_top">http://stackove=
rflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources<=
/a>).</p>
</td></tr></tbody></table></div>
<p>Furthermore, the <code class=3D"literal">AutowiredAnnotationBeanPostProc=
essor</code> and
<code class=3D"literal">CommonAnnotationBeanPostProcessor</code> are both i=
ncluded implicitly when you use the
component-scan element. That means that the two components are autodetected=
 <span class=3D"emphasis"><em>and</em></span>
wired together - all without any bean configuration metadata provided in XM=
L.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>You can disable the registration of <code class=3D"literal">AutowiredAnn=
otationBeanPostProcessor</code> and
<code class=3D"literal">CommonAnnotationBeanPostProcessor</code> by includi=
ng the <span class=3D"emphasis"><em>annotation-config</em></span> attribute
with a value of <code class=3D"literal">false</code>.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-scanning-filters" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-scanning-=
filters"></a>7.10.4&nbsp;Using filters to customize scanning</h3></div></di=
v></div>
<p>By default, classes annotated with <code class=3D"literal">@Component</c=
ode>, <code class=3D"literal">@Repository</code>, <code class=3D"literal">@=
Service</code>,
<code class=3D"literal">@Controller</code>, or a custom annotation that its=
elf is annotated with <code class=3D"literal">@Component</code> are the
only detected candidate components. However, you can modify and extend this=
 behavior
simply by applying custom filters. Add them as <span class=3D"emphasis"><em=
>includeFilters</em></span> or <span class=3D"emphasis"><em>excludeFilters<=
/em></span>
parameters of the <code class=3D"literal">@ComponentScan</code> annotation =
(or as <span class=3D"emphasis"><em>include-filter</em></span> or <span cla=
ss=3D"emphasis"><em>exclude-filter</em></span>
sub-elements of the <code class=3D"literal">component-scan</code> element).=
 Each filter element requires the <code class=3D"literal">type</code>
and <code class=3D"literal">expression</code> attributes. The following tab=
le describes the filtering options.</p>
<div class=3D"table"><a name=3D"beans-scanning-filters-tbl" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#beans-scanning-filters-tbl"></a><p class=3D"title"><b>Table&nbsp;7.5=
.&nbsp;Filter Types</b></p><div class=3D"table-contents">
<table summary=3D"Filter Types" style=3D"border-collapse: collapse;border-t=
op: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; b=
order-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=3D"c=
ol_2"><col class=3D"col_3"></colgroup><thead><tr><th style=3D"border-right:=
 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
>Filter Type</th><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top">Example Expression</th><th styl=
e=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Descripti=
on</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; bor=
der-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>annotation (de=
fault)</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal">org.ex=
ample.SomeAnnotation</code></p></td><td style=3D"border-bottom: 0.5pt solid=
 ; " align=3D"left" valign=3D"top"><p>An annotation to be present at the ty=
pe level in target components.</p></td></tr><tr><td style=3D"border-right: =
0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">=
<p>assignable</p></td><td style=3D"border-right: 0.5pt solid ; border-botto=
m: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal"=
>org.example.SomeClass</code></p></td><td style=3D"border-bottom: 0.5pt sol=
id ; " align=3D"left" valign=3D"top"><p>A class (or interface) that the tar=
get components are assignable to (extend/implement).</p></td></tr><tr><td s=
tyle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D=
"left" valign=3D"top"><p>aspectj</p></td><td style=3D"border-right: 0.5pt s=
olid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><cod=
e class=3D"literal">org.example..*Service+</code></p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>An AspectJ type=
 expression to be matched by the target components.</p></td></tr><tr><td st=
yle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"=
left" valign=3D"top"><p>regex</p></td><td style=3D"border-right: 0.5pt soli=
d ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code c=
lass=3D"literal">org\.example\.Default.*</code></p></td><td style=3D"border=
-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>A regex expressio=
n to be matched by the target components class names.</p></td></tr><tr><td =
style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>cus=
tom</p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valig=
n=3D"top"><p><code class=3D"literal">org.example.MyTypeFilter</code></p></t=
d><td style=3D"" align=3D"left" valign=3D"top"><p>A custom implementation o=
f the <code class=3D"literal">org.springframework.core.type .TypeFilter</co=
de> interface.</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>The following example shows the configuration ignoring all <code class=
=3D"literal">@Repository</code> annotations
and using "stub" repositories instead.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "org.example",
        includeFilters =3D @Filter(type =3D FilterType.REGEX, pattern =3D "=
.*Stub.*Repository"),
        excludeFilters =3D @Filter(Repository.class))</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {
    ...
}</pre>
<p>and the equivalent using XML</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"org.example"=
</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;context:include-filter</span> <span clas=
s=3D"hl-attribute">type</span>=3D<span class=3D"hl-value">"regex"</span>
                <span class=3D"hl-attribute">expression</span>=3D<span clas=
s=3D"hl-value">".*Stub.*Repository"</span><span class=3D"hl-tag">/&gt;</spa=
n>
        <span class=3D"hl-tag">&lt;context:exclude-filter</span> <span clas=
s=3D"hl-attribute">type</span>=3D<span class=3D"hl-value">"annotation"</spa=
n>
                <span class=3D"hl-attribute">expression</span>=3D<span clas=
s=3D"hl-value">"org.springframework.stereotype.Repository"</span><span clas=
s=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/context:component-scan&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>You can also disable the default filters by setting <code class=3D"liter=
al">useDefaultFilters=3Dfalse</code> on the annotation or
providing <code class=3D"literal">use-default-filters=3D"false"</code> as a=
n attribute of the <code class=3D"literal">&lt;component-scan/&gt;</code> e=
lement. This
will in effect disable automatic detection of classes annotated with <code =
class=3D"literal">@Component</code>, <code class=3D"literal">@Repository</c=
ode>,
<code class=3D"literal">@Service</code>, <code class=3D"literal">@Controlle=
r</code>, or <code class=3D"literal">@Configuration</code>.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-factorybeans-annotations" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-f=
actorybeans-annotations"></a>7.10.5&nbsp;Defining bean metadata within comp=
onents</h3></div></div></div>
<p>Spring components can also contribute bean definition metadata to the co=
ntainer. You do
this with the same <code class=3D"literal">@Bean</code> annotation used to =
define bean metadata within <code class=3D"literal">@Configuration</code>
annotated classes. Here is a simple example:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> FactoryMethodComponent {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Qualifier("pub=
lic")</span></em>
    <span class=3D"hl-keyword">public</span> TestBean publicInstance() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TestBean(<span class=3D"hl-string">"publicInstance"</span>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doWork() {
        <span class=3D"hl-comment">// Component method implementation omitt=
ed</span>
    }
}</pre>
<p>This class is a Spring component that has application-specific code cont=
ained in its
<code class=3D"literal">doWork()</code> method. However, it also contribute=
s a bean definition that has a factory
method referring to the method <code class=3D"literal">publicInstance()</co=
de>. The <code class=3D"literal">@Bean</code> annotation identifies the
factory method and other bean definition properties, such as a qualifier va=
lue through
the <code class=3D"literal">@Qualifier</code> annotation. Other method leve=
l annotations that can be specified are
<code class=3D"literal">@Scope</code>, <code class=3D"literal">@Lazy</code>=
, and custom qualifier annotations.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>In addition to its role for component initialization, the <code class=3D=
"literal">@Lazy</code> annotation may also be
placed on injection points marked with <code class=3D"literal">@Autowired</=
code> or <code class=3D"literal">@Inject</code>. In this context, it
leads to the injection of a lazy-resolution proxy.</p>
</td></tr></tbody></table></div>
<p>Autowired fields and methods are supported as previously discussed, with=
 additional
support for autowiring of <code class=3D"literal">@Bean</code> methods:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> FactoryMethodComponent {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> <span class=3D"hl-keyword">int</span> i;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Qualifier("pub=
lic")</span></em>
    <span class=3D"hl-keyword">public</span> TestBean publicInstance() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TestBean(<span class=3D"hl-string">"publicInstance"</span>);
    }

    <span class=3D"hl-comment">// use of a custom qualifier and autowiring =
of method parameters</span>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">protected</span> TestBean protectedInstance(
            <em><span class=3D"hl-annotation" style=3D"color: gray">@Qualif=
ier("public")</span></em> TestBean spouse,
            <em><span class=3D"hl-annotation" style=3D"color: gray">@Value(=
"#{privateInstance.age}")</span></em> String country) {
        TestBean tb =3D <span class=3D"hl-keyword">new</span> TestBean(<spa=
n class=3D"hl-string">"protectedInstance"</span>, <span class=3D"hl-number"=
>1</span>);
        tb.setSpouse(spouse);
        tb.setCountry(country);
        <span class=3D"hl-keyword">return</span> tb;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">private</span> TestBean privateInstance() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TestBean(<span class=3D"hl-string">"privateInstance"</span>, i+=
+);
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@RequestScope</=
span></em>
    <span class=3D"hl-keyword">public</span> TestBean requestScopedInstance=
() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TestBean(<span class=3D"hl-string">"requestScopedInstance"</spa=
n>, <span class=3D"hl-number">3</span>);
    }
}</pre>
<p>The example autowires the <code class=3D"literal">String</code> method p=
arameter <code class=3D"literal">country</code> to the value of the <code c=
lass=3D"literal">age</code>
property on another bean named <code class=3D"literal">privateInstance</cod=
e>. A Spring Expression Language element
defines the value of the property through the notation <code class=3D"liter=
al">#{ &lt;expression&gt; }</code>. For <code class=3D"literal">@Value</cod=
e>
annotations, an expression resolver is preconfigured to look for bean names=
 when
resolving expression text.</p>
<p>As of Spring Framework 4.3, you may also declare a factory method parame=
ter of type
<code class=3D"literal">InjectionPoint</code> (or its more specific subclas=
s <code class=3D"literal">DependencyDescriptor</code>) in order to
access the requesting injection point that triggers the creation of the cur=
rent bean.
Note that this will only apply to the actual creation of bean instances, no=
t to the
injection of existing instances. As a consequence, this feature makes most =
sense for
beans of prototype scope. For other scopes, the factory method will only ev=
er see the
injection point which triggered the creation of a new bean instance in the =
given scope:
for example, the dependency that triggered the creation of a lazy singleton=
 bean.
Use the provided injection point metadata with semantic care in such scenar=
ios.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> FactoryMethodComponent {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m> <em><span class=3D"hl-annotation" style=3D"color: gray">@Scope("prototyp=
e")</span></em>
    <span class=3D"hl-keyword">public</span> TestBean prototypeInstance(Inj=
ectionPoint injectionPoint) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TestBean(<span class=3D"hl-string">"prototypeInstance for "</sp=
an> + injectionPoint.getMember());
    }
}</pre>
<p>The <code class=3D"literal">@Bean</code> methods in a regular Spring com=
ponent are processed differently than their
counterparts inside a Spring <code class=3D"literal">@Configuration</code> =
class. The difference is that <code class=3D"literal">@Component</code>
classes are not enhanced with CGLIB to intercept the invocation of methods =
and fields.
CGLIB proxying is the means by which invoking methods or fields within <cod=
e class=3D"literal">@Bean</code> methods
in <code class=3D"literal">@Configuration</code> classes creates bean metad=
ata references to collaborating objects;
such methods are <span class=3D"emphasis"><em>not</em></span> invoked with =
normal Java semantics but rather go through the
container in order to provide the usual lifecycle management and proxying o=
f Spring
beans even when referring to other beans via programmatic calls to <code cl=
ass=3D"literal">@Bean</code> methods.
In contrast, invoking a method or field in an <code class=3D"literal">@Bean=
</code> method within a plain <code class=3D"literal">@Component</code>
class <span class=3D"emphasis"><em>has</em></span> standard Java semantics,=
 with no special CGLIB processing or other
constraints applying.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>You may declare <code class=3D"literal">@Bean</code> methods as <code cl=
ass=3D"literal">static</code>, allowing for them to be called without
creating their containing configuration class as an instance. This makes pa=
rticular
sense when defining post-processor beans, e.g. of type <code class=3D"liter=
al">BeanFactoryPostProcessor</code> or
<code class=3D"literal">BeanPostProcessor</code>, since such beans will get=
 initialized early in the container
lifecycle and should avoid triggering other parts of the configuration at t=
hat point.</p>
<p>Note that calls to static <code class=3D"literal">@Bean</code> methods w=
ill never get intercepted by the container,
not even within <code class=3D"literal">@Configuration</code> classes (see =
above). This is due to technical
limitations: CGLIB subclassing can only override non-static methods. As a c=
onsequence,
a direct call to another <code class=3D"literal">@Bean</code> method will h=
ave standard Java semantics, resulting
in an independent instance being returned straight from the factory method =
itself.</p>
<p>The Java language visibility of <code class=3D"literal">@Bean</code> met=
hods does not have an immediate impact on
the resulting bean definition in Spring=92s container. You may freely decla=
re your
factory methods as you see fit in non-<code class=3D"literal">@Configuratio=
n</code> classes and also for static
methods anywhere. However, regular <code class=3D"literal">@Bean</code> met=
hods in <code class=3D"literal">@Configuration</code> classes need
to be overridable, i.e. they must not be declared as <code class=3D"literal=
">private</code> or <code class=3D"literal">final</code>.</p>
<p><code class=3D"literal">@Bean</code> methods will also be discovered on =
base classes of a given component or
configuration class, as well as on Java 8 default methods declared in inter=
faces
implemented by the component or configuration class. This allows for a lot =
of
flexibility in composing complex configuration arrangements, with even mult=
iple
inheritance being possible through Java 8 default methods as of Spring 4.2.=
</p>
<p>Finally, note that a single class may hold multiple <code class=3D"liter=
al">@Bean</code> methods for the same
bean, as an arrangement of multiple factory methods to use depending on ava=
ilable
dependencies at runtime. This is the same algorithm as for choosing the "gr=
eediest"
constructor or factory method in other configuration scenarios: The variant=
 with
the largest number of satisfiable dependencies will be picked at constructi=
on time,
analogous to how the container selects between multiple <code class=3D"lite=
ral">@Autowired</code> constructors.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-scanning-name-generator" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-sc=
anning-name-generator"></a>7.10.6&nbsp;Naming autodetected components</h3><=
/div></div></div>
<p>When a component is autodetected as part of the scanning process, its be=
an name is
generated by the <code class=3D"literal">BeanNameGenerator</code> strategy =
known to that scanner. By default, any
Spring stereotype annotation (<code class=3D"literal">@Component</code>, <c=
ode class=3D"literal">@Repository</code>, <code class=3D"literal">@Service<=
/code>, and
<code class=3D"literal">@Controller</code>) that contains a <span class=3D"=
emphasis"><em>name</em></span> <code class=3D"literal">value</code> will th=
ereby provide that name to the
corresponding bean definition.</p>
<p>If such an annotation contains no <span class=3D"emphasis"><em>name</em>=
</span> <code class=3D"literal">value</code> or for any other detected comp=
onent
(such as those discovered by custom filters), the default bean name generat=
or returns
the uncapitalized non-qualified class name. For example, if the following c=
omponent
classes were detected, the names would be <code class=3D"literal">myMovieLi=
ster</code> and <code class=3D"literal">movieFinderImpl</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Service("myMovieLister")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Repository</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MovieFinderImpl <span class=3D"hl-keyword">implements</span> MovieFin=
der {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you do not want to rely on the default bean-naming strategy, you can =
provide a custom
bean-naming strategy. First, implement the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/beans/factory/support/BeanNameG=
enerator.html" target=3D"_top"><code class=3D"literal">BeanNameGenerator</c=
ode></a>
interface, and be sure to include a default no-arg constructor. Then, provi=
de the
fully-qualified class name when configuring the scanner:</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "org.example", nameGenerator =3D MyNameGenerator.class)</span>=
</em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {
    ...
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"org.example"=
</span>
        <span class=3D"hl-attribute">name-generator</span>=3D<span class=3D=
"hl-value">"org.example.MyNameGenerator"</span><span class=3D"hl-tag"> /&gt=
;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>As a general rule, consider specifying the name with the annotation when=
ever other
components may be making explicit references to it. On the other hand, the
auto-generated names are adequate whenever the container is responsible for=
 wiring.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-scanning-scope-resolver" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-sc=
anning-scope-resolver"></a>7.10.7&nbsp;Providing a scope for autodetected c=
omponents</h3></div></div></div>
<p>As with Spring-managed components in general, the default and most commo=
n scope for
autodetected components is <code class=3D"literal">singleton</code>. Howeve=
r, sometimes you need a different scope
which can be specified via the <code class=3D"literal">@Scope</code> annota=
tion. Simply provide the name of the
scope within the annotation:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Scope("prototype")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Repository</span><=
/em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MovieFinderImpl <span class=3D"hl-keyword">implements</span> MovieFin=
der {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@Scope</code> annotations are only introspected =
on the concrete bean class (for annotated
components) or the factory method (for <code class=3D"literal">@Bean</code>=
 methods). In contrast to XML bean
definitions, there is no notion of bean definition inheritance, and inherit=
ance
hierarchies at the class level are irrelevant for metadata purposes.</p>
</td></tr></tbody></table></div>
<p>For details on web-specific scopes such as "request"/"session" in a Spri=
ng context,
see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other" tit=
le=3D"7.5.4&nbsp;Request, session, global session, application, and WebSock=
et scopes">Section&nbsp;7.5.4, =93Request, session, global session, applica=
tion, and WebSocket scopes=94</a>. Like the pre-built annotations for those=
 scopes,
you may also compose your own scoping annotations using Spring=92s meta-ann=
otation
approach: e.g. a custom annotation meta-annotated with <code class=3D"liter=
al">@Scope("prototype")</code>,
possibly also declaring a custom scoped-proxy mode.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>To provide a custom strategy for scope resolution rather than relying on=
 the
annotation-based approach, implement the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/annotation/ScopeMetadat=
aResolver.html" target=3D"_top"><code class=3D"literal">ScopeMetadataResolv=
er</code></a>
interface, and be sure to include a default no-arg constructor. Then, provi=
de the
fully-qualified class name when configuring the scanner:</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "org.example", scopeResolver =3D MyScopeResolver.class)</span>=
</em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {
    ...
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"org.example"=
</span> <span class=3D"hl-attribute">scope-resolver</span>=3D<span class=3D=
"hl-value">"org.example.MyScopeResolver"</span><span class=3D"hl-tag">/&gt;=
</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>When using certain non-singleton scopes, it may be necessary to generate=
 proxies for the
scoped objects. The reasoning is described in <a class=3D"xref" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#beans-factory-scopes-other-injection" title=3D"Scoped beans as d=
ependencies">the section called =93Scoped beans as dependencies=94</a>.
For this purpose, a <span class=3D"emphasis"><em>scoped-proxy</em></span> a=
ttribute is available on the component-scan
element. The three possible values are: no, interfaces, and targetClass. Fo=
r example,
the following configuration will result in standard JDK dynamic proxies:</p=
>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "org.example", scopedProxy =3D ScopedProxyMode.INTERFACES)</sp=
an></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {
    ...
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"org.example"=
</span> <span class=3D"hl-attribute">scoped-proxy</span>=3D<span class=3D"h=
l-value">"interfaces"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-scanning-qualifiers" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-scanni=
ng-qualifiers"></a>7.10.8&nbsp;Providing qualifier metadata with annotation=
s</h3></div></div></div>
<p>The <code class=3D"literal">@Qualifier</code> annotation is discussed in=
 <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#beans-autowired-annotation-qualifi=
ers" title=3D"7.9.4&nbsp;Fine-tuning annotation-based autowiring with quali=
fiers">Section&nbsp;7.9.4, =93Fine-tuning annotation-based autowiring with =
qualifiers=94</a>.
The examples in that section demonstrate the use of the <code class=3D"lite=
ral">@Qualifier</code> annotation and
custom qualifier annotations to provide fine-grained control when you resol=
ve autowire
candidates. Because those examples were based on XML bean definitions, the =
qualifier
metadata was provided on the candidate bean definitions using the <code cla=
ss=3D"literal">qualifier</code> or <code class=3D"literal">meta</code>
sub-elements of the <code class=3D"literal">bean</code> element in the XML.=
 When relying upon classpath scanning for
autodetection of components, you provide the qualifier metadata with type-l=
evel
annotations on the candidate class. The following three examples demonstrat=
e this
technique:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"strong"><strong>@Qualifier("Action")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ActionMovieCatalog <span class=3D"hl-keyword">implements</span> Movie=
Catalog {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"strong"><strong>@Genre("Action")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ActionMovieCatalog <span class=3D"hl-keyword">implements</span> Movie=
Catalog {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"strong"><strong>@Offline</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> CachingMovieCatalog <span class=3D"hl-keyword">implements</span> Movi=
eCatalog {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As with most annotation-based alternatives, keep in mind that the annota=
tion metadata is
bound to the class definition itself, while the use of XML allows for multi=
ple beans
<span class=3D"emphasis"><em>of the same type</em></span> to provide variat=
ions in their qualifier metadata, because that
metadata is provided per-instance rather than per-class.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-standard-annotations" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#beans-standard-annotations"></a>7.11&nbsp;Using JSR 330 Standard=
 Annotations</h2></div></div></div>
<p>Starting with Spring 3.0, Spring offers support for JSR-330 standard ann=
otations
(Dependency Injection). Those annotations are scanned in the same way as th=
e Spring
annotations. You just need to have the relevant jars in your classpath.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you are using Maven, the <code class=3D"literal">javax.inject</code> =
artifact is available in the standard Maven
repository (
<a class=3D"ulink" href=3D"https://repo1.maven.org/maven2/javax/inject/java=
x.inject/1/" target=3D"_top">http://repo1.maven.org/maven2/javax/inject/jav=
ax.inject/1/</a>).
You can add the following dependency to your file pom.xml:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;dependency&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;groupId&gt;</span>javax.inject<span class=3D=
"hl-tag">&lt;/groupId&gt;</span>
    <span class=3D"hl-tag">&lt;artifactId&gt;</span>javax.inject<span class=
=3D"hl-tag">&lt;/artifactId&gt;</span>
    <span class=3D"hl-tag">&lt;version&gt;</span>1<span class=3D"hl-tag">&l=
t;/version&gt;</span>
<span class=3D"hl-tag">&lt;/dependency&gt;</span></pre>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-inject-named" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-inject-named"=
></a>7.11.1&nbsp;Dependency Injection with @Inject and @Named</h3></div></d=
iv></div>
<p>Instead of <code class=3D"literal">@Autowired</code>, <code class=3D"lit=
eral">@javax.inject.Inject</code> may be used as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.inject.Inject;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> listMovies() {
        <span class=3D"hl-keyword">this</span>.movieFinder.findMovies(...);
        ...
    }
}</pre>
<p>As with <code class=3D"literal">@Autowired</code>, it is possible to use=
 <code class=3D"literal">@Inject</code> at the field level, method level
and constructor-argument level. Furthermore, you may declare your injection=
 point as a
<code class=3D"literal">Provider</code>, allowing for on-demand access to b=
eans of shorter scopes or lazy access to
other beans through a <code class=3D"literal">Provider.get()</code> call. A=
s a variant of the example above:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.inject.Inject;
<span class=3D"hl-keyword">import</span> javax.inject.Provider;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> Provider&lt;MovieFinder&gt; m=
ovieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(Provider&lt;MovieFinder&gt; movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> listMovies() {
        <span class=3D"hl-keyword">this</span>.movieFinder.get().findMovies=
(...);
        ...
    }
}</pre>
<p>If you would like to use a qualified name for the dependency that should=
 be injected,
you should use the <code class=3D"literal">@Named</code> annotation as foll=
ows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.inject.Inject;
<span class=3D"hl-keyword">import</span> javax.inject.Named;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(<em><span class=3D"hl-annotation" style=3D"color: g=
ray">@Named("main")</span></em> MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Like <code class=3D"literal">@Autowired</code>, <code class=3D"literal">=
@Inject</code> can also be used with <code class=3D"literal">java.util.Opti=
onal</code> or
<code class=3D"literal">@Nullable</code>. This is even more applicable here=
 since <code class=3D"literal">@Inject</code> does not have
a <code class=3D"literal">required</code> attribute.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(Optional&lt;MovieFinder&gt; movieFinder) {
        ...
    }
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(<em><span class=3D"hl-annotation" style=3D"color: g=
ray">@Nullable</span></em> MovieFinder movieFinder) {
        ...
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-named" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#beans-named"></a>7.11.2&nb=
sp;@Named and @ManagedBean: standard equivalents to the @Component annotati=
on</h3></div></div></div>
<p>Instead of <code class=3D"literal">@Component</code>, <code class=3D"lit=
eral">@javax.inject.Named</code> or <code class=3D"literal">javax.annotatio=
n.ManagedBean</code> may be
used as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.inject.Inject;
<span class=3D"hl-keyword">import</span> javax.inject.Named;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Named("movieListen=
er")</span></em>  <span class=3D"hl-comment">// @ManagedBean("movieListener=
") could be used as well</span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>It is very common to use <code class=3D"literal">@Component</code> witho=
ut specifying a name for the component.
<code class=3D"literal">@Named</code> can be used in a similar fashion:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.inject.Inject;
<span class=3D"hl-keyword">import</span> javax.inject.Named;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Named</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Inject</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMovieFinder(MovieFinder movieFinder) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>When using <code class=3D"literal">@Named</code> or <code class=3D"liter=
al">@ManagedBean</code>, it is possible to use component scanning in the
exact same way as when using Spring annotations:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "org.example")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig  {
    ...
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>In contrast to <code class=3D"literal">@Component</code>, the JSR-330 <c=
ode class=3D"literal">@Named</code> and the JSR-250 <code class=3D"literal"=
>ManagedBean</code>
annotations are not composable. Please use Spring=92s stereotype model for =
building custom
component annotations.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-standard-annotations-limitations" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-standard-annotations-limitations"></a>7.11.3&nbsp;Limitations of JSR=
-330 standard annotations</h3></div></div></div>
<p>When working with standard annotations, it is important to know that som=
e significant
features are not available as shown in the table below:</p>
<div class=3D"table"><a name=3D"annotations-comparison" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#annotations-comparison"></a><p class=3D"title"><b>Table&nbsp;7.6.&nbsp;S=
pring component model elements vs. JSR-330 variants</b></p><div class=3D"ta=
ble-contents">
<table summary=3D"Spring component model elements vs. JSR-330 variants" sty=
le=3D"border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.=
5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgr=
oup><col class=3D"col_1"><col class=3D"col_2"><col class=3D"col_3"></colgro=
up><thead><tr><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top">Spring</th><th style=3D"border-rig=
ht: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op">javax.inject.*</th><th style=3D"border-bottom: 0.5pt solid ; " align=3D=
"left" valign=3D"top">javax.inject restrictions / comments</th></tr></thead=
><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt s=
olid ; " align=3D"left" valign=3D"top"><p>@Autowired</p></td><td style=3D"b=
order-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" va=
lign=3D"top"><p>@Inject</p></td><td style=3D"border-bottom: 0.5pt solid ; "=
 align=3D"left" valign=3D"top"><p><code class=3D"literal">@Inject</code> ha=
s no 'required' attribute; can be used with Java 8=92s <code class=3D"liter=
al">Optional</code> instead.</p></td></tr><tr><td style=3D"border-right: 0.=
5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
>@Component</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>@Named / @ManagedBean</p>=
</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>JSR-330 does not provide a composable model, just a way to identify =
named components.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>@Scope("si=
ngleton")</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0=
.5pt solid ; " align=3D"left" valign=3D"top"><p>@Singleton</p></td><td styl=
e=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>The JS=
R-330 default scope is like Spring=92s <code class=3D"literal">prototype</c=
ode>. However, in order to keep it
consistent with Spring=92s general defaults, a JSR-330 bean declared in the=
 Spring
container is a <code class=3D"literal">singleton</code> by default. In orde=
r to use a scope other than <code class=3D"literal">singleton</code>,
you should use Spring=92s <code class=3D"literal">@Scope</code> annotation.=
 <code class=3D"literal">javax.inject</code> also provides a
<a class=3D"ulink" href=3D"https://download.oracle.com/javaee/6/api/javax/i=
nject/Scope.html" target=3D"_top">@Scope</a> annotation.
Nevertheless, this one is only intended to be used for creating your own an=
notations.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border=
-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>@Qualifier</p></t=
d><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " a=
lign=3D"left" valign=3D"top"><p>@Qualifier / @Named</p></td><td style=3D"bo=
rder-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">javax.inject.Qualifier</code> is just a meta-annotation for bu=
ilding custom qualifiers.
Concrete String qualifiers (like Spring=92s <code class=3D"literal">@Qualif=
ier</code> with a value) can be associated
through <code class=3D"literal">javax.inject.Named</code>.</p></td></tr><tr=
><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " al=
ign=3D"left" valign=3D"top"><p>@Value</p></td><td style=3D"border-right: 0.=
5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
>-</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valig=
n=3D"top"><p>no equivalent</p></td></tr><tr><td style=3D"border-right: 0.5p=
t solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>@=
Required</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top"><p>-</p></td><td style=3D"borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>no equivalent</p=
></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><p>@Lazy</p></td><td style=3D"bor=
der-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p>-</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>no equivalent</p></td></tr><tr><td style=3D"bor=
der-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>ObjectFactory</=
p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"=
top"><p>Provider</p></td><td style=3D"" align=3D"left" valign=3D"top"><p><c=
ode class=3D"literal">javax.inject.Provider</code> is a direct alternative =
to Spring=92s <code class=3D"literal">ObjectFactory</code>,
just with a shorter <code class=3D"literal">get()</code> method name. It ca=
n also be used in combination with
Spring=92s <code class=3D"literal">@Autowired</code> or with non-annotated =
constructors and setter methods.</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-java" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-java"></a>7.12&nbsp;Java-based container configuration</h2></div></div></d=
iv>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-java-basic-concepts" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-b=
asic-concepts"></a>7.12.1&nbsp;Basic concepts: @Bean and @Configuration</h3=
></div></div></div>
<p>The central artifacts in Spring=92s new Java-configuration support are
<code class=3D"literal">@Configuration</code>-annotated classes and <code c=
lass=3D"literal">@Bean</code>-annotated methods.</p>
<p>The <code class=3D"literal">@Bean</code> annotation is used to indicate =
that a method instantiates, configures and
initializes a new object to be managed by the Spring IoC container. For tho=
se familiar
with Spring=92s <code class=3D"literal">&lt;beans/&gt;</code> XML configura=
tion the <code class=3D"literal">@Bean</code> annotation plays the same rol=
e as
the <code class=3D"literal">&lt;bean/&gt;</code> element. You can use <code=
 class=3D"literal">@Bean</code> annotated methods with any Spring
<code class=3D"literal">@Component</code>, however, they are most often use=
d with <code class=3D"literal">@Configuration</code> beans.</p>
<p>Annotating a class with <code class=3D"literal">@Configuration</code> in=
dicates that its primary purpose is as a
source of bean definitions. Furthermore, <code class=3D"literal">@Configura=
tion</code> classes allow inter-bean
dependencies to be defined by simply calling other <code class=3D"literal">=
@Bean</code> methods in the same class.
The simplest possible <code class=3D"literal">@Configuration</code> class w=
ould read as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> MyService myService() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> MyServiceImpl();
    }
}</pre>
<p>The <code class=3D"literal">AppConfig</code> class above would be equiva=
lent to the following Spring <code class=3D"literal">&lt;beans/&gt;</code> =
XML:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"myService"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"com.acme.services.MyService=
Impl"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Full @Configuration vs 'lite' @Bean mode?</b></p></div></div></div>
<p>When <code class=3D"literal">@Bean</code> methods are declared within cl=
asses that are <span class=3D"emphasis"><em>not</em></span> annotated with
<code class=3D"literal">@Configuration</code> they are referred to as being=
 processed in a 'lite' mode. Bean methods
declared in a <code class=3D"literal">@Component</code> or even in a <span =
class=3D"emphasis"><em>plain old class</em></span> will be considered 'lite=
',
with a different primary purpose of the containing class and an <code class=
=3D"literal">@Bean</code> method just
being a sort of bonus there. For example, service components may expose man=
agement views
to the container through an additional <code class=3D"literal">@Bean</code>=
 method on each applicable component class.
In such scenarios, <code class=3D"literal">@Bean</code> methods are a simpl=
e general-purpose factory method mechanism.</p>
<p>Unlike full <code class=3D"literal">@Configuration</code>, lite <code cl=
ass=3D"literal">@Bean</code> methods cannot declare inter-bean dependencies=
.
Instead, they operate on their containing component=92s internal state and =
optionally on
arguments that they may declare. Such an <code class=3D"literal">@Bean</cod=
e> method should therefore not invoke other
<code class=3D"literal">@Bean</code> methods; each such method is literally=
 just a factory method for a particular
bean reference, without any special runtime semantics. The positive side-ef=
fect here is
that no CGLIB subclassing has to be applied at runtime, so there are no lim=
itations in
terms of class design (i.e. the containing class may nevertheless be <code =
class=3D"literal">final</code> etc).</p>
<p>In common scenarios, <code class=3D"literal">@Bean</code> methods are to=
 be declared within <code class=3D"literal">@Configuration</code> classes,
ensuring that 'full' mode is always used and that cross-method references w=
ill therefore
get redirected to the container=92s lifecycle management. This will prevent=
 the same
<code class=3D"literal">@Bean</code> method from accidentally being invoked=
 through a regular Java call which helps
to reduce subtle bugs that can be hard to track down when operating in 'lit=
e' mode.</p>
</div>
<p>The <code class=3D"literal">@Bean</code> and <code class=3D"literal">@Co=
nfiguration</code> annotations will be discussed in depth in the sections
below. First, however, we=92ll cover the various ways of creating a spring =
container using
Java-based configuration.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-java-instantiating-container" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bea=
ns-java-instantiating-container"></a>7.12.2&nbsp;Instantiating the Spring c=
ontainer using AnnotationConfigApplicationContext</h3></div></div></div>
<p>The sections below document Spring=92s <code class=3D"literal">Annotatio=
nConfigApplicationContext</code>, new in Spring
3.0. This versatile <code class=3D"literal">ApplicationContext</code> imple=
mentation is capable of accepting not only
<code class=3D"literal">@Configuration</code> classes as input, but also pl=
ain <code class=3D"literal">@Component</code> classes and classes
annotated with JSR-330 metadata.</p>
<p>When <code class=3D"literal">@Configuration</code> classes are provided =
as input, the <code class=3D"literal">@Configuration</code> class itself
is registered as a bean definition, and all declared <code class=3D"literal=
">@Bean</code> methods within the class
are also registered as bean definitions.</p>
<p>When <code class=3D"literal">@Component</code> and JSR-330 classes are p=
rovided, they are registered as bean
definitions, and it is assumed that DI metadata such as <code class=3D"lite=
ral">@Autowired</code> or <code class=3D"literal">@Inject</code> are
used within those classes where necessary.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-instantiating-container-contstructor" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#beans-java-instantiating-container-contstructor"></a>Simple const=
ruction</h4></div></div></div>
<p>In much the same way that Spring XML files are used as input when instan=
tiating a
<code class=3D"literal">ClassPathXmlApplicationContext</code>, <code class=
=3D"literal">@Configuration</code> classes may be used as input when
instantiating an <code class=3D"literal">AnnotationConfigApplicationContext=
</code>. This allows for completely
XML-free usage of the Spring container:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(AppConfig.<span class=3D"hl-keyword">class</sp=
an>);
    MyService myService =3D ctx.getBean(MyService.<span class=3D"hl-keyword=
">class</span>);
    myService.doStuff();
}</pre>
<p>As mentioned above, <code class=3D"literal">AnnotationConfigApplicationC=
ontext</code> is not limited to working only
with <code class=3D"literal">@Configuration</code> classes. Any <code class=
=3D"literal">@Component</code> or JSR-330 annotated class may be supplied
as input to the constructor. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(MyServiceImpl.<span class=3D"hl-keyword">class=
</span>, Dependency1.<span class=3D"hl-keyword">class</span>, Dependency2.<=
span class=3D"hl-keyword">class</span>);
    MyService myService =3D ctx.getBean(MyService.<span class=3D"hl-keyword=
">class</span>);
    myService.doStuff();
}</pre>
<p>The above assumes that <code class=3D"literal">MyServiceImpl</code>, <co=
de class=3D"literal">Dependency1</code> and <code class=3D"literal">Depende=
ncy2</code> use Spring
dependency injection annotations such as <code class=3D"literal">@Autowired=
</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-instantiating-container-register" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#beans-java-instantiating-container-register"></a>Building the contain=
er programmatically using register(Class&lt;?&gt;=85&#8203;)</h4></div></di=
v></div>
<p>An <code class=3D"literal">AnnotationConfigApplicationContext</code> may=
 be instantiated using a no-arg constructor
and then configured using the <code class=3D"literal">register()</code> met=
hod. This approach is particularly useful
when programmatically building an <code class=3D"literal">AnnotationConfigA=
pplicationContext</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    AnnotationConfigApplicationContext ctx =3D <span class=3D"hl-keyword">n=
ew</span> AnnotationConfigApplicationContext();
    ctx.register(AppConfig.<span class=3D"hl-keyword">class</span>, OtherCo=
nfig.<span class=3D"hl-keyword">class</span>);
    ctx.register(AdditionalConfig.<span class=3D"hl-keyword">class</span>);
    ctx.refresh();
    MyService myService =3D ctx.getBean(MyService.<span class=3D"hl-keyword=
">class</span>);
    myService.doStuff();
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-instantiating-container-scan" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-java-instantiating-container-scan"></a>Enabling component scanning =
with scan(String=85&#8203;)</h4></div></div></div>
<p>To enable component scanning, just annotate your <code class=3D"literal"=
>@Configuration</code> class as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ComponentScan(base=
Packages =3D "com.acme")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig  {
    ...
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Experienced Spring users will be familiar with the XML declaration equiv=
alent from
Spring=92s <code class=3D"literal">context:</code> namespace</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"com.acme"</s=
pan><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</td></tr></tbody></table></div>
<p>In the example above, the <code class=3D"literal">com.acme</code> packag=
e will be scanned, looking for any
<code class=3D"literal">@Component</code>-annotated classes, and those clas=
ses will be registered as Spring bean
definitions within the container. <code class=3D"literal">AnnotationConfigA=
pplicationContext</code> exposes the
<code class=3D"literal">scan(String=85&#8203;)</code> method to allow for t=
he same component-scanning functionality:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    AnnotationConfigApplicationContext ctx =3D <span class=3D"hl-keyword">n=
ew</span> AnnotationConfigApplicationContext();
    ctx.scan(<span class=3D"hl-string">"com.acme"</span>);
    ctx.refresh();
    MyService myService =3D ctx.getBean(MyService.<span class=3D"hl-keyword=
">class</span>);
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Remember that <code class=3D"literal">@Configuration</code> classes are =
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-meta-annotations" title=3D"7.=
10.2&nbsp;Meta-annotations">meta-annotated</a>
with <code class=3D"literal">@Component</code>, so they are candidates for =
component-scanning! In the example above,
assuming that <code class=3D"literal">AppConfig</code> is declared within t=
he <code class=3D"literal">com.acme</code> package (or any package
underneath), it will be picked up during the call to <code class=3D"literal=
">scan()</code>, and upon <code class=3D"literal">refresh()</code> all
its <code class=3D"literal">@Bean</code> methods will be processed and regi=
stered as bean definitions within the
container.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-instantiating-container-web" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-java-instantiating-container-web"></a>Support for web applications w=
ith AnnotationConfigWebApplicationContext</h4></div></div></div>
<p>A <code class=3D"literal">WebApplicationContext</code> variant of <code =
class=3D"literal">AnnotationConfigApplicationContext</code> is available
with <code class=3D"literal">AnnotationConfigWebApplicationContext</code>. =
This implementation may be used when
configuring the Spring <code class=3D"literal">ContextLoaderListener</code>=
 servlet listener, Spring MVC
<code class=3D"literal">DispatcherServlet</code>, etc. What follows is a <c=
ode class=3D"literal">web.xml</code> snippet that configures a typical
Spring MVC web application. Note the use of the <code class=3D"literal">con=
textClass</code> context-param and
init-param:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;web-app&gt;</span>
    <span class=3D"hl-comment">&lt;!-- Configure ContextLoaderListener to u=
se AnnotationConfigWebApplicationContext
        instead of the default XmlWebApplicationContext --&gt;</span>
    <span class=3D"hl-tag">&lt;context-param&gt;</span>
        <span class=3D"hl-tag">&lt;param-name&gt;</span>contextClass<span c=
lass=3D"hl-tag">&lt;/param-name&gt;</span>
        <span class=3D"hl-tag">&lt;param-value&gt;</span>
            org.springframework.web.context.support.AnnotationConfigWebAppl=
icationContext
        <span class=3D"hl-tag">&lt;/param-value&gt;</span>
    <span class=3D"hl-tag">&lt;/context-param&gt;</span>

    <span class=3D"hl-comment">&lt;!-- Configuration locations must consist=
 of one or more comma- or space-delimited
        fully-qualified @Configuration classes. Fully-qualified packages ma=
y also be
        specified for component-scanning --&gt;</span>
    <span class=3D"hl-tag">&lt;context-param&gt;</span>
        <span class=3D"hl-tag">&lt;param-name&gt;</span>contextConfigLocati=
on<span class=3D"hl-tag">&lt;/param-name&gt;</span>
        <span class=3D"hl-tag">&lt;param-value&gt;</span>com.acme.AppConfig=
<span class=3D"hl-tag">&lt;/param-value&gt;</span>
    <span class=3D"hl-tag">&lt;/context-param&gt;</span>

    <span class=3D"hl-comment">&lt;!-- Bootstrap the root application conte=
xt as usual using ContextLoaderListener --&gt;</span>
    <span class=3D"hl-tag">&lt;listener&gt;</span>
        <span class=3D"hl-tag">&lt;listener-class&gt;</span>org.springframe=
work.web.context.ContextLoaderListener<span class=3D"hl-tag">&lt;/listener-=
class&gt;</span>
    <span class=3D"hl-tag">&lt;/listener&gt;</span>

    <span class=3D"hl-comment">&lt;!-- Declare a Spring MVC DispatcherServl=
et as usual --&gt;</span>
    <span class=3D"hl-tag">&lt;servlet&gt;</span>
        <span class=3D"hl-tag">&lt;servlet-name&gt;</span>dispatcher<span c=
lass=3D"hl-tag">&lt;/servlet-name&gt;</span>
        <span class=3D"hl-tag">&lt;servlet-class&gt;</span>org.springframew=
ork.web.servlet.DispatcherServlet<span class=3D"hl-tag">&lt;/servlet-class&=
gt;</span>
        <span class=3D"hl-comment">&lt;!-- Configure DispatcherServlet to u=
se AnnotationConfigWebApplicationContext
            instead of the default XmlWebApplicationContext --&gt;</span>
        <span class=3D"hl-tag">&lt;init-param&gt;</span>
            <span class=3D"hl-tag">&lt;param-name&gt;</span>contextClass<sp=
an class=3D"hl-tag">&lt;/param-name&gt;</span>
            <span class=3D"hl-tag">&lt;param-value&gt;</span>
                org.springframework.web.context.support.AnnotationConfigWeb=
ApplicationContext
            <span class=3D"hl-tag">&lt;/param-value&gt;</span>
        <span class=3D"hl-tag">&lt;/init-param&gt;</span>
        <span class=3D"hl-comment">&lt;!-- Again, config locations must con=
sist of one or more comma- or space-delimited
            and fully-qualified @Configuration classes --&gt;</span>
        <span class=3D"hl-tag">&lt;init-param&gt;</span>
            <span class=3D"hl-tag">&lt;param-name&gt;</span>contextConfigLo=
cation<span class=3D"hl-tag">&lt;/param-name&gt;</span>
            <span class=3D"hl-tag">&lt;param-value&gt;</span>com.acme.web.M=
vcConfig<span class=3D"hl-tag">&lt;/param-value&gt;</span>
        <span class=3D"hl-tag">&lt;/init-param&gt;</span>
    <span class=3D"hl-tag">&lt;/servlet&gt;</span>

    <span class=3D"hl-comment">&lt;!-- map all requests for /app/* to the d=
ispatcher servlet --&gt;</span>
    <span class=3D"hl-tag">&lt;servlet-mapping&gt;</span>
        <span class=3D"hl-tag">&lt;servlet-name&gt;</span>dispatcher<span c=
lass=3D"hl-tag">&lt;/servlet-name&gt;</span>
        <span class=3D"hl-tag">&lt;url-pattern&gt;</span>/app/*<span class=
=3D"hl-tag">&lt;/url-pattern&gt;</span>
    <span class=3D"hl-tag">&lt;/servlet-mapping&gt;</span>
<span class=3D"hl-tag">&lt;/web-app&gt;</span></pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-java-bean-annotation" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-=
bean-annotation"></a>7.12.3&nbsp;Using the @Bean annotation</h3></div></div=
></div>
<p><code class=3D"literal">@Bean</code> is a method-level annotation and a =
direct analog of the XML <code class=3D"literal">&lt;bean/&gt;</code> eleme=
nt.
The annotation supports some of the attributes offered by <code class=3D"li=
teral">&lt;bean/&gt;</code>, such as:
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-initializin=
gbean" title=3D"Initialization callbacks">init-method</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposableb=
ean" title=3D"Destruction callbacks">destroy-method</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-autowire" title=3D"7.=
4.5&nbsp;Autowiring collaborators">autowiring</a> and <code class=3D"litera=
l">name</code>.</p>
<p>You can use the <code class=3D"literal">@Bean</code> annotation in a <co=
de class=3D"literal">@Configuration</code>-annotated or in a
<code class=3D"literal">@Component</code>-annotated class.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-declaring-a-bean" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java=
-declaring-a-bean"></a>Declaring a bean</h4></div></div></div>
<p>To declare a bean, simply annotate a method with the <code class=3D"lite=
ral">@Bean</code> annotation. You use this
method to register a bean definition within an <code class=3D"literal">Appl=
icationContext</code> of the type
specified as the method=92s return value. By default, the bean name will be=
 the same as
the method name. The following is a simple example of a <code class=3D"lite=
ral">@Bean</code> method declaration:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferServiceImpl transferSe=
rvice() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl();
    }
}</pre>
<p>The preceding configuration is exactly equivalent to the following Sprin=
g XML:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"transferService"</span> <span class=3D"h=
l-attribute">class</span>=3D<span class=3D"hl-value">"com.acme.TransferServ=
iceImpl"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>Both declarations make a bean named <code class=3D"literal">transferServ=
ice</code> available in the
<code class=3D"literal">ApplicationContext</code>, bound to an object insta=
nce of type <code class=3D"literal">TransferServiceImpl</code>:</p>
<pre class=3D"literallayout">transferService -&gt; com.acme.TransferService=
Impl</pre>
<p>You may also declare your <code class=3D"literal">@Bean</code> method wi=
th an interface (or base class)
return type:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl();
    }
}</pre>
<p>However, this limits the visibility for advance type prediction to the s=
pecified
interface type (<code class=3D"literal">TransferService</code>) then, with =
the full type (<code class=3D"literal">TransferServiceImpl</code>)
only known to the container once the affected singleton bean has been insta=
ntiated.
Non-lazy singleton beans get instantiated according to their declaration or=
der,
so you may see different type matching results depending on when another co=
mponent
tries to match by a non-declared type (such as <code class=3D"literal">@Aut=
owired TransferServiceImpl</code>
which will only resolve once the "transferService" bean has been instantiat=
ed).</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>If you consistently refer to your types by a declared service interface,=
 your
<code class=3D"literal">@Bean</code> return types may safely join that desi=
gn decision. However, for components
implementing several interfaces or for components potentially referred to b=
y their
implementation type, it is safer to declare the most specific return type p=
ossible
(at least as specific as required by the injection points referring to your=
 bean).</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-dependencies" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-dep=
endencies"></a>Bean dependencies</h4></div></div></div>
<p>A <code class=3D"literal">@Bean</code> annotated method can have an arbi=
trary number of parameters describing the
dependencies required to build that bean. For instance if our <code class=
=3D"literal">TransferService</code>
requires an <code class=3D"literal">AccountRepository</code> we can materia=
lize that dependency via a method
parameter:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e(AccountRepository accountRepository) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl(accountRepository);
    }
}</pre>
<p>The resolution mechanism is pretty much identical to constructor-based d=
ependency
injection, see <a class=3D"link" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-constructor-in=
jection" title=3D"Constructor-based dependency injection">the relevant sect=
ion</a> for more details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-lifecycle-callbacks" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-j=
ava-lifecycle-callbacks"></a>Receiving lifecycle callbacks</h4></div></div>=
</div>
<p>Any classes defined with the <code class=3D"literal">@Bean</code> annota=
tion support the regular lifecycle callbacks
and can use the <code class=3D"literal">@PostConstruct</code> and <code cla=
ss=3D"literal">@PreDestroy</code> annotations from JSR-250, see
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-postconstruct-and-predestroy-=
annotations" title=3D"7.9.8&nbsp;@PostConstruct and @PreDestroy">JSR-250 an=
notations</a> for further
details.</p>
<p>The regular Spring <a class=3D"link" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory=
-nature" title=3D"7.6&nbsp;Customizing the nature of a bean">lifecycle</a> =
callbacks are fully supported as
well. If a bean implements <code class=3D"literal">InitializingBean</code>,=
 <code class=3D"literal">DisposableBean</code>, or <code class=3D"literal">=
Lifecycle</code>, their
respective methods are called by the container.</p>
<p>The standard set of <code class=3D"literal">*Aware</code> interfaces suc=
h as <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#beans-beanfactory" title=3D"7.=
16&nbsp;The BeanFactory">BeanFactoryAware</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-aware" title=3D"7.6.2=
&nbsp;ApplicationContextAware and BeanNameAware">BeanNameAware</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#context-functionality-messagesource=
" title=3D"7.15.1&nbsp;Internationalization using MessageSource">MessageSou=
rceAware</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-aware" title=3D"7.6.2=
&nbsp;ApplicationContextAware and BeanNameAware">ApplicationContextAware</a=
>, and so on are also fully supported.</p>
<p>The <code class=3D"literal">@Bean</code> annotation supports specifying =
arbitrary initialization and destruction
callback methods, much like Spring XML=92s <code class=3D"literal">init-met=
hod</code> and <code class=3D"literal">destroy-method</code> attributes
on the <code class=3D"literal">bean</code> element:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Foo {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> init() {
        <span class=3D"hl-comment">// initialization logic</span>
    }
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> Bar {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> cleanup() {
        <span class=3D"hl-comment">// destruction logic</span>
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean(initMetho=
d =3D "init")</span></em>
    <span class=3D"hl-keyword">public</span> Foo foo() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Foo();
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean(destroyMe=
thod =3D "cleanup")</span></em>
    <span class=3D"hl-keyword">public</span> Bar bar() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Bar();
    }
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>By default, beans defined using Java config that have a public <code cla=
ss=3D"literal">close</code> or <code class=3D"literal">shutdown</code>
method are automatically enlisted with a destruction callback. If you have =
a public
<code class=3D"literal">close</code> or <code class=3D"literal">shutdown</c=
ode> method and you do not wish for it to be called when the container
shuts down, simply add <code class=3D"literal">@Bean(destroyMethod=3D"")</c=
ode> to your bean definition to disable the
default <code class=3D"literal">(inferred)</code> mode.</p>
<p>You may want to do that by default for a resource that you acquire via J=
NDI as its
lifecycle is managed outside the application. In particular, make sure to a=
lways do it
for a <code class=3D"literal">DataSource</code> as it is known to be proble=
matic on Java EE application servers.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Bean(destroyMethod=3D"")</span></em>
<span class=3D"hl-keyword">public</span> DataSource dataSource() <span clas=
s=3D"hl-keyword">throws</span> NamingException {
    <span class=3D"hl-keyword">return</span> (DataSource) jndiTemplate.look=
up(<span class=3D"hl-string">"MyDS"</span>);
}</pre>
<p>Also, with <code class=3D"literal">@Bean</code> methods, you will typica=
lly choose to use programmatic JNDI lookups:
either using Spring=92s <code class=3D"literal">JndiTemplate</code>/<code c=
lass=3D"literal">JndiLocatorDelegate</code> helpers or straight JNDI
<code class=3D"literal">InitialContext</code> usage, but not the <code clas=
s=3D"literal">JndiObjectFactoryBean</code> variant which would force
you to declare the return type as the <code class=3D"literal">FactoryBean</=
code> type instead of the actual target
type, making it harder to use for cross-reference calls in other <code clas=
s=3D"literal">@Bean</code> methods that
intend to refer to the provided resource here.</p>
</td></tr></tbody></table></div>
<p>Of course, in the case of <code class=3D"literal">Foo</code> above, it w=
ould be equally as valid to call the <code class=3D"literal">init()</code>
method directly during construction:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> Foo foo() {
        Foo foo =3D <span class=3D"hl-keyword">new</span> Foo();
        foo.init();
        <span class=3D"hl-keyword">return</span> foo;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>When you work directly in Java, you can do anything you like with your o=
bjects and do
not always need to rely on the container lifecycle!</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-specifying-bean-scope" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-java-specifying-bean-scope"></a>Specifying bean scope</h4></div></div></di=
v>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-java-available-scopes" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java=
-available-scopes"></a>Using the @Scope annotation</h5></div></div></div>
<p>You can specify that your beans defined with the <code class=3D"literal"=
>@Bean</code> annotation should have a
specific scope. You can use any of the standard scopes specified in the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes" title=3D"7.5&=
nbsp;Bean scopes">Bean Scopes</a> section.</p>
<p>The default scope is <code class=3D"literal">singleton</code>, but you c=
an override this with the <code class=3D"literal">@Scope</code> annotation:=
</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyConfiguration {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"strong"><strong>@Scope("prototype")</strong></span>
    <span class=3D"hl-keyword">public</span> Encryptor encryptor() {
        <span class=3D"hl-comment">// ...</span>
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-java-scoped-proxy" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-sco=
ped-proxy"></a>@Scope and scoped-proxy</h5></div></div></div>
<p>Spring offers a convenient way of working with scoped dependencies throu=
gh
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-factory-scopes-other-injectio=
n" title=3D"Scoped beans as dependencies">scoped proxies</a>. The easiest w=
ay to create such
a proxy when using the XML configuration is the <code class=3D"literal">&lt=
;aop:scoped-proxy/&gt;</code> element.
Configuring your beans in Java with a @Scope annotation offers equivalent s=
upport with
the proxyMode attribute. The default is no proxy ( <code class=3D"literal">=
ScopedProxyMode.NO</code>), but you can
specify <code class=3D"literal">ScopedProxyMode.TARGET_CLASS</code> or <cod=
e class=3D"literal">ScopedProxyMode.INTERFACES</code>.</p>
<p>If you port the scoped proxy example from the XML reference documentatio=
n (see preceding
link) to our <code class=3D"literal">@Bean</code> using Java, it would look=
 like the following:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// an HTTP Session=
-scoped bean exposed as a proxy</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></em>
<span class=3D"strong"><strong>@SessionScope</strong></span>
<span class=3D"hl-keyword">public</span> UserPreferences userPreferences() =
{
    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">new=
</span> UserPreferences();
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></em>
<span class=3D"hl-keyword">public</span> Service userService() {
    UserService service =3D <span class=3D"hl-keyword">new</span> SimpleUse=
rService();
    <span class=3D"hl-comment">// a reference to the proxied userPreference=
s bean</span>
    service.setUserPreferences(userPreferences());
    <span class=3D"hl-keyword">return</span> service;
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-customizing-bean-naming" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bea=
ns-java-customizing-bean-naming"></a>Customizing bean naming</h4></div></di=
v></div>
<p>By default, configuration classes use a <code class=3D"literal">@Bean</c=
ode> method=92s name as the name of the
resulting bean. This functionality can be overridden, however, with the <co=
de class=3D"literal">name</code> attribute.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean(name =3D =
"myFoo")</span></em>
    <span class=3D"hl-keyword">public</span> Foo foo() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Foo();
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-bean-aliasing" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-be=
an-aliasing"></a>Bean aliasing</h4></div></div></div>
<p>As discussed in <a class=3D"xref" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname" =
title=3D"7.3.1&nbsp;Naming beans">Section&nbsp;7.3.1, =93Naming beans=94</a=
>, it is sometimes desirable to give a single bean
multiple names, otherwise known as <span class=3D"emphasis"><em>bean aliasi=
ng</em></span>. The <code class=3D"literal">name</code> attribute of the <c=
ode class=3D"literal">@Bean</code>
annotation accepts a String array for this purpose.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean({"dataSou=
rce", "subsystemA-dataSource", "subsystemB-dataSource"})</span></em>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-comment">// instantiate, configure and return Dat=
aSource bean...</span>
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-bean-description" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java=
-bean-description"></a>Bean description</h4></div></div></div>
<p>Sometimes it is helpful to provide a more detailed textual description o=
f a bean. This can
be particularly useful when beans are exposed (perhaps via JMX) for monitor=
ing purposes.</p>
<p>To add a description to a <code class=3D"literal">@Bean</code> the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/annotation/Description.=
html" target=3D"_top"><code class=3D"literal">@Description</code></a>
annotation can be used:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"strong"><strong>@Description("Provides a basic example o=
f a bean")</strong></span>
    <span class=3D"hl-keyword">public</span> Foo foo() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Foo();
    }
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-java-configuration-annotation" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-java-configuration-annotation"></a>7.12.4&nbsp;Using the @Configuration=
 annotation</h3></div></div></div>
<p><code class=3D"literal">@Configuration</code> is a class-level annotatio=
n indicating that an object is a source of
bean definitions. <code class=3D"literal">@Configuration</code> classes dec=
lare beans via public <code class=3D"literal">@Bean</code> annotated
methods. Calls to <code class=3D"literal">@Bean</code> methods on <code cla=
ss=3D"literal">@Configuration</code> classes can also be used to define
inter-bean dependencies. See <a class=3D"xref" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-=
java-basic-concepts" title=3D"7.12.1&nbsp;Basic concepts: @Bean and @Config=
uration">Section&nbsp;7.12.1, =93Basic concepts: @Bean and @Configuration=
=94</a> for a general introduction.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-injecting-dependencies" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-java-injecting-dependencies"></a>Injecting inter-bean dependencies</h4></=
div></div></div>
<p>When <code class=3D"literal">@Bean</code>s have dependencies on one anot=
her, expressing that dependency is as simple
as having one bean method call another:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> Foo foo() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Foo(bar());
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> Bar bar() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Bar();
    }
}</pre>
<p>In the example above, the <code class=3D"literal">foo</code> bean receiv=
es a reference to <code class=3D"literal">bar</code> via constructor
injection.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This method of declaring inter-bean dependencies only works when the <co=
de class=3D"literal">@Bean</code> method is
declared within a <code class=3D"literal">@Configuration</code> class. You =
cannot declare inter-bean dependencies
using plain <code class=3D"literal">@Component</code> classes.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-method-injection" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java=
-method-injection"></a>Lookup method injection</h4></div></div></div>
<p>As noted earlier, <a class=3D"link" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-=
method-injection" title=3D"7.4.6&nbsp;Method injection">lookup method injec=
tion</a> is an
advanced feature that you should use rarely. It is useful in cases where a
singleton-scoped bean has a dependency on a prototype-scoped bean. Using Ja=
va for this
type of configuration provides a natural means for implementing this patter=
n.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">abstract</span> <span class=3D"hl-keyword">class</sp=
an> CommandManager {
    <span class=3D"hl-keyword">public</span> Object process(Object commandS=
tate) {
        <span class=3D"hl-comment">// grab a new instance of the appropriat=
e Command interface</span>
        Command command =3D createCommand();
        <span class=3D"hl-comment">// set the state on the (hopefully brand=
 new) Command instance</span>
        command.setState(commandState);
        <span class=3D"hl-keyword">return</span> command.execute();
    }

    <span class=3D"hl-comment">// okay... but where is the implementation o=
f this method?</span>
    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
abstract</span> Command createCommand();
}</pre>
<p>Using Java-configuration support , you can create a subclass of <code cl=
ass=3D"literal">CommandManager</code> where
the abstract <code class=3D"literal">createCommand()</code> method is overr=
idden in such a way that it looks up a new
(prototype) command object:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Bean</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Scope("prototype")=
</span></em>
<span class=3D"hl-keyword">public</span> AsyncCommand asyncCommand() {
    AsyncCommand command =3D <span class=3D"hl-keyword">new</span> AsyncCom=
mand();
    <span class=3D"hl-comment">// inject dependencies here as required</spa=
n>
    <span class=3D"hl-keyword">return</span> command;
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></em>
<span class=3D"hl-keyword">public</span> CommandManager commandManager() {
    <span class=3D"hl-comment">// return new anonymous implementation of Co=
mmandManager with command() overridden</span>
    <span class=3D"hl-comment">// to return a new prototype Command object<=
/span>
    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">new=
</span> CommandManager() {
        <span class=3D"hl-keyword">protected</span> Command createCommand()=
 {
            <span class=3D"hl-keyword">return</span> asyncCommand();
        }
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-further-information-java-config" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-java-further-information-java-config"></a>Further information ab=
out how Java-based configuration works internally</h4></div></div></div>
<p>The following example shows a <code class=3D"literal">@Bean</code> annot=
ated method being called twice:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> ClientService clientService1()=
 {
        ClientServiceImpl clientService =3D <span class=3D"hl-keyword">new<=
/span> ClientServiceImpl();
        clientService.setClientDao(clientDao());
        <span class=3D"hl-keyword">return</span> clientService;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> ClientService clientService2()=
 {
        ClientServiceImpl clientService =3D <span class=3D"hl-keyword">new<=
/span> ClientServiceImpl();
        clientService.setClientDao(clientDao());
        <span class=3D"hl-keyword">return</span> clientService;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> ClientDao clientDao() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> ClientDaoImpl();
    }
}</pre>
<p><code class=3D"literal">clientDao()</code> has been called once in <code=
 class=3D"literal">clientService1()</code> and once in <code class=3D"liter=
al">clientService2()</code>.
Since this method creates a new instance of <code class=3D"literal">ClientD=
aoImpl</code> and returns it, you would
normally expect having 2 instances (one for each service). That definitely =
would be
problematic: in Spring, instantiated beans have a <code class=3D"literal">s=
ingleton</code> scope by default. This is
where the magic comes in: All <code class=3D"literal">@Configuration</code>=
 classes are subclassed at startup-time
with <code class=3D"literal">CGLIB</code>. In the subclass, the child metho=
d checks the container first for any
cached (scoped) beans before it calls the parent method and creates a new i=
nstance. Note
that as of Spring 3.2, it is no longer necessary to add CGLIB to your class=
path because
CGLIB classes have been repackaged under <code class=3D"literal">org.spring=
framework.cglib</code> and included directly
within the spring-core JAR.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The behavior could be different according to the scope of your bean. We =
are talking
about singletons here.</p>
</td></tr></tbody></table></div>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>There are a few restrictions due to the fact that CGLIB dynamically adds=
 features at
startup-time, in particular that configuration classes must not be final. H=
owever, as
of 4.3, any constructors are allowed on configuration classes, including th=
e use of
<code class=3D"literal">@Autowired</code> or a single non-default construct=
or declaration for default injection.</p>
<p>If you prefer to avoid any CGLIB-imposed limitations, consider declaring=
 your <code class=3D"literal">@Bean</code>
methods on non-<code class=3D"literal">@Configuration</code> classes, e.g. =
on plain <code class=3D"literal">@Component</code> classes instead.
Cross-method calls between <code class=3D"literal">@Bean</code> methods won=
=92t get intercepted then, so you=92ll have
to exclusively rely on dependency injection at the constructor or method le=
vel there.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-java-composing-configuration-classes" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-java-composing-configuration-classes"></a>7.12.5&nbsp;Composing =
Java-based configurations</h3></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-using-import" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-usi=
ng-import"></a>Using the @Import annotation</h4></div></div></div>
<p>Much as the <code class=3D"literal">&lt;import/&gt;</code> element is us=
ed within Spring XML files to aid in modularizing
configurations, the <code class=3D"literal">@Import</code> annotation allow=
s for loading <code class=3D"literal">@Bean</code> definitions from
another configuration class:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ConfigA {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> A a() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> A();
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Import(ConfigA.cla=
ss)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ConfigB {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> B b() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> B();
    }
}</pre>
<p>Now, rather than needing to specify both <code class=3D"literal">ConfigA=
.class</code> and <code class=3D"literal">ConfigB.class</code> when
instantiating the context, only <code class=3D"literal">ConfigB</code> need=
s to be supplied explicitly:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(ConfigB.<span class=3D"hl-keyword">class</span=
>);

    <span class=3D"hl-comment">// now both beans A and B will be available.=
..</span>
    A a =3D ctx.getBean(A.<span class=3D"hl-keyword">class</span>);
    B b =3D ctx.getBean(B.<span class=3D"hl-keyword">class</span>);
}</pre>
<p>This approach simplifies container instantiation, as only one class need=
s to be dealt
with, rather than requiring the developer to remember a potentially large n=
umber of
<code class=3D"literal">@Configuration</code> classes during construction.<=
/p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>As of Spring Framework 4.2, <code class=3D"literal">@Import</code> also =
supports references to regular component
classes, analogous to the <code class=3D"literal">AnnotationConfigApplicati=
onContext.register</code> method.
This is particularly useful if you=92d like to avoid component scanning, us=
ing a few
configuration classes as entry points for explicitly defining all your comp=
onents.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-java-injecting-imported-beans" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#be=
ans-java-injecting-imported-beans"></a>Injecting dependencies on imported @=
Bean definitions</h5></div></div></div>
<p>The example above works, but is simplistic. In most practical scenarios,=
 beans will have
dependencies on one another across configuration classes. When using XML, t=
his is not an
issue, per se, because there is no compiler involved, and one can simply de=
clare
<code class=3D"literal">ref=3D"someBean"</code> and trust that Spring will =
work it out during container initialization.
Of course, when using <code class=3D"literal">@Configuration</code> classes=
, the Java compiler places constraints on
the configuration model, in that references to other beans must be valid Ja=
va syntax.</p>
<p>Fortunately, solving this problem is simple. As <a class=3D"link" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#beans-java-dependencies" title=3D"Bean dependencies">we a=
lready discussed</a>,
<code class=3D"literal">@Bean</code> method can have an arbitrary number of=
 parameters describing the bean
dependencies. Let=92s consider a more real-world scenario with several <cod=
e class=3D"literal">@Configuration</code>
classes, each depending on beans declared in the others:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ServiceConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e(AccountRepository accountRepository) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl(accountRepository);
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> RepositoryConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> AccountRepository accountRepos=
itory(DataSource dataSource) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> JdbcAccountRepository(dataSource);
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Import({ServiceCon=
fig.class, RepositoryConfig.class})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SystemTestConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-comment">// return new DataSource</span>
    }
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">static<=
/span> <span class=3D"hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(SystemTestConfig.<span class=3D"hl-keyword">cl=
ass</span>);
    <span class=3D"hl-comment">// everything wires up across configuration =
classes...</span>
    TransferService transferService =3D ctx.getBean(TransferService.<span c=
lass=3D"hl-keyword">class</span>);
    transferService.transfer(<span class=3D"hl-number">100.00</span>, <span=
 class=3D"hl-string">"A123"</span>, <span class=3D"hl-string">"C456"</span>=
);
}</pre>
<p>There is another way to achieve the same result. Remember that <code cla=
ss=3D"literal">@Configuration</code> classes are
ultimately just another bean in the container: This means that they can tak=
e advantage of
<code class=3D"literal">@Autowired</code> and <code class=3D"literal">@Valu=
e</code> injection etc just like any other bean!</p>
<div class=3D"warning" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><=
table border=3D"0" summary=3D"Warning"><tbody><tr><td rowspan=3D"2" align=
=3D"center" valign=3D"top" width=3D"25"><img alt=3D"[Warning]" src=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/images/warning.png"></td><th align=3D"left">Warning</th></tr><tr><t=
d align=3D"left" valign=3D"top">
<p>Make sure that the dependencies you inject that way are of the simplest =
kind only. <code class=3D"literal">@Configuration</code>
classes are processed quite early during the initialization of the context =
and forcing a dependency
to be injected this way may lead to unexpected early initialization. Whenev=
er possible, resort to
parameter-based injection as in the example above.</p>
<p>Also, be particularly careful with <code class=3D"literal">BeanPostProce=
ssor</code> and <code class=3D"literal">BeanFactoryPostProcessor</code> def=
initions
via <code class=3D"literal">@Bean</code>. Those should usually be declared =
as <code class=3D"literal">static @Bean</code> methods, not triggering the
instantiation of their containing configuration class. Otherwise, <code cla=
ss=3D"literal">@Autowired</code> and <code class=3D"literal">@Value</code> =
won=92t
work on the configuration class itself since it is being created as a bean =
instance too early.</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ServiceConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> AccountRepository accountRepo=
sitory;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl(accountRepository);
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> RepositoryConfig {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> DataSource dataSource;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> RepositoryConfig(DataSource da=
taSource) {
        <span class=3D"hl-keyword">this</span>.dataSource =3D dataSource;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> AccountRepository accountRepos=
itory() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> JdbcAccountRepository(dataSource);
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Import({ServiceCon=
fig.class, RepositoryConfig.class})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SystemTestConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-comment">// return new DataSource</span>
    }
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">static<=
/span> <span class=3D"hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(SystemTestConfig.<span class=3D"hl-keyword">cl=
ass</span>);
    <span class=3D"hl-comment">// everything wires up across configuration =
classes...</span>
    TransferService transferService =3D ctx.getBean(TransferService.<span c=
lass=3D"hl-keyword">class</span>);
    transferService.transfer(<span class=3D"hl-number">100.00</span>, <span=
 class=3D"hl-string">"A123"</span>, <span class=3D"hl-string">"C456"</span>=
);
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Constructor injection in <code class=3D"literal">@Configuration</code> c=
lasses is only supported as of Spring
Framework 4.3. Note also that there is no need to specify <code class=3D"li=
teral">@Autowired</code> if the target
bean defines only one constructor; in the example above, <code class=3D"lit=
eral">@Autowired</code> is not necessary
on the <code class=3D"literal">RepositoryConfig</code> constructor.</p>
</td></tr></tbody></table></div>
<p>In the scenario above, using <code class=3D"literal">@Autowired</code> w=
orks well and provides the desired
modularity, but determining exactly where the autowired bean definitions ar=
e declared is
still somewhat ambiguous. For example, as a developer looking at <code clas=
s=3D"literal">ServiceConfig</code>, how do
you know exactly where the <code class=3D"literal">@Autowired AccountReposi=
tory</code> bean is declared? It=92s not
explicit in the code, and this may be just fine. Remember that the
<a class=3D"ulink" href=3D"https://spring.io/tools/sts" target=3D"_top">Spr=
ing Tool Suite</a> provides tooling that
can render graphs showing how everything is wired up - that may be all you =
need. Also,
your Java IDE can easily find all declarations and uses of the <code class=
=3D"literal">AccountRepository</code> type,
and will quickly show you the location of <code class=3D"literal">@Bean</co=
de> methods that return that type.</p>
<p>In cases where this ambiguity is not acceptable and you wish to have dir=
ect navigation
from within your IDE from one <code class=3D"literal">@Configuration</code>=
 class to another, consider autowiring the
configuration classes themselves:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ServiceConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> RepositoryConfig repositoryCo=
nfig;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e() {
        <span class=3D"hl-comment">// navigate 'through' the config class t=
o the @Bean method!</span>
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl(repositoryConfig.accountRepository());
    }
}</pre>
<p>In the situation above, it is completely explicit where <code class=3D"l=
iteral">AccountRepository</code> is defined.
However, <code class=3D"literal">ServiceConfig</code> is now tightly couple=
d to <code class=3D"literal">RepositoryConfig</code>; that=92s the
tradeoff. This tight coupling can be somewhat mitigated by using interface-=
based or
abstract class-based <code class=3D"literal">@Configuration</code> classes.=
 Consider the following:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ServiceConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> RepositoryConfig repositoryCo=
nfig;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferServiceImpl(repositoryConfig.accountRepository());
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> RepositoryConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    AccountRepository accountRepository();
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultRepositoryConfig <span class=3D"hl-keyword">implements</span> =
RepositoryConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> AccountRepository accountRepos=
itory() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> JdbcAccountRepository(...);
    }
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Import({ServiceCon=
fig.class, DefaultRepositoryConfig.class})</span></em>  <span class=3D"hl-c=
omment">// import the concrete config!</span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SystemTestConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-comment">// return DataSource</span>
    }

}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">static<=
/span> <span class=3D"hl-keyword">void</span> main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(SystemTestConfig.<span class=3D"hl-keyword">cl=
ass</span>);
    TransferService transferService =3D ctx.getBean(TransferService.<span c=
lass=3D"hl-keyword">class</span>);
    transferService.transfer(<span class=3D"hl-number">100.00</span>, <span=
 class=3D"hl-string">"A123"</span>, <span class=3D"hl-string">"C456"</span>=
);
}</pre>
<p>Now <code class=3D"literal">ServiceConfig</code> is loosely coupled with=
 respect to the concrete
<code class=3D"literal">DefaultRepositoryConfig</code>, and built-in IDE to=
oling is still useful: it will be easy for
the developer to get a type hierarchy of <code class=3D"literal">Repository=
Config</code> implementations. In this
way, navigating <code class=3D"literal">@Configuration</code> classes and t=
heir dependencies becomes no different
than the usual process of navigating interface-based code.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>If you would like to influence the startup creation order of certain bea=
ns, consider
declaring some of them as <code class=3D"literal">@Lazy</code> (for creatio=
n on first access instead of on startup)
or as <code class=3D"literal">@DependsOn</code> on certain other beans (mak=
ing sure that specific other beans will
be created before the current bean, beyond what the latter=92s direct depen=
dencies imply).</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-conditional" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-cond=
itional"></a>Conditionally include @Configuration classes or @Bean methods<=
/h4></div></div></div>
<p>It is often useful to conditionally enable or disable a complete <code c=
lass=3D"literal">@Configuration</code> class,
or even individual <code class=3D"literal">@Bean</code> methods, based on s=
ome arbitrary system state. One common
example of this is to use the <code class=3D"literal">@Profile</code> annot=
ation to activate beans only when a specific
profile has been enabled in the Spring <code class=3D"literal">Environment<=
/code> (see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-definition-profil=
es" title=3D"7.13.1&nbsp;Bean definition profiles">Section&nbsp;7.13.1, =93=
Bean definition profiles=94</a>
for details).</p>
<p>The <code class=3D"literal">@Profile</code> annotation is actually imple=
mented using a much more flexible annotation
called <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/d=
ocs/4.3.21.RELEASE/javadoc-api/org/springframework/context/annotation/Condi=
tional.html" target=3D"_top"><code class=3D"literal">@Conditional</code></a=
>.
The <code class=3D"literal">@Conditional</code> annotation indicates specif=
ic
<code class=3D"literal">org.springframework.context.annotation.Condition</c=
ode> implementations that should be
consulted before a <code class=3D"literal">@Bean</code> is registered.</p>
<p>Implementations of the <code class=3D"literal">Condition</code> interfac=
e simply provide a <code class=3D"literal">matches(=85&#8203;)</code>
method that returns <code class=3D"literal">true</code> or <code class=3D"l=
iteral">false</code>. For example, here is the actual
<code class=3D"literal">Condition</code> implementation used for <code clas=
s=3D"literal">@Profile</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Override</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boolean=
</span> matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
    <span class=3D"hl-keyword">if</span> (context.getEnvironment() !=3D nul=
l) {
        <span class=3D"hl-comment">// Read the @Profile annotation attribut=
es</span>
        MultiValueMap&lt;String, Object&gt; attrs =3D metadata.getAllAnnota=
tionAttributes(Profile.<span class=3D"hl-keyword">class</span>.getName());
        <span class=3D"hl-keyword">if</span> (attrs !=3D null) {
            <span class=3D"hl-keyword">for</span> (Object value : attrs.get=
(<span class=3D"hl-string">"value"</span>)) {
                <span class=3D"hl-keyword">if</span> (context.getEnvironmen=
t().acceptsProfiles(((String[]) value))) {
                    <span class=3D"hl-keyword">return</span> true;
                }
            }
            <span class=3D"hl-keyword">return</span> false;
        }
    }
    <span class=3D"hl-keyword">return</span> true;
}</pre>
<p>See the <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framewo=
rk/docs/4.3.21.RELEASE/javadoc-api/org/springframework/context/annotation/C=
onditional.html" target=3D"_top">
<code class=3D"literal">@Conditional</code> javadocs</a> for more detail.</=
p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-java-combining" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-java-combin=
ing"></a>Combining Java and XML configuration</h4></div></div></div>
<p>Spring=92s <code class=3D"literal">@Configuration</code> class support d=
oes not aim to be a 100% complete replacement
for Spring XML. Some facilities such as Spring XML namespaces remain an ide=
al way to
configure the container. In cases where XML is convenient or necessary, you=
 have a
choice: either instantiate the container in an "XML-centric" way using, for=
 example,
<code class=3D"literal">ClassPathXmlApplicationContext</code>, or in a "Jav=
a-centric" fashion using
<code class=3D"literal">AnnotationConfigApplicationContext</code> and the <=
code class=3D"literal">@ImportResource</code> annotation to import XML
as needed.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-java-combining-xml-centric" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-java-combining-xml-centric"></a>XML-centric use of @Configuration classes<=
/h5></div></div></div>
<p>It may be preferable to bootstrap the Spring container from XML and incl=
ude
<code class=3D"literal">@Configuration</code> classes in an ad-hoc fashion.=
 For example, in a large existing codebase
that uses Spring XML, it will be easier to create <code class=3D"literal">@=
Configuration</code> classes on an
as-needed basis and include them from the existing XML files. Below you=92l=
l find the
options for using <code class=3D"literal">@Configuration</code> classes in =
this kind of "XML-centric" situation.</p>
<p>Remember that <code class=3D"literal">@Configuration</code> classes are =
ultimately just bean definitions in the
container. In this example, we create a <code class=3D"literal">@Configurat=
ion</code> class named <code class=3D"literal">AppConfig</code> and
include it within <code class=3D"literal">system-test-config.xml</code> as =
a <code class=3D"literal">&lt;bean/&gt;</code> definition. Because
<code class=3D"literal">&lt;context:annotation-config/&gt;</code> is switch=
ed on, the container will recognize the
<code class=3D"literal">@Configuration</code> annotation and process the <c=
ode class=3D"literal">@Bean</code> methods declared in <code class=3D"liter=
al">AppConfig</code>
properly.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> DataSource dataSource;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> AccountRepository accountRepos=
itory() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> JdbcAccountRepository(dataSource);
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> TransferService(accountRepository());
    }
}</pre>
<p><span class=3D"strong"><strong>system-test-config.xml</strong></span>:</=
p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-comment">&lt;!-- enable processing of annotations suc=
h as @Autowired and @Configuration --&gt;</span>
    <span class=3D"hl-tag">&lt;context:annotation-config/&gt;</span>
    <span class=3D"hl-tag">&lt;context:property-placeholder</span> <span cl=
ass=3D"hl-attribute">location</span>=3D<span class=3D"hl-value">"classpath:=
/com/acme/jdbc.properties"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"com.acme.AppConfig"</span><span class=
=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"org.springframework.jdbc.datasource.D=
riverManagerDataSource"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.url}"</span><spa=
n class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"username"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.username}=
"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"password"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.password}=
"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p><span class=3D"strong"><strong>jdbc.properties</strong></span>:</p>
<pre class=3D"literallayout">jdbc.url=3Djdbc:hsqldb:hsql://localhost/xdb
jdbc.username=3Dsa
jdbc.password=3D</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> ClassP=
athXmlApplicationContext(<span class=3D"hl-string">"classpath:/com/acme/sys=
tem-test-config.xml"</span>);
    TransferService transferService =3D ctx.getBean(TransferService.<span c=
lass=3D"hl-keyword">class</span>);
    <span class=3D"hl-comment">// ...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>In <code class=3D"literal">system-test-config.xml</code> above, the <cod=
e class=3D"literal">AppConfig</code> <code class=3D"literal">&lt;bean/&gt;<=
/code> does not declare an <code class=3D"literal">id</code>
element. While it would be acceptable to do so, it is unnecessary given tha=
t no other
bean will ever refer to it, and it is unlikely that it will be explicitly f=
etched from
the container by name. Likewise with the <code class=3D"literal">DataSource=
</code> bean - it is only ever autowired
by type, so an explicit bean <code class=3D"literal">id</code> is not stric=
tly required.</p>
</td></tr></tbody></table></div>
<p>Because <code class=3D"literal">@Configuration</code> is meta-annotated =
with <code class=3D"literal">@Component</code>, <code class=3D"literal">@Co=
nfiguration</code>-annotated
classes are automatically candidates for component scanning. Using the same=
 scenario as
above, we can redefine <code class=3D"literal">system-test-config.xml</code=
> to take advantage of component-scanning.
Note that in this case, we don=92t need to explicitly declare
<code class=3D"literal">&lt;context:annotation-config/&gt;</code>, because =
<code class=3D"literal">&lt;context:component-scan/&gt;</code> enables the =
same
functionality.</p>
<p><span class=3D"strong"><strong>system-test-config.xml</strong></span>:</=
p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-comment">&lt;!-- picks up and registers AppConfig as =
a bean definition --&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"com.acme"</s=
pan><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;context:property-placeholder</span> <span cl=
ass=3D"hl-attribute">location</span>=3D<span class=3D"hl-value">"classpath:=
/com/acme/jdbc.properties"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">cla=
ss</span>=3D<span class=3D"hl-value">"org.springframework.jdbc.datasource.D=
riverManagerDataSource"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.url}"</span><spa=
n class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"username"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.username}=
"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"password"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.password}=
"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-java-combining-java-centric" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-java-combining-java-centric"></a>@Configuration class-centric use of XML =
with @ImportResource</h5></div></div></div>
<p>In applications where <code class=3D"literal">@Configuration</code> clas=
ses are the primary mechanism for configuring
the container, it will still likely be necessary to use at least some XML. =
In these
scenarios, simply use <code class=3D"literal">@ImportResource</code> and de=
fine only as much XML as is needed. Doing
so achieves a "Java-centric" approach to configuring the container and keep=
s XML to a
bare minimum.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ImportResource("cl=
asspath:/com/acme/properties-config.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Value("${jdbc.=
url}")</span></em>
    <span class=3D"hl-keyword">private</span> String url;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Value("${jdbc.=
username}")</span></em>
    <span class=3D"hl-keyword">private</span> String username;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Value("${jdbc.=
password}")</span></em>
    <span class=3D"hl-keyword">private</span> String password;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> DriverManagerDataSource(url, username, password);
    }
}</pre>
<pre class=3D"programlisting">properties-config.xml
<span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:property-placeholder</span> <span cl=
ass=3D"hl-attribute">location</span>=3D<span class=3D"hl-value">"classpath:=
/com/acme/jdbc.properties"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<pre class=3D"literallayout">jdbc.properties
jdbc.url=3Djdbc:hsqldb:hsql://localhost/xdb
jdbc.username=3Dsa
jdbc.password=3D</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Annota=
tionConfigApplicationContext(AppConfig.<span class=3D"hl-keyword">class</sp=
an>);
    TransferService transferService =3D ctx.getBean(TransferService.<span c=
lass=3D"hl-keyword">class</span>);
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-environment" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-environment"></a>7.13&nbsp;Environment abstraction</h2></div></div>=
</div>
<p>The <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/d=
ocs/4.3.21.RELEASE/javadoc-api/org/springframework/core/env/Environment.htm=
l" target=3D"_top"><code class=3D"literal">Environment</code></a>
is an abstraction integrated in the container that models two key
aspects of the application environment: <a class=3D"link" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#beans-definition-profiles" title=3D"7.13.1&nbsp;Bean definition profil=
es"><span class=3D"emphasis"><em>profiles</em></span></a>
and <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-property-source-abstracti=
on" title=3D"7.13.2&nbsp;PropertySource abstraction"><span class=3D"emphasi=
s"><em>properties</em></span></a>.</p>
<p>A <span class=3D"emphasis"><em>profile</em></span> is a named, logical g=
roup of bean definitions to be registered with the
container only if the given profile is active. Beans may be assigned to a p=
rofile
whether defined in XML or via annotations. The role of the <code class=3D"l=
iteral">Environment</code> object with
relation to profiles is in determining which profiles (if any) are currentl=
y active,
and which profiles (if any) should be active by default.</p>
<p>Properties play an important role in almost all applications, and may or=
iginate from
a variety of sources: properties files, JVM system properties, system envir=
onment
variables, JNDI, servlet context parameters, ad-hoc Properties objects, Map=
s, and so
on. The role of the <code class=3D"literal">Environment</code> object with =
relation to properties is to provide the
user with a convenient service interface for configuring property sources a=
nd resolving
properties from them.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-definition-profiles" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-defini=
tion-profiles"></a>7.13.1&nbsp;Bean definition profiles</h3></div></div></d=
iv>
<p>Bean definition profiles is a mechanism in the core container that allow=
s for
registration of different beans in different environments. The word <span c=
lass=3D"emphasis"><em>environment</em></span>
can mean different things to different users and this feature can help with=
 many
use cases, including:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
working against an in-memory datasource in development vs looking up that s=
ame
datasource from JNDI when in QA or production
</li><li class=3D"listitem">
registering monitoring infrastructure only when deploying an application in=
to a
performance environment
</li><li class=3D"listitem">
registering customized implementations of beans for customer A vs. customer
B deployments
</li></ul></div>
<p>Let=92s consider the first use case in a practical application that requ=
ires a
<code class=3D"literal">DataSource</code>. In a test environment, the confi=
guration may look like this:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Bean</span></em>
<span class=3D"hl-keyword">public</span> DataSource dataSource() {
    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">new=
</span> EmbeddedDatabaseBuilder()
        .setType(EmbeddedDatabaseType.HSQL)
        .addScript(<span class=3D"hl-string">"my-schema.sql"</span>)
        .addScript(<span class=3D"hl-string">"my-test-data.sql"</span>)
        .build();
}</pre>
<p>Let=92s now consider how this application will be deployed into a QA or =
production
environment, assuming that the datasource for the application will be regis=
tered
with the production application server=92s JNDI directory. Our <code class=
=3D"literal">dataSource</code> bean
now looks like this:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Bean(destroyMethod=3D"")</span></em>
<span class=3D"hl-keyword">public</span> DataSource dataSource() <span clas=
s=3D"hl-keyword">throws</span> Exception {
    Context ctx =3D <span class=3D"hl-keyword">new</span> InitialContext();
    <span class=3D"hl-keyword">return</span> (DataSource) ctx.lookup(<span =
class=3D"hl-string">"java:comp/env/jdbc/datasource"</span>);
}</pre>
<p>The problem is how to switch between using these two variations based on=
 the
current environment. Over time, Spring users have devised a number of ways =
to
get this done, usually relying on a combination of system environment varia=
bles
and XML <code class=3D"literal">&lt;import/&gt;</code> statements containin=
g <code class=3D"literal">${placeholder}</code> tokens that resolve
to the correct configuration file path depending on the value of an environ=
ment
variable. Bean definition profiles is a core container feature that provide=
s a
solution to this problem.</p>
<p>If we generalize the example use case above of environment-specific bean
definitions, we end up with the need to register certain bean definitions i=
n
certain contexts, while not in others. You could say that you want to regis=
ter a
certain profile of bean definitions in situation A, and a different profile=
 in
situation B. Let=92s first see how we can update our configuration to refle=
ct
this need.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-definition-profiles-java" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-d=
efinition-profiles-java"></a>@Profile</h4></div></div></div>
<p>The <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/d=
ocs/4.3.21.RELEASE/javadoc-api/org/springframework/context/annotation/Profi=
le.html" target=3D"_top"><code class=3D"literal">@Profile</code></a>
annotation allows you to indicate that a component is eligible for registra=
tion
when one or more specified profiles are active. Using our example above, we
can rewrite the <code class=3D"literal">dataSource</code> configuration as =
follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"strong"><strong>@Profile("development")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> StandaloneDataConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.HSQL)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/schema.sql"</span>)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/test-data.sql"</span>)
            .build();
    }
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"strong"><strong>@Profile("production")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> JndiDataConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean(destroyMe=
thod=3D"")</span></em>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() <span =
class=3D"hl-keyword">throws</span> Exception {
        Context ctx =3D <span class=3D"hl-keyword">new</span> InitialContex=
t();
        <span class=3D"hl-keyword">return</span> (DataSource) ctx.lookup(<s=
pan class=3D"hl-string">"java:comp/env/jdbc/datasource"</span>);
    }
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As mentioned before, with <code class=3D"literal">@Bean</code> methods, =
you will typically choose to use programmatic
JNDI lookups: either using Spring=92s <code class=3D"literal">JndiTemplate<=
/code>/<code class=3D"literal">JndiLocatorDelegate</code> helpers or the
straight JNDI <code class=3D"literal">InitialContext</code> usage shown abo=
ve, but not the <code class=3D"literal">JndiObjectFactoryBean</code>
variant which would force you to declare the return type as the <code class=
=3D"literal">FactoryBean</code> type.</p>
</td></tr></tbody></table></div>
<p><code class=3D"literal">@Profile</code> can be used as a <a class=3D"lin=
k" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#beans-meta-annotations" title=3D"7.10.2&nbsp;Meta-=
annotations">meta-annotation</a> for the purpose
of creating a custom <span class=3D"emphasis"><em>composed annotation</em><=
/span>. The following example defines a custom
<code class=3D"literal">@Production</code> annotation that can be used as a=
 drop-in replacement for
<code class=3D"literal">@Profile("production")</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target(ElementType.TYPE)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<span class=3D"strong"><strong>@Profile("production")</strong></span>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Production {
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>If a <code class=3D"literal">@Configuration</code> class is marked with =
<code class=3D"literal">@Profile</code>, all of the <code class=3D"literal"=
>@Bean</code> methods and
<code class=3D"literal">@Import</code> annotations associated with that cla=
ss will be bypassed unless one or more of
the specified profiles are active. If a <code class=3D"literal">@Component<=
/code> or <code class=3D"literal">@Configuration</code> class is marked
with <code class=3D"literal">@Profile({"p1", "p2"})</code>, that class will=
 not be registered/processed unless
profiles 'p1' and/or 'p2' have been activated. If a given profile is prefix=
ed with the
NOT operator (<code class=3D"literal">!</code>), the annotated element will=
 be registered if the profile is <span class=3D"strong"><strong>not</strong=
></span>
active. For example, given <code class=3D"literal">@Profile({"p1", "!p2"})<=
/code>, registration will occur if profile
'p1' is active or if profile 'p2' is not active.</p>
</td></tr></tbody></table></div>
<p><code class=3D"literal">@Profile</code> can also be declared at the meth=
od level to include only one particular bean
of a configuration class, e.g. for alternative variants of a particular bea=
n:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean("dataSour=
ce")</span></em>
    <span class=3D"strong"><strong>@Profile("development")</strong></span>
    <span class=3D"hl-keyword">public</span> DataSource standaloneDataSourc=
e() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.HSQL)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/schema.sql"</span>)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/test-data.sql"</span>)
            .build();
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean("dataSour=
ce")</span></em>
    <span class=3D"strong"><strong>@Profile("production")</strong></span>
    <span class=3D"hl-keyword">public</span> DataSource jndiDataSource() <s=
pan class=3D"hl-keyword">throws</span> Exception {
        Context ctx =3D <span class=3D"hl-keyword">new</span> InitialContex=
t();
        <span class=3D"hl-keyword">return</span> (DataSource) ctx.lookup(<s=
pan class=3D"hl-string">"java:comp/env/jdbc/datasource"</span>);
    }
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>With <code class=3D"literal">@Profile</code> on <code class=3D"literal">=
@Bean</code> methods, a special scenario may apply: In the case of
overloaded <code class=3D"literal">@Bean</code> methods of the same Java me=
thod name (analogous to constructor
overloading), an <code class=3D"literal">@Profile</code> condition needs to=
 be consistently declared on all
overloaded methods. If the conditions are inconsistent, only the condition =
on the
first declaration among the overloaded methods will matter. <code class=3D"=
literal">@Profile</code> can therefore
not be used to select an overloaded method with a particular argument signa=
ture over
another; resolution between all factory methods for the same bean follows S=
pring=92s
constructor resolution algorithm at creation time.</p>
<p>If you would like to define alternative beans with different profile con=
ditions,
use distinct Java method names pointing to the same bean name via the <code=
 class=3D"literal">@Bean</code> name
attribute, as indicated in the example above. If the argument signatures ar=
e all
the same (e.g. all of the variants have no-arg factory methods), this is th=
e only
way to represent such an arrangement in a valid Java class in the first pla=
ce
(since there can only be one method of a particular name and argument signa=
ture).</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-definition-profiles-xml" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-de=
finition-profiles-xml"></a>XML bean definition profiles</h4></div></div></d=
iv>
<p>The XML counterpart is the <code class=3D"literal">profile</code> attrib=
ute of the <code class=3D"literal">&lt;beans&gt;</code> element. Our sample
configuration above can be rewritten in two XML files as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">profile</span>=3D<span class=3D"hl-value">"developm=
ent"</span>
    <span class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"h=
ttp://www.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:jdbc</span>=3D<span class=3D"hl-valu=
e">"http://www.springframework.org/schema/jdbc"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"..."</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;jdbc:embedded-database</span> <span class=3D=
"hl-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span><spa=
n class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;jdbc:script</span> <span class=3D"hl-att=
ribute">location</span>=3D<span class=3D"hl-value">"classpath:com/bank/conf=
ig/sql/schema.sql"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;jdbc:script</span> <span class=3D"hl-att=
ribute">location</span>=3D<span class=3D"hl-value">"classpath:com/bank/conf=
ig/sql/test-data.sql"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/jdbc:embedded-database&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">profile</span>=3D<span class=3D"hl-value">"producti=
on"</span>
    <span class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"h=
ttp://www.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:jee</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/jee"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"..."</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;jee:jndi-lookup</span> <span class=3D"hl-att=
ribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span> <span clas=
s=3D"hl-attribute">jndi-name</span>=3D<span class=3D"hl-value">"java:comp/e=
nv/jdbc/datasource"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>It is also possible to avoid that split and nest <code class=3D"literal"=
>&lt;beans/&gt;</code> elements within the same file:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"http://www=
.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:jdbc</span>=3D<span class=3D"hl-valu=
e">"http://www.springframework.org/schema/jdbc"</span>
    <span class=3D"hl-attribute">xmlns:jee</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/jee"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"..."</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other bean definitions --&gt;</span>

    <span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">pr=
ofile</span>=3D<span class=3D"hl-value">"development"</span><span class=3D"=
hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;jdbc:embedded-database</span> <span clas=
s=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;jdbc:script</span> <span class=3D"hl=
-attribute">location</span>=3D<span class=3D"hl-value">"classpath:com/bank/=
config/sql/schema.sql"</span><span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;jdbc:script</span> <span class=3D"hl=
-attribute">location</span>=3D<span class=3D"hl-value">"classpath:com/bank/=
config/sql/test-data.sql"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/jdbc:embedded-database&gt;</span>
    <span class=3D"hl-tag">&lt;/beans&gt;</span>

    <span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">pr=
ofile</span>=3D<span class=3D"hl-value">"production"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;jee:jndi-lookup</span> <span class=3D"hl=
-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span> <span =
class=3D"hl-attribute">jndi-name</span>=3D<span class=3D"hl-value">"java:co=
mp/env/jdbc/datasource"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/beans&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The <code class=3D"literal">spring-bean.xsd</code> has been constrained =
to allow such elements only as the
last ones in the file. This should help provide flexibility without incurri=
ng
clutter in the XML files.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-definition-profiles-enable" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans=
-definition-profiles-enable"></a>Activating a profile</h4></div></div></div=
>
<p>Now that we have updated our configuration, we still need to instruct Sp=
ring which
profile is active. If we started our sample application right now, we would=
 see
a <code class=3D"literal">NoSuchBeanDefinitionException</code> thrown, beca=
use the container could not find
the Spring bean named <code class=3D"literal">dataSource</code>.</p>
<p>Activating a profile can be done in several ways, but the most straightf=
orward is to do
it programmatically against the <code class=3D"literal">Environment</code> =
API which is available via an
<code class=3D"literal">ApplicationContext</code>:</p>
<pre class=3D"programlisting">AnnotationConfigApplicationContext ctx =3D <s=
pan class=3D"hl-keyword">new</span> AnnotationConfigApplicationContext();
ctx.getEnvironment().setActiveProfiles(<span class=3D"hl-string">"developme=
nt"</span>);
ctx.register(SomeConfig.<span class=3D"hl-keyword">class</span>, Standalone=
DataConfig.<span class=3D"hl-keyword">class</span>, JndiDataConfig.<span cl=
ass=3D"hl-keyword">class</span>);
ctx.refresh();</pre>
<p>In addition, profiles may also be activated declaratively through the
<code class=3D"literal">spring.profiles.active</code> property which may be=
 specified through system environment
variables, JVM system properties, servlet context parameters in <code class=
=3D"literal">web.xml</code>, or even as an
entry in JNDI (see <a class=3D"xref" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-property-s=
ource-abstraction" title=3D"7.13.2&nbsp;PropertySource abstraction">Section=
&nbsp;7.13.2, =93PropertySource abstraction=94</a>). In integration tests, =
active
profiles can be declared via the <code class=3D"literal">@ActiveProfiles</c=
ode> annotation in the <code class=3D"literal">spring-test</code> module
(see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management-env=
-profiles" title=3D"Context configuration with environment profiles">the se=
ction called =93Context configuration with environment profiles=94</a>).</p=
>
<p>Note that profiles are not an "either-or" proposition; it is possible to=
 activate multiple
profiles at once. Programmatically, simply provide multiple profile names t=
o the
<code class=3D"literal">setActiveProfiles()</code> method, which accepts <c=
ode class=3D"literal">String=85&#8203;</code> varargs:</p>
<pre class=3D"programlisting">ctx.getEnvironment().setActiveProfiles(<span =
class=3D"hl-string">"profile1"</span>, <span class=3D"hl-string">"profile2"=
</span>);</pre>
<p>Declaratively, <code class=3D"literal">spring.profiles.active</code> may=
 accept a comma-separated list of profile names:</p>
<pre class=3D"programlisting">-Dspring.profiles.active=3D<span class=3D"hl-=
string">"profile1,profile2"</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-definition-profiles-default" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-definition-profiles-default"></a>Default profile</h4></div></div></div>
<p>The <span class=3D"emphasis"><em>default</em></span> profile represents =
the profile that is enabled by default. Consider the
following:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"strong"><strong>@Profile("default")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultDataConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.HSQL)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/schema.sql"</span>)
            .build();
    }
}</pre>
<p>If no profile is active, the <code class=3D"literal">dataSource</code> a=
bove will be created; this can be
seen as a way to provide a <span class=3D"emphasis"><em>default</em></span>=
 definition for one or more beans. If any
profile is enabled, the <span class=3D"emphasis"><em>default</em></span> pr=
ofile will not apply.</p>
<p>The name of the default profile can be changed using <code class=3D"lite=
ral">setDefaultProfiles()</code> on
the <code class=3D"literal">Environment</code> or declaratively using the <=
code class=3D"literal">spring.profiles.default</code> property.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-property-source-abstraction" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-property-source-abstraction"></a>7.13.2&nbsp;PropertySource abstraction</=
h3></div></div></div>
<p>Spring=92s <code class=3D"literal">Environment</code> abstraction provid=
es search operations over a configurable
hierarchy of property sources. To explain fully, consider the following:</p=
>
<pre class=3D"programlisting">ApplicationContext ctx =3D <span class=3D"hl-=
keyword">new</span> GenericApplicationContext();
Environment env =3D ctx.getEnvironment();
<span class=3D"hl-keyword">boolean</span> containsFoo =3D env.containsPrope=
rty(<span class=3D"hl-string">"foo"</span>);
System.out.println(<span class=3D"hl-string">"Does my environment contain t=
he 'foo' property? "</span> + containsFoo);</pre>
<p>In the snippet above, we see a high-level way of asking Spring whether t=
he <code class=3D"literal">foo</code> property is
defined for the current environment. To answer this question, the <code cla=
ss=3D"literal">Environment</code> object performs
a search over a set of <a class=3D"ulink" href=3D"https://docs.spring.io/sp=
ring-framework/docs/4.3.21.RELEASE/javadoc-api/org/springframework/core/env=
/PropertySource.html" target=3D"_top"><code class=3D"literal">PropertySourc=
e</code></a>
objects. A <code class=3D"literal">PropertySource</code> is a simple abstra=
ction over any source of key-value pairs, and
Spring=92s <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framewo=
rk/docs/4.3.21.RELEASE/javadoc-api/org/springframework/core/env/StandardEnv=
ironment.html" target=3D"_top"><code class=3D"literal">StandardEnvironment<=
/code></a>
is configured with two PropertySource objects&#8201;=97&#8201;one represent=
ing the set of JVM system properties
(<span class=3D"emphasis"><em>a la</em></span> <code class=3D"literal">Syst=
em.getProperties()</code>) and one representing the set of system environme=
nt variables
(<span class=3D"emphasis"><em>a la</em></span> <code class=3D"literal">Syst=
em.getenv()</code>).</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>These default property sources are present for <code class=3D"literal">S=
tandardEnvironment</code>, for use in standalone
applications. <a class=3D"ulink" href=3D"https://docs.spring.io/spring-fram=
ework/docs/4.3.21.RELEASE/javadoc-api/org/springframework/web/context/suppo=
rt/StandardServletEnvironment.html" target=3D"_top"><code class=3D"literal"=
>StandardServletEnvironment</code></a>
is populated with additional default property sources including servlet con=
fig and servlet
context parameters. <a class=3D"ulink" href=3D"https://docs.spring.io/sprin=
g-framework/docs/4.3.21.RELEASE/javadoc-api/org/springframework/web/portlet=
/context/StandardPortletEnvironment.html" target=3D"_top"><code class=3D"li=
teral">StandardPortletEnvironment</code></a>
similarly has access to portlet config and portlet context parameters as pr=
operty sources.
Both can optionally enable a <a class=3D"ulink" href=3D"https://docs.spring=
.io/spring-framework/docs/4.3.21.RELEASE/javadoc-api/org/springframework/jn=
di/JndiPropertySource.html" target=3D"_top"><code class=3D"literal">JndiPro=
pertySource</code></a>.
See the javadocs for details.</p>
</td></tr></tbody></table></div>
<p>Concretely, when using the <code class=3D"literal">StandardEnvironment</=
code>, the call to <code class=3D"literal">env.containsProperty("foo")</cod=
e>
will return true if a <code class=3D"literal">foo</code> system property or=
 <code class=3D"literal">foo</code> environment variable is present at
runtime.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>The search performed is hierarchical. By default, system properties have=
 precedence over
environment variables, so if the <code class=3D"literal">foo</code> propert=
y happens to be set in both places during
a call to <code class=3D"literal">env.getProperty("foo")</code>, the system=
 property value will 'win' and be returned
preferentially over the environment variable. Note that property values wil=
l not get merged
but rather completely overridden by a preceding entry.</p>
<p>For a common <code class=3D"literal">StandardServletEnvironment</code>, =
the full hierarchy looks as follows, with the
highest-precedence entries at the top:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
ServletConfig parameters (if applicable, e.g. in case of a <code class=3D"l=
iteral">DispatcherServlet</code> context)
</li><li class=3D"listitem">
ServletContext parameters (web.xml context-param entries)
</li><li class=3D"listitem">
JNDI environment variables ("java:comp/env/" entries)
</li><li class=3D"listitem">
JVM system properties ("-D" command-line arguments)
</li><li class=3D"listitem">
JVM system environment (operating system environment variables)
</li></ul></div>
</td></tr></tbody></table></div>
<p>Most importantly, the entire mechanism is configurable. Perhaps you have=
 a custom source
of properties that you=92d like to integrate into this search. No problem&#=
8201;=97&#8201;simply implement
and instantiate your own <code class=3D"literal">PropertySource</code> and =
add it to the set of <code class=3D"literal">PropertySources</code> for the
current <code class=3D"literal">Environment</code>:</p>
<pre class=3D"programlisting">ConfigurableApplicationContext ctx =3D <span =
class=3D"hl-keyword">new</span> GenericApplicationContext();
MutablePropertySources sources =3D ctx.getEnvironment().getPropertySources(=
);
sources.addFirst(<span class=3D"hl-keyword">new</span> MyPropertySource());=
</pre>
<p>In the code above, <code class=3D"literal">MyPropertySource</code> has b=
een added with highest precedence in the
search. If it contains a <code class=3D"literal">foo</code> property, it wi=
ll be detected and returned ahead of
any <code class=3D"literal">foo</code> property in any other <code class=3D=
"literal">PropertySource</code>. The
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/core/env/MutablePropertySources=
.html" target=3D"_top"><code class=3D"literal">MutablePropertySources</code=
></a>
API exposes a number of methods that allow for precise manipulation of the =
set of
property sources.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"__propertysource" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__propertysource"></a=
>7.13.3&nbsp;@PropertySource</h3></div></div></div>
<p>The <a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/d=
ocs/4.3.21.RELEASE/javadoc-api/org/springframework/context/annotation/Prope=
rtySource.html" target=3D"_top"><code class=3D"literal">@PropertySource</co=
de></a>
annotation provides a convenient and declarative mechanism for adding a <co=
de class=3D"literal">PropertySource</code>
to Spring=92s <code class=3D"literal">Environment</code>.</p>
<p>Given a file "app.properties" containing the key/value pair <code class=
=3D"literal">testbean.name=3DmyTestBean</code>,
the following <code class=3D"literal">@Configuration</code> class uses <cod=
e class=3D"literal">@PropertySource</code> in such a way that
a call to <code class=3D"literal">testBean.getName()</code> will return "my=
TestBean".</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"strong"><strong>@PropertySource("classpath:/com/myco/app.pro=
perties")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    Environment env;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TestBean testBean() {
        TestBean testBean =3D <span class=3D"hl-keyword">new</span> TestBea=
n();
        testBean.setName(env.getProperty(<span class=3D"hl-string">"testbea=
n.name"</span>));
        <span class=3D"hl-keyword">return</span> testBean;
    }
}</pre>
<p>Any <code class=3D"literal">${=85&#8203;}</code> placeholders present in=
 a <code class=3D"literal">@PropertySource</code> resource location will
be resolved against the set of property sources already registered against =
the
environment. For example:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@PropertySource("cl=
asspath:/com/${my.placeholder:default/path}/app.properties")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    Environment env;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TestBean testBean() {
        TestBean testBean =3D <span class=3D"hl-keyword">new</span> TestBea=
n();
        testBean.setName(env.getProperty(<span class=3D"hl-string">"testbea=
n.name"</span>));
        <span class=3D"hl-keyword">return</span> testBean;
    }
}</pre>
<p>Assuming that "my.placeholder" is present in one of the property sources=
 already
registered, e.g. system properties or environment variables, the placeholde=
r will
be resolved to the corresponding value. If not, then "default/path" will be=
 used
as a default. If no default is specified and a property cannot be resolved,=
 an
<code class=3D"literal">IllegalArgumentException</code> will be thrown.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">@PropertySource</code> annotation is repeata=
ble according to Java 8 conventions.
However, all such <code class=3D"literal">@PropertySource</code> annotation=
s need to be declared at the same
level: either directly on the configuration class or as meta-annotations wi=
thin the
same custom annotation. Mixing of direct annotations and meta-annotations i=
s not
recommended since direct annotations will effectively override meta-annotat=
ions.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"_placeholder_resolution_in_statements" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
_placeholder_resolution_in_statements"></a>7.13.4&nbsp;Placeholder resoluti=
on in statements</h3></div></div></div>
<p>Historically, the value of placeholders in elements could be resolved on=
ly against
JVM system properties or environment variables. No longer is this the case.=
 Because
the Environment abstraction is integrated throughout the container, it=92s =
easy to
route resolution of placeholders through it. This means that you may config=
ure the
resolution process in any way you like: change the precedence of searching =
through
system properties and environment variables, or remove them entirely; add y=
our
own property sources to the mix as appropriate.</p>
<p>Concretely, the following statement works regardless of where the <code =
class=3D"literal">customer</code>
property is defined, as long as it is available in the <code class=3D"liter=
al">Environment</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;import</span> <span class=3D"hl-attribute">r=
esource</span>=3D<span class=3D"hl-value">"com/bank/service/${customer}-con=
fig.xml"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"context-load-time-weaver" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#context-load-time-weaver"></a>7.14&nbsp;Registering a LoadTimeWeav=
er</h2></div></div></div>
<p>The <code class=3D"literal">LoadTimeWeaver</code> is used by Spring to d=
ynamically transform classes as they are
loaded into the Java virtual machine (JVM).</p>
<p>To enable load-time weaving add the <code class=3D"literal">@EnableLoadT=
imeWeaving</code> to one of your
<code class=3D"literal">@Configuration</code> classes:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@EnableLoadTimeWeav=
ing</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {
}</pre>
<p>Alternatively for XML configuration use the <code class=3D"literal">cont=
ext:load-time-weaver</code> element:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;context:load-time-weaver/&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>Once configured for the <code class=3D"literal">ApplicationContext</code=
>. Any bean within that <code class=3D"literal">ApplicationContext</code>
may implement <code class=3D"literal">LoadTimeWeaverAware</code>, thereby r=
eceiving a reference to the load-time
weaver instance. This is particularly useful in combination with <a class=
=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#orm-jpa" title=3D"20.5&nbsp;JPA">Spring=92s=
 JPA
support</a> where load-time weaving may be necessary for JPA class transfor=
mation. Consult
the <code class=3D"literal">LocalContainerEntityManagerFactoryBean</code> j=
avadocs for more detail. For more on
AspectJ load-time weaving, see <a class=3D"xref" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
aj-ltw" title=3D"11.8.4&nbsp;Load-time weaving with AspectJ in the Spring F=
ramework">Section&nbsp;11.8.4, =93Load-time weaving with AspectJ in the Spr=
ing Framework=94</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"context-introduction" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#context-introduction"></a>7.15&nbsp;Additional capabilities of the App=
licationContext</h2></div></div></div>
<p>As was discussed in the chapter introduction, the <code class=3D"literal=
">org.springframework.beans.factory</code>
package provides basic functionality for managing and manipulating beans, i=
ncluding in a
programmatic way. The <code class=3D"literal">org.springframework.context</=
code> package adds the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html=
" target=3D"_top"><code class=3D"literal">ApplicationContext</code></a>
interface, which extends the <code class=3D"literal">BeanFactory</code> int=
erface, in addition to extending other
interfaces to provide additional functionality in a more <span class=3D"emp=
hasis"><em>application
framework-oriented style</em></span>. Many people use the <code class=3D"li=
teral">ApplicationContext</code> in a completely
declarative fashion, not even creating it programmatically, but instead rel=
ying on
support classes such as <code class=3D"literal">ContextLoader</code> to aut=
omatically instantiate an
<code class=3D"literal">ApplicationContext</code> as part of the normal sta=
rtup process of a Java EE web application.</p>
<p>To enhance <code class=3D"literal">BeanFactory</code> functionality in a=
 more framework-oriented style the context
package also provides the following functionality:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>Access to messages in i18n-style</em></span>, =
through the <code class=3D"literal">MessageSource</code> interface.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Access to resources</em></span>, such as URLs =
and files, through the <code class=3D"literal">ResourceLoader</code> interf=
ace.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Event publication</em></span> to namely beans =
implementing the <code class=3D"literal">ApplicationListener</code> interfa=
ce,
through the use of the <code class=3D"literal">ApplicationEventPublisher</c=
ode> interface.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Loading of multiple (hierarchical) contexts</e=
m></span>, allowing each to be focused on one
particular layer, such as the web layer of an application, through the
<code class=3D"literal">HierarchicalBeanFactory</code> interface.
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"context-functionality-messagesource" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#co=
ntext-functionality-messagesource"></a>7.15.1&nbsp;Internationalization usi=
ng MessageSource</h3></div></div></div>
<p>The <code class=3D"literal">ApplicationContext</code> interface extends =
an interface called <code class=3D"literal">MessageSource</code>, and
therefore provides internationalization (i18n) functionality. Spring also p=
rovides the
interface <code class=3D"literal">HierarchicalMessageSource</code>, which c=
an resolve messages hierarchically.
Together these interfaces provide the foundation upon which Spring effects =
message
resolution. The methods defined on these interfaces include:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">String getMessage(String code, Object[] args, Strin=
g default, Locale loc)</code>: The basic
method used to retrieve a message from the <code class=3D"literal">MessageS=
ource</code>. When no message is found
for the specified locale, the default message is used. Any arguments passed=
 in become
replacement values, using the <code class=3D"literal">MessageFormat</code> =
functionality provided by the standard
library.
</li><li class=3D"listitem">
<code class=3D"literal">String getMessage(String code, Object[] args, Local=
e loc)</code>: Essentially the same as
the previous method, but with one difference: no default message can be spe=
cified; if
the message cannot be found, a <code class=3D"literal">NoSuchMessageExcepti=
on</code> is thrown.
</li><li class=3D"listitem">
<code class=3D"literal">String getMessage(MessageSourceResolvable resolvabl=
e, Locale locale)</code>: All properties
used in the preceding methods are also wrapped in a class named
<code class=3D"literal">MessageSourceResolvable</code>, which you can use w=
ith this method.
</li></ul></div>
<p>When an <code class=3D"literal">ApplicationContext</code> is loaded, it =
automatically searches for a <code class=3D"literal">MessageSource</code>
bean defined in the context. The bean must have the name <code class=3D"lit=
eral">messageSource</code>. If such a bean
is found, all calls to the preceding methods are delegated to the message s=
ource. If no
message source is found, the <code class=3D"literal">ApplicationContext</co=
de> attempts to find a parent containing a
bean with the same name. If it does, it uses that bean as the <code class=
=3D"literal">MessageSource</code>. If the
<code class=3D"literal">ApplicationContext</code> cannot find any source fo=
r messages, an empty
<code class=3D"literal">DelegatingMessageSource</code> is instantiated in o=
rder to be able to accept calls to the
methods defined above.</p>
<p>Spring provides two <code class=3D"literal">MessageSource</code> impleme=
ntations, <code class=3D"literal">ResourceBundleMessageSource</code> and
<code class=3D"literal">StaticMessageSource</code>. Both implement <code cl=
ass=3D"literal">HierarchicalMessageSource</code> in order to do nested
messaging. The <code class=3D"literal">StaticMessageSource</code> is rarely=
 used but provides programmatic ways to
add messages to the source. The <code class=3D"literal">ResourceBundleMessa=
geSource</code> is shown in the following
example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"messageSource"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"org.springframework.context.support.ResourceBundleMessageSource"</sp=
an><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"basenames"</span><span class=
=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;list&gt;</span>
                <span class=3D"hl-tag">&lt;value&gt;</span>format<span clas=
s=3D"hl-tag">&lt;/value&gt;</span>
                <span class=3D"hl-tag">&lt;value&gt;</span>exceptions<span =
class=3D"hl-tag">&lt;/value&gt;</span>
                <span class=3D"hl-tag">&lt;value&gt;</span>windows<span cla=
ss=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;/list&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>In the example it is assumed you have three resource bundles defined in =
your classpath
called <code class=3D"literal">format</code>, <code class=3D"literal">excep=
tions</code> and <code class=3D"literal">windows</code>. Any request to res=
olve a message will be
handled in the JDK standard way of resolving messages through ResourceBundl=
es. For the
purposes of the example, assume the contents of two of the above resource b=
undle files
are=85&#8203;</p>
<pre class=3D"programlisting"># in format.properties
message=3DAlligators rock!</pre>
<pre class=3D"programlisting"># in exceptions.properties
argument.required=3DThe {<span class=3D"hl-number">0</span>} argument is re=
quired.</pre>
<p>A program to execute the <code class=3D"literal">MessageSource</code> fu=
nctionality is shown in the next example.
Remember that all <code class=3D"literal">ApplicationContext</code> impleme=
ntations are also <code class=3D"literal">MessageSource</code>
implementations and so can be cast to the <code class=3D"literal">MessageSo=
urce</code> interface.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(String[] args) {
    MessageSource resources =3D <span class=3D"hl-keyword">new</span> Class=
PathXmlApplicationContext(<span class=3D"hl-string">"beans.xml"</span>);
    String message =3D resources.getMessage(<span class=3D"hl-string">"mess=
age"</span>, null, <span class=3D"hl-string">"Default"</span>, null);
    System.out.println(message);
}</pre>
<p>The resulting output from the above program will be=85&#8203;</p>
<pre class=3D"literallayout">Alligators rock!</pre>
<p>So to summarize, the <code class=3D"literal">MessageSource</code> is def=
ined in a file called <code class=3D"literal">beans.xml</code>, which
exists at the root of your classpath. The <code class=3D"literal">messageSo=
urce</code> bean definition refers to a
number of resource bundles through its <code class=3D"literal">basenames</c=
ode> property. The three files that are
passed in the list to the <code class=3D"literal">basenames</code> property=
 exist as files at the root of your
classpath and are called <code class=3D"literal">format.properties</code>, =
<code class=3D"literal">exceptions.properties</code>, and
<code class=3D"literal">windows.properties</code> respectively.</p>
<p>The next example shows arguments passed to the message lookup; these arg=
uments will be
converted into Strings and inserted into placeholders in the lookup message=
.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this MessageSource is being used in =
a web application --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"messageSource"</span> <span class=3D"hl-=
attribute">class</span>=3D<span class=3D"hl-value">"org.springframework.con=
text.support.ResourceBundleMessageSource"</span><span class=3D"hl-tag">&gt;=
</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"basename"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"exceptions"</spa=
n><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- lets inject the above MessageSource =
into this POJO --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"example"</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"com.foo.Example"</span><span =
class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"messages"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"messageSource"</sp=
an><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Example {

    <span class=3D"hl-keyword">private</span> MessageSource messages;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMessages(MessageSource messages) {
        <span class=3D"hl-keyword">this</span>.messages =3D messages;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> execute() {
        String message =3D <span class=3D"hl-keyword">this</span>.messages.=
getMessage(<span class=3D"hl-string">"argument.required"</span>,
            <span class=3D"hl-keyword">new</span> Object [] {<span class=3D=
"hl-string">"userDao"</span>}, <span class=3D"hl-string">"Required"</span>,=
 null);
        System.out.println(message);
    }
}</pre>
<p>The resulting output from the invocation of the <code class=3D"literal">=
execute()</code> method will be=85&#8203;</p>
<pre class=3D"literallayout">The userDao argument is required.</pre>
<p>With regard to internationalization (i18n), Spring=92s various <code cla=
ss=3D"literal">MessageSource</code>
implementations follow the same locale resolution and fallback rules as the=
 standard JDK
<code class=3D"literal">ResourceBundle</code>. In short, and continuing wit=
h the example <code class=3D"literal">messageSource</code> defined
previously, if you want to resolve messages against the British (<code clas=
s=3D"literal">en-GB</code>) locale, you
would create files called <code class=3D"literal">format_en_GB.properties</=
code>, <code class=3D"literal">exceptions_en_GB.properties</code>, and
<code class=3D"literal">windows_en_GB.properties</code> respectively.</p>
<p>Typically, locale resolution is managed by the surrounding environment o=
f the
application. In this example, the locale against which (British) messages w=
ill be
resolved is specified manually.</p>
<pre class=3D"literallayout"># in exceptions_en_GB.properties
argument.required=3DEbagum lad, the {0} argument is required, I say, requir=
ed.</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">void</span>=
 main(<span class=3D"hl-keyword">final</span> String[] args) {
    MessageSource resources =3D <span class=3D"hl-keyword">new</span> Class=
PathXmlApplicationContext(<span class=3D"hl-string">"beans.xml"</span>);
    String message =3D resources.getMessage(<span class=3D"hl-string">"argu=
ment.required"</span>,
        <span class=3D"hl-keyword">new</span> Object [] {<span class=3D"hl-=
string">"userDao"</span>}, <span class=3D"hl-string">"Required"</span>, Loc=
ale.UK);
    System.out.println(message);
}</pre>
<p>The resulting output from the running of the above program will be=85&#8=
203;</p>
<pre class=3D"literallayout">Ebagum lad, the 'userDao' argument is required=
, I say, required.</pre>
<p>You can also use the <code class=3D"literal">MessageSourceAware</code> i=
nterface to acquire a reference to any
<code class=3D"literal">MessageSource</code> that has been defined. Any bea=
n that is defined in an
<code class=3D"literal">ApplicationContext</code> that implements the <code=
 class=3D"literal">MessageSourceAware</code> interface is injected with
the application context=92s <code class=3D"literal">MessageSource</code> wh=
en the bean is created and configured.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><span class=3D"emphasis"><em>As an alternative to <code class=3D"literal=
">ResourceBundleMessageSource</code>, Spring provides a
<code class=3D"literal">ReloadableResourceBundleMessageSource</code> class.=
 This variant supports the same bundle
file format but is more flexible than the standard JDK based
<code class=3D"literal">ResourceBundleMessageSource</code> implementation.<=
/em></span> In particular, it allows for reading
files from any Spring resource location (not just from the classpath) and s=
upports hot
reloading of bundle property files (while efficiently caching them in betwe=
en). Check
out the <code class=3D"literal">ReloadableResourceBundleMessageSource</code=
> javadocs for details.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"context-functionality-events" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#context-f=
unctionality-events"></a>7.15.2&nbsp;Standard and custom events</h3></div><=
/div></div>
<p>Event handling in the <code class=3D"literal">ApplicationContext</code> =
is provided through the <code class=3D"literal">ApplicationEvent</code>
class and <code class=3D"literal">ApplicationListener</code> interface. If =
a bean that implements the
<code class=3D"literal">ApplicationListener</code> interface is deployed in=
to the context, every time an
<code class=3D"literal">ApplicationEvent</code> gets published to the <code=
 class=3D"literal">ApplicationContext</code>, that bean is notified.
Essentially, this is the standard <span class=3D"emphasis"><em>Observer</em=
></span> design pattern.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>As of Spring 4.2, the event infrastructure has been significantly improv=
ed and offer
an <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#context-functionality-events-ann=
otation" title=3D"Annotation-based event listeners">annotation-based model<=
/a> as well as the
ability to publish any arbitrary event, that is an object that does not nec=
essarily
extend from <code class=3D"literal">ApplicationEvent</code>. When such an o=
bject is published we wrap it in an
event for you.</p>
</td></tr></tbody></table></div>
<p>Spring provides the following standard events:</p>
<div class=3D"table"><a name=3D"beans-ctx-events-tbl" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-ctx-events-tbl"></a><p class=3D"title"><b>Table&nbsp;7.7.&nbsp;Built=
-in Events</b></p><div class=3D"table-contents">
<table summary=3D"Built-in Events" style=3D"border-collapse: collapse;borde=
r-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid =
; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=
=3D"col_2"></colgroup><thead><tr><th style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Event</th><th s=
tyle=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Explan=
ation</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; =
border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">ContextRefreshedEvent</code></p></td><td style=3D"border-botto=
m: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Published when the <cod=
e class=3D"literal">ApplicationContext</code> is initialized or refreshed, =
for example,
using the <code class=3D"literal">refresh()</code> method on the <code clas=
s=3D"literal">ConfigurableApplicationContext</code> interface.
"Initialized" here means that all beans are loaded, post-processor beans ar=
e detected
and activated, singletons are pre-instantiated, and the <code class=3D"lite=
ral">ApplicationContext</code> object is
ready for use. As long as the context has not been closed, a refresh can be=
 triggered
multiple times, provided that the chosen <code class=3D"literal">Applicatio=
nContext</code> actually supports such
"hot" refreshes. For example, <code class=3D"literal">XmlWebApplicationCont=
ext</code> supports hot refreshes, but
<code class=3D"literal">GenericApplicationContext</code> does not.</p></td>=
</tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt soli=
d ; " align=3D"left" valign=3D"top"><p><code class=3D"literal">ContextStart=
edEvent</code></p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D=
"left" valign=3D"top"><p>Published when the <code class=3D"literal">Applica=
tionContext</code> is started, using the <code class=3D"literal">start()</c=
ode> method on the
<code class=3D"literal">ConfigurableApplicationContext</code> interface. "S=
tarted" here means that all <code class=3D"literal">Lifecycle</code>
beans receive an explicit start signal. Typically this signal is used to re=
start beans
after an explicit stop, but it may also be used to start components that ha=
ve not been
configured for autostart , for example, components that have not already st=
arted on
initialization.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">ContextStoppedEvent</code></p></td><td style=3D"border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Published when the <code =
class=3D"literal">ApplicationContext</code> is stopped, using the <code cla=
ss=3D"literal">stop()</code> method on the
<code class=3D"literal">ConfigurableApplicationContext</code> interface. "S=
topped" here means that all <code class=3D"literal">Lifecycle</code>
beans receive an explicit stop signal. A stopped context may be restarted t=
hrough a
<code class=3D"literal">start()</code> call.</p></td></tr><tr><td style=3D"=
border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" v=
align=3D"top"><p><code class=3D"literal">ContextClosedEvent</code></p></td>=
<td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><=
p>Published when the <code class=3D"literal">ApplicationContext</code> is c=
losed, using the <code class=3D"literal">close()</code> method on the
<code class=3D"literal">ConfigurableApplicationContext</code> interface. "C=
losed" here means that all singleton
beans are destroyed. A closed context reaches its end of life; it cannot be=
 refreshed
or restarted.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; " a=
lign=3D"left" valign=3D"top"><p><code class=3D"literal">RequestHandledEvent=
</code></p></td><td style=3D"" align=3D"left" valign=3D"top"><p>A web-speci=
fic event telling all beans that an HTTP request has been serviced. This
event is published <span class=3D"emphasis"><em>after</em></span> the reque=
st is complete. This event is only applicable to
web applications using Spring=92s <code class=3D"literal">DispatcherServlet=
</code>.</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>You can also create and publish your own custom events. This example dem=
onstrates a
simple class that extends Spring=92s <code class=3D"literal">ApplicationEve=
nt</code> base class:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> BlackListEvent <span class=3D"hl-keywor=
d">extends</span> ApplicationEvent {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> String address;
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> String content;

    <span class=3D"hl-keyword">public</span> BlackListEvent(Object source, =
String address, String content) {
        <span class=3D"hl-keyword">super</span>(source);
        <span class=3D"hl-keyword">this</span>.address =3D address;
        <span class=3D"hl-keyword">this</span>.content =3D content;
    }

    <span class=3D"hl-comment">// accessor and other methods...</span>
}</pre>
<p>To publish a custom <code class=3D"literal">ApplicationEvent</code>, cal=
l the <code class=3D"literal">publishEvent()</code> method on an
<code class=3D"literal">ApplicationEventPublisher</code>. Typically this is=
 done by creating a class that implements
<code class=3D"literal">ApplicationEventPublisherAware</code> and registeri=
ng it as a Spring bean. The following
example demonstrates such a class:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> EmailService <span class=3D"hl-keyword"=
>implements</span> ApplicationEventPublisherAware {

    <span class=3D"hl-keyword">private</span> List&lt;String&gt; blackList;
    <span class=3D"hl-keyword">private</span> ApplicationEventPublisher pub=
lisher;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setBlackList(List&lt;String&gt; blackList) {
        <span class=3D"hl-keyword">this</span>.blackList =3D blackList;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setApplicationEventPublisher(ApplicationEventPublisher publisher) =
{
        <span class=3D"hl-keyword">this</span>.publisher =3D publisher;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> sendEmail(String address, String content) {
        <span class=3D"hl-keyword">if</span> (blackList.contains(address)) =
{
            publisher.publishEvent(<span class=3D"hl-keyword">new</span> Bl=
ackListEvent(<span class=3D"hl-keyword">this</span>, address, content));
            <span class=3D"hl-keyword">return</span>;
        }
        <span class=3D"hl-comment">// send email...</span>
    }
}</pre>
<p>At configuration time, the Spring container will detect that <code class=
=3D"literal">EmailService</code> implements
<code class=3D"literal">ApplicationEventPublisherAware</code> and will auto=
matically call
<code class=3D"literal">setApplicationEventPublisher()</code>. In reality, =
the parameter passed in will be the Spring
container itself; you=92re simply interacting with the application context =
via its
<code class=3D"literal">ApplicationEventPublisher</code> interface.</p>
<p>To receive the custom <code class=3D"literal">ApplicationEvent</code>, c=
reate a class that implements
<code class=3D"literal">ApplicationListener</code> and register it as a Spr=
ing bean. The following example
demonstrates such a class:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> BlackListNotifier <span class=3D"hl-key=
word">implements</span> ApplicationListener&lt;BlackListEvent&gt; {

    <span class=3D"hl-keyword">private</span> String notificationAddress;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setNotificationAddress(String notificationAddress) {
        <span class=3D"hl-keyword">this</span>.notificationAddress =3D noti=
ficationAddress;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> onApplicationEvent(BlackListEvent event) {
        <span class=3D"hl-comment">// notify appropriate parties via notifi=
cationAddress...</span>
    }
}</pre>
<p>Notice that <code class=3D"literal">ApplicationListener</code> is generi=
cally parameterized with the type of your
custom event, <code class=3D"literal">BlackListEvent</code>. This means tha=
t the <code class=3D"literal">onApplicationEvent()</code> method can
remain type-safe, avoiding any need for downcasting. You may register as ma=
ny event
listeners as you wish, but note that by default event listeners receive eve=
nts
synchronously. This means the <code class=3D"literal">publishEvent()</code>=
 method blocks until all listeners have
finished processing the event. One advantage of this synchronous and single=
-threaded
approach is that when a listener receives an event, it operates inside the =
transaction
context of the publisher if a transaction context is available. If another =
strategy for
event publication becomes necessary, refer to the javadoc for Spring=92s
<code class=3D"literal">ApplicationEventMulticaster</code> interface.</p>
<p>The following example shows the bean definitions used to register and co=
nfigure each of
the classes above:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"emailService"<=
/span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value"=
>"example.EmailService"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"blackList"</span><span class=3D"hl=
-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span><a href=3D"https://d=
ocs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfema=
il=3D"a4cfcacbd3ca8ad7d4c5c9c9c1d6e4c1dcc5c9d4c8c18acbd6c3">[email&nbsp;pro=
tected]</a><span class=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span><a href=3D"https://d=
ocs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfema=
il=3D"bed5d0d1c9d090d6dfddd5dbccfedbc6dfd3ced2db90d1ccd9">[email&nbsp;prote=
cted]</a><span class=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span><a href=3D"https://d=
ocs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfema=
il=3D"a6ccc9cec888c2c9c3e6c3dec7cbd6cac388c9d4c1">[email&nbsp;protected]</a=
><span class=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"blackListNotifier"</span> <span class=3D"hl-=
attribute">class</span>=3D<span class=3D"hl-value">"example.BlackListNotifi=
er"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"notificationAddress"</span> <span =
class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"<a href=3D"=
https://docs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" d=
ata-cfemail=3D"95f7f9f4f6fef9fce6e1d5f0edf4f8e5f9f0bbfae7f2">[email&nbsp;pr=
otected]</a>"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Putting it all together, when the <code class=3D"literal">sendEmail()</c=
ode> method of the <code class=3D"literal">emailService</code> bean is
called, if there are any emails that should be blacklisted, a custom event =
of type
<code class=3D"literal">BlackListEvent</code> is published. The <code class=
=3D"literal">blackListNotifier</code> bean is registered as an
<code class=3D"literal">ApplicationListener</code> and thus receives the <c=
ode class=3D"literal">BlackListEvent</code>, at which point it can
notify appropriate parties.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Spring=92s eventing mechanism is designed for simple communication betwe=
en Spring beans
within the same application context. However, for more sophisticated enterp=
rise
integration needs, the separately-maintained
<a class=3D"ulink" href=3D"https://projects.spring.io/spring-integration/" =
target=3D"_top">Spring Integration</a> project provides
complete support for building lightweight,
<a class=3D"ulink" href=3D"http://www.enterpriseintegrationpatterns.com/" t=
arget=3D"_top">pattern-oriented</a>, event-driven
architectures that build upon the well-known Spring programming model.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"context-functionality-events-annotation" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#context-functionality-events-annotation"></a>Annotation-based event liste=
ners</h4></div></div></div>
<p>As of Spring 4.2, an event listener can be registered on any public meth=
od of a managed
bean via the <code class=3D"literal">EventListener</code> annotation. The <=
code class=3D"literal">BlackListNotifier</code> can be rewritten as
follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> BlackListNotifier {

    <span class=3D"hl-keyword">private</span> String notificationAddress;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setNotificationAddress(String notificationAddress) {
        <span class=3D"hl-keyword">this</span>.notificationAddress =3D noti=
ficationAddress;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@EventListener<=
/span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> processBlackListEvent(BlackListEvent event) {
        <span class=3D"hl-comment">// notify appropriate parties via notifi=
cationAddress...</span>
    }
}</pre>
<p>As you can see above, the method signature once again declares the event=
 type it listens to,
but this time with a flexible name and without implementing a specific list=
ener interface.
The event type can also be narrowed through generics as long as the actual =
event type
resolves your generic parameter in its implementation hierarchy.</p>
<p>If your method should listen to several events or if you want to define =
it with no
parameter at all, the event type(s) can also be specified on the annotation=
 itself:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@EventListener({ContextStartedEvent.class, ContextRefreshedEvent=
.class})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> handleContextStart() {
    ...
}</pre>
<p>It is also possible to add additional runtime filtering via the <code cl=
ass=3D"literal">condition</code> attribute of the
annotation that defines a <a class=3D"link" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressio=
ns" title=3D"10.&nbsp;Spring Expression Language (SpEL)"><code class=3D"lit=
eral">SpEL</code> expression</a> that should match to actually
invoke the method for a particular event.</p>
<p>For instance, our notifier can be rewritten to be only invoked if the <c=
ode class=3D"literal">content</code> attribute
of the event is equal to <code class=3D"literal">foo</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@EventListener(condition =3D "#blEvent.content =3D=3D 'foo'")</s=
pan></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> processBlackListEvent(BlackListEvent blEvent) {
    <span class=3D"hl-comment">// notify appropriate parties via notificati=
onAddress...</span>
}</pre>
<p>Each <code class=3D"literal">SpEL</code> expression evaluates against a =
dedicated context. The next table lists the
items made available to the context so one can use them for conditional eve=
nt processing:</p>
<div class=3D"table"><a name=3D"context-functionality-events-annotation-tbl=
" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewor=
k-reference/htmlsingle/#context-functionality-events-annotation-tbl"></a><p=
 class=3D"title"><b>Table&nbsp;7.8.&nbsp;Event SpEL available metadata</b><=
/p><div class=3D"table-contents">
<table summary=3D"Event SpEL available metadata" style=3D"border-collapse: =
collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left=
: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1=
"><col class=3D"col_2"><col class=3D"col_3"><col class=3D"col_4"></colgroup=
><thead><tr><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt s=
olid ; " align=3D"left" valign=3D"top">Name</th><th style=3D"border-right: =
0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">=
Location</th><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt =
solid ; " align=3D"left" valign=3D"top">Description</th><th style=3D"border=
-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Example</th></tr></t=
head><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5=
pt solid ; " align=3D"left" valign=3D"top"><p>Event</p></td><td style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top"><p>root object</p></td><td style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>The actual=
 <code class=3D"literal">ApplicationEvent</code></p></td><td style=3D"borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"l=
iteral">#root.event</code></p></td></tr><tr><td style=3D"border-right: 0.5p=
t solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>A=
rguments array</p></td><td style=3D"border-right: 0.5pt solid ; border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>root object</p></td><t=
d style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>The arguments (as array) used for invoking the =
target</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" v=
align=3D"top"><p><code class=3D"literal">#root.args[0]</code></p></td></tr>=
<tr><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top=
"><p><span class=3D"emphasis"><em>Argument name</em></span></p></td><td sty=
le=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>evalua=
tion context</p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p>Name of any of the method arguments. If for some reas=
on the names are not available
(e.g. no debug information), the argument names are also available under th=
e <code class=3D"literal">#a&lt;#arg&gt;</code>
where <span class=3D"emphasis"><em>#arg</em></span> stands for the argument=
 index (starting from 0).</p></td><td style=3D"" align=3D"left" valign=3D"t=
op"><p><code class=3D"literal">#blEvent</code> or <code class=3D"literal">#=
a0</code> (one can also use <code class=3D"literal">#p0</code> or <code cla=
ss=3D"literal">#p&lt;#arg&gt;</code> notation as an alias).</p></td></tr></=
tbody></table>
</div></div><br class=3D"table-break">
<p>Note that <code class=3D"literal">#root.event</code> allows you to acces=
s to the underlying event, even if your method
signature actually refers to an arbitrary object that was published.</p>
<p>If you need to publish an event as the result of processing another, jus=
t change the
method signature to return the event that should be published, something li=
ke:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@EventListener</span></em>
<span class=3D"hl-keyword">public</span> ListUpdateEvent handleBlackListEve=
nt(BlackListEvent event) {
    <span class=3D"hl-comment">// notify appropriate parties via notificati=
onAddress and</span>
    <span class=3D"hl-comment">// then publish a ListUpdateEvent...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This feature is not supported for <a class=3D"link" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#context-functionality-events-async" title=3D"Asynchronous Listeners">asyn=
chronous
listeners</a>.</p>
</td></tr></tbody></table></div>
<p>This new method will publish a new <code class=3D"literal">ListUpdateEve=
nt</code> for every <code class=3D"literal">BlackListEvent</code> handled
by the method above. If you need to publish several events, just return a <=
code class=3D"literal">Collection</code> of
events instead.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"context-functionality-events-async" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#con=
text-functionality-events-async"></a>Asynchronous Listeners</h4></div></div=
></div>
<p>If you want a particular listener to process events asynchronously, simp=
ly reuse the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#scheduling-annotation-support-async=
" title=3D"34.4.3&nbsp;The @Async annotation">regular <code class=3D"litera=
l">@Async</code> support</a>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@EventListener</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Async</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> processBlackListEvent(BlackListEvent event) {
    <span class=3D"hl-comment">// BlackListEvent is processed in a separate=
 thread</span>
}</pre>
<p>Be aware of the following limitations when using asynchronous events:</p=
>
<div class=3D"orderedlist"><ol class=3D"orderedlist" type=3D"1"><li class=
=3D"listitem">
If the event listener throws an <code class=3D"literal">Exception</code> it=
 will not be propagated to the caller,
check <code class=3D"literal">AsyncUncaughtExceptionHandler</code> for more=
 details.
</li><li class=3D"listitem">
Such event listener cannot send replies. If you need to send another event =
as the
result of the processing, inject <code class=3D"literal">ApplicationEventPu=
blisher</code> to send the event
manually.
</li></ol></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"context-functionality-events-order" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#con=
text-functionality-events-order"></a>Ordering listeners</h4></div></div></d=
iv>
<p>If you need the listener to be invoked before another one, just add the =
<code class=3D"literal">@Order</code>
annotation to the method declaration:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@EventListener</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Order(42)</span></=
em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> processBlackListEvent(BlackListEvent event) {
    <span class=3D"hl-comment">// notify appropriate parties via notificati=
onAddress...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"context-functionality-events-generics" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
context-functionality-events-generics"></a>Generic events</h4></div></div><=
/div>
<p>You may also use generics to further define the structure of your event.=
 Consider an
<code class=3D"literal">EntityCreatedEvent&lt;T&gt;</code> where <code clas=
s=3D"literal">T</code> is the type of the actual entity that got created. Y=
ou
can create the following listener definition to only receive <code class=3D=
"literal">EntityCreatedEvent</code> for a
<code class=3D"literal">Person</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@EventListener</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> onPersonCreated(EntityCreatedEvent&lt;Person&gt; event) {
    ...
}</pre>
<p>Due to type erasure, this will only work if the event that is fired reso=
lves the generic
parameter(s) on which the event listener filters on (that is something like
<code class=3D"literal">class PersonCreatedEvent extends EntityCreatedEvent=
&lt;Person&gt; { =85&#8203; }</code>).</p>
<p>In certain circumstances, this may become quite tedious if all events fo=
llow the same
structure (as it should be the case for the event above). In such a case, y=
ou can
implement <code class=3D"literal">ResolvableTypeProvider</code> to <span cl=
ass=3D"emphasis"><em>guide</em></span> the framework beyond what the runtim=
e
environment provides:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> EntityCreatedEvent&lt;T&gt; <span class=
=3D"hl-keyword">extends</span> ApplicationEvent <span class=3D"hl-keyword">=
implements</span> ResolvableTypeProvider {

    <span class=3D"hl-keyword">public</span> EntityCreatedEvent(T entity) {
        <span class=3D"hl-keyword">super</span>(entity);
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Override</span=
></em>
    <span class=3D"hl-keyword">public</span> ResolvableType getResolvableTy=
pe() {
        <span class=3D"hl-keyword">return</span> ResolvableType.forClassWit=
hGenerics(getClass(),
                ResolvableType.forInstance(getSource()));
    }
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>This works not only for <code class=3D"literal">ApplicationEvent</code> =
but any arbitrary object that you=92d send as
an event.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"context-functionality-resources" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#contex=
t-functionality-resources"></a>7.15.3&nbsp;Convenient access to low-level r=
esources</h3></div></div></div>
<p>For optimal usage and understanding of application contexts, users shoul=
d generally
familiarize themselves with Spring=92s <code class=3D"literal">Resource</co=
de> abstraction, as described in the chapter
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#resources" title=3D"8.&nbsp;Resourc=
es">Chapter&nbsp;8, <i>Resources</i></a>.</p>
<p>An application context is a <code class=3D"literal">ResourceLoader</code=
>, which can be used to load <code class=3D"literal">Resource</code>s. A
<code class=3D"literal">Resource</code> is essentially a more feature rich =
version of the JDK class <code class=3D"literal">java.net.URL</code>,
in fact, the implementations of the <code class=3D"literal">Resource</code>=
 wrap an instance of <code class=3D"literal">java.net.URL</code> where
appropriate. A <code class=3D"literal">Resource</code> can obtain low-level=
 resources from almost any location in a
transparent fashion, including from the classpath, a filesystem location, a=
nywhere
describable with a standard URL, and some other variations. If the resource=
 location
string is a simple path without any special prefixes, where those resources=
 come from is
specific and appropriate to the actual application context type.</p>
<p>You can configure a bean deployed into the application context to implem=
ent the special
callback interface, <code class=3D"literal">ResourceLoaderAware</code>, to =
be automatically called back at
initialization time with the application context itself passed in as the
<code class=3D"literal">ResourceLoader</code>. You can also expose properti=
es of type <code class=3D"literal">Resource</code>, to be used to
access static resources; they will be injected into it like any other prope=
rties. You
can specify those <code class=3D"literal">Resource</code> properties as sim=
ple String paths, and rely on a special
JavaBean <code class=3D"literal">PropertyEditor</code> that is automaticall=
y registered by the context, to convert
those text strings to actual <code class=3D"literal">Resource</code> object=
s when the bean is deployed.</p>
<p>The location path or paths supplied to an <code class=3D"literal">Applic=
ationContext</code> constructor are actually
resource strings, and in simple form are treated appropriately to the speci=
fic context
implementation. <code class=3D"literal">ClassPathXmlApplicationContext</cod=
e> treats a simple location path as a
classpath location. You can also use location paths (resource strings) with=
 special
prefixes to force loading of definitions from the classpath or a URL, regar=
dless of the
actual context type.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"context-create" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#context-create"></a>7.1=
5.4&nbsp;Convenient ApplicationContext instantiation for web applications</=
h3></div></div></div>
<p>You can create <code class=3D"literal">ApplicationContext</code> instanc=
es declaratively by using, for example, a
<code class=3D"literal">ContextLoader</code>. Of course you can also create=
 <code class=3D"literal">ApplicationContext</code> instances
programmatically by using one of the <code class=3D"literal">ApplicationCon=
text</code> implementations.</p>
<p>You can register an <code class=3D"literal">ApplicationContext</code> us=
ing the <code class=3D"literal">ContextLoaderListener</code> as follows:</p=
>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;context-param&gt;<=
/span>
    <span class=3D"hl-tag">&lt;param-name&gt;</span>contextConfigLocation<s=
pan class=3D"hl-tag">&lt;/param-name&gt;</span>
    <span class=3D"hl-tag">&lt;param-value&gt;</span>/WEB-INF/daoContext.xm=
l /WEB-INF/applicationContext.xml<span class=3D"hl-tag">&lt;/param-value&gt=
;</span>
<span class=3D"hl-tag">&lt;/context-param&gt;</span>

<span class=3D"hl-tag">&lt;listener&gt;</span>
    <span class=3D"hl-tag">&lt;listener-class&gt;</span>org.springframework=
.web.context.ContextLoaderListener<span class=3D"hl-tag">&lt;/listener-clas=
s&gt;</span>
<span class=3D"hl-tag">&lt;/listener&gt;</span></pre>
<p>The listener inspects the <code class=3D"literal">contextConfigLocation<=
/code> parameter. If the parameter does not
exist, the listener uses <code class=3D"literal">/WEB-INF/applicationContex=
t.xml</code> as a default. When the
parameter <span class=3D"emphasis"><em>does</em></span> exist, the listener=
 separates the String by using predefined
delimiters (comma, semicolon and whitespace) and uses the values as locatio=
ns where
application contexts will be searched. Ant-style path patterns are supporte=
d as well.
Examples are <code class=3D"literal">/WEB-INF/*Context.xml</code> for all f=
iles with names ending with "Context.xml",
residing in the "WEB-INF" directory, and <code class=3D"literal">/WEB-INF/*=
*/*Context.xml</code>, for all such files
in any subdirectory of "WEB-INF".</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"context-deploy-rar" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#context-deploy-rar"=
></a>7.15.5&nbsp;Deploying a Spring ApplicationContext as a Java EE RAR fil=
e</h3></div></div></div>
<p>It is possible to deploy a Spring ApplicationContext as a RAR file, enca=
psulating the
context and all of its required bean classes and library JARs in a Java EE =
RAR deployment
unit. This is the equivalent of bootstrapping a standalone ApplicationConte=
xt, just hosted
in Java EE environment, being able to access the Java EE servers facilities=
. RAR deployment
is more natural alternative to scenario of deploying a headless WAR file, i=
n effect, a WAR
file without any HTTP entry points that is used only for bootstrapping a Sp=
ring
ApplicationContext in a Java EE environment.</p>
<p>RAR deployment is ideal for application contexts that do not need HTTP e=
ntry points but
rather consist only of message endpoints and scheduled jobs. Beans in such =
a context can
use application server resources such as the JTA transaction manager and JN=
DI-bound JDBC
DataSources and JMS ConnectionFactory instances, and may also register with=
 the
platform=92s JMX server - all through Spring=92s standard transaction manag=
ement and JNDI
and JMX support facilities. Application components can also interact with t=
he
application server=92s JCA WorkManager through Spring=92s <code class=3D"li=
teral">TaskExecutor</code> abstraction.</p>
<p>Check out the javadoc of the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/jca/context/SpringContextResour=
ceAdapter.html" target=3D"_top"><code class=3D"literal">SpringContextResour=
ceAdapter</code></a>
class for the configuration details involved in RAR deployment.</p>
<p><span class=3D"emphasis"><em>For a simple deployment of a Spring Applica=
tionContext as a Java EE RAR file:</em></span> package
all application classes into a RAR file, which is a standard JAR file with =
a different
file extension. Add all required library JARs into the root of the RAR arch=
ive. Add a
"META-INF/ra.xml" deployment descriptor (as shown in <code class=3D"literal=
">SpringContextResourceAdapter</code>s
javadoc) and the corresponding Spring XML bean definition file(s) (typicall=
y
"META-INF/applicationContext.xml"), and drop the resulting RAR file into yo=
ur
application server=92s deployment directory.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Such RAR deployment units are usually self-contained; they do not expose=
 components to
the outside world, not even to other modules of the same application. Inter=
action with a
RAR-based ApplicationContext usually occurs through JMS destinations that i=
t shares with
other modules. A RAR-based ApplicationContext may also, for example, schedu=
le some jobs,
reacting to new files in the file system (or the like). If it needs to allo=
w synchronous
access from the outside, it could for example export RMI endpoints, which o=
f course may
be used by other application modules on the same machine.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-beanfactory" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#beans-beanfactory"></a>7.16&nbsp;The BeanFactory</h2></div></div></div>
<p>The <code class=3D"literal">BeanFactory</code> API provides the underlyi=
ng basis for Spring=92s IoC functionality.
Its specific contracts are mostly used in integration with other parts of S=
pring and
related third-party frameworks, and its <code class=3D"literal">DefaultList=
ableBeanFactory</code> implementation
is a key delegate within the higher-level <code class=3D"literal">GenericAp=
plicationContext</code> container.</p>
<p><code class=3D"literal">BeanFactory</code> and related interfaces such a=
s <code class=3D"literal">BeanFactoryAware</code>, <code class=3D"literal">=
InitializingBean</code>,
<code class=3D"literal">DisposableBean</code> are important integration poi=
nts for other framework components:
not requiring any annotations or even reflection, they allow for very effic=
ient
interaction between the container and its components. Application-level bea=
ns may
use the same callback interfaces but will typically prefer declarative depe=
ndency
injection instead, either via annotations or through programmatic configura=
tion.</p>
<p>Note that the core <code class=3D"literal">BeanFactory</code> API level =
and its <code class=3D"literal">DefaultListableBeanFactory</code>
implementation do not make assumptions about the configuration format or an=
y
component annotations to be used. All of these flavors come in through exte=
nsions
such as <code class=3D"literal">XmlBeanDefinitionReader</code> and <code cl=
ass=3D"literal">AutowiredAnnotationBeanPostProcessor</code>,
operating on shared <code class=3D"literal">BeanDefinition</code> objects a=
s a core metadata representation.
This is the essence of what makes Spring=92s container so flexible and exte=
nsible.</p>
<p>The following section explains the differences between the <code class=
=3D"literal">BeanFactory</code> and
<code class=3D"literal">ApplicationContext</code> container levels and the =
implications on bootstrapping.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"context-introduction-ctx-vs-beanfactory" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#context-introduction-ctx-vs-beanfactory"></a>7.16.1&nbsp;BeanFactory or A=
pplicationContext?</h3></div></div></div>
<p>Use an <code class=3D"literal">ApplicationContext</code> unless you have=
 a good reason for not doing so, with
<code class=3D"literal">GenericApplicationContext</code> and its subclass <=
code class=3D"literal">AnnotationConfigApplicationContext</code>
as the common implementations for custom bootstrapping. These are the prima=
ry entry
points to Spring=92s core container for all common purposes: loading of con=
figuration
files, triggering a classpath scan, programmatically registering bean defin=
itions
and annotated classes.</p>
<p>Because an <code class=3D"literal">ApplicationContext</code> includes al=
l functionality of a <code class=3D"literal">BeanFactory</code>, it is
generally recommended over a plain <code class=3D"literal">BeanFactory</cod=
e>, except for a scenarios where full
control over bean processing is needed. Within an <code class=3D"literal">A=
pplicationContext</code> such as the
<code class=3D"literal">GenericApplicationContext</code> implementation, se=
veral kinds of beans will be detected
by convention (i.e. by bean name or by bean type), in particular post-proce=
ssors,
whereas a plain <code class=3D"literal">DefaultListableBeanFactory</code> i=
s agnostic about any special beans.</p>
<p>For many extended container features such as annotation processing and A=
OP proxying,
the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-factory-extension-bpp" ti=
tle=3D"7.8.1&nbsp;Customizing beans using a BeanPostProcessor"><code class=
=3D"literal">BeanPostProcessor</code> extension point</a> is essential.
If you use only a plain <code class=3D"literal">DefaultListableBeanFactory<=
/code>, such post-processors will not
get detected and activated by default. This situation could be confusing be=
cause
nothing is actually wrong with your bean configuration; it is rather the co=
ntainer
which needs to be fully bootstrapped through additional setup in such a sce=
nario.</p>
<p>The following table lists features provided by the <code class=3D"litera=
l">BeanFactory</code> and
<code class=3D"literal">ApplicationContext</code> interfaces and implementa=
tions.</p>
<div class=3D"table"><a name=3D"context-introduction-ctx-vs-beanfactory-fea=
ture-matrix" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#context-introduction-ctx-vs-beanfactory-=
feature-matrix"></a><p class=3D"title"><b>Table&nbsp;7.9.&nbsp;Feature Matr=
ix</b></p><div class=3D"table-contents">
<table summary=3D"Feature Matrix" style=3D"border-collapse: collapse;border=
-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ;=
 border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=3D=
"col_2"><col class=3D"col_3"></colgroup><thead><tr><th style=3D"border-righ=
t: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"to=
p">Feature</th><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><code class=3D"literal">BeanFacto=
ry</code></th><th style=3D"border-bottom: 0.5pt solid ; " align=3D"left" va=
lign=3D"top"><code class=3D"literal">ApplicationContext</code></th></tr></t=
head><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5=
pt solid ; " align=3D"left" valign=3D"top"><p>Bean instantiation/wiring</p>=
</td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; =
" align=3D"left" valign=3D"top"><p>Yes</p></td><td style=3D"border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>Yes</p></td></tr><tr><td s=
tyle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D=
"left" valign=3D"top"><p>Integrated lifecycle management</p></td><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p>No</p></td><td style=3D"border-bottom: 0.5pt solid ; "=
 align=3D"left" valign=3D"top"><p>Yes</p></td></tr><tr><td style=3D"border-=
right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top"><p>Automatic <code class=3D"literal">BeanPostProcessor</code> regi=
stration</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top"><p>No</p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Yes</p></td></t=
r><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ;=
 " align=3D"left" valign=3D"top"><p>Automatic <code class=3D"literal">BeanF=
actoryPostProcessor</code> registration</p></td><td style=3D"border-right: =
0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">=
<p>No</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" va=
lign=3D"top"><p>Yes</p></td></tr><tr><td style=3D"border-right: 0.5pt solid=
 ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Convenie=
nt <code class=3D"literal">MessageSource</code> access (for internalization=
)</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt sol=
id ; " align=3D"left" valign=3D"top"><p>No</p></td><td style=3D"border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Yes</p></td></tr><tr><=
td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
Built-in <code class=3D"literal">ApplicationEvent</code> publication mechan=
ism</p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valig=
n=3D"top"><p>No</p></td><td style=3D"" align=3D"left" valign=3D"top"><p>Yes=
</p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>To explicitly register a bean post-processor with a <code class=3D"liter=
al">DefaultListableBeanFactory</code>,
you need to programmatically call <code class=3D"literal">addBeanPostProces=
sor</code>:</p>
<pre class=3D"programlisting">DefaultListableBeanFactory factory =3D <span =
class=3D"hl-keyword">new</span> DefaultListableBeanFactory();
<span class=3D"hl-comment">// populate the factory with bean definitions</s=
pan>

<span class=3D"hl-comment">// now register any needed BeanPostProcessor ins=
tances</span>
factory.addBeanPostProcessor(<span class=3D"hl-keyword">new</span> Autowire=
dAnnotationBeanPostProcessor());
factory.addBeanPostProcessor(<span class=3D"hl-keyword">new</span> MyBeanPo=
stProcessor());

<span class=3D"hl-comment">// now start using the factory</span></pre>
<p>To apply a <code class=3D"literal">BeanFactoryPostProcessor</code> to a =
plain <code class=3D"literal">DefaultListableBeanFactory</code>,
you need to call its <code class=3D"literal">postProcessBeanFactory</code> =
method:</p>
<pre class=3D"programlisting">DefaultListableBeanFactory factory =3D <span =
class=3D"hl-keyword">new</span> DefaultListableBeanFactory();
XmlBeanDefinitionReader reader =3D <span class=3D"hl-keyword">new</span> Xm=
lBeanDefinitionReader(factory);
reader.loadBeanDefinitions(<span class=3D"hl-keyword">new</span> FileSystem=
Resource(<span class=3D"hl-string">"beans.xml"</span>));

<span class=3D"hl-comment">// bring in some property values from a Properti=
es file</span>
PropertyPlaceholderConfigurer cfg =3D <span class=3D"hl-keyword">new</span>=
 PropertyPlaceholderConfigurer();
cfg.setLocation(<span class=3D"hl-keyword">new</span> FileSystemResource(<s=
pan class=3D"hl-string">"jdbc.properties"</span>));

<span class=3D"hl-comment">// now actually do the replacement</span>
cfg.postProcessBeanFactory(factory);</pre>
<p>In both cases, the explicit registration steps are inconvenient, which i=
s
why the various <code class=3D"literal">ApplicationContext</code> variants =
are preferred over a plain
<code class=3D"literal">DefaultListableBeanFactory</code> in Spring-backed =
applications, especially when
relying on <code class=3D"literal">BeanFactoryPostProcessor</code>s and <co=
de class=3D"literal">BeanPostProcessor</code>s for extended
container functionality in a typical enterprise setup.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>An <code class=3D"literal">AnnotationConfigApplicationContext</code> has=
 all common annotation post-processors
registered out of the box and may bring in additional processors underneath=
 the
covers through configuration annotations such as <code class=3D"literal">@E=
nableTransactionManagement</code>.
At the abstraction level of Spring=92s annotation-based configuration model=
,
the notion of bean post-processors becomes a mere internal container detail=
.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-servicelocator" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-serviceloca=
tor"></a>7.16.2&nbsp;Glue code and the evil singleton</h3></div></div></div=
>
<p>It is best to write most application code in a dependency-injection (DI)=
 style, where
that code is served out of a Spring IoC container, has its own dependencies=
 supplied by
the container when it is created, and is completely unaware of the containe=
r. However,
for the small glue layers of code that are sometimes needed to tie other co=
de together,
you sometimes need a singleton (or quasi-singleton) style access to a Sprin=
g IoC
container. For example, third-party code may try to construct new objects d=
irectly (
<code class=3D"literal">Class.forName()</code> style), without the ability =
to get these objects out of a Spring IoC
container.If the object constructed by the third-party code is a small stub=
 or proxy,
which then uses a singleton style access to a Spring IoC container to get a=
 real object
to delegate to, then inversion of control has still been achieved for the m=
ajority of
the code (the object coming out of the container). Thus most code is still =
unaware of
the container or how it is accessed, and remains decoupled from other code,=
 with all
ensuing benefits. EJBs may also use this stub/proxy approach to delegate to=
 a plain Java
implementation object, retrieved from a Spring IoC container. While the Spr=
ing IoC
container itself ideally does not have to be a singleton, it may be unreali=
stic in terms
of memory usage or initialization times (when using beans in the Spring IoC=
 container
such as a Hibernate <code class=3D"literal">SessionFactory</code>) for each=
 bean to use its own, non-singleton Spring
IoC container.</p>
<p>Looking up the application context in a service locator style is sometim=
es the only
option for accessing shared Spring-managed components, such as in an EJB 2.=
1
environment, or when you want to share a single ApplicationContext as a par=
ent to
WebApplicationContexts across WAR files. In this case you should look into =
using the
utility class
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/context/access/ContextSingleton=
BeanFactoryLocator.html" target=3D"_top"><code class=3D"literal">ContextSin=
gletonBeanFactoryLocator</code></a>
locator that is described in this
<a class=3D"ulink" href=3D"https://spring.io/blog/2007/06/11/using-a-shared=
-parent-application-context-in-a-multi-war-spring-application/" target=3D"_=
top">Spring
team blog entry</a>.</p>
</div>
</div>
<div class=3D"footnotes"><br><hr style=3D"width:100; text-align:left;margin=
-left: 0"><div id=3D"ftn.d5e1829" class=3D"footnote"><p><a href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#d5e1829" class=3D"simpara"><sup class=3D"simpara">[1] </sup></a>See <=
a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#background-ioc" title=3D"Background"=
>Background</a></p></div><div id=3D"ftn.d5e2674" class=3D"footnote"><p><a h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#d5e2674" class=3D"simpara"><sup class=3D"simpara">[2] =
</sup></a>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-collabo=
rators" title=3D"7.4.1&nbsp;Dependency Injection">Section&nbsp;7.4.1, =93De=
pendency Injection=94</a></p></div></div></div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"resources" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#resources"></a>8.&nbsp;Resou=
rces</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-introduction" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#resources-introduction"></a>8.1&nbsp;Introduction</h2></div></div></=
div>
<p>Java=92s standard <code class=3D"literal">java.net.URL</code> class and =
standard handlers for various URL prefixes
unfortunately are not quite adequate enough for all access to low-level res=
ources. For
example, there is no standardized <code class=3D"literal">URL</code> implem=
entation that may be used to access a
resource that needs to be obtained from the classpath, or relative to a
<code class=3D"literal">ServletContext</code>. While it is possible to regi=
ster new handlers for specialized <code class=3D"literal">URL</code>
prefixes (similar to existing handlers for prefixes such as <code class=3D"=
literal">http:</code>), this is generally
quite complicated, and the <code class=3D"literal">URL</code> interface sti=
ll lacks some desirable functionality,
such as a method to check for the existence of the resource being pointed t=
o.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-resource" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#resources-resource"></a>8.2&nbsp;The Resource interface</h2></div></div>=
</div>
<p>Spring=92s <code class=3D"literal">Resource</code> interface is meant to=
 be a more capable interface for abstracting
access to low-level resources.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Resource <span class=3D"hl-keyword"=
>extends</span> InputStreamSource {

    <span class=3D"hl-keyword">boolean</span> exists();

    <span class=3D"hl-keyword">boolean</span> isOpen();

    URL getURL() <span class=3D"hl-keyword">throws</span> IOException;

    File getFile() <span class=3D"hl-keyword">throws</span> IOException;

    Resource createRelative(String relativePath) <span class=3D"hl-keyword"=
>throws</span> IOException;

    String getFilename();

    String getDescription();

}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> InputStreamSource {

    InputStream getInputStream() <span class=3D"hl-keyword">throws</span> I=
OException;

}</pre>
<p>Some of the most important methods from the <code class=3D"literal">Reso=
urce</code> interface are:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">getInputStream()</code>: locates and opens the reso=
urce, returning an <code class=3D"literal">InputStream</code> for
reading from the resource. It is expected that each invocation returns a fr=
esh
<code class=3D"literal">InputStream</code>. It is the responsibility of the=
 caller to close the stream.
</li><li class=3D"listitem">
<code class=3D"literal">exists()</code>: returns a <code class=3D"literal">=
boolean</code> indicating whether this resource actually exists in
physical form.
</li><li class=3D"listitem">
<code class=3D"literal">isOpen()</code>: returns a <code class=3D"literal">=
boolean</code> indicating whether this resource represents a handle
with an open stream. If <code class=3D"literal">true</code>, the <code clas=
s=3D"literal">InputStream</code> cannot be read multiple times, and
must be read once only and then closed to avoid resource leaks. Will be <co=
de class=3D"literal">false</code> for
all usual resource implementations, with the exception of <code class=3D"li=
teral">InputStreamResource</code>.
</li><li class=3D"listitem">
<code class=3D"literal">getDescription()</code>: returns a description for =
this resource, to be used for error
output when working with the resource. This is often the fully qualified fi=
le name or
the actual URL of the resource.
</li></ul></div>
<p>Other methods allow you to obtain an actual <code class=3D"literal">URL<=
/code> or <code class=3D"literal">File</code> object representing the
resource (if the underlying implementation is compatible, and supports that
functionality).</p>
<p>The <code class=3D"literal">Resource</code> abstraction is used extensiv=
ely in Spring itself, as an argument type in
many method signatures when a resource is needed. Other methods in some Spr=
ing APIs
(such as the constructors to various <code class=3D"literal">ApplicationCon=
text</code> implementations), take a
<code class=3D"literal">String</code> which in unadorned or simple form is =
used to create a <code class=3D"literal">Resource</code> appropriate to
that context implementation, or via special prefixes on the <code class=3D"=
literal">String</code> path, allow the
caller to specify that a specific <code class=3D"literal">Resource</code> i=
mplementation must be created and used.</p>
<p>While the <code class=3D"literal">Resource</code> interface is used a lo=
t with Spring and by Spring, it=92s actually
very useful to use as a general utility class by itself in your own code, f=
or access to
resources, even when your code doesn=92t know or care about any other parts=
 of Spring.
While this couples your code to Spring, it really only couples it to this s=
mall set of
utility classes, which are serving as a more capable replacement for <code =
class=3D"literal">URL</code>, and can be
considered equivalent to any other library you would use for this purpose.<=
/p>
<p>It is important to note that the <code class=3D"literal">Resource</code>=
 abstraction does not replace functionality:
it wraps it where possible. For example, a <code class=3D"literal">UrlResou=
rce</code> wraps a URL, and uses the
wrapped <code class=3D"literal">URL</code> to do its work.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-implementations" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#resources-implementations"></a>8.3&nbsp;Built-in Resource impleme=
ntations</h2></div></div></div>
<p>There are a number of <code class=3D"literal">Resource</code> implementa=
tions that come supplied straight out of the
box in Spring:</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-implementations-urlresource" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
resources-implementations-urlresource"></a>8.3.1&nbsp;UrlResource</h3></div=
></div></div>
<p>The <code class=3D"literal">UrlResource</code> wraps a <code class=3D"li=
teral">java.net.URL</code>, and may be used to access any object that is
normally accessible via a URL, such as files, an HTTP target, an FTP target=
, etc. All
URLs have a standardized <code class=3D"literal">String</code> representati=
on, such that appropriate standardized
prefixes are used to indicate one URL type from another. This includes <cod=
e class=3D"literal">file:</code> for
accessing filesystem paths, <code class=3D"literal">http:</code> for access=
ing resources via the HTTP protocol,
<code class=3D"literal">ftp:</code> for accessing resources via FTP, etc.</=
p>
<p>A <code class=3D"literal">UrlResource</code> is created by Java code exp=
licitly using the <code class=3D"literal">UrlResource</code> constructor,
but will often be created implicitly when you call an API method which take=
s a <code class=3D"literal">String</code>
argument which is meant to represent a path. For the latter case, a JavaBea=
ns
<code class=3D"literal">PropertyEditor</code> will ultimately decide which =
type of <code class=3D"literal">Resource</code> to create. If the path
string contains a few well-known (to it, that is) prefixes such as <code cl=
ass=3D"literal">classpath:</code>, it will
create an appropriate specialized <code class=3D"literal">Resource</code> f=
or that prefix. However, if it doesn=92t
recognize the prefix, it will assume the this is just a standard URL string=
, and will
create a <code class=3D"literal">UrlResource</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-implementations-classpathresource" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#resources-implementations-classpathresource"></a>8.3.2&nbsp;ClassPath=
Resource</h3></div></div></div>
<p>This class represents a resource which should be obtained from the class=
path. This uses
either the thread context class loader, a given class loader, or a given cl=
ass for
loading resources.</p>
<p>This <code class=3D"literal">Resource</code> implementation supports res=
olution as <code class=3D"literal">java.io.File</code> if the class path
resource resides in the file system, but not for classpath resources which =
reside in a
jar and have not been expanded (by the servlet engine, or whatever the envi=
ronment is)
to the filesystem. To address this the various <code class=3D"literal">Reso=
urce</code> implementations always support
resolution as a <code class=3D"literal">java.net.URL</code>.</p>
<p>A <code class=3D"literal">ClassPathResource</code> is created by Java co=
de explicitly using the <code class=3D"literal">ClassPathResource</code>
constructor, but will often be created implicitly when you call an API meth=
od which
takes a <code class=3D"literal">String</code> argument which is meant to re=
present a path. For the latter case, a
JavaBeans <code class=3D"literal">PropertyEditor</code> will recognize the =
special prefix <code class=3D"literal">classpath:</code> on the string
path, and create a <code class=3D"literal">ClassPathResource</code> in that=
 case.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-implementations-filesystemresource" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#resources-implementations-filesystemresource"></a>8.3.3&nbsp;FileSys=
temResource</h3></div></div></div>
<p>This is a <code class=3D"literal">Resource</code> implementation for <co=
de class=3D"literal">java.io.File</code> handles. It obviously supports
resolution as a <code class=3D"literal">File</code>, and as a <code class=
=3D"literal">URL</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-implementations-servletcontextresource" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#resources-implementations-servletcontextresource"></a>8.3.4&nbsp=
;ServletContextResource</h3></div></div></div>
<p>This is a <code class=3D"literal">Resource</code> implementation for <co=
de class=3D"literal">ServletContext</code> resources, interpreting
relative paths within the relevant web application=92s root directory.</p>
<p>This always supports stream access and URL access, but only allows <code=
 class=3D"literal">java.io.File</code> access
when the web application archive is expanded and the resource is physically=
 on the
filesystem. Whether or not it=92s expanded and on the filesystem like this,=
 or accessed
directly from the JAR or somewhere else like a DB (it=92s conceivable) is a=
ctually
dependent on the Servlet container.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-implementations-inputstreamresource" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#resources-implementations-inputstreamresource"></a>8.3.5&nbsp;Input=
StreamResource</h3></div></div></div>
<p>A <code class=3D"literal">Resource</code> implementation for a given <co=
de class=3D"literal">InputStream</code>. This should only be used if no
specific <code class=3D"literal">Resource</code> implementation is applicab=
le. In particular, prefer
<code class=3D"literal">ByteArrayResource</code> or any of the file-based <=
code class=3D"literal">Resource</code> implementations where possible.</p>
<p>In contrast to other <code class=3D"literal">Resource</code> implementat=
ions, this is a descriptor for an <span class=3D"emphasis"><em>already</em>=
</span>
opened resource - therefore returning <code class=3D"literal">true</code> f=
rom <code class=3D"literal">isOpen()</code>. Do not use it if you need
to keep the resource descriptor somewhere, or if you need to read a stream =
multiple
times.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-implementations-bytearrayresource" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#resources-implementations-bytearrayresource"></a>8.3.6&nbsp;ByteArray=
Resource</h3></div></div></div>
<p>This is a <code class=3D"literal">Resource</code> implementation for a g=
iven byte array. It creates a
<code class=3D"literal">ByteArrayInputStream</code> for the given byte arra=
y.</p>
<p>It=92s useful for loading content from any given byte array, without hav=
ing to resort to a
single-use <code class=3D"literal">InputStreamResource</code>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-resourceloader" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#resources-resourceloader"></a>8.4&nbsp;The ResourceLoader</h2></di=
v></div></div>
<p>The <code class=3D"literal">ResourceLoader</code> interface is meant to =
be implemented by objects that can return
(i.e. load) <code class=3D"literal">Resource</code> instances.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> ResourceLoader {

    Resource getResource(String location);

}</pre>
<p>All application contexts implement the <code class=3D"literal">ResourceL=
oader</code> interface, and therefore all
application contexts may be used to obtain <code class=3D"literal">Resource=
</code> instances.</p>
<p>When you call <code class=3D"literal">getResource()</code> on a specific=
 application context, and the location path
specified doesn=92t have a specific prefix, you will get back a <code class=
=3D"literal">Resource</code> type that is
appropriate to that particular application context. For example, assume the=
 following
snippet of code was executed against a <code class=3D"literal">ClassPathXml=
ApplicationContext</code> instance:</p>
<pre class=3D"programlisting">Resource template =3D ctx.getResource(<span c=
lass=3D"hl-string">"some/resource/path/myTemplate.txt"</span>);</pre>
<p>What would be returned would be a <code class=3D"literal">ClassPathResou=
rce</code>; if the same method was executed
against a <code class=3D"literal">FileSystemXmlApplicationContext</code> in=
stance, you=92d get back a
<code class=3D"literal">FileSystemResource</code>. For a <code class=3D"lit=
eral">WebApplicationContext</code>, you=92d get back a
<code class=3D"literal">ServletContextResource</code>, and so on.</p>
<p>As such, you can load resources in a fashion appropriate to the particul=
ar application
context.</p>
<p>On the other hand, you may also force <code class=3D"literal">ClassPathR=
esource</code> to be used, regardless of the
application context type, by specifying the special <code class=3D"literal"=
>classpath:</code> prefix:</p>
<pre class=3D"programlisting">Resource template =3D ctx.getResource(<span c=
lass=3D"hl-string">"classpath:some/resource/path/myTemplate.txt"</span>);</=
pre>
<p>Similarly, one can force a <code class=3D"literal">UrlResource</code> to=
 be used by specifying any of the standard
<code class=3D"literal">java.net.URL</code> prefixes:</p>
<pre class=3D"programlisting">Resource template =3D ctx.getResource(<span c=
lass=3D"hl-string">"file:///some/resource/path/myTemplate.txt"</span>);</pr=
e>
<pre class=3D"programlisting">Resource template =3D ctx.getResource(<span c=
lass=3D"hl-string">"http://myhost.com/resource/path/myTemplate.txt"</span>)=
;</pre>
<p>The following table summarizes the strategy for converting <code class=
=3D"literal">String</code>s to <code class=3D"literal">Resource</code>s:</p=
>
<div class=3D"table"><a name=3D"resources-resource-strings" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#resources-resource-strings"></a><p class=3D"title"><b>Table&nbsp;8.1=
.&nbsp;Resource strings</b></p><div class=3D"table-contents">
<table summary=3D"Resource strings" style=3D"border-collapse: collapse;bord=
er-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid=
 ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col class=
=3D"col_2"><col class=3D"col_3"></colgroup><thead><tr><th style=3D"border-r=
ight: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top">Prefix</th><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top">Example</th><th style=3D"border=
-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Explanation</th></tr=
></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>classpath:</p></td><td st=
yle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"=
left" valign=3D"top"><p><code class=3D"literal">classpath:com/myapp/config.=
xml</code></p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p>Loaded from the classpath.</p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p>file:</p></td><td style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code clas=
s=3D"literal"><a class=3D"ulink" href=3D"file:///data/config.xml" target=3D=
"_top">file:///data/config.xml</a></code></p></td><td style=3D"border-botto=
m: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Loaded as a <code class=
=3D"literal">URL</code>, from the filesystem. <a href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ftn.=
d5e6190" class=3D"footnote" name=3D"d5e6190"><sup class=3D"footnote">[1]</s=
up></a></p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bo=
ttom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>http:</p></td><td st=
yle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"=
left" valign=3D"top"><p><code class=3D"literal"><a class=3D"ulink" href=3D"=
http://myserver/logo.png" target=3D"_top">http://myserver/logo.png</a></cod=
e></p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valig=
n=3D"top"><p>Loaded as a <code class=3D"literal">URL</code>.</p></td></tr><=
tr><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p>(none)</p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"left=
" valign=3D"top"><p><code class=3D"literal">/data/config.xml</code></p></td=
><td style=3D"" align=3D"left" valign=3D"top"><p>Depends on the underlying =
<code class=3D"literal">ApplicationContext</code>.</p></td></tr></tbody><tb=
ody class=3D"footnotes"><tr><td colspan=3D"3"><div id=3D"ftn.d5e6190" class=
=3D"footnote"><p><a href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#d5e6190" class=3D"simpara"><sup c=
lass=3D"simpara">[1] </sup></a>But see also <a class=3D"xref" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#resources-filesystemresource-caveats" title=3D"8.7.3&nbsp;FileSyst=
emResource caveats">Section&nbsp;8.7.3, =93FileSystemResource caveats=94</a=
>.</p></div></td></tr></tbody></table>
</div></div><br class=3D"table-break">
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-resourceloaderaware" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#resources-resourceloaderaware"></a>8.5&nbsp;The ResourceLoade=
rAware interface</h2></div></div></div>
<p>The <code class=3D"literal">ResourceLoaderAware</code> interface is a sp=
ecial marker interface, identifying objects
that expect to be provided with a <code class=3D"literal">ResourceLoader</c=
ode> reference.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> ResourceLoaderAware {

    <span class=3D"hl-keyword">void</span> setResourceLoader(ResourceLoader=
 resourceLoader);
}</pre>
<p>When a class implements <code class=3D"literal">ResourceLoaderAware</cod=
e> and is deployed into an application
context (as a Spring-managed bean), it is recognized as <code class=3D"lite=
ral">ResourceLoaderAware</code> by the
application context. The application context will then invoke the
<code class=3D"literal">setResourceLoader(ResourceLoader)</code>, supplying=
 itself as the argument (remember, all
application contexts in Spring implement the <code class=3D"literal">Resour=
ceLoader</code> interface).</p>
<p>Of course, since an <code class=3D"literal">ApplicationContext</code> is=
 a <code class=3D"literal">ResourceLoader</code>, the bean could also
implement the <code class=3D"literal">ApplicationContextAware</code> interf=
ace and use the supplied application
context directly to load resources, but in general, it=92s better to use th=
e specialized
<code class=3D"literal">ResourceLoader</code> interface if that=92s all tha=
t=92s needed. The code would just be coupled
to the resource loading interface, which can be considered a utility interf=
ace, and not
the whole Spring <code class=3D"literal">ApplicationContext</code> interfac=
e.</p>
<p>As of Spring 2.5, you can rely upon autowiring of the <code class=3D"lit=
eral">ResourceLoader</code> as an alternative
to implementing the <code class=3D"literal">ResourceLoaderAware</code> inte=
rface. The "traditional" <code class=3D"literal">constructor</code> and
<code class=3D"literal">byType</code> autowiring modes (as described in <a =
class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sp=
ring-framework-reference/htmlsingle/#beans-factory-autowire" title=3D"7.4.5=
&nbsp;Autowiring collaborators">Section&nbsp;7.4.5, =93Autowiring collabora=
tors=94</a>) are now capable
of providing a dependency of type <code class=3D"literal">ResourceLoader</c=
ode> for either a constructor argument or
setter method parameter respectively. For more flexibility (including the a=
bility to
autowire fields and multiple parameter methods), consider using the new ann=
otation-based
autowiring features. In that case, the <code class=3D"literal">ResourceLoad=
er</code> will be autowired into a field,
constructor argument, or method parameter that is expecting the <code class=
=3D"literal">ResourceLoader</code> type as
long as the field, constructor, or method in question carries the <code cla=
ss=3D"literal">@Autowired</code>
annotation. For more information, see <a class=3D"xref" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#beans-autowired-annotation" title=3D"7.9.2&nbsp;@Autowired">Section&nbsp=
;7.9.2, =93@Autowired=94</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-as-dependencies" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#resources-as-dependencies"></a>8.6&nbsp;Resources as dependencies=
</h2></div></div></div>
<p>If the bean itself is going to determine and supply the resource path th=
rough some sort
of dynamic process, it probably makes sense for the bean to use the <code c=
lass=3D"literal">ResourceLoader</code>
interface to load resources. Consider as an example the loading of a templa=
te of some
sort, where the specific resource that is needed depends on the role of the=
 user. If the
resources are static, it makes sense to eliminate the use of the <code clas=
s=3D"literal">ResourceLoader</code>
interface completely, and just have the bean expose the <code class=3D"lite=
ral">Resource</code> properties it needs,
and expect that they will be injected into it.</p>
<p>What makes it trivial to then inject these properties, is that all appli=
cation contexts
register and use a special JavaBeans <code class=3D"literal">PropertyEditor=
</code> which can convert <code class=3D"literal">String</code> paths
to <code class=3D"literal">Resource</code> objects. So if <code class=3D"li=
teral">myBean</code> has a template property of type <code class=3D"literal=
">Resource</code>, it can
be configured with a simple string for that resource, as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myBean"</span>=
 <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"..."=
</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"template"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"some/resource/path/myT=
emplate.txt"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Note that the resource path has no prefix, so because the application co=
ntext itself is
going to be used as the <code class=3D"literal">ResourceLoader</code>, the =
resource itself will be loaded via a
<code class=3D"literal">ClassPathResource</code>, <code class=3D"literal">F=
ileSystemResource</code>, or <code class=3D"literal">ServletContextResource=
</code> (as appropriate)
depending on the exact type of the context.</p>
<p>If there is a need to force a specific <code class=3D"literal">Resource<=
/code> type to be used, then a prefix may be
used. The following two examples show how to force a <code class=3D"literal=
">ClassPathResource</code> and a
<code class=3D"literal">UrlResource</code> (the latter being used to access=
 a filesystem file).</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;property</span> <s=
pan class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"template=
"</span> <span class=3D"hl-attribute">value</span>=3D<span class=3D"hl-valu=
e">"classpath:some/resource/path/myTemplate.txt"</span><span class=3D"hl-ta=
g">&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;property</span> <s=
pan class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"template=
"</span> <span class=3D"hl-attribute">value</span>=3D<span class=3D"hl-valu=
e">"file:///some/resource/path/myTemplate.txt"</span><span class=3D"hl-tag"=
>/&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"resources-app-ctx" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#resources-app-ctx"></a>8.7&nbsp;Application contexts and Resource paths</=
h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-app-ctx-construction" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resourc=
es-app-ctx-construction"></a>8.7.1&nbsp;Constructing application contexts</=
h3></div></div></div>
<p>An application context constructor (for a specific application context t=
ype) generally
takes a string or array of strings as the location path(s) of the resource(=
s) such as
XML files that make up the definition of the context.</p>
<p>When such a location path doesn=92t have a prefix, the specific <code cl=
ass=3D"literal">Resource</code> type built from
that path and used to load the bean definitions, depends on and is appropri=
ate to the
specific application context. For example, if you create a
<code class=3D"literal">ClassPathXmlApplicationContext</code> as follows:</=
p>
<pre class=3D"programlisting">ApplicationContext ctx =3D <span class=3D"hl-=
keyword">new</span> ClassPathXmlApplicationContext(<span class=3D"hl-string=
">"conf/appContext.xml"</span>);</pre>
<p>The bean definitions will be loaded from the classpath, as a <code class=
=3D"literal">ClassPathResource</code> will be
used. But if you create a <code class=3D"literal">FileSystemXmlApplicationC=
ontext</code> as follows:</p>
<pre class=3D"programlisting">ApplicationContext ctx =3D
    <span class=3D"hl-keyword">new</span> FileSystemXmlApplicationContext(<=
span class=3D"hl-string">"conf/appContext.xml"</span>);</pre>
<p>The bean definition will be loaded from a filesystem location, in this c=
ase relative to
the current working directory.</p>
<p>Note that the use of the special classpath prefix or a standard URL pref=
ix on the
location path will override the default type of <code class=3D"literal">Res=
ource</code> created to load the
definition. So this <code class=3D"literal">FileSystemXmlApplicationContext=
</code>=85&#8203;</p>
<pre class=3D"programlisting">ApplicationContext ctx =3D
    <span class=3D"hl-keyword">new</span> FileSystemXmlApplicationContext(<=
span class=3D"hl-string">"classpath:conf/appContext.xml"</span>);</pre>
<div class=3D"orderedlist"><ol class=3D"orderedlist" type=3D"i"><li class=
=3D"listitem">
will actually load its bean definitions from the classpath. However, it is =
still a
<code class=3D"literal">FileSystemXmlApplicationContext</code>. If it is su=
bsequently used as a <code class=3D"literal">ResourceLoader</code>, any
unprefixed paths will still be treated as filesystem paths.
</li></ol></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"resources-app-ctx-classpathxml" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resourc=
es-app-ctx-classpathxml"></a>Constructing ClassPathXmlApplicationContext in=
stances - shortcuts</h4></div></div></div>
<p>The <code class=3D"literal">ClassPathXmlApplicationContext</code> expose=
s a number of constructors to enable
convenient instantiation. The basic idea is that one supplies merely a stri=
ng array
containing just the filenames of the XML files themselves (without the lead=
ing path
information), and one <span class=3D"emphasis"><em>also</em></span> supplie=
s a <code class=3D"literal">Class</code>; the <code class=3D"literal">Class=
PathXmlApplicationContext</code>
will derive the path information from the supplied class.</p>
<p>An example will hopefully make this clear. Consider a directory layout t=
hat looks like
this:</p>
<pre class=3D"literallayout">com/
  foo/
    services.xml
    daos.xml
    MessengerService.class</pre>
<p>A <code class=3D"literal">ClassPathXmlApplicationContext</code> instance=
 composed of the beans defined in the
<code class=3D"literal">'services.xml'</code> and <code class=3D"literal">'=
daos.xml'</code> could be instantiated like so=85&#8203;</p>
<pre class=3D"programlisting">ApplicationContext ctx =3D <span class=3D"hl-=
keyword">new</span> ClassPathXmlApplicationContext(
    <span class=3D"hl-keyword">new</span> String[] {<span class=3D"hl-strin=
g">"services.xml"</span>, <span class=3D"hl-string">"daos.xml"</span>}, Mes=
sengerService.<span class=3D"hl-keyword">class</span>);</pre>
<p>Please do consult the <code class=3D"literal">ClassPathXmlApplicationCon=
text</code> javadocs for details
on the various constructors.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-app-ctx-wildcards-in-resource-paths" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#resources-app-ctx-wildcards-in-resource-paths"></a>8.7.2&nbsp;Wildc=
ards in application context constructor resource paths</h3></div></div></di=
v>
<p>The resource paths in application context constructor values may be a si=
mple path (as
shown above) which has a one-to-one mapping to a target Resource, or altern=
ately may
contain the special "classpath*:" prefix and/or internal Ant-style regular =
expressions
(matched using Spring=92s <code class=3D"literal">PathMatcher</code> utilit=
y). Both of the latter are effectively
wildcards</p>
<p>One use for this mechanism is when doing component-style application ass=
embly. All
components can 'publish' context definition fragments to a well-known locat=
ion path, and
when the final application context is created using the same path prefixed =
via
<code class=3D"literal">classpath*:</code>, all component fragments will be=
 picked up automatically.</p>
<p>Note that this wildcarding is specific to use of resource paths in appli=
cation context
constructors (or when using the <code class=3D"literal">PathMatcher</code> =
utility class hierarchy directly), and is
resolved at construction time. It has nothing to do with the <code class=3D=
"literal">Resource</code> type itself.
It=92s not possible to use the <code class=3D"literal">classpath*:</code> p=
refix to construct an actual <code class=3D"literal">Resource</code>, as
a resource points to just one resource at a time.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"resources-app-ctx-ant-patterns-in-paths" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#resources-app-ctx-ant-patterns-in-paths"></a>Ant-style Patterns</h4></div=
></div></div>
<p>When the path location contains an Ant-style pattern, for example:</p>
<pre class=3D"literallayout">/WEB-INF/*-context.xml
  com/mycompany/**/applicationContext.xml
  file:C:/some/path/*-context.xml
  classpath:com/mycompany/**/applicationContext.xml</pre>
<p>The resolver follows a more complex but defined procedure to try to reso=
lve the
wildcard. It produces a Resource for the path up to the last non-wildcard s=
egment and
obtains a URL from it. If this URL is not a <code class=3D"literal">jar:</c=
ode> URL or container-specific variant
(e.g. <code class=3D"literal">zip:</code> in WebLogic, <code class=3D"liter=
al">wsjar</code> in WebSphere, etc.), then a <code class=3D"literal">java.i=
o.File</code> is
obtained from it and used to resolve the wildcard by traversing the filesys=
tem. In the
case of a jar URL, the resolver either gets a <code class=3D"literal">java.=
net.JarURLConnection</code> from it or
manually parses the jar URL and then traverses the contents of the jar file=
 to resolve
the wildcards.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"resources-app-ctx-portability" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resource=
s-app-ctx-portability"></a>Implications on portability</h5></div></div></di=
v>
<p>If the specified path is already a file URL (either explicitly, or impli=
citly because
the base <code class=3D"literal">ResourceLoader</code> is a filesystem one,=
 then wildcarding is guaranteed to work in
a completely portable fashion.</p>
<p>If the specified path is a classpath location, then the resolver must ob=
tain the last
non-wildcard path segment URL via a <code class=3D"literal">Classloader.get=
Resource()</code> call. Since this is just
a node of the path (not the file at the end) it is actually undefined (in t=
he
<code class=3D"literal">ClassLoader</code> javadocs) exactly what sort of a=
 URL is returned in this case. In
practice, it is always a <code class=3D"literal">java.io.File</code> repres=
enting the directory, where the classpath
resource resolves to a filesystem location, or a jar URL of some sort, wher=
e the
classpath resource resolves to a jar location. Still, there is a portabilit=
y concern on
this operation.</p>
<p>If a jar URL is obtained for the last non-wildcard segment, the resolver=
 must be able to
get a <code class=3D"literal">java.net.JarURLConnection</code> from it, or =
manually parse the jar URL, to be able to
walk the contents of the jar, and resolve the wildcard. This will work in m=
ost
environments, but will fail in others, and it is strongly recommended that =
the wildcard
resolution of resources coming from jars be thoroughly tested in your speci=
fic
environment before you rely on it.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"resources-classpath-wildcards" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#resource=
s-classpath-wildcards"></a>The classpath*: prefix</h4></div></div></div>
<p>When constructing an XML-based application context, a location string ma=
y use the
special <code class=3D"literal">classpath*:</code> prefix:</p>
<pre class=3D"programlisting">ApplicationContext ctx =3D
    <span class=3D"hl-keyword">new</span> ClassPathXmlApplicationContext(<s=
pan class=3D"hl-string">"classpath*:conf/appContext.xml"</span>);</pre>
<p>This special prefix specifies that all classpath resources that match th=
e given name
must be obtained (internally, this essentially happens via a
<code class=3D"literal">ClassLoader.getResources(=85&#8203;)</code> call), =
and then merged to form the final application
context definition.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The wildcard classpath relies on the <code class=3D"literal">getResource=
s()</code> method of the underlying
classloader. As most application servers nowadays supply their own classloa=
der
implementation, the behavior might differ especially when dealing with jar =
files. A
simple test to check if <code class=3D"literal">classpath*</code> works is =
to use the classloader to load a file from
within a jar on the classpath:
<code class=3D"literal">getClass().getClassLoader().getResources("&lt;someF=
ileInsideTheJar&gt;")</code>. Try this test with
files that have the same name but are placed inside two different locations=
. In case an
inappropriate result is returned, check the application server documentatio=
n for
settings that might affect the classloader behavior.</p>
</td></tr></tbody></table></div>
<p>The <code class=3D"literal">classpath*:</code> prefix can also be combin=
ed with a <code class=3D"literal">PathMatcher</code> pattern in the
rest of the location path, for example <code class=3D"literal">classpath*:M=
ETA-INF/*-beans.xml</code>. In this
case, the resolution strategy is fairly simple: a <code class=3D"literal">C=
lassLoader.getResources()</code> call is
used on the last non-wildcard path segment to get all the matching resource=
s in the
class loader hierarchy, and then off each resource the same PathMatcher res=
olution
strategy described above is used for the wildcard subpath.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"resources-wildcards-in-path-other-stuff" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#resources-wildcards-in-path-other-stuff"></a>Other notes relating to wild=
cards</h4></div></div></div>
<p>Please note that <code class=3D"literal">classpath*:</code> when combine=
d with Ant-style patterns will only work
reliably with at least one root directory before the pattern starts, unless=
 the actual
target files reside in the file system. This means that a pattern like
<code class=3D"literal">classpath*:*.xml</code> might not retrieve files fr=
om the root of jar files but rather only
from the root of expanded directories.</p>
<p>Spring=92s ability to retrieve classpath entries originates from the JDK=
=92s
<code class=3D"literal">ClassLoader.getResources()</code> method which only=
 returns file system locations for a
passed-in empty string (indicating potential roots to search). Spring evalu=
ates
<code class=3D"literal">URLClassLoader</code> runtime configuration and the=
 "java.class.path" manifest in jar files
as well but this is not guaranteed to lead to portable behavior.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The scanning of classpath packages requires the presence of correspondin=
g directory
entries in the classpath. When you build JARs with Ant, make sure that you =
do <span class=3D"emphasis"><em>not</em></span>
activate the files-only switch of the JAR task. Also, classpath directories=
 may not
get exposed based on security policies in some environments, e.g. standalon=
e apps on
JDK 1.7.0_45 and higher (which requires 'Trusted-Library' setup in your man=
ifests; see
<a class=3D"ulink" href=3D"https://stackoverflow.com/questions/19394570/jav=
a-jre-7u45-breaks-classloader-getresources" target=3D"_top">http://stackove=
rflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources<=
/a>).</p>
</td></tr></tbody></table></div>
<p>Ant-style patterns with <code class=3D"literal">classpath:</code> resour=
ces are not guaranteed to find matching
resources if the root package to search is available in multiple class path=
 locations.
This is because a resource such as</p>
<pre class=3D"literallayout">com/mycompany/package1/service-context.xml</pr=
e>
<p>may be in only one location, but when a path such as</p>
<pre class=3D"literallayout">classpath:com/mycompany/**/service-context.xml=
</pre>
<p>is used to try to resolve it, the resolver will work off the (first) URL=
 returned by
<code class=3D"literal">getResource("com/mycompany")</code>;. If this base =
package node exists in multiple
classloader locations, the actual end resource may not be underneath. There=
fore,
preferably, use " `classpath*:`" with the same Ant-style pattern in such a =
case, which
will search all class path locations that contain the root package.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"resources-filesystemresource-caveats" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#r=
esources-filesystemresource-caveats"></a>8.7.3&nbsp;FileSystemResource cave=
ats</h3></div></div></div>
<p>A <code class=3D"literal">FileSystemResource</code> that is not attached=
 to a <code class=3D"literal">FileSystemApplicationContext</code> (that
is, a <code class=3D"literal">FileSystemApplicationContext</code> is not th=
e actual <code class=3D"literal">ResourceLoader</code>) will treat
absolute vs. relative paths as you would expect. Relative paths are relativ=
e to the
current working directory, while absolute paths are relative to the root of=
 the
filesystem.</p>
<p>For backwards compatibility (historical) reasons however, this changes w=
hen the
<code class=3D"literal">FileSystemApplicationContext</code> is the <code cl=
ass=3D"literal">ResourceLoader</code>. The
<code class=3D"literal">FileSystemApplicationContext</code> simply forces a=
ll attached <code class=3D"literal">FileSystemResource</code> instances
to treat all location paths as relative, whether they start with a leading =
slash or not.
In practice, this means the following are equivalent:</p>
<pre class=3D"programlisting">ApplicationContext ctx =3D
    <span class=3D"hl-keyword">new</span> FileSystemXmlApplicationContext(<=
span class=3D"hl-string">"conf/context.xml"</span>);</pre>
<pre class=3D"programlisting">ApplicationContext ctx =3D
    <span class=3D"hl-keyword">new</span> FileSystemXmlApplicationContext(<=
span class=3D"hl-string">"/conf/context.xml"</span>);</pre>
<p>As are the following: (Even though it would make sense for them to be di=
fferent, as one
case is relative and the other absolute.)</p>
<pre class=3D"programlisting">FileSystemXmlApplicationContext ctx =3D ...;
ctx.getResource(<span class=3D"hl-string">"some/resource/path/myTemplate.tx=
t"</span>);</pre>
<pre class=3D"programlisting">FileSystemXmlApplicationContext ctx =3D ...;
ctx.getResource(<span class=3D"hl-string">"/some/resource/path/myTemplate.t=
xt"</span>);</pre>
<p>In practice, if true absolute filesystem paths are needed, it is better =
to forgo the use
of absolute paths with <code class=3D"literal">FileSystemResource</code> / =
<code class=3D"literal">FileSystemXmlApplicationContext</code>, and
just force the use of a <code class=3D"literal">UrlResource</code>, by usin=
g the <code class=3D"literal">file:</code> URL prefix.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// actual context =
type doesn't matter, the Resource will always be UrlResource</span>
ctx.getResource(<span class=3D"hl-string">"file:///some/resource/path/myTem=
plate.txt"</span>);</pre>
<pre class=3D"programlisting"><span class=3D"hl-comment">// force this File=
SystemXmlApplicationContext to load its definition via a UrlResource</span>
ApplicationContext ctx =3D
    <span class=3D"hl-keyword">new</span> FileSystemXmlApplicationContext(<=
span class=3D"hl-string">"file:///conf/context.xml"</span>);</pre>
</div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"validation" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#validation"></a>9.&nbsp;Val=
idation, Data Binding, and Type Conversion</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"validation-introduction" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#validation-introduction"></a>9.1&nbsp;Introduction</h2></div></div>=
</div>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>JSR-303/JSR-349 Bean Validation</b></p></div></div></div>
<p>Spring Framework 4.0 supports Bean Validation 1.0 (JSR-303) and Bean Val=
idation 1.1
(JSR-349) in terms of setup support, also adapting it to Spring=92s <code c=
lass=3D"literal">Validator</code> interface.</p>
<p>An application can choose to enable Bean Validation once globally, as de=
scribed in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#validation-beanvalidation" title=3D=
"9.8&nbsp;Spring Validation">Section&nbsp;9.8, =93Spring Validation=94</a>,=
 and use it exclusively for all validation needs.</p>
<p>An application can also register additional Spring <code class=3D"litera=
l">Validator</code> instances per
<code class=3D"literal">DataBinder</code> instance, as described in <a clas=
s=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#validation-binder" title=3D"9.8.3&nbsp;Con=
figuring a DataBinder">Section&nbsp;9.8.3, =93Configuring a DataBinder=94</=
a>. This may be useful for
plugging in validation logic without the use of annotations.</p>
</div>
<p>There are pros and cons for considering validation as business logic, an=
d Spring offers
a design for validation (and data binding) that does not exclude either one=
 of them.
Specifically validation should not be tied to the web tier, should be easy =
to localize
and it should be possible to plug in any validator available. Considering t=
he above,
Spring has come up with a <code class=3D"literal">Validator</code> interfac=
e that is both basic and eminently usable
in every layer of an application.</p>
<p>Data binding is useful for allowing user input to be dynamically bound t=
o the domain
model of an application (or whatever objects you use to process user input)=
. Spring
provides the so-called <code class=3D"literal">DataBinder</code> to do exac=
tly that. The <code class=3D"literal">Validator</code> and the
<code class=3D"literal">DataBinder</code> make up the <code class=3D"litera=
l">validation</code> package, which is primarily used in but not
limited to the MVC framework.</p>
<p>The <code class=3D"literal">BeanWrapper</code> is a fundamental concept =
in the Spring Framework and is used in a lot
of places. However, you probably will not have the need to use the <code cl=
ass=3D"literal">BeanWrapper</code>
directly. Because this is reference documentation however, we felt that som=
e explanation
might be in order. We will explain the <code class=3D"literal">BeanWrapper<=
/code> in this chapter since, if you were
going to use it at all, you would most likely do so when trying to bind dat=
a to objects.</p>
<p>Spring=92s DataBinder and the lower-level BeanWrapper both use PropertyE=
ditors to parse
and format property values. The <code class=3D"literal">PropertyEditor</cod=
e> concept is part of the JavaBeans
specification, and is also explained in this chapter. Spring 3 introduces a
"core.convert" package that provides a general type conversion facility, as=
 well as a
higher-level "format" package for formatting UI field values. These new pac=
kages may be
used as simpler alternatives to PropertyEditors, and will also be discussed=
 in this
chapter.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"validator" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#valida=
tor"></a>9.2&nbsp;Validation using Spring=92s Validator interface</h2></div=
></div></div>
<p>Spring features a <code class=3D"literal">Validator</code> interface tha=
t you can use to validate objects. The
<code class=3D"literal">Validator</code> interface works using an <code cla=
ss=3D"literal">Errors</code> object so that while validating,
validators can report validation failures to the <code class=3D"literal">Er=
rors</code> object.</p>
<p>Let=92s consider a small data object:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Person {

    <span class=3D"hl-keyword">private</span> String name;
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> age;

    <span class=3D"hl-comment">// the usual getters and setters...</span>
}</pre>
<p>We=92re going to provide validation behavior for the <code class=3D"lite=
ral">Person</code> class by implementing the
following two methods of the <code class=3D"literal">org.springframework.va=
lidation.Validator</code> interface:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">supports(Class)</code> - Can this <code class=3D"li=
teral">Validator</code> validate instances of the supplied <code class=3D"l=
iteral">Class</code>?
</li><li class=3D"listitem">
<code class=3D"literal">validate(Object, org.springframework.validation.Err=
ors)</code> - validates the given object
and in case of validation errors, registers those with the given <code clas=
s=3D"literal">Errors</code> object
</li></ul></div>
<p>Implementing a <code class=3D"literal">Validator</code> is fairly straig=
htforward, especially when you know of the
<code class=3D"literal">ValidationUtils</code> helper class that the Spring=
 Framework also provides.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> PersonValidator <span class=3D"hl-keywo=
rd">implements</span> Validator {

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * This Validator validates *just* Person instances
     */</strong>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boo=
lean</span> supports(Class clazz) {
        <span class=3D"hl-keyword">return</span> Person.<span class=3D"hl-k=
eyword">class</span>.equals(clazz);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> validate(Object obj, Errors e) {
        ValidationUtils.rejectIfEmpty(e, <span class=3D"hl-string">"name"</=
span>, <span class=3D"hl-string">"name.empty"</span>);
        Person p =3D (Person) obj;
        <span class=3D"hl-keyword">if</span> (p.getAge() &lt; <span class=
=3D"hl-number">0</span>) {
            e.rejectValue(<span class=3D"hl-string">"age"</span>, <span cla=
ss=3D"hl-string">"negativevalue"</span>);
        } <span class=3D"hl-keyword">else</span> <span class=3D"hl-keyword"=
>if</span> (p.getAge() &gt; <span class=3D"hl-number">110</span>) {
            e.rejectValue(<span class=3D"hl-string">"age"</span>, <span cla=
ss=3D"hl-string">"too.darn.old"</span>);
        }
    }
}</pre>
<p>As you can see, the <code class=3D"literal">static</code> <code class=3D=
"literal">rejectIfEmpty(..)</code> method on the <code class=3D"literal">Va=
lidationUtils</code> class
is used to reject the <code class=3D"literal">'name'</code> property if it =
is <code class=3D"literal">null</code> or the empty string. Have a look
at the <code class=3D"literal">ValidationUtils</code> javadocs to see what =
functionality it provides besides the
example shown previously.</p>
<p>While it is certainly possible to implement a single <code class=3D"lite=
ral">Validator</code> class to validate each
of the nested objects in a rich object, it may be better to encapsulate the=
 validation
logic for each nested class of object in its own <code class=3D"literal">Va=
lidator</code> implementation. A simple
example of a <span class=3D"emphasis"><em>'rich'</em></span> object would b=
e a <code class=3D"literal">Customer</code> that is composed of two <code c=
lass=3D"literal">String</code>
properties (a first and second name) and a complex <code class=3D"literal">=
Address</code> object. <code class=3D"literal">Address</code> objects
may be used independently of <code class=3D"literal">Customer</code> object=
s, and so a distinct <code class=3D"literal">AddressValidator</code>
has been implemented. If you want your <code class=3D"literal">CustomerVali=
dator</code> to reuse the logic contained
within the <code class=3D"literal">AddressValidator</code> class without re=
sorting to copy-and-paste, you can
dependency-inject or instantiate an <code class=3D"literal">AddressValidato=
r</code> within your <code class=3D"literal">CustomerValidator</code>,
and use it like so:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CustomerValidator <span class=3D"hl-key=
word">implements</span> Validator {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> Validator addressValidator;

    <span class=3D"hl-keyword">public</span> CustomerValidator(Validator ad=
dressValidator) {
        <span class=3D"hl-keyword">if</span> (addressValidator =3D=3D null)=
 {
            <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keywo=
rd">new</span> IllegalArgumentException(<span class=3D"hl-string">"The supp=
lied [Validator] is "</span> +
                <span class=3D"hl-string">"required and must not be null."<=
/span>);
        }
        <span class=3D"hl-keyword">if</span> (!addressValidator.supports(Ad=
dress.<span class=3D"hl-keyword">class</span>)) {
            <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keywo=
rd">new</span> IllegalArgumentException(<span class=3D"hl-string">"The supp=
lied [Validator] must "</span> +
                <span class=3D"hl-string">"support the validation of [Addre=
ss] instances."</span>);
        }
        <span class=3D"hl-keyword">this</span>.addressValidator =3D address=
Validator;
    }

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * This Validator validates Customer instances, and any subclasses of C=
ustomer too
     */</strong>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boo=
lean</span> supports(Class clazz) {
        <span class=3D"hl-keyword">return</span> Customer.<span class=3D"hl=
-keyword">class</span>.isAssignableFrom(clazz);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> validate(Object target, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, <span class=3D"hl=
-string">"firstName"</span>, <span class=3D"hl-string">"field.required"</sp=
an>);
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, <span class=3D"hl=
-string">"surname"</span>, <span class=3D"hl-string">"field.required"</span=
>);
        Customer customer =3D (Customer) target;
        <span class=3D"hl-keyword">try</span> {
            errors.pushNestedPath(<span class=3D"hl-string">"address"</span=
>);
            ValidationUtils.invokeValidator(<span class=3D"hl-keyword">this=
</span>.addressValidator, customer.getAddress(), errors);
        } <span class=3D"hl-keyword">finally</span> {
            errors.popNestedPath();
        }
    }
}</pre>
<p>Validation errors are reported to the <code class=3D"literal">Errors</co=
de> object passed to the validator. In case
of Spring Web MVC you can use <code class=3D"literal">&lt;spring:bind/&gt;<=
/code> tag to inspect the error messages, but of
course you can also inspect the errors object yourself. More information ab=
out the
methods it offers can be found in the javadocs.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"validation-conversion" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#validation-conversion"></a>9.3&nbsp;Resolving codes to error messages=
</h2></div></div></div>
<p>We=92ve talked about databinding and validation. Outputting messages cor=
responding to
validation errors is the last thing we need to discuss. In the example we=
=92ve shown
above, we rejected the <code class=3D"literal">name</code> and the <code cl=
ass=3D"literal">age</code> field. If we=92re going to output the error
messages by using a <code class=3D"literal">MessageSource</code>, we will d=
o so using the error code we=92ve given when
rejecting the field ('name' and 'age' in this case). When you call (either =
directly, or
indirectly, using for example the <code class=3D"literal">ValidationUtils</=
code> class) <code class=3D"literal">rejectValue</code> or one of the
other <code class=3D"literal">reject</code> methods from the <code class=3D=
"literal">Errors</code> interface, the underlying implementation will
not only register the code you=92ve passed in, but also a number of additio=
nal error
codes. What error codes it registers is determined by the <code class=3D"li=
teral">MessageCodesResolver</code> that is
used. By default, the <code class=3D"literal">DefaultMessageCodesResolver</=
code> is used, which for example not only
registers a message with the code you gave, but also messages that include =
the field
name you passed to the reject method. So in case you reject a field using
<code class=3D"literal">rejectValue("age", "too.darn.old")</code>, apart fr=
om the <code class=3D"literal">too.darn.old</code> code, Spring will
also register <code class=3D"literal">too.darn.old.age</code> and <code cla=
ss=3D"literal">too.darn.old.age.int</code> (so the first will include
the field name and the second will include the type of the field); this is =
done as a
convenience to aid developers in targeting error messages and suchlike.</p>
<p>More information on the <code class=3D"literal">MessageCodesResolver</co=
de> and the default strategy can be found
online in the javadocs of
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/validation/MessageCodesResolver=
.html" target=3D"_top"><code class=3D"literal">MessageCodesResolver</code><=
/a>
and
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/validation/DefaultMessageCodesR=
esolver.html" target=3D"_top"><code class=3D"literal">DefaultMessageCodesRe=
solver</code></a>,
respectively.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"beans-beans" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bean=
s-beans"></a>9.4&nbsp;Bean manipulation and the BeanWrapper</h2></div></div=
></div>
<p>The <code class=3D"literal">org.springframework.beans</code> package adh=
eres to the JavaBeans standard provided by
Oracle. A JavaBean is simply a class with a default no-argument constructor=
, which follows
a naming convention where (by way of an example) a property named <code cla=
ss=3D"literal">bingoMadness</code> would
have a setter method <code class=3D"literal">setBingoMadness(..)</code> and=
 a getter method <code class=3D"literal">getBingoMadness()</code>. For
more information about JavaBeans and the specification, please refer to Ora=
cle=92s website (
<a class=3D"ulink" href=3D"https://docs.oracle.com/javase/6/docs/api/java/b=
eans/package-summary.html" target=3D"_top">javabeans</a>).</p>
<p>One quite important class in the beans package is the <code class=3D"lit=
eral">BeanWrapper</code> interface and its
corresponding implementation ( <code class=3D"literal">BeanWrapperImpl</cod=
e>). As quoted from the javadocs, the
<code class=3D"literal">BeanWrapper</code> offers functionality to set and =
get property values (individually or in
bulk), get property descriptors, and to query properties to determine if th=
ey are
readable or writable. Also, the <code class=3D"literal">BeanWrapper</code> =
offers support for nested properties,
enabling the setting of properties on sub-properties to an unlimited depth.=
 Then, the
<code class=3D"literal">BeanWrapper</code> supports the ability to add stan=
dard JavaBeans <code class=3D"literal">PropertyChangeListeners</code>
and <code class=3D"literal">VetoableChangeListeners</code>, without the nee=
d for supporting code in the target class.
Last but not least, the <code class=3D"literal">BeanWrapper</code> provides=
 support for the setting of indexed
properties. The <code class=3D"literal">BeanWrapper</code> usually isn=92t =
used by application code directly, but by
the <code class=3D"literal">DataBinder</code> and the <code class=3D"litera=
l">BeanFactory</code>.</p>
<p>The way the <code class=3D"literal">BeanWrapper</code> works is partly i=
ndicated by its name: <span class=3D"emphasis"><em>it wraps a bean</em></sp=
an> to
perform actions on that bean, like setting and retrieving properties.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-beans-conventions" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beans-co=
nventions"></a>9.4.1&nbsp;Setting and getting basic and nested properties</=
h3></div></div></div>
<p>Setting and getting properties is done using the <code class=3D"literal"=
>setPropertyValue(s)</code> and
<code class=3D"literal">getPropertyValue(s)</code> methods that both come w=
ith a couple of overloaded variants.
They=92re all described in more detail in the javadocs Spring comes with. W=
hat=92s important
to know is that there are a couple of conventions for indicating properties=
 of an
object. A couple of examples:</p>
<div class=3D"table"><a name=3D"beans-beans-conventions-properties-tbl" hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#beans-beans-conventions-properties-tbl"></a><p class=3D"=
title"><b>Table&nbsp;9.1.&nbsp;Examples of properties</b></p><div class=3D"=
table-contents">
<table summary=3D"Examples of properties" style=3D"border-collapse: collaps=
e;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt=
 solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col =
class=3D"col_2"></colgroup><thead><tr><th style=3D"border-right: 0.5pt soli=
d ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Expression=
</th><th style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op">Explanation</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5p=
t solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><=
code class=3D"literal">name</code></p></td><td style=3D"border-bottom: 0.5p=
t solid ; " align=3D"left" valign=3D"top"><p>Indicates the property <code c=
lass=3D"literal">name</code> corresponding to the methods <code class=3D"li=
teral">getName()</code> or <code class=3D"literal">isName()</code>
and <code class=3D"literal">setName(..)</code></p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p><code class=3D"literal">account.name</code></p></td><t=
d style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
Indicates the nested property <code class=3D"literal">name</code> of the pr=
operty <code class=3D"literal">account</code> corresponding e.g. to
the methods <code class=3D"literal">getAccount().setName()</code> or <code =
class=3D"literal">getAccount().getName()</code></p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p><code class=3D"literal">account[2]</code></p></td><td =
style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>In=
dicates the <span class=3D"emphasis"><em>third</em></span> element of the i=
ndexed property <code class=3D"literal">account</code>. Indexed properties
can be of type <code class=3D"literal">array</code>, <code class=3D"literal=
">list</code> or other <span class=3D"emphasis"><em>naturally ordered</em><=
/span> collection</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ;=
 " align=3D"left" valign=3D"top"><p><code class=3D"literal">account[COMPANY=
NAME]</code></p></td><td style=3D"" align=3D"left" valign=3D"top"><p>Indica=
tes the value of the map entry indexed by the key <span class=3D"emphasis">=
<em>COMPANYNAME</em></span> of the Map
property <code class=3D"literal">account</code></p></td></tr></tbody></tabl=
e>
</div></div><br class=3D"table-break">
<p>Below you=92ll find some examples of working with the <code class=3D"lit=
eral">BeanWrapper</code> to get and set
properties.</p>
<p><span class=3D"emphasis"><em>(This next section is not vitally important=
 to you if you=92re not planning to work with
the <code class=3D"literal">BeanWrapper</code> directly. If you=92re just u=
sing the <code class=3D"literal">DataBinder</code> and the <code class=3D"l=
iteral">BeanFactory</code>
and their out-of-the-box implementation, you should skip ahead to the secti=
on about
<code class=3D"literal">PropertyEditors</code>.)</em></span></p>
<p>Consider the following two classes:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Company {

    <span class=3D"hl-keyword">private</span> String name;
    <span class=3D"hl-keyword">private</span> Employee managingDirector;

    <span class=3D"hl-keyword">public</span> String getName() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.name;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setName(String name) {
        <span class=3D"hl-keyword">this</span>.name =3D name;
    }

    <span class=3D"hl-keyword">public</span> Employee getManagingDirector()=
 {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.managingDirector;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setManagingDirector(Employee managingDirector) {
        <span class=3D"hl-keyword">this</span>.managingDirector =3D managin=
gDirector;
    }
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Employee {

    <span class=3D"hl-keyword">private</span> String name;

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fl=
oat</span> salary;

    <span class=3D"hl-keyword">public</span> String getName() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.name;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setName(String name) {
        <span class=3D"hl-keyword">this</span>.name =3D name;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">flo=
at</span> getSalary() {
        <span class=3D"hl-keyword">return</span> salary;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setSalary(<span class=3D"hl-keyword">float</span> salary) {
        <span class=3D"hl-keyword">this</span>.salary =3D salary;
    }
}</pre>
<p>The following code snippets show some examples of how to retrieve and ma=
nipulate some of
the properties of instantiated <code class=3D"literal">Companies</code> and=
 <code class=3D"literal">Employees</code>:</p>
<pre class=3D"programlisting">BeanWrapper company =3D <span class=3D"hl-key=
word">new</span> BeanWrapperImpl(<span class=3D"hl-keyword">new</span> Comp=
any());
<span class=3D"hl-comment">// setting the company name..</span>
company.setPropertyValue(<span class=3D"hl-string">"name"</span>, <span cla=
ss=3D"hl-string">"Some Company Inc."</span>);
<span class=3D"hl-comment">// ... can also be done like this:</span>
PropertyValue value =3D <span class=3D"hl-keyword">new</span> PropertyValue=
(<span class=3D"hl-string">"name"</span>, <span class=3D"hl-string">"Some C=
ompany Inc."</span>);
company.setPropertyValue(value);

<span class=3D"hl-comment">// ok, let's create the director and tie it to t=
he company:</span>
BeanWrapper jim =3D <span class=3D"hl-keyword">new</span> BeanWrapperImpl(<=
span class=3D"hl-keyword">new</span> Employee());
jim.setPropertyValue(<span class=3D"hl-string">"name"</span>, <span class=
=3D"hl-string">"Jim Stravinsky"</span>);
company.setPropertyValue(<span class=3D"hl-string">"managingDirector"</span=
>, jim.getWrappedInstance());

<span class=3D"hl-comment">// retrieving the salary of the managingDirector=
 through the company</span>
Float salary =3D (Float) company.getPropertyValue(<span class=3D"hl-string"=
>"managingDirector.salary"</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"beans-beans-conversion" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beans-con=
version"></a>9.4.2&nbsp;Built-in PropertyEditor implementations</h3></div><=
/div></div>
<p>Spring uses the concept of <code class=3D"literal">PropertyEditors</code=
> to effect the conversion between an
<code class=3D"literal">Object</code> and a <code class=3D"literal">String<=
/code>. If you think about it, it sometimes might be handy to be able
to represent properties in a different way than the object itself. For exam=
ple, a <code class=3D"literal">Date</code>
can be represented in a human readable way (as the <code class=3D"literal">=
String</code> <code class=3D"literal">'2007-14-09'</code>), while
we=92re still able to convert the human readable form back to the original =
date (or even
better: convert any date entered in a human readable form, back to <code cl=
ass=3D"literal">Date</code> objects). This
behavior can be achieved by <span class=3D"emphasis"><em>registering custom=
 editors</em></span>, of type
<code class=3D"literal">java.beans.PropertyEditor</code>. Registering custo=
m editors on a <code class=3D"literal">BeanWrapper</code> or
alternately in a specific IoC container as mentioned in the previous chapte=
r, gives it
the knowledge of how to convert properties to the desired type. Read more a=
bout
<code class=3D"literal">PropertyEditors</code> in the javadocs of the <code=
 class=3D"literal">java.beans</code> package provided by Oracle.</p>
<p>A couple of examples where property editing is used in Spring:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>setting properties on beans</em></span> is don=
e using <code class=3D"literal">PropertyEditors</code>. When mentioning
<code class=3D"literal">java.lang.String</code> as the value of a property =
of some bean you=92re declaring in XML
file, Spring will (if the setter of the corresponding property has a
<code class=3D"literal">Class</code>-parameter) use the <code class=3D"lite=
ral">ClassEditor</code> to try to resolve the parameter to a <code class=3D=
"literal">Class</code>
object.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>parsing HTTP request parameters</em></span> in=
 Spring=92s MVC framework is done using all kinds
of <code class=3D"literal">PropertyEditors</code> that you can manually bin=
d in all subclasses of the
<code class=3D"literal">CommandController</code>.
</li></ul></div>
<p>Spring has a number of built-in <code class=3D"literal">PropertyEditors<=
/code> to make life easy. Each of those is
listed below and they are all located in the <code class=3D"literal">org.sp=
ringframework.beans.propertyeditors</code>
package. Most, but not all (as indicated below), are registered by default =
by
<code class=3D"literal">BeanWrapperImpl</code>. Where the property editor i=
s configurable in some fashion, you can of
course still register your own variant to override the default one:</p>
<div class=3D"table"><a name=3D"beans-beans-property-editors-tbl" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#beans-beans-property-editors-tbl"></a><p class=3D"title"><b>Ta=
ble&nbsp;9.2.&nbsp;Built-in PropertyEditors</b></p><div class=3D"table-cont=
ents">
<table summary=3D"Built-in PropertyEditors" style=3D"border-collapse: colla=
pse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5=
pt solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><co=
l class=3D"col_2"></colgroup><thead><tr><th style=3D"border-right: 0.5pt so=
lid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Class</t=
h><th style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
>Explanation</th></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt s=
olid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><cod=
e class=3D"literal">ByteArrayPropertyEditor</code></p></td><td style=3D"bor=
der-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Editor for byt=
e arrays. Strings will simply be converted to their corresponding byte
representations. Registered by default by <code class=3D"literal">BeanWrapp=
erImpl</code>.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; bo=
rder-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">ClassEditor</code></p></td><td style=3D"border-bottom: 0.5pt s=
olid ; " align=3D"left" valign=3D"top"><p>Parses Strings representing class=
es to actual classes and the other way around. When a
class is not found, an <code class=3D"literal">IllegalArgumentException</co=
de> is thrown. Registered by default by
<code class=3D"literal">BeanWrapperImpl</code>.</p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p><code class=3D"literal">CustomBooleanEditor</code></p>=
</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>Customizable property editor for <code class=3D"literal">Boolean</co=
de> properties. Registered by default by
<code class=3D"literal">BeanWrapperImpl</code>, but, can be overridden by r=
egistering custom instance of it as
custom editor.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; bo=
rder-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">CustomCollectionEditor</code></p></td><td style=3D"border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Property editor for Co=
llections, converting any source <code class=3D"literal">Collection</code> =
to a given target
<code class=3D"literal">Collection</code> type.</p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p><code class=3D"literal">CustomDateEditor</code></p></t=
d><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p>Customizable property editor for java.util.Date, supporting a custom Da=
teFormat. NOT
registered by default. Must be user registered as needed with appropriate f=
ormat.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bot=
tom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"litera=
l">CustomNumberEditor</code></p></td><td style=3D"border-bottom: 0.5pt soli=
d ; " align=3D"left" valign=3D"top"><p>Customizable property editor for any=
 Number subclass like <code class=3D"literal">Integer</code>, <code class=
=3D"literal">Long</code>, <code class=3D"literal">Float</code>,
<code class=3D"literal">Double</code>. Registered by default by <code class=
=3D"literal">BeanWrapperImpl</code>, but can be overridden by
registering custom instance of it as a custom editor.</p></td></tr><tr><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p><code class=3D"literal">FileEditor</code></p></=
td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top=
"><p>Capable of resolving Strings to <code class=3D"literal">java.io.File</=
code> objects. Registered by default by
<code class=3D"literal">BeanWrapperImpl</code>.</p></td></tr><tr><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p><code class=3D"literal">InputStreamEditor</code></p></=
td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top=
"><p>One-way property editor, capable of taking a text string and producing=
 (via an
intermediate <code class=3D"literal">ResourceEditor</code> and <code class=
=3D"literal">Resource</code>) an <code class=3D"literal">InputStream</code>=
, so <code class=3D"literal">InputStream</code>
properties may be directly set as Strings. Note that the default usage will=
 not close
the <code class=3D"literal">InputStream</code> for you! Registered by defau=
lt by <code class=3D"literal">BeanWrapperImpl</code>.</p></td></tr><tr><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p><code class=3D"literal">LocaleEditor</code></p>=
</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>Capable of resolving Strings to <code class=3D"literal">Locale</code=
> objects and vice versa (the String format is
<span class=3D"emphasis"><em><span class=3D"language">[country]</span></em>=
</span>[variant], which is the same thing the toString() method of
Locale provides). Registered by default by <code class=3D"literal">BeanWrap=
perImpl</code>.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">PatternEditor</code></p></td><td style=3D"border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top"><p>Capable of resolving Strings to=
 <code class=3D"literal">java.util.regex.Pattern</code> objects and vice ve=
rsa.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-botto=
m: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal"=
>PropertiesEditor</code></p></td><td style=3D"border-bottom: 0.5pt solid ; =
" align=3D"left" valign=3D"top"><p>Capable of converting Strings (formatted=
 using the format as defined in the javadocs
of the <code class=3D"literal">java.util.Properties</code> class) to <code =
class=3D"literal">Properties</code> objects. Registered by default
by <code class=3D"literal">BeanWrapperImpl</code>.</p></td></tr><tr><td sty=
le=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"l=
eft" valign=3D"top"><p><code class=3D"literal">StringTrimmerEditor</code></=
p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top"><p>Property editor that trims Strings. Optionally allows transforming=
 an empty string
into a <code class=3D"literal">null</code> value. NOT registered by default=
; must be user registered as needed.</p></td></tr><tr><td style=3D"border-r=
ight: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"liter=
al">URLEditor</code></p></td><td style=3D"" align=3D"left" valign=3D"top"><=
p>Capable of resolving a String representation of a URL to an actual <code =
class=3D"literal">URL</code> object.
Registered by default by <code class=3D"literal">BeanWrapperImpl</code>.</p=
></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>Spring uses the <code class=3D"literal">java.beans.PropertyEditorManager=
</code> to set the search path for property
editors that might be needed. The search path also includes <code class=3D"=
literal">sun.bean.editors</code>, which
includes <code class=3D"literal">PropertyEditor</code> implementations for =
types such as <code class=3D"literal">Font</code>, <code class=3D"literal">=
Color</code>, and most of
the primitive types. Note also that the standard JavaBeans infrastructure w=
ill
automatically discover <code class=3D"literal">PropertyEditor</code> classe=
s (without you having to register them
explicitly) if they are in the same package as the class they handle, and h=
ave the same
name as that class, with <code class=3D"literal">'Editor'</code> appended; =
for example, one could have the following
class and package structure, which would be sufficient for the <code class=
=3D"literal">FooEditor</code> class to be
recognized and used as the <code class=3D"literal">PropertyEditor</code> fo=
r <code class=3D"literal">Foo</code>-typed properties.</p>
<pre class=3D"literallayout">com
  chank
    pop
      Foo
      FooEditor // the PropertyEditor for the Foo class</pre>
<p>Note that you can also use the standard <code class=3D"literal">BeanInfo=
</code> JavaBeans mechanism here as well
(described
<a class=3D"ulink" href=3D"https://docs.oracle.com/javase/tutorial/javabean=
s/advanced/customization.html" target=3D"_top">in
not-amazing-detail here</a>). Find below an example of using the <code clas=
s=3D"literal">BeanInfo</code> mechanism for
explicitly registering one or more <code class=3D"literal">PropertyEditor</=
code> instances with the properties of an
associated class.</p>
<pre class=3D"literallayout">com
  chank
    pop
      Foo
      FooBeanInfo // the BeanInfo for the Foo class</pre>
<p>Here is the Java source code for the referenced <code class=3D"literal">=
FooBeanInfo</code> class. This would
associate a <code class=3D"literal">CustomNumberEditor</code> with the <cod=
e class=3D"literal">age</code> property of the <code class=3D"literal">Foo<=
/code> class.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> FooBeanInfo <span class=3D"hl-keyword">=
extends</span> SimpleBeanInfo {

    <span class=3D"hl-keyword">public</span> PropertyDescriptor[] getProper=
tyDescriptors() {
        <span class=3D"hl-keyword">try</span> {
            <span class=3D"hl-keyword">final</span> PropertyEditor numberPE=
 =3D <span class=3D"hl-keyword">new</span> CustomNumberEditor(Integer.<span=
 class=3D"hl-keyword">class</span>, true);
            PropertyDescriptor ageDescriptor =3D <span class=3D"hl-keyword"=
>new</span> PropertyDescriptor(<span class=3D"hl-string">"age"</span>, Foo.=
<span class=3D"hl-keyword">class</span>) {
                <span class=3D"hl-keyword">public</span> PropertyEditor cre=
atePropertyEditor(Object bean) {
                    <span class=3D"hl-keyword">return</span> numberPE;
                };
            };
            <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyw=
ord">new</span> PropertyDescriptor[] { ageDescriptor };
        }
        <span class=3D"hl-keyword">catch</span> (IntrospectionException ex)=
 {
            <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keywo=
rd">new</span> Error(ex.toString());
        }
    }
}</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"beans-beans-conversion-customeditor-registration" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#beans-beans-conversion-customeditor-registration"></a>Registerin=
g additional custom PropertyEditors</h4></div></div></div>
<p>When setting bean properties as a string value, a Spring IoC container u=
ltimately uses
standard JavaBeans <code class=3D"literal">PropertyEditors</code> to conver=
t these Strings to the complex type of the
property. Spring pre-registers a number of custom <code class=3D"literal">P=
ropertyEditors</code> (for example, to
convert a classname expressed as a string into a real <code class=3D"litera=
l">Class</code> object). Additionally,
Java=92s standard JavaBeans <code class=3D"literal">PropertyEditor</code> l=
ookup mechanism allows a <code class=3D"literal">PropertyEditor</code>
for a class simply to be named appropriately and placed in the same package=
 as the class
it provides support for, to be found automatically.</p>
<p>If there is a need to register other custom <code class=3D"literal">Prop=
ertyEditors</code>, there are several
mechanisms available. The most manual approach, which is not normally conve=
nient or
recommended, is to simply use the <code class=3D"literal">registerCustomEdi=
tor()</code> method of the
<code class=3D"literal">ConfigurableBeanFactory</code> interface, assuming =
you have a <code class=3D"literal">BeanFactory</code> reference.
Another, slightly more convenient, mechanism is to use a special bean facto=
ry
post-processor called <code class=3D"literal">CustomEditorConfigurer</code>=
. Although bean factory post-processors
can be used with <code class=3D"literal">BeanFactory</code> implementations=
, the <code class=3D"literal">CustomEditorConfigurer</code> has a
nested property setup, so it is strongly recommended that it is used with t=
he
<code class=3D"literal">ApplicationContext</code>, where it may be deployed=
 in similar fashion to any other bean, and
automatically detected and applied.</p>
<p>Note that all bean factories and application contexts automatically use =
a number of
built-in property editors, through their use of something called a <code cl=
ass=3D"literal">BeanWrapper</code> to
handle property conversions. The standard property editors that the <code c=
lass=3D"literal">BeanWrapper</code>
registers are listed in <a class=3D"link" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beans=
-conversion" title=3D"9.4.2&nbsp;Built-in PropertyEditor implementations">t=
he previous section</a>. Additionally,
<code class=3D"literal">ApplicationContexts</code> also override or add an =
additional number of editors to handle
resource lookups in a manner appropriate to the specific application contex=
t type.</p>
<p>Standard JavaBeans <code class=3D"literal">PropertyEditor</code> instanc=
es are used to convert property values
expressed as strings to the actual complex type of the property.
<code class=3D"literal">CustomEditorConfigurer</code>, a bean factory post-=
processor, may be used to conveniently add
support for additional <code class=3D"literal">PropertyEditor</code> instan=
ces to an <code class=3D"literal">ApplicationContext</code>.</p>
<p>Consider a user class <code class=3D"literal">ExoticType</code>, and ano=
ther class <code class=3D"literal">DependsOnExoticType</code> which needs
<code class=3D"literal">ExoticType</code> set as a property:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> exa=
mple;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExoticType {

    <span class=3D"hl-keyword">private</span> String name;

    <span class=3D"hl-keyword">public</span> ExoticType(String name) {
        <span class=3D"hl-keyword">this</span>.name =3D name;
    }
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DependsOnExoticType {

    <span class=3D"hl-keyword">private</span> ExoticType type;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setType(ExoticType type) {
        <span class=3D"hl-keyword">this</span>.type =3D type;
    }
}</pre>
<p>When things are properly set up, we want to be able to assign the type p=
roperty as a
string, which a <code class=3D"literal">PropertyEditor</code> will behind t=
he scenes convert into an actual
<code class=3D"literal">ExoticType</code> instance:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"sample"</span>=
 <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"exam=
ple.DependsOnExoticType"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"type"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"aNameForExoticType"</span>=
<span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The <code class=3D"literal">PropertyEditor</code> implementation could l=
ook similar to this:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// converts string=
 representation to ExoticType object</span>
<span class=3D"hl-keyword">package</span> example;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExoticTypeEditor <span class=3D"hl-keyword">extends</span> PropertyEd=
itorSupport {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setAsText(String text) {
        setValue(<span class=3D"hl-keyword">new</span> ExoticType(text.toUp=
perCase()));
    }
}</pre>
<p>Finally, we use <code class=3D"literal">CustomEditorConfigurer</code> to=
 register the new <code class=3D"literal">PropertyEditor</code> with the
<code class=3D"literal">ApplicationContext</code>, which will then be able =
to use it as needed:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.beans.factory.config.CustomEditorConfigurer"</span><span class=3D"=
hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"customEditors"</span><span class=
=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;map&gt;</span>
            <span class=3D"hl-tag">&lt;entry</span> <span class=3D"hl-attri=
bute">key</span>=3D<span class=3D"hl-value">"example.ExoticType"</span> <sp=
an class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"example.=
ExoticTypeEditor"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/map&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"beans-beans-conversion-customeditor-registration-per" href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#beans-beans-conversion-customeditor-registration-per"></a>Us=
ing PropertyEditorRegistrars</h5></div></div></div>
<p>Another mechanism for registering property editors with the Spring conta=
iner is to
create and use a <code class=3D"literal">PropertyEditorRegistrar</code>. Th=
is interface is particularly useful when
you need to use the same set of property editors in several different situa=
tions: write
a corresponding registrar and reuse that in each case. <code class=3D"liter=
al">PropertyEditorRegistrars</code> work
in conjunction with an interface called <code class=3D"literal">PropertyEdi=
torRegistry</code>, an interface that is
implemented by the Spring <code class=3D"literal">BeanWrapper</code> (and <=
code class=3D"literal">DataBinder</code>). <code class=3D"literal">Property=
EditorRegistrars</code>
are particularly convenient when used in conjunction with the <code class=
=3D"literal">CustomEditorConfigurer</code>
(introduced <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-beans-conversion-=
customeditor-registration" title=3D"Registering additional custom PropertyE=
ditors">here</a>), which exposes a
property called <code class=3D"literal">setPropertyEditorRegistrars(..)</co=
de>: <code class=3D"literal">PropertyEditorRegistrars</code> added to a
<code class=3D"literal">CustomEditorConfigurer</code> in this fashion can e=
asily be shared with <code class=3D"literal">DataBinder</code> and
Spring MVC <code class=3D"literal">Controllers</code>. Furthermore, it avoi=
ds the need for synchronization on custom
editors: a <code class=3D"literal">PropertyEditorRegistrar</code> is expect=
ed to create fresh <code class=3D"literal">PropertyEditor</code>
instances for each bean creation attempt.</p>
<p>Using a <code class=3D"literal">PropertyEditorRegistrar</code> is perhap=
s best illustrated with an example. First
off, you need to create your own <code class=3D"literal">PropertyEditorRegi=
strar</code> implementation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.foo.editors.spring;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> CustomPropertyEditorRegistrar=
 <span class=3D"hl-keyword">implements</span> PropertyEditorRegistrar {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> registerCustomEditors(PropertyEditorRegistry registry) {

        <span class=3D"hl-comment">// it is expected that new PropertyEdito=
r instances are created</span>
        registry.registerCustomEditor(ExoticType.<span class=3D"hl-keyword"=
>class</span>, <span class=3D"hl-keyword">new</span> ExoticTypeEditor());

        <span class=3D"hl-comment">// you could register as many custom pro=
perty editors as are required here...</span>
    }
}</pre>
<p>See also the <code class=3D"literal">org.springframework.beans.support.R=
esourceEditorRegistrar</code> for an example
<code class=3D"literal">PropertyEditorRegistrar</code> implementation. Noti=
ce how in its implementation of the
<code class=3D"literal">registerCustomEditors(..)</code> method it creates =
new instances of each property editor.</p>
<p>Next we configure a <code class=3D"literal">CustomEditorConfigurer</code=
> and inject an instance of our
<code class=3D"literal">CustomPropertyEditorRegistrar</code> into it:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.beans.factory.config.CustomEditorConfigurer"</span><span class=3D"=
hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"propertyEditorRegistrars"</span><s=
pan class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribu=
te">bean</span>=3D<span class=3D"hl-value">"customPropertyEditorRegistrar"<=
/span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"customPropertyEditorRegistrar"</span>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"c=
om.foo.editors.spring.CustomPropertyEditorRegistrar"</span><span class=3D"h=
l-tag">/&gt;</span></pre>
<p>Finally, and in a bit of a departure from the focus of this chapter, for=
 those of you
using <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#mvc" title=3D"22.&nbsp;Web MV=
C framework">Spring=92s MVC web framework</a>, using <code class=3D"literal=
">PropertyEditorRegistrars</code> in
conjunction with data-binding <code class=3D"literal">Controllers</code> (s=
uch as <code class=3D"literal">SimpleFormController</code>) can be very
convenient. Find below an example of using a <code class=3D"literal">Proper=
tyEditorRegistrar</code> in the
implementation of an <code class=3D"literal">initBinder(..)</code> method:<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">class</span>=
 RegisterUserController <span class=3D"hl-keyword">extends</span> SimpleFor=
mController {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> PropertyEditorRegistrar customPropertyEditorRegistrar;

    <span class=3D"hl-keyword">public</span> RegisterUserController(Propert=
yEditorRegistrar propertyEditorRegistrar) {
        <span class=3D"hl-keyword">this</span>.customPropertyEditorRegistra=
r =3D propertyEditorRegistrar;
    }

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
void</span> initBinder(HttpServletRequest request,
            ServletRequestDataBinder binder) <span class=3D"hl-keyword">thr=
ows</span> Exception {
        <span class=3D"strong"><strong>this.customPropertyEditorRegistrar.r=
egisterCustomEditors(binder);</strong></span>
    }

    <span class=3D"hl-comment">// other methods to do with registering a Us=
er</span>
}</pre>
<p>This style of <code class=3D"literal">PropertyEditor</code> registration=
 can lead to concise code (the implementation
of <code class=3D"literal">initBinder(..)</code> is just one line long!), a=
nd allows common <code class=3D"literal">PropertyEditor</code>
registration code to be encapsulated in a class and then shared amongst as =
many
<code class=3D"literal">Controllers</code> as needed.</p>
</div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"core-convert" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cor=
e-convert"></a>9.5&nbsp;Spring Type Conversion</h2></div></div></div>
<p>Spring 3 introduces a <code class=3D"literal">core.convert</code> packag=
e that provides a general type conversion
system. The system defines an SPI to implement type conversion logic, as we=
ll as an API
to execute type conversions at runtime. Within a Spring container, this sys=
tem can be
used as an alternative to PropertyEditors to convert externalized bean prop=
erty value
strings to required property types. The public API may also be used anywher=
e in your
application where type conversion is needed.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"core-convert-Converter-API" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#core-conver=
t-Converter-API"></a>9.5.1&nbsp;Converter SPI</h3></div></div></div>
<p>The SPI to implement type conversion logic is simple and strongly typed:=
</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.core.convert.converter;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> Converter&lt;S, T&gt; {

    T convert(S source);
}</pre>
<p>To create your own converter, simply implement the interface above. Para=
meterize <code class=3D"literal">S</code>
as the type you are converting from, and <code class=3D"literal">T</code> a=
s the type you are converting to. Such a
converter can also be applied transparently if a collection or array of <co=
de class=3D"literal">S</code> needs to be
converted to an array or collection of <code class=3D"literal">T</code>, pr=
ovided that a delegating array/collection
converter has been registered as well (which <code class=3D"literal">Defaul=
tConversionService</code> does by default).</p>
<p>For each call to <code class=3D"literal">convert(S)</code>, the source a=
rgument is guaranteed to be NOT null. Your
Converter may throw any unchecked exception if conversion fails; specifical=
ly, an
<code class=3D"literal">IllegalArgumentException</code> should be thrown to=
 report an invalid source value.
Take care to ensure that your <code class=3D"literal">Converter</code> impl=
ementation is thread-safe.</p>
<p>Several converter implementations are provided in the <code class=3D"lit=
eral">core.convert.support</code> package as
a convenience. These include converters from Strings to Numbers and other c=
ommon types.
Consider <code class=3D"literal">StringToInteger</code> as an example for a=
 typical <code class=3D"literal">Converter</code> implementation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.core.convert.support;

<span class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">class</s=
pan> StringToInteger <span class=3D"hl-keyword">implements</span> Converter=
&lt;String, Integer&gt; {

    <span class=3D"hl-keyword">public</span> Integer convert(String source)=
 {
        <span class=3D"hl-keyword">return</span> Integer.valueOf(source);
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"core-convert-ConverterFactory-SPI" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#core=
-convert-ConverterFactory-SPI"></a>9.5.2&nbsp;ConverterFactory</h3></div></=
div></div>
<p>When you need to centralize the conversion logic for an entire class hie=
rarchy, for
example, when converting from String to java.lang.Enum objects, implement
<code class=3D"literal">ConverterFactory</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.core.convert.converter;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> ConverterFactory&lt;S, R&gt; {

    &lt;T <span class=3D"hl-keyword">extends</span> R&gt; Converter&lt;S, T=
&gt; getConverter(Class&lt;T&gt; targetType);
}</pre>
<p>Parameterize S to be the type you are converting from and R to be the ba=
se type defining
the <span class=3D"emphasis"><em>range</em></span> of classes you can conve=
rt to. Then implement getConverter(Class&lt;T&gt;),
where T is a subclass of R.</p>
<p>Consider the <code class=3D"literal">StringToEnum</code> ConverterFactor=
y as an example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.core.convert.support;

<span class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">class</s=
pan> StringToEnumConverterFactory <span class=3D"hl-keyword">implements</sp=
an> ConverterFactory&lt;String, Enum&gt; {

    <span class=3D"hl-keyword">public</span> &lt;T <span class=3D"hl-keywor=
d">extends</span> Enum&gt; Converter&lt;String, T&gt; getConverter(Class&lt=
;T&gt; targetType) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> StringToEnumConverter(targetType);
    }

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> <span class=3D"hl-keyword">class</span> StringToEnumConverter&lt=
;T <span class=3D"hl-keyword">extends</span> Enum&gt; <span class=3D"hl-key=
word">implements</span> Converter&lt;String, T&gt; {

        <span class=3D"hl-keyword">private</span> Class&lt;T&gt; enumType;

        <span class=3D"hl-keyword">public</span> StringToEnumConverter(Clas=
s&lt;T&gt; enumType) {
            <span class=3D"hl-keyword">this</span>.enumType =3D enumType;
        }

        <span class=3D"hl-keyword">public</span> T convert(String source) {
            <span class=3D"hl-keyword">return</span> (T) Enum.valueOf(<span=
 class=3D"hl-keyword">this</span>.enumType, source.trim());
        }
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"core-convert-GenericConverter-SPI" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#core=
-convert-GenericConverter-SPI"></a>9.5.3&nbsp;GenericConverter</h3></div></=
div></div>
<p>When you require a sophisticated Converter implementation, consider the =
GenericConverter
interface. With a more flexible but less strongly typed signature, a Generi=
cConverter
supports converting between multiple source and target types. In addition, =
a
GenericConverter makes available source and target field context you can us=
e when
implementing your conversion logic. Such context allows a type conversion t=
o be driven
by a field annotation, or generic information declared on a field signature=
.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.core.convert.converter;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> GenericConverter {

    <span class=3D"hl-keyword">public</span> Set&lt;ConvertiblePair&gt; get=
ConvertibleTypes();

    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor=
 targetType);
}</pre>
<p>To implement a GenericConverter, have getConvertibleTypes() return the s=
upported
source&#8594;target type pairs. Then implement convert(Object, TypeDescript=
or,
TypeDescriptor) to implement your conversion logic. The source TypeDescript=
or provides
access to the source field holding the value being converted. The target Ty=
peDescriptor
provides access to the target field where the converted value will be set.<=
/p>
<p>A good example of a GenericConverter is a converter that converts betwee=
n a Java Array
and a Collection. Such an ArrayToCollectionConverter introspects the field =
that declares
the target Collection type to resolve the Collection=92s element type. This=
 allows each
element in the source array to be converted to the Collection element type =
before the
Collection is set on the target field.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Because GenericConverter is a more complex SPI interface, only use it wh=
en you need it.
Favor Converter or ConverterFactory for basic type conversion needs.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"core-convert-ConditionalGenericConverter-SPI" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#core-convert-ConditionalGenericConverter-SPI"></a>ConditionalGeneric=
Converter</h4></div></div></div>
<p>Sometimes you only want a <code class=3D"literal">Converter</code> to ex=
ecute if a specific condition holds true. For
example, you might only want to execute a <code class=3D"literal">Converter=
</code> if a specific annotation is present
on the target field. Or you might only want to execute a <code class=3D"lit=
eral">Converter</code> if a specific method,
such as a <code class=3D"literal">static valueOf</code> method, is defined =
on the target class.
<code class=3D"literal">ConditionalGenericConverter</code> is the union of =
the <code class=3D"literal">GenericConverter</code> and
<code class=3D"literal">ConditionalConverter</code> interfaces that allows =
you to define such custom matching criteria:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> ConditionalConverter {

    <span class=3D"hl-keyword">boolean</span> matches(TypeDescriptor source=
Type, TypeDescriptor targetType);
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> ConditionalGenericConverter <span class=3D"hl-keyword">extends</s=
pan> GenericConverter, ConditionalConverter {
}</pre>
<p>A good example of a <code class=3D"literal">ConditionalGenericConverter<=
/code> is an EntityConverter that converts
between an persistent entity identifier and an entity reference. Such a Ent=
ityConverter
might only match if the target entity type declares a static finder method =
e.g.
<code class=3D"literal">findAccount(Long)</code>. You would perform such a =
finder method check in the implementation of
<code class=3D"literal">matches(TypeDescriptor, TypeDescriptor)</code>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"core-convert-ConversionService-API" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#cor=
e-convert-ConversionService-API"></a>9.5.4&nbsp;ConversionService API</h3><=
/div></div></div>
<p>The ConversionService defines a unified API for executing type conversio=
n logic at
runtime. Converters are often executed behind this facade interface:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.core.convert;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> ConversionService {

    <span class=3D"hl-keyword">boolean</span> canConvert(Class&lt;?&gt; sou=
rceType, Class&lt;?&gt; targetType);

    &lt;T&gt; T convert(Object source, Class&lt;T&gt; targetType);

    <span class=3D"hl-keyword">boolean</span> canConvert(TypeDescriptor sou=
rceType, TypeDescriptor targetType);

    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor=
 targetType);

}</pre>
<p>Most ConversionService implementations also implement <code class=3D"lit=
eral">ConverterRegistry</code>, which
provides an SPI for registering converters. Internally, a ConversionService
implementation delegates to its registered converters to carry out type con=
version logic.</p>
<p>A robust ConversionService implementation is provided in the <code class=
=3D"literal">core.convert.support</code>
package. <code class=3D"literal">GenericConversionService</code> is the gen=
eral-purpose implementation suitable for
use in most environments. <code class=3D"literal">ConversionServiceFactory<=
/code> provides a convenient factory for
creating common ConversionService configurations.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"core-convert-Spring-config" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#core-conver=
t-Spring-config"></a>9.5.5&nbsp;Configuring a ConversionService</h3></div><=
/div></div>
<p>A ConversionService is a stateless object designed to be instantiated at=
 application
startup, then shared between multiple threads. In a Spring application, you=
 typically
configure a ConversionService instance per Spring container (or Application=
Context).
That ConversionService will be picked up by Spring and then used whenever a=
 type
conversion needs to be performed by the framework. You may also inject this
ConversionService into any of your beans and invoke it directly.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If no ConversionService is registered with Spring, the original Property=
Editor-based
system is used.</p>
</td></tr></tbody></table></div>
<p>To register a default ConversionService with Spring, add the following b=
ean definition
with id <code class=3D"literal">conversionService</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"conversionServ=
ice"</span>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.context.support.ConversionServiceFactoryBean"</span><spa=
n class=3D"hl-tag">/&gt;</span></pre>
<p>A default ConversionService can convert between strings, numbers, enums,=
 collections,
maps, and other common types. To supplement or override the default convert=
ers with your
own custom converter(s), set the <code class=3D"literal">converters</code> =
property. Property values may implement
either of the Converter, ConverterFactory, or GenericConverter interfaces.<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"conversionServ=
ice"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.context.support.ConversionServiceFactoryBean"</span>=
<span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"converters"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;set&gt;</span>
            <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"example.MyCustomConverter"</s=
pan><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/set&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>It is also common to use a ConversionService within a Spring MVC applica=
tion. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#mvc-config-conversion" title=3D"22.=
16.3&nbsp;Conversion and Formatting">Section&nbsp;22.16.3, =93Conversion an=
d Formatting=94</a> in the Spring MVC chapter.</p>
<p>In certain situations you may wish to apply formatting during conversion=
. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#format-FormatterRegistry-SPI" title=
=3D"9.6.3&nbsp;FormatterRegistry SPI">Section&nbsp;9.6.3, =93FormatterRegis=
try SPI=94</a> for details on using
<code class=3D"literal">FormattingConversionServiceFactoryBean</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"core-convert-programmatic-usage" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#core-c=
onvert-programmatic-usage"></a>9.5.6&nbsp;Using a ConversionService program=
matically</h3></div></div></div>
<p>To work with a ConversionService instance programmatically, simply injec=
t a reference to
it like you would for any other bean:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Service</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyService {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> MyService(ConversionService co=
nversionService) {
        <span class=3D"hl-keyword">this</span>.conversionService =3D conver=
sionService;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doIt() {
        <span class=3D"hl-keyword">this</span>.conversionService.convert(..=
.)
    }
}</pre>
<p>For most use cases, the <code class=3D"literal">convert</code> method sp=
ecifying the <span class=3D"emphasis"><em>targetType</em></span> can be use=
d but it
will not work with more complex types such as a collection of a parameteriz=
ed element.
If you want to convert a <code class=3D"literal">List</code> of <code class=
=3D"literal">Integer</code> to a <code class=3D"literal">List</code> of <co=
de class=3D"literal">String</code> programmatically,
for instance, you need to provide a formal definition of the source and tar=
get types.</p>
<p>Fortunately, <code class=3D"literal">TypeDescriptor</code> provides vari=
ous options to make that straightforward:</p>
<pre class=3D"programlisting">DefaultConversionService cs =3D <span class=
=3D"hl-keyword">new</span> DefaultConversionService();

List&lt;Integer&gt; input =3D ....
cs.convert(input,
    TypeDescriptor.forObject(input), <span class=3D"hl-comment">// List&lt;=
Integer&gt; type descriptor</span>
    TypeDescriptor.collection(List.<span class=3D"hl-keyword">class</span>,=
 TypeDescriptor.valueOf(String.<span class=3D"hl-keyword">class</span>)));<=
/pre>
<p>Note that <code class=3D"literal">DefaultConversionService</code> regist=
ers converters automatically which are
appropriate for most environments. This includes collection converters, sca=
lar
converters, and also basic <code class=3D"literal">Object</code> to <code c=
lass=3D"literal">String</code> converters. The same converters can
be registered with any <code class=3D"literal">ConverterRegistry</code> usi=
ng the <span class=3D"emphasis"><em>static</em></span> <code class=3D"liter=
al">addDefaultConverters</code>
method on the <code class=3D"literal">DefaultConversionService</code> class=
.</p>
<p>Converters for value types will be reused for arrays and collections, so=
 there is
no need to create a specific converter to convert from a <code class=3D"lit=
eral">Collection</code> of <code class=3D"literal">S</code> to a
<code class=3D"literal">Collection</code> of <code class=3D"literal">T</cod=
e>, assuming that standard collection handling is appropriate.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"format" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format"><=
/a>9.6&nbsp;Spring Field Formatting</h2></div></div></div>
<p>As discussed in the previous section, <a class=3D"link" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#core-convert" title=3D"9.5&nbsp;Spring Type Conversion"><code class=
=3D"literal">core.convert</code></a> is a
general-purpose type conversion system. It provides a unified ConversionSer=
vice API as
well as a strongly-typed Converter SPI for implementing conversion logic fr=
om one type
to another. A Spring Container uses this system to bind bean property value=
s. In
addition, both the Spring Expression Language (SpEL) and DataBinder use thi=
s system to
bind field values. For example, when SpEL needs to coerce a <code class=3D"=
literal">Short</code> to a <code class=3D"literal">Long</code> to
complete an <code class=3D"literal">expression.setValue(Object bean, Object=
 value)</code> attempt, the core.convert
system performs the coercion.</p>
<p>Now consider the type conversion requirements of a typical client enviro=
nment such as a
web or desktop application. In such environments, you typically convert <sp=
an class=3D"emphasis"><em>from String</em></span>
to support the client postback process, as well as back <span class=3D"emph=
asis"><em>to String</em></span> to support the
view rendering process. In addition, you often need to localize String valu=
es. The more
general <span class=3D"emphasis"><em>core.convert</em></span> Converter SPI=
 does not address such <span class=3D"emphasis"><em>formatting</em></span> =
requirements
directly. To directly address them, Spring 3 introduces a convenient Format=
ter SPI that
provides a simple and robust alternative to PropertyEditors for client envi=
ronments.</p>
<p>In general, use the Converter SPI when you need to implement general-pur=
pose type
conversion logic; for example, for converting between a java.util.Date and =
and
java.lang.Long. Use the Formatter SPI when you=92re working in a client env=
ironment, such
as a web application, and need to parse and print localized field values. T=
he
ConversionService provides a unified type conversion API for both SPIs.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"format-Formatter-SPI" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format-Formatter-=
SPI"></a>9.6.1&nbsp;Formatter SPI</h3></div></div></div>
<p>The Formatter SPI to implement field formatting logic is simple and stro=
ngly typed:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.format;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> Formatter&lt;T&gt; <span class=3D"hl-keyword">extends</span> Prin=
ter&lt;T&gt;, Parser&lt;T&gt; {
}</pre>
<p>Where Formatter extends from the Printer and Parser building-block inter=
faces:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Printer&lt;T&gt; {

    String print(T fieldValue, Locale locale);
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
.text.ParseException;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> Parser&lt;T&gt; {

    T parse(String clientValue, Locale locale) <span class=3D"hl-keyword">t=
hrows</span> ParseException;
}</pre>
<p>To create your own Formatter, simply implement the Formatter interface a=
bove.
Parameterize T to be the type of object you wish to format, for example,
<code class=3D"literal">java.util.Date</code>. Implement the <code class=3D=
"literal">print()</code> operation to print an instance of T for
display in the client locale. Implement the <code class=3D"literal">parse()=
</code> operation to parse an instance of
T from the formatted representation returned from the client locale. Your F=
ormatter
should throw a ParseException or IllegalArgumentException if a parse attemp=
t fails. Take
care to ensure your Formatter implementation is thread-safe.</p>
<p>Several Formatter implementations are provided in <code class=3D"literal=
">format</code> subpackages as a convenience.
The <code class=3D"literal">number</code> package provides a <code class=3D=
"literal">NumberStyleFormatter</code>, <code class=3D"literal">CurrencyStyl=
eFormatter</code>, and
<code class=3D"literal">PercentStyleFormatter</code> to format <code class=
=3D"literal">java.lang.Number</code> objects using a <code class=3D"literal=
">java.text.NumberFormat</code>.
The <code class=3D"literal">datetime</code> package provides a <code class=
=3D"literal">DateFormatter</code> to format <code class=3D"literal">java.ut=
il.Date</code> objects with
a <code class=3D"literal">java.text.DateFormat</code>. The <code class=3D"l=
iteral">datetime.joda</code> package provides comprehensive datetime
formatting support based on the <a class=3D"ulink" href=3D"http://joda-time=
.sourceforge.net/" target=3D"_top">Joda-Time library</a>.</p>
<p>Consider <code class=3D"literal">DateFormatter</code> as an example <cod=
e class=3D"literal">Formatter</code> implementation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.format.datetime;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> DateFormatter <span class=3D"=
hl-keyword">implements</span> Formatter&lt;Date&gt; {

    <span class=3D"hl-keyword">private</span> String pattern;

    <span class=3D"hl-keyword">public</span> DateFormatter(String pattern) =
{
        <span class=3D"hl-keyword">this</span>.pattern =3D pattern;
    }

    <span class=3D"hl-keyword">public</span> String print(Date date, Locale=
 locale) {
        <span class=3D"hl-keyword">if</span> (date =3D=3D null) {
            <span class=3D"hl-keyword">return</span> <span class=3D"hl-stri=
ng">""</span>;
        }
        <span class=3D"hl-keyword">return</span> getDateFormat(locale).form=
at(date);
    }

    <span class=3D"hl-keyword">public</span> Date parse(String formatted, L=
ocale locale) <span class=3D"hl-keyword">throws</span> ParseException {
        <span class=3D"hl-keyword">if</span> (formatted.length() =3D=3D <sp=
an class=3D"hl-number">0</span>) {
            <span class=3D"hl-keyword">return</span> null;
        }
        <span class=3D"hl-keyword">return</span> getDateFormat(locale).pars=
e(formatted);
    }

    <span class=3D"hl-keyword">protected</span> DateFormat getDateFormat(Lo=
cale locale) {
        DateFormat dateFormat =3D <span class=3D"hl-keyword">new</span> Sim=
pleDateFormat(<span class=3D"hl-keyword">this</span>.pattern, locale);
        dateFormat.setLenient(false);
        <span class=3D"hl-keyword">return</span> dateFormat;
    }
}</pre>
<p>The Spring team welcomes community-driven <code class=3D"literal">Format=
ter</code> contributions; see
<a class=3D"ulink" href=3D"https://jira.spring.io/browse/SPR" target=3D"_to=
p">jira.spring.io</a> to contribute.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"format-CustomFormatAnnotations" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format-=
CustomFormatAnnotations"></a>9.6.2&nbsp;Annotation-driven Formatting</h3></=
div></div></div>
<p>As you will see, field formatting can be configured by field type or ann=
otation. To bind
an Annotation to a formatter, implement AnnotationFormatterFactory:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.format;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> AnnotationFormatterFactory&lt;A <span class=3D"hl-keyword">extend=
s</span> Annotation&gt; {

    Set&lt;Class&lt;?&gt;&gt; getFieldTypes();

    Printer&lt;?&gt; getPrinter(A annotation, Class&lt;?&gt; fieldType);

    Parser&lt;?&gt; getParser(A annotation, Class&lt;?&gt; fieldType);
}</pre>
<p>Parameterize A to be the field annotationType you wish to associate form=
atting logic
with, for example <code class=3D"literal">org.springframework.format.annota=
tion.DateTimeFormat</code>. Have
<code class=3D"literal">getFieldTypes()</code> return the types of fields t=
he annotation may be used on. Have
<code class=3D"literal">getPrinter()</code> return a Printer to print the v=
alue of an annotated field. Have
<code class=3D"literal">getParser()</code> return a Parser to parse a clien=
tValue for an annotated field.</p>
<p>The example AnnotationFormatterFactory implementation below binds the @N=
umberFormat
Annotation to a formatter. This annotation allows either a number style or =
pattern to be
specified:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">class</span>=
 NumberFormatAnnotationFormatterFactory
        <span class=3D"hl-keyword">implements</span> AnnotationFormatterFac=
tory&lt;NumberFormat&gt; {

    <span class=3D"hl-keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getF=
ieldTypes() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> HashSet&lt;Class&lt;?&gt;&gt;(asList(<span class=3D"hl-keyword"=
>new</span> Class&lt;?&gt;[] {
            Short.<span class=3D"hl-keyword">class</span>, Integer.<span cl=
ass=3D"hl-keyword">class</span>, Long.<span class=3D"hl-keyword">class</spa=
n>, Float.<span class=3D"hl-keyword">class</span>,
            Double.<span class=3D"hl-keyword">class</span>, BigDecimal.<spa=
n class=3D"hl-keyword">class</span>, BigInteger.<span class=3D"hl-keyword">=
class</span> }));
    }

    <span class=3D"hl-keyword">public</span> Printer&lt;Number&gt; getPrint=
er(NumberFormat annotation, Class&lt;?&gt; fieldType) {
        <span class=3D"hl-keyword">return</span> configureFormatterFrom(ann=
otation, fieldType);
    }

    <span class=3D"hl-keyword">public</span> Parser&lt;Number&gt; getParser=
(NumberFormat annotation, Class&lt;?&gt; fieldType) {
        <span class=3D"hl-keyword">return</span> configureFormatterFrom(ann=
otation, fieldType);
    }

    <span class=3D"hl-keyword">private</span> Formatter&lt;Number&gt; confi=
gureFormatterFrom(NumberFormat annotation, Class&lt;?&gt; fieldType) {
        <span class=3D"hl-keyword">if</span> (!annotation.pattern().isEmpty=
()) {
            <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyw=
ord">new</span> NumberStyleFormatter(annotation.pattern());
        } <span class=3D"hl-keyword">else</span> {
            Style style =3D annotation.style();
            <span class=3D"hl-keyword">if</span> (style =3D=3D Style.PERCEN=
T) {
                <span class=3D"hl-keyword">return</span> <span class=3D"hl-=
keyword">new</span> PercentStyleFormatter();
            } <span class=3D"hl-keyword">else</span> <span class=3D"hl-keyw=
ord">if</span> (style =3D=3D Style.CURRENCY) {
                <span class=3D"hl-keyword">return</span> <span class=3D"hl-=
keyword">new</span> CurrencyStyleFormatter();
            } <span class=3D"hl-keyword">else</span> {
                <span class=3D"hl-keyword">return</span> <span class=3D"hl-=
keyword">new</span> NumberStyleFormatter();
            }
        }
    }
}</pre>
<p>To trigger formatting, simply annotate fields with @NumberFormat:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MyModel {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@NumberFormat(s=
tyle=3DStyle.CURRENCY)</span></em>
    <span class=3D"hl-keyword">private</span> BigDecimal decimal;
}</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"format-annotations-api" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format-annotati=
ons-api"></a>Format Annotation API</h4></div></div></div>
<p>A portable format annotation API exists in the <code class=3D"literal">o=
rg.springframework.format.annotation</code>
package. Use @NumberFormat to format java.lang.Number fields. Use @DateTime=
Format to
format java.util.Date, java.util.Calendar, java.util.Long, or Joda-Time fie=
lds.</p>
<p>The example below uses @DateTimeFormat to format a java.util.Date as a I=
SO Date
(yyyy-MM-dd):</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MyModel {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@DateTimeFormat=
(iso=3DISO.DATE)</span></em>
    <span class=3D"hl-keyword">private</span> Date date;
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"format-FormatterRegistry-SPI" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format-Fo=
rmatterRegistry-SPI"></a>9.6.3&nbsp;FormatterRegistry SPI</h3></div></div><=
/div>
<p>The FormatterRegistry is an SPI for registering formatters and converter=
s.
<code class=3D"literal">FormattingConversionService</code> is an implementa=
tion of FormatterRegistry suitable for
most environments. This implementation may be configured programmatically o=
r
declaratively as a Spring bean using <code class=3D"literal">FormattingConv=
ersionServiceFactoryBean</code>. Because
this implementation also implements <code class=3D"literal">ConversionServi=
ce</code>, it can be directly configured
for use with Spring=92s DataBinder and the Spring Expression Language (SpEL=
).</p>
<p>Review the FormatterRegistry SPI below:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.format;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> FormatterRegistry <span class=3D"hl-keyword">extends</span> Conve=
rterRegistry {

    <span class=3D"hl-keyword">void</span> addFormatterForFieldType(Class&l=
t;?&gt; fieldType, Printer&lt;?&gt; printer, Parser&lt;?&gt; parser);

    <span class=3D"hl-keyword">void</span> addFormatterForFieldType(Class&l=
t;?&gt; fieldType, Formatter&lt;?&gt; formatter);

    <span class=3D"hl-keyword">void</span> addFormatterForFieldType(Formatt=
er&lt;?&gt; formatter);

    <span class=3D"hl-keyword">void</span> addFormatterForAnnotation(Annota=
tionFormatterFactory&lt;?, ?&gt; factory);
}</pre>
<p>As shown above, Formatters can be registered by fieldType or annotation.=
</p>
<p>The FormatterRegistry SPI allows you to configure Formatting rules centr=
ally, instead of
duplicating such configuration across your Controllers. For example, you mi=
ght want to
enforce that all Date fields are formatted a certain way, or fields with a =
specific
annotation are formatted in a certain way. With a shared FormatterRegistry,=
 you define
these rules once and they are applied whenever formatting is needed.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"format-FormatterRegistrar-SPI" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#format-F=
ormatterRegistrar-SPI"></a>9.6.4&nbsp;FormatterRegistrar SPI</h3></div></di=
v></div>
<p>The FormatterRegistrar is an SPI for registering formatters and converte=
rs through the
FormatterRegistry:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.springframework.format;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> FormatterRegistrar {

    <span class=3D"hl-keyword">void</span> registerFormatters(FormatterRegi=
stry registry);
}</pre>
<p>A FormatterRegistrar is useful when registering multiple related convert=
ers and
formatters for a given formatting category, such as Date formatting. It can=
 also be
useful where declarative registration is insufficient. For example when a f=
ormatter
needs to be indexed under a specific field type different from its own &lt;=
T&gt; or when
registering a Printer/Parser pair. The next section provides more informati=
on on
converter and formatter registration.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"format-configuring-formatting-mvc" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#form=
at-configuring-formatting-mvc"></a>9.6.5&nbsp;Configuring Formatting in Spr=
ing MVC</h3></div></div></div>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#mvc-config-conversion" title=
=3D"22.16.3&nbsp;Conversion and Formatting">Section&nbsp;22.16.3, =93Conver=
sion and Formatting=94</a> in the Spring MVC chapter.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"format-configuring-formatting-globaldat=
etimeformat" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#format-configuring-formatting-globaldate=
timeformat"></a>9.7&nbsp;Configuring a global date &amp; time format</h2></=
div></div></div>
<p>By default, date and time fields that are not annotated with <code class=
=3D"literal">@DateTimeFormat</code> are
converted from strings using the <code class=3D"literal">DateFormat.SHORT</=
code> style. If you prefer, you can
change this by defining your own global format.</p>
<p>You will need to ensure that Spring does not register default formatters=
, and instead
you should register all formatters manually. Use the
<code class=3D"literal">org.springframework.format.datetime.joda.JodaTimeFo=
rmatterRegistrar</code> or
<code class=3D"literal">org.springframework.format.datetime.DateFormatterRe=
gistrar</code> class depending on whether
you use the Joda-Time library.</p>
<p>For example, the following Java configuration will register a global ' `=
yyyyMMdd=92
format. This example does not depend on the Joda-Time library:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> FormattingConversionService co=
nversionService() {

        <span class=3D"hl-comment">// Use the DefaultFormattingConversionSe=
rvice but do not register defaults</span>
        DefaultFormattingConversionService conversionService =3D <span clas=
s=3D"hl-keyword">new</span> DefaultFormattingConversionService(false);

        <span class=3D"hl-comment">// Ensure @NumberFormat is still support=
ed</span>
        conversionService.addFormatterForFieldAnnotation(<span class=3D"hl-=
keyword">new</span> NumberFormatAnnotationFormatterFactory());

        <span class=3D"hl-comment">// Register date conversion with a speci=
fic global format</span>
        DateFormatterRegistrar registrar =3D <span class=3D"hl-keyword">new=
</span> DateFormatterRegistrar();
        registrar.setFormatter(<span class=3D"hl-keyword">new</span> DateFo=
rmatter(<span class=3D"hl-string">"yyyyMMdd"</span>));
        registrar.registerFormatters(conversionService);

        <span class=3D"hl-keyword">return</span> conversionService;
    }
}</pre>
<p>If you prefer XML based configuration you can use a
<code class=3D"literal">FormattingConversionServiceFactoryBean</code>. Here=
 is the same example, this time using Joda
Time:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd&gt;

    &lt;bean id=3D"</span><span class=3D"hl-attribute">conversionService"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"org.springframework.format.support.FormattingConversionServiceFactoryBean"=
</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"registerDefaultFormatters"</sp=
an> <span class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"f=
alse"</span><span class=3D"hl-tag"> /&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"formatters"</span><span class=
=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;set&gt;</span>
                <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"org.springframework.forma=
t.number.NumberFormatAnnotationFormatterFactory"</span><span class=3D"hl-ta=
g"> /&gt;</span>
            <span class=3D"hl-tag">&lt;/set&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"formatterRegistrars"</span><sp=
an class=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;set&gt;</span>
                <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"org.springframework.forma=
t.datetime.joda.JodaTimeFormatterRegistrar"</span><span class=3D"hl-tag">&g=
t;</span>
                    <span class=3D"hl-tag">&lt;property</span> <span class=
=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"dateFormatter"</s=
pan><span class=3D"hl-tag">&gt;</span>
                        <span class=3D"hl-tag">&lt;bean</span> <span class=
=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springframew=
ork.format.datetime.joda.DateTimeFormatterFactoryBean"</span><span class=3D=
"hl-tag">&gt;</span>
                            <span class=3D"hl-tag">&lt;property</span> <spa=
n class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"pattern"</=
span> <span class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">=
"yyyyMMdd"</span><span class=3D"hl-tag">/&gt;</span>
                        <span class=3D"hl-tag">&lt;/bean&gt;</span>
                    <span class=3D"hl-tag">&lt;/property&gt;</span>
                <span class=3D"hl-tag">&lt;/bean&gt;</span>
            <span class=3D"hl-tag">&lt;/set&gt;</span>
        <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Joda-Time provides separate distinct types to represent <code class=3D"l=
iteral">date</code>, <code class=3D"literal">time</code> and <code class=3D=
"literal">date-time</code>
values. The <code class=3D"literal">dateFormatter</code>, <code class=3D"li=
teral">timeFormatter</code> and <code class=3D"literal">dateTimeFormatter</=
code> properties of the
<code class=3D"literal">JodaTimeFormatterRegistrar</code> should be used to=
 configure the different formats for each
type. The <code class=3D"literal">DateTimeFormatterFactoryBean</code> provi=
des a convenient way to create formatters.</p>
</td></tr></tbody></table></div>
<p>If you are using Spring MVC remember to explicitly configure the convers=
ion service that
is used. For Java based <code class=3D"literal">@Configuration</code> this =
means extending the
<code class=3D"literal">WebMvcConfigurationSupport</code> class and overrid=
ing the <code class=3D"literal">mvcConversionService()</code> method.
For XML you should use the <code class=3D"literal">'conversion-service'</co=
de> attribute of the
<code class=3D"literal">mvc:annotation-driven</code> element. See <a class=
=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#mvc-config-conversion" title=3D"22.16.3&nbs=
p;Conversion and Formatting">Section&nbsp;22.16.3, =93Conversion and Format=
ting=94</a> for details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"validation-beanvalidation" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#validation-beanvalidation"></a>9.8&nbsp;Spring Validation</h2></d=
iv></div></div>
<p>Spring 3 introduces several enhancements to its validation support. Firs=
t, the JSR-303
Bean Validation API is now fully supported. Second, when used programmatica=
lly, Spring=92s
DataBinder can now validate objects as well as bind to them. Third, Spring =
MVC now has
support for declaratively validating <code class=3D"literal">@Controller</c=
ode> inputs.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"validation-beanvalidation-overview" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#val=
idation-beanvalidation-overview"></a>9.8.1&nbsp;Overview of the JSR-303 Bea=
n Validation API</h3></div></div></div>
<p>JSR-303 standardizes validation constraint declaration and metadata for =
the Java
platform. Using this API, you annotate domain model properties with declara=
tive
validation constraints and the runtime enforces them. There are a number of=
 built-in
constraints you can take advantage of. You may also define your own custom =
constraints.</p>
<p>To illustrate, consider a simple PersonForm model with two properties:</=
p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> PersonForm {
    <span class=3D"hl-keyword">private</span> String name;
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> age;
}</pre>
<p>JSR-303 allows you to define declarative validation constraints against =
such properties:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> PersonForm {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@NotNull</span>=
</em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Size(max=3D64)=
</span></em>
    <span class=3D"hl-keyword">private</span> String name;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Min(0)</span><=
/em>
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> age;
}</pre>
<p>When an instance of this class is validated by a JSR-303 Validator, thes=
e constraints
will be enforced.</p>
<p>For general information on JSR-303/JSR-349, see the <a class=3D"ulink" h=
ref=3D"http://beanvalidation.org/" target=3D"_top">Bean
Validation website</a>. For information on the specific capabilities of the=
 default
reference implementation, see the <a class=3D"ulink" href=3D"https://www.hi=
bernate.org/412.html" target=3D"_top">Hibernate
Validator</a> documentation. To learn how to setup a Bean Validation provid=
er as a Spring
bean, keep reading.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"validation-beanvalidation-spring" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#valid=
ation-beanvalidation-spring"></a>9.8.2&nbsp;Configuring a Bean Validation P=
rovider</h3></div></div></div>
<p>Spring provides full support for the Bean Validation API. This includes =
convenient
support for bootstrapping a JSR-303/JSR-349 Bean Validation provider as a S=
pring bean.
This allows for a <code class=3D"literal">javax.validation.ValidatorFactory=
</code> or <code class=3D"literal">javax.validation.Validator</code> to
be injected wherever validation is needed in your application.</p>
<p>Use the <code class=3D"literal">LocalValidatorFactoryBean</code> to conf=
igure a default Validator as a Spring bean:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"validator"</sp=
an>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</sp=
an><span class=3D"hl-tag">/&gt;</span></pre>
<p>The basic configuration above will trigger Bean Validation to initialize=
 using its
default bootstrap mechanism. A JSR-303/JSR-349 provider, such as Hibernate =
Validator,
is expected to be present in the classpath and will be detected automatical=
ly.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"validation-beanvalidation-spring-inject" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#validation-beanvalidation-spring-inject"></a>Injecting a Validator</h4></=
div></div></div>
<p><code class=3D"literal">LocalValidatorFactoryBean</code> implements both=
 <code class=3D"literal">javax.validation.ValidatorFactory</code> and
<code class=3D"literal">javax.validation.Validator</code>, as well as Sprin=
g=92s
<code class=3D"literal">org.springframework.validation.Validator</code>. Yo=
u may inject a reference to either of
these interfaces into beans that need to invoke validation logic.</p>
<p>Inject a reference to <code class=3D"literal">javax.validation.Validator=
</code> if you prefer to work with the Bean
Validation API directly:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.validation.Validator;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Service</span></em=
>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyService {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> Validator validator;</pre>
<p>Inject a reference to <code class=3D"literal">org.springframework.valida=
tion.Validator</code> if your bean requires
the Spring Validation API:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
springframework.validation.Validator;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Service</span></em=
>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyService {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> Validator validator;
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"validation-beanvalidation-spring-constraints" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#validation-beanvalidation-spring-constraints"></a>Configuring Custom=
 Constraints</h4></div></div></div>
<p>Each Bean Validation constraint consists of two parts. First, a <code cl=
ass=3D"literal">@Constraint</code> annotation
that declares the constraint and its configurable properties. Second, an im=
plementation
of the <code class=3D"literal">javax.validation.ConstraintValidator</code> =
interface that implements the constraint=92s
behavior. To associate a declaration with an implementation, each <code cla=
ss=3D"literal">@Constraint</code> annotation
references a corresponding <code class=3D"literal">ConstraintValidator</cod=
e> implementation class. At runtime, a
<code class=3D"literal">ConstraintValidatorFactory</code> instantiates the =
referenced implementation when the
constraint annotation is encountered in your domain model.</p>
<p>By default, the <code class=3D"literal">LocalValidatorFactoryBean</code>=
 configures a <code class=3D"literal">SpringConstraintValidatorFactory</cod=
e>
that uses Spring to create ConstraintValidator instances. This allows your =
custom
ConstraintValidators to benefit from dependency injection like any other Sp=
ring bean.</p>
<p>Shown below is an example of a custom <code class=3D"literal">@Constrain=
t</code> declaration, followed by an associated
<code class=3D"literal">ConstraintValidator</code> implementation that uses=
 Spring for dependency injection:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target({ElementType.METHOD, ElementType.FIELD})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Constraint(validat=
edBy=3DMyConstraintValidator.class)</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> MyConstraint {
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.validation.ConstraintValidator;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyConstraintValidator <span class=3D"hl-keyword">implements</span> Co=
nstraintValidator {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired;</sp=
an></em>
    <span class=3D"hl-keyword">private</span> Foo aDependency;

    ...
}</pre>
<p>As you can see, a ConstraintValidator implementation may have its depend=
encies
@Autowired like any other Spring bean.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"validation-beanvalidation-spring-method" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#validation-beanvalidation-spring-method"></a>Spring-driven Method Validat=
ion</h4></div></div></div>
<p>The method validation feature supported by Bean Validation 1.1, and as a=
 custom
extension also by Hibernate Validator 4.3, can be integrated into a Spring =
context
through a <code class=3D"literal">MethodValidationPostProcessor</code> bean=
 definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.validation.beanvalidation.MethodValidationPostProcessor"</span><sp=
an class=3D"hl-tag">/&gt;</span></pre>
<p>In order to be eligible for Spring-driven method validation, all target =
classes need
to be annotated with Spring=92s <code class=3D"literal">@Validated</code> a=
nnotation, optionally declaring the
validation groups to use. Check out the <code class=3D"literal">MethodValid=
ationPostProcessor</code> javadocs
for setup details with Hibernate Validator and Bean Validation 1.1 provider=
s.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"validation-beanvalidation-spring-other" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#validation-beanvalidation-spring-other"></a>Additional Configuration Optio=
ns</h4></div></div></div>
<p>The default <code class=3D"literal">LocalValidatorFactoryBean</code> con=
figuration should prove sufficient for most
cases. There are a number of configuration options for various Bean Validat=
ion
constructs, from message interpolation to traversal resolution. See the
<code class=3D"literal">LocalValidatorFactoryBean</code> javadocs for more =
information on these options.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"validation-binder" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#validation-binder"><=
/a>9.8.3&nbsp;Configuring a DataBinder</h3></div></div></div>
<p>Since Spring 3, a DataBinder instance can be configured with a Validator=
. Once
configured, the Validator may be invoked by calling <code class=3D"literal"=
>binder.validate()</code>. Any validation
Errors are automatically added to the binder=92s BindingResult.</p>
<p>When working with the DataBinder programmatically, this can be used to i=
nvoke validation
logic after binding to a target object:</p>
<pre class=3D"programlisting">Foo target =3D <span class=3D"hl-keyword">new=
</span> Foo();
DataBinder binder =3D <span class=3D"hl-keyword">new</span> DataBinder(targ=
et);
binder.setValidator(<span class=3D"hl-keyword">new</span> FooValidator());

<span class=3D"hl-comment">// bind to the target object</span>
binder.bind(propertyValues);

<span class=3D"hl-comment">// validate the target object</span>
binder.validate();

<span class=3D"hl-comment">// get BindingResult that includes any validatio=
n errors</span>
BindingResult results =3D binder.getBindingResult();</pre>
<p>A DataBinder can also be configured with multiple <code class=3D"literal=
">Validator</code> instances via
<code class=3D"literal">dataBinder.addValidators</code> and <code class=3D"=
literal">dataBinder.replaceValidators</code>. This is useful when
combining globally configured Bean Validation with a Spring <code class=3D"=
literal">Validator</code> configured
locally on a DataBinder instance. See <a class=3D"xref" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#">???</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"validation-mvc" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#validation-mvc"></a>9.8=
.4&nbsp;Spring MVC 3 Validation</h3></div></div></div>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#mvc-config-validation" title=
=3D"22.16.4&nbsp;Validation">Section&nbsp;22.16.4, =93Validation=94</a> in =
the Spring MVC chapter.</p>
</div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"expressions" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#expressions"></a>10.&nbsp;=
Spring Expression Language (SpEL)</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"expressions-intro" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#expressions-intro"></a>10.1&nbsp;Introduction</h2></div></div></div>
<p>The Spring Expression Language (SpEL for short) is a powerful expression=
 language that
supports querying and manipulating an object graph at runtime. The language=
 syntax is
similar to Unified EL but offers additional features, most notably method i=
nvocation and
basic string templating functionality.</p>
<p>While there are several other Java expression languages available, OGNL,=
 MVEL, and JBoss
EL, to name a few, the Spring Expression Language was created to provide th=
e Spring
community with a single well supported expression language that can be used=
 across all
the products in the Spring portfolio. Its language features are driven by t=
he
requirements of the projects in the Spring portfolio, including tooling req=
uirements for
code completion support within the eclipse based Spring Tool Suite. That sa=
id,
SpEL is based on a technology agnostic API allowing other expression langua=
ge
implementations to be integrated should the need arise.</p>
<p>While SpEL serves as the foundation for expression evaluation within the=
 Spring
portfolio, it is not directly tied to Spring and can be used independently.=
 In order to
be self contained, many of the examples in this chapter use SpEL as if it w=
ere an
independent expression language. This requires creating a few bootstrapping
infrastructure classes such as the parser. Most Spring users will not need =
to deal with
this infrastructure and will instead only author expression strings for eva=
luation. An
example of this typical use is the integration of SpEL into creating XML or=
 annotated
based bean definitions as shown in the section <a class=3D"link" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#expressions-beandef" title=3D"10.3&nbsp;Expressions in bean def=
initions">Expression support
for defining bean definitions.</a></p>
<p>This chapter covers the features of the expression language, its API, an=
d its language
syntax. In several places an Inventor and Inventor=92s Society class are us=
ed as the
target objects for expression evaluation. These class declarations and the =
data used to
populate them are listed at the end of the chapter.</p>
<p>The expression language supports the following functionality:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Literal expressions
</li><li class=3D"listitem">
Boolean and relational operators
</li><li class=3D"listitem">
Regular expressions
</li><li class=3D"listitem">
Class expressions
</li><li class=3D"listitem">
Accessing properties, arrays, lists, maps
</li><li class=3D"listitem">
Method invocation
</li><li class=3D"listitem">
Relational operators
</li><li class=3D"listitem">
Assignment
</li><li class=3D"listitem">
Calling constructors
</li><li class=3D"listitem">
Bean references
</li><li class=3D"listitem">
Array construction
</li><li class=3D"listitem">
Inline lists
</li><li class=3D"listitem">
Inline maps
</li><li class=3D"listitem">
Ternary operator
</li><li class=3D"listitem">
Variables
</li><li class=3D"listitem">
User defined functions
</li><li class=3D"listitem">
Collection projection
</li><li class=3D"listitem">
Collection selection
</li><li class=3D"listitem">
Templated expressions
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"expressions-evaluation" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#expressions-evaluation"></a>10.2&nbsp;Evaluation</h2></div></div></d=
iv>
<p>This section introduces the simple use of SpEL interfaces and its expres=
sion language.
The complete language reference can be found in the section
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#expressions-language-ref" title=3D"=
10.4&nbsp;Language Reference">Language Reference</a>.</p>
<p>The following code introduces the SpEL API to evaluate the literal strin=
g expression
'Hello World'.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
Expression exp =3D parser.parseExpression(<span class=3D"hl-string">"</span=
><span class=3D"strong"><strong>'Hello World'</strong></span><span class=3D=
"hl-string">");
</span>String message =3D (String) exp.getValue();</pre>
<p>The value of the message variable is simply 'Hello World'.</p>
<p>The SpEL classes and interfaces you are most likely to use are located i=
n the packages
<code class=3D"literal">org.springframework.expression</code> and its sub p=
ackages and <code class=3D"literal">spel.support</code>.</p>
<p>The interface <code class=3D"literal">ExpressionParser</code> is respons=
ible for parsing an expression string. In
this example the expression string is a string literal denoted by the surro=
unding single
quotes. The interface <code class=3D"literal">Expression</code> is responsi=
ble for evaluating the previously defined
expression string. There are two exceptions that can be thrown, <code class=
=3D"literal">ParseException</code> and
<code class=3D"literal">EvaluationException</code> when calling <code class=
=3D"literal">parser.parseExpression</code> and <code class=3D"literal">exp.=
getValue</code>
respectively.</p>
<p>SpEL supports a wide range of features, such as calling methods, accessi=
ng properties,
and calling constructors.</p>
<p>As an example of method invocation, we call the <code class=3D"literal">=
concat</code> method on the string literal.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
Expression exp =3D parser.parseExpression(<span class=3D"hl-string">"</span=
><span class=3D"strong"><strong>'Hello World'.concat('!')</strong></span><s=
pan class=3D"hl-string">");
</span>String message =3D (String) exp.getValue();</pre>
<p>The value of message is now 'Hello World!'.</p>
<p>As an example of calling a JavaBean property, the String property <code =
class=3D"literal">Bytes</code> can be called
as shown below.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();

<span class=3D"hl-comment">// invokes 'getBytes()'</span>
Expression exp =3D parser.parseExpression(<span class=3D"hl-string">"</span=
><span class=3D"strong"><strong>'Hello World'.bytes</strong></span><span cl=
ass=3D"hl-string">");
</span><span class=3D"hl-keyword">byte</span>[] bytes =3D (<span class=3D"h=
l-keyword">byte</span>[]) exp.getValue();</pre>
<p>SpEL also supports nested properties using standard <span class=3D"empha=
sis"><em>dot</em></span> notation, i.e.
prop1.prop2.prop3 and the setting of property values</p>
<p>Public fields may also be accessed.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();

<span class=3D"hl-comment">// invokes 'getBytes().length'</span>
Expression exp =3D parser.parseExpression(<span class=3D"hl-string">"</span=
><span class=3D"strong"><strong>'Hello World'.bytes.length</strong></span><=
span class=3D"hl-string">");
</span><span class=3D"hl-keyword">int</span> length =3D (Integer) exp.getVa=
lue();</pre>
<p>The String=92s constructor can be called instead of using a string liter=
al.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
Expression exp =3D parser.parseExpression(<span class=3D"hl-string">"</span=
><span class=3D"strong"><strong>new String('hello world').toUpperCase()</st=
rong></span><span class=3D"hl-string">");
</span>String message =3D exp.getValue(String.<span class=3D"hl-keyword">cl=
ass</span>);</pre>
<p>Note the use of the generic method <code class=3D"literal">public &lt;T&=
gt; T getValue(Class&lt;T&gt; desiredResultType)</code>.
Using this method removes the need to cast the value of the expression to t=
he desired
result type. An <code class=3D"literal">EvaluationException</code> will be =
thrown if the value cannot be cast to the
type <code class=3D"literal">T</code> or converted using the registered typ=
e converter.</p>
<p>The more common usage of SpEL is to provide an expression string that is=
 evaluated
against a specific object instance (called the root object). The example sh=
ows
how to retrieve the <code class=3D"literal">name</code> property from an in=
stance of the <code class=3D"literal">Inventor</code> class or
create a boolean condition:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// Create and set =
a calendar</span>
GregorianCalendar c =3D <span class=3D"hl-keyword">new</span> GregorianCale=
ndar();
c.set(<span class=3D"hl-number">1856</span>, <span class=3D"hl-number">7</s=
pan>, <span class=3D"hl-number">9</span>);

<span class=3D"hl-comment">// The constructor arguments are name, birthday,=
 and nationality.</span>
Inventor tesla =3D <span class=3D"hl-keyword">new</span> Inventor(<span cla=
ss=3D"hl-string">"Nikola Tesla"</span>, c.getTime(), <span class=3D"hl-stri=
ng">"Serbian"</span>);

ExpressionParser parser =3D <span class=3D"hl-keyword">new</span> SpelExpre=
ssionParser();

Expression exp =3D parser.parseExpression(<span class=3D"hl-string">"</span=
><span class=3D"strong"><strong>name</strong></span><span class=3D"hl-strin=
g">");
</span>String name =3D (String) exp.getValue(tesla);
<span class=3D"hl-comment">// name =3D=3D "Nikola Tesla"</span>

exp =3D parser.parseExpression(<span class=3D"hl-string">"name =3D=3D 'Niko=
la Tesla'"</span>);
<span class=3D"hl-keyword">boolean</span> result =3D exp.getValue(tesla, Bo=
olean.<span class=3D"hl-keyword">class</span>);
<span class=3D"hl-comment">// result =3D=3D true</span></pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-evaluation-context" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#express=
ions-evaluation-context"></a>10.2.1&nbsp;<code class=3D"literal">Evaluation=
Context</code></h3></div></div></div>
<p>The interface <code class=3D"literal">EvaluationContext</code> is used w=
hen evaluating an expression to resolve
properties, methods, fields, and to help perform type conversion. There are=
 two
out-of-the-box implementations.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">SimpleEvaluationContext</code>&#8201;=97&#8201;expo=
ses a subset of essential SpEL language features and
configuration options, for categories of expressions that do not require th=
e full extent
of the SpEL language syntax and should be meaningfully restricted. Examples
include but are not limited to data binding expressions, property-based fil=
ters, and
others.
</li><li class=3D"listitem">
<code class=3D"literal">StandardEvaluationContext</code>&#8201;=97&#8201;ex=
poses the full set of SpEL language features and
configuration options. You may use it to specify a default root object, and=
 to configure
every available evaluation-related strategy.
</li></ul></div>
<p><code class=3D"literal">SimpleEvaluationContext</code> is designed to su=
pport only a subset of the SpEL language syntax.
It excludes Java type references, constructors, and bean references. It als=
o requires
explicit choosing the level of support for properties and methods in expres=
sions.
By default, the <code class=3D"literal">create()</code> static factory meth=
od enables only read access to properties.
You can also obtain a builder to configure the exact level of support neede=
d, targeting
one of, or some combination of the following:</p>
<div class=3D"orderedlist"><ol class=3D"orderedlist" type=3D"1"><li class=
=3D"listitem">
Custom <code class=3D"literal">PropertyAccessor</code> only (no reflection)=
.
</li><li class=3D"listitem">
Data binding properties for read-only access.
</li><li class=3D"listitem">
Data binding properties for read and write.
</li></ol></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-type-conversion" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expression=
s-type-conversion"></a>Type conversion</h4></div></div></div>
<p>By default SpEL uses the conversion service available in Spring core (
<code class=3D"literal">org.springframework.core.convert.ConversionService<=
/code>). This conversion service comes
with many converters built in for common conversions but is also fully exte=
nsible so
custom conversions between types can be added. Additionally it has the key =
capability
that it is generics aware. This means that when working with generic types =
in
expressions, SpEL will attempt conversions to maintain type correctness for=
 any objects
it encounters.</p>
<p>What does this mean in practice? Suppose assignment, using <code class=
=3D"literal">setValue()</code>, is being used
to set a <code class=3D"literal">List</code> property. The type of the prop=
erty is actually <code class=3D"literal">List&lt;Boolean&gt;</code>. SpEL
will recognize that the elements of the list need to be converted to <code =
class=3D"literal">Boolean</code> before
being placed in it. A simple example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">class</span> Simpl=
e {
    <span class=3D"hl-keyword">public</span> List&lt;Boolean&gt; booleanLis=
t =3D <span class=3D"hl-keyword">new</span> ArrayList&lt;Boolean&gt;();
}

Simple simple =3D <span class=3D"hl-keyword">new</span> Simple();
simple.booleanList.add(true);

SimpleEvaluationContext context =3D SimpleEvaluationContext().create();

<span class=3D"hl-comment">// false is passed in here as a string. SpEL and=
 the conversion service will</span>
<span class=3D"hl-comment">// correctly recognize that it needs to be a Boo=
lean and convert it</span>

parser.parseExpression(<span class=3D"hl-string">"booleanList[0]"</span>).s=
etValue(context, simple, <span class=3D"hl-string">"false"</span>);

<span class=3D"hl-comment">// b will be false</span>
Boolean b =3D simple.booleanList.get(<span class=3D"hl-number">0</span>);</=
pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-parser-configuration" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expre=
ssions-parser-configuration"></a>10.2.2&nbsp;Parser configuration</h3></div=
></div></div>
<p>It is possible to configure the SpEL expression parser using a parser co=
nfiguration object
(<code class=3D"literal">org.springframework.expression.spel.SpelParserConf=
iguration</code>). The configuration
object controls the behavior of some of the expression components. For exam=
ple, if
indexing into an array or collection and the element at the specified index=
 is <code class=3D"literal">null</code>
it is possible to automatically create the element. This is useful when usi=
ng expressions made up of a
chain of property references. If indexing into an array or list
and specifying an index that is beyond the end of the current size of the a=
rray or
list it is possible to automatically grow the array or list to accommodate =
that index.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">class</span> Demo =
{
    <span class=3D"hl-keyword">public</span> List&lt;String&gt; list;
}

<span class=3D"hl-comment">// Turn on:</span>
<span class=3D"hl-comment">// - auto null reference initialization</span>
<span class=3D"hl-comment">// - auto collection growing</span>
SpelParserConfiguration config =3D <span class=3D"hl-keyword">new</span> Sp=
elParserConfiguration(true,true);

ExpressionParser parser =3D <span class=3D"hl-keyword">new</span> SpelExpre=
ssionParser(config);

Expression expression =3D parser.parseExpression(<span class=3D"hl-string">=
"list[3]"</span>);

Demo demo =3D <span class=3D"hl-keyword">new</span> Demo();

Object o =3D expression.getValue(demo);

<span class=3D"hl-comment">// demo.list will now be a real collection of 4 =
entries</span>
<span class=3D"hl-comment">// Each entry is a new empty String</span></pre>
<p>It is also possible to configure the behaviour of the SpEL expression co=
mpiler.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-spel-compilation" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressio=
ns-spel-compilation"></a>10.2.3&nbsp;SpEL compilation</h3></div></div></div=
>
<p>Spring Framework 4.1 includes a basic expression compiler. Expressions a=
re usually
interpreted which provides a lot of dynamic flexibility during evaluation b=
ut
does not provide the optimum performance. For occasional expression usage
this is fine, but when used by other components like Spring Integration,
performance can be very important and there is no real need for the dynamis=
m.</p>
<p>The new SpEL compiler is intended to address this need. The
compiler will generate a real Java class on the fly during evaluation that =
embodies the
expression behavior and use that to achieve much faster expression
evaluation. Due to the lack of typing around expressions the compiler
uses information gathered during the interpreted evaluations of an
expression when performing compilation. For example, it does not know the t=
ype
of a property reference purely from the expression but during the first
interpreted evaluation it will find out what it is. Of course, basing the
compilation on this information could cause trouble later if the types of
the various expression elements change over time. For this reason compilati=
on
is best suited to expressions whose type information is not going to change
on repeated evaluations.</p>
<p>For a basic expression like this:</p>
<p><code class=3D"literal">someArray[0].someProperty.someOtherProperty &lt;=
 0.1</code></p>
<p>which involves array access, some property derefencing and numeric opera=
tions, the performance
gain can be very noticeable. In an example micro benchmark run of 50000 ite=
rations, it was
taking 75ms to evaluate using only the interpreter and just 3ms using the c=
ompiled version
of the expression.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-compiler-configuration" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#exp=
ressions-compiler-configuration"></a>Compiler configuration</h4></div></div=
></div>
<p>The compiler is not turned on by default, but there are two ways to turn
it on. It can be turned on using the parser configuration process discussed=
 earlier or
via a system property when SpEL usage is embedded inside another component.=
 This section
discusses both of these options.</p>
<p>It is important to understand that there are a few modes the compiler ca=
n operate in, captured
in an enum (<code class=3D"literal">org.springframework.expression.spel.Spe=
lCompilerMode</code>). The modes are as follows:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">OFF</code> - The compiler is switched off; this is =
the default.
</li><li class=3D"listitem">
<code class=3D"literal">IMMEDIATE</code> - In immediate mode the expression=
s are compiled as soon as possible. This
is typically after the first interpreted evaluation. If the compiled expres=
sion fails
(typically due to a type changing, as described above) then the caller of t=
he expression
evaluation will receive an exception.
</li><li class=3D"listitem">
<code class=3D"literal">MIXED</code> - In mixed mode the expressions silent=
ly switch between interpreted and compiled
mode over time. After some number of interpreted runs they will switch to c=
ompiled
form and if something goes wrong with the compiled form (like a type changi=
ng, as
described above) then the expression will automatically switch back to inte=
rpreted form
again. Sometime later it may generate another compiled form and switch to i=
t. Basically
the exception that the user gets in <code class=3D"literal">IMMEDIATE</code=
> mode is instead handled internally.
</li></ul></div>
<p><code class=3D"literal">IMMEDIATE</code> mode exists because <code class=
=3D"literal">MIXED</code> mode could cause issues for expressions that
have side effects. If a compiled expression blows up after partially succee=
ding it
may have already done something that has affected the state of the system. =
If this
has happened the caller may not want it to silently re-run in interpreted m=
ode
since part of the expression may be running twice.</p>
<p>After selecting a mode, use the <code class=3D"literal">SpelParserConfig=
uration</code> to configure the parser:</p>
<pre class=3D"programlisting">SpelParserConfiguration config =3D <span clas=
s=3D"hl-keyword">new</span> SpelParserConfiguration(SpelCompilerMode.IMMEDI=
ATE,
    <span class=3D"hl-keyword">this</span>.getClass().getClassLoader());

SpelExpressionParser parser =3D <span class=3D"hl-keyword">new</span> SpelE=
xpressionParser(config);

Expression expr =3D parser.parseExpression(<span class=3D"hl-string">"paylo=
ad"</span>);

MyMessage message =3D <span class=3D"hl-keyword">new</span> MyMessage();

Object payload =3D expr.getValue(message);</pre>
<p>When specifying the compiler mode it is also possible to specify a class=
loader (passing null is allowed).
Compiled expressions will be defined in a child classloader created under a=
ny that is supplied.
It is important to ensure if a classloader is specified it can see all the =
types involved in
the expression evaluation process.
If none is specified then a default classloader will be used (typically the=
 context classloader for
the thread that is running during expression evaluation).</p>
<p>The second way to configure the compiler is for use when SpEL is embedde=
d inside some other
component and it may not be possible to configure via a configuration objec=
t.
In these cases it is possible to use a system property. The property
<code class=3D"literal">spring.expression.compiler.mode</code> can be set t=
o one of the <code class=3D"literal">SpelCompilerMode</code>
enum values (<code class=3D"literal">off</code>, <code class=3D"literal">im=
mediate</code>, or <code class=3D"literal">mixed</code>).</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-compiler-limitations" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expre=
ssions-compiler-limitations"></a>Compiler limitations</h4></div></div></div=
>
<p>With Spring Framework 4.1 the basic compilation framework is in place. H=
owever, the framework does not
yet support compiling every kind of expression. The initial focus has been =
on the common expressions that are
likely to be used in performance critical contexts. These kinds of expressi=
on cannot be compiled
at the moment:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
expressions involving assignment
</li><li class=3D"listitem">
expressions relying on the conversion service
</li><li class=3D"listitem">
expressions using custom resolvers or accessors
</li><li class=3D"listitem">
expressions using selection or projection
</li></ul></div>
<p>More and more types of expression will be compilable in the future.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"expressions-beandef" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#expressions-beandef"></a>10.3&nbsp;Expressions in bean definitions</h2>=
</div></div></div>
<p>SpEL expressions can be used with XML or annotation-based configuration =
metadata for
defining <code class=3D"literal">BeanDefinition</code>s. In both cases the =
syntax to define the expression is of the
form <code class=3D"literal">#{ &lt;expression string&gt; }</code>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-beandef-xml-based" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressi=
ons-beandef-xml-based"></a>10.3.1&nbsp;XML configuration</h3></div></div></=
div>
<p>A property or constructor-arg value can be set using expressions as show=
n below.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"numberGuess"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"org.spring.samples.NumberGuess"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"randomNumber"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"#{ T(java.lang.M=
ath).random() * 100.0 }"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other properties --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The variable <code class=3D"literal">systemProperties</code> is predefin=
ed, so you can use it in your expressions as
shown below. Note that you do not have to prefix the predefined variable wi=
th the <code class=3D"literal">#</code>
symbol in this context.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"taxCalculator"=
</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.spring.samples.TaxCalculator"</span><span class=3D"hl-tag">&gt;</spa=
n>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"defaultLocale"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"#{ systemPropert=
ies['user.region'] }"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other properties --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>You can also refer to other bean properties by name, for example.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"numberGuess"</=
span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">=
"org.spring.samples.NumberGuess"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"randomNumber"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"#{ T(java.lang.M=
ath).random() * 100.0 }"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other properties --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"shapeGuess"</span> <span class=3D"hl-attribu=
te">class</span>=3D<span class=3D"hl-value">"org.spring.samples.ShapeGuess"=
</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"initialShapeSeed"</span> <span cla=
ss=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"#{ numberGuess=
.randomNumber }"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other properties --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-beandef-annotation-based" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#e=
xpressions-beandef-annotation-based"></a>10.3.2&nbsp;Annotation config</h3>=
</div></div></div>
<p>The <code class=3D"literal">@Value</code> annotation can be placed on fi=
elds, methods and method/constructor
parameters to specify a default value.</p>
<p>Here is an example to set the default value of a field variable.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">class</span=
> FieldValueTestBean

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Value("#{ syst=
emProperties['user.region'] }")</span></em>
    <span class=3D"hl-keyword">private</span> String defaultLocale;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDefaultLocale(String defaultLocale) {
        <span class=3D"hl-keyword">this</span>.defaultLocale =3D defaultLoc=
ale;
    }

    <span class=3D"hl-keyword">public</span> String getDefaultLocale() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.defaultLocale;
    }

}</pre>
<p>The equivalent but on a property setter method is shown below.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">class</span=
> PropertyValueTestBean

    <span class=3D"hl-keyword">private</span> String defaultLocale;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Value("#{ syst=
emProperties['user.region'] }")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDefaultLocale(String defaultLocale) {
        <span class=3D"hl-keyword">this</span>.defaultLocale =3D defaultLoc=
ale;
    }

    <span class=3D"hl-keyword">public</span> String getDefaultLocale() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.defaultLocale;
    }

}</pre>
<p>Autowired methods and constructors can also use the <code class=3D"liter=
al">@Value</code> annotation.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleMovieLister {

    <span class=3D"hl-keyword">private</span> MovieFinder movieFinder;
    <span class=3D"hl-keyword">private</span> String defaultLocale;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> configure(MovieFinder movieFinder,
            <em><span class=3D"hl-annotation" style=3D"color: gray">@Value(=
"#{ systemProperties['user.region'] }")</span></em> String defaultLocale) {
        <span class=3D"hl-keyword">this</span>.movieFinder =3D movieFinder;
        <span class=3D"hl-keyword">this</span>.defaultLocale =3D defaultLoc=
ale;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MovieRecommender {

    <span class=3D"hl-keyword">private</span> String defaultLocale;

    <span class=3D"hl-keyword">private</span> CustomerPreferenceDao custome=
rPreferenceDao;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> MovieRecommender(CustomerPrefe=
renceDao customerPreferenceDao,
            <em><span class=3D"hl-annotation" style=3D"color: gray">@Value(=
"#{systemProperties['user.country']}")</span></em> String defaultLocale) {
        <span class=3D"hl-keyword">this</span>.customerPreferenceDao =3D cu=
stomerPreferenceDao;
        <span class=3D"hl-keyword">this</span>.defaultLocale =3D defaultLoc=
ale;
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"expressions-language-ref" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#expressions-language-ref"></a>10.4&nbsp;Language Reference</h2></d=
iv></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-ref-literal" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-re=
f-literal"></a>10.4.1&nbsp;Literal expressions</h3></div></div></div>
<p>The types of literal expressions supported are strings, numeric values (=
int, real, hex),
boolean and null. Strings are delimited by single quotes. To put a single q=
uote itself
in a string, use two single quote characters.</p>
<p>The following listing shows simple usage of literals. Typically they wou=
ld not be used
in isolation like this but rather as part of a more complex expression, for=
 example
using a literal on one side of a logical comparison operator.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();

<span class=3D"hl-comment">// evals to "Hello World"</span>
String helloWorld =3D (String) parser.parseExpression(<span class=3D"hl-str=
ing">"'Hello World'"</span>).getValue();

<span class=3D"hl-keyword">double</span> avogadrosNumber =3D (Double) parse=
r.parseExpression(<span class=3D"hl-string">"6.0221415E+23"</span>).getValu=
e();

<span class=3D"hl-comment">// evals to 2147483647</span>
<span class=3D"hl-keyword">int</span> maxValue =3D (Integer) parser.parseEx=
pression(<span class=3D"hl-string">"0x7FFFFFFF"</span>).getValue();

<span class=3D"hl-keyword">boolean</span> trueValue =3D (Boolean) parser.pa=
rseExpression(<span class=3D"hl-string">"true"</span>).getValue();

Object nullValue =3D parser.parseExpression(<span class=3D"hl-string">"null=
"</span>).getValue();</pre>
<p>Numbers support the use of the negative sign, exponential notation, and =
decimal points.
By default real numbers are parsed using Double.parseDouble().</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-properties-arrays" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressi=
ons-properties-arrays"></a>10.4.2&nbsp;Properties, Arrays, Lists, Maps, Ind=
exers</h3></div></div></div>
<p>Navigating with property references is easy: just use a period to indica=
te a nested
property value. The instances of the <code class=3D"literal">Inventor</code=
> class, pupin, and tesla, were populated with
data listed in the section <a class=3D"link" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressi=
ons-example-classes" title=3D"10.5&nbsp;Classes used in the examples">Class=
es used in the examples</a>.
To navigate "down" and get Tesla=92s year of birth and Pupin=92s city of bi=
rth the following
expressions are used.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// evals to 1856</=
span>
<span class=3D"hl-keyword">int</span> year =3D (Integer) parser.parseExpres=
sion(<span class=3D"hl-string">"Birthdate.Year + 1900"</span>).getValue(con=
text);

String city =3D (String) parser.parseExpression(<span class=3D"hl-string">"=
placeOfBirth.City"</span>).getValue(context);</pre>
<p>Case insensitivity is allowed for the first letter of property names. Th=
e contents of
arrays and lists are obtained using square bracket notation.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
SimpleEvaluationContext context =3D SimpleEvaluationContext.create();

<span class=3D"hl-comment">// Inventions Array</span>

<span class=3D"hl-comment">// evaluates to "Induction motor"</span>
String invention =3D parser.parseExpression(<span class=3D"hl-string">"inve=
ntions[3]"</span>).getValue(
        context, tesla, String.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// Members List</span>

<span class=3D"hl-comment">// evaluates to "Nikola Tesla"</span>
String name =3D parser.parseExpression(<span class=3D"hl-string">"Members[0=
].Name"</span>).getValue(
        context, ieee, String.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// List and Array navigation</span>
<span class=3D"hl-comment">// evaluates to "Wireless communication"</span>
String invention =3D parser.parseExpression(<span class=3D"hl-string">"Memb=
ers[0].Inventions[6]"</span>).getValue(
        context, ieee, String.<span class=3D"hl-keyword">class</span>);</pr=
e>
<p>The contents of maps are obtained by specifying the literal key value wi=
thin the
brackets. In this case, because keys for the Officers map are strings, we c=
an specify
string literals.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// Officer's Dicti=
onary</span>

Inventor pupin =3D parser.parseExpression(<span class=3D"hl-string">"Office=
rs['president']"</span>).getValue(
        societyContext, Inventor.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to "Idvor"</span>
String city =3D parser.parseExpression(<span class=3D"hl-string">"Officers[=
'president'].PlaceOfBirth.City"</span>).getValue(
        societyContext, String.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// setting values</span>
parser.parseExpression(<span class=3D"hl-string">"Officers['advisors'][0].P=
laceOfBirth.Country"</span>).setValue(
        societyContext, <span class=3D"hl-string">"Croatia"</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-inline-lists" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-i=
nline-lists"></a>10.4.3&nbsp;Inline lists</h3></div></div></div>
<p>Lists can be expressed directly in an expression using <code class=3D"li=
teral">{}</code> notation.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// evaluates to a =
Java list containing the four numbers</span>
List numbers =3D (List) parser.parseExpression(<span class=3D"hl-string">"{=
1,2,3,4}"</span>).getValue(context);

List listOfLists =3D (List) parser.parseExpression(<span class=3D"hl-string=
">"{{'a','b'},{'x','y'}}"</span>).getValue(context);</pre>
<p><code class=3D"literal">{}</code> by itself means an empty list. For per=
formance reasons, if the list is itself
entirely composed of fixed literals then a constant list is created to repr=
esent the
expression, rather than building a new list on each evaluation.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-inline-maps" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-in=
line-maps"></a>10.4.4&nbsp;Inline Maps</h3></div></div></div>
<p>Maps can also be expressed directly in an expression using <code class=
=3D"literal">{key:value}</code> notation.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// evaluates to a =
Java map containing the two entries</span>
Map inventorInfo =3D (Map) parser.parseExpression(<span class=3D"hl-string"=
>"{name:'Nikola',dob:'10-July-1856'}"</span>).getValue(context);

Map mapOfMaps =3D (Map) parser.parseExpression(<span class=3D"hl-string">"{=
name:{first:'Nikola',last:'Tesla'},dob:{day:10,month:'July',year:1856}}"</s=
pan>).getValue(context);</pre>
<p><code class=3D"literal">{:}</code> by itself means an empty map. For per=
formance reasons, if the map is itself composed
of fixed literals or other nested constant structures (lists or maps) then =
a constant map is created
to represent the expression, rather than building a new map on each evaluat=
ion. Quoting of the map keys
is optional, the examples above are not using quoted keys.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-array-construction" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#express=
ions-array-construction"></a>10.4.5&nbsp;Array construction</h3></div></div=
></div>
<p>Arrays can be built using the familiar Java syntax, optionally supplying=
 an initializer
to have the array populated at construction time.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">int</span>[] numbe=
rs1 =3D (<span class=3D"hl-keyword">int</span>[]) parser.parseExpression(<s=
pan class=3D"hl-string">"new int[4]"</span>).getValue(context);

<span class=3D"hl-comment">// Array with initializer</span>
<span class=3D"hl-keyword">int</span>[] numbers2 =3D (<span class=3D"hl-key=
word">int</span>[]) parser.parseExpression(<span class=3D"hl-string">"new i=
nt[]{1,2,3}"</span>).getValue(context);

<span class=3D"hl-comment">// Multi dimensional array</span>
<span class=3D"hl-keyword">int</span>[][] numbers3 =3D (<span class=3D"hl-k=
eyword">int</span>[][]) parser.parseExpression(<span class=3D"hl-string">"n=
ew int[4][5]"</span>).getValue(context);</pre>
<p>It is not currently allowed to supply an initializer when constructing a
multi-dimensional array.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-methods" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-method=
s"></a>10.4.6&nbsp;Methods</h3></div></div></div>
<p>Methods are invoked using typical Java programming syntax. You may also =
invoke methods
on literals. Varargs are also supported.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// string literal,=
 evaluates to "bc"</span>
String bc =3D parser.parseExpression(<span class=3D"hl-string">"'abc'.subst=
ring(1, 3)"</span>).getValue(String.<span class=3D"hl-keyword">class</span>=
);

<span class=3D"hl-comment">// evaluates to true</span>
<span class=3D"hl-keyword">boolean</span> isMember =3D parser.parseExpressi=
on(<span class=3D"hl-string">"isMember('Mihajlo Pupin')"</span>).getValue(
        societyContext, Boolean.<span class=3D"hl-keyword">class</span>);</=
pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-operators" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-oper=
ators"></a>10.4.7&nbsp;Operators</h3></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-operators-relational" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expre=
ssions-operators-relational"></a>Relational operators</h4></div></div></div=
>
<p>The relational operators; equal, not equal, less than, less than or equa=
l, greater than,
and greater than or equal are supported using standard operator notation.</=
p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// evaluates to tr=
ue</span>
<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(<span class=3D"hl-string">"2 =3D=3D 2"</span>).getValue(Boolean.<span c=
lass=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to false</span>
<span class=3D"hl-keyword">boolean</span> falseValue =3D parser.parseExpres=
sion(<span class=3D"hl-string">"2 &lt; -5.0"</span>).getValue(Boolean.<span=
 class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to true</span>
<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(<span class=3D"hl-string">"'black' &lt; 'block'"</span>).getValue(Boole=
an.<span class=3D"hl-keyword">class</span>);</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Greater/less-than comparisons against <code class=3D"literal">null</code=
> follow a simple rule: <code class=3D"literal">null</code> is treated as
nothing here (i.e. NOT as zero). As a consequence, any other value is alway=
s greater
than <code class=3D"literal">null</code> (<code class=3D"literal">X &gt; nu=
ll</code> is always <code class=3D"literal">true</code>) and no other value=
 is ever less than nothing
(<code class=3D"literal">X &lt; null</code> is always <code class=3D"litera=
l">false</code>).</p>
<p>If you prefer numeric comparisons instead, please avoid number-based <co=
de class=3D"literal">null</code> comparisons
in favor of comparisons against zero (e.g. <code class=3D"literal">X &gt; 0=
</code> or <code class=3D"literal">X &lt; 0</code>).</p>
</td></tr></tbody></table></div>
<p>In addition to standard relational operators SpEL supports the <code cla=
ss=3D"literal">instanceof</code> and regular
expression based <code class=3D"literal">matches</code> operator.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// evaluates to fa=
lse</span>
<span class=3D"hl-keyword">boolean</span> falseValue =3D parser.parseExpres=
sion(
        <span class=3D"hl-string">"'xyz' instanceof T(Integer)"</span>).get=
Value(Boolean.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to true</span>
<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(
        <span class=3D"hl-string">"'5.00' matches '\^-?\\d+(\\.\\d{2})?$'"<=
/span>).getValue(Boolean.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">//evaluates to false</span>
<span class=3D"hl-keyword">boolean</span> falseValue =3D parser.parseExpres=
sion(
        <span class=3D"hl-string">"'5.0067' matches '\^-?\\d+(\\.\\d{2})?$'=
"</span>).getValue(Boolean.<span class=3D"hl-keyword">class</span>);</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Be careful with primitive types as they are immediately boxed up to the =
wrapper type,
so <code class=3D"literal">1 instanceof T(int)</code> evaluates to <code cl=
ass=3D"literal">false</code> while <code class=3D"literal">1 instanceof T(I=
nteger)</code>
evaluates to <code class=3D"literal">true</code>, as expected.</p>
</td></tr></tbody></table></div>
<p>Each symbolic operator can also be specified as a purely alphabetic equi=
valent. This
avoids problems where the symbols used have special meaning for the documen=
t type in
which the expression is embedded (eg. an XML document). The textual equival=
ents are
shown here: <code class=3D"literal">lt</code> (<code class=3D"literal">&lt;=
</code>), <code class=3D"literal">gt</code> (<code class=3D"literal">&gt;</=
code>), <code class=3D"literal">le</code> (<code class=3D"literal">&#8656;<=
/code>), <code class=3D"literal">ge</code> (<code class=3D"literal">&gt;=3D=
</code>), <code class=3D"literal">eq</code> (<code class=3D"literal">=3D=3D=
</code>),
<code class=3D"literal">ne</code> (<code class=3D"literal">!=3D</code>), <c=
ode class=3D"literal">div</code> (<code class=3D"literal">/</code>), <code =
class=3D"literal">mod</code> (<code class=3D"literal">%</code>), <code clas=
s=3D"literal">not</code> (<code class=3D"literal">!</code>). These are case=
 insensitive.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-operators-logical" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressi=
ons-operators-logical"></a>Logical operators</h4></div></div></div>
<p>The logical operators that are supported are and, or, and not. Their use=
 is demonstrated
below.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// -- AND --</span=
>

<span class=3D"hl-comment">// evaluates to false</span>
<span class=3D"hl-keyword">boolean</span> falseValue =3D parser.parseExpres=
sion(<span class=3D"hl-string">"true and false"</span>).getValue(Boolean.<s=
pan class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to true</span>
String expression =3D <span class=3D"hl-string">"isMember('Nikola Tesla') a=
nd isMember('Mihajlo Pupin')"</span>;
<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(expression).getValue(societyContext, Boolean.<span class=3D"hl-keyword"=
>class</span>);

<span class=3D"hl-comment">// -- OR --</span>

<span class=3D"hl-comment">// evaluates to true</span>
<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(<span class=3D"hl-string">"true or false"</span>).getValue(Boolean.<spa=
n class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to true</span>
String expression =3D <span class=3D"hl-string">"isMember('Nikola Tesla') o=
r isMember('Albert Einstein')"</span>;
<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(expression).getValue(societyContext, Boolean.<span class=3D"hl-keyword"=
>class</span>);

<span class=3D"hl-comment">// -- NOT --</span>

<span class=3D"hl-comment">// evaluates to false</span>
<span class=3D"hl-keyword">boolean</span> falseValue =3D parser.parseExpres=
sion(<span class=3D"hl-string">"!true"</span>).getValue(Boolean.<span class=
=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// -- AND and NOT --</span>
String expression =3D <span class=3D"hl-string">"isMember('Nikola Tesla') a=
nd !isMember('Mihajlo Pupin')"</span>;
<span class=3D"hl-keyword">boolean</span> falseValue =3D parser.parseExpres=
sion(expression).getValue(societyContext, Boolean.<span class=3D"hl-keyword=
">class</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-operators-mathematical" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#exp=
ressions-operators-mathematical"></a>Mathematical operators</h4></div></div=
></div>
<p>The addition operator can be used on both numbers and strings. Subtracti=
on, multiplication
and division can be used only on numbers. Other mathematical operators supp=
orted are
modulus (%) and exponential power (^). Standard operator precedence is enfo=
rced. These
operators are demonstrated below.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// Addition</span>
<span class=3D"hl-keyword">int</span> two =3D parser.parseExpression(<span =
class=3D"hl-string">"1 + 1"</span>).getValue(Integer.<span class=3D"hl-keyw=
ord">class</span>); <span class=3D"hl-comment">// 2</span>

String testString =3D parser.parseExpression(
        <span class=3D"hl-string">"'test' + ' ' + 'string'"</span>).getValu=
e(String.<span class=3D"hl-keyword">class</span>); <span class=3D"hl-commen=
t">// 'test string'</span>

<span class=3D"hl-comment">// Subtraction</span>
<span class=3D"hl-keyword">int</span> four =3D parser.parseExpression(<span=
 class=3D"hl-string">"1 - -3"</span>).getValue(Integer.<span class=3D"hl-ke=
yword">class</span>); <span class=3D"hl-comment">// 4</span>

<span class=3D"hl-keyword">double</span> d =3D parser.parseExpression(<span=
 class=3D"hl-string">"1000.00 - 1e4"</span>).getValue(Double.<span class=3D=
"hl-keyword">class</span>); <span class=3D"hl-comment">// -9000</span>

<span class=3D"hl-comment">// Multiplication</span>
<span class=3D"hl-keyword">int</span> six =3D parser.parseExpression(<span =
class=3D"hl-string">"-2 * -3"</span>).getValue(Integer.<span class=3D"hl-ke=
yword">class</span>); <span class=3D"hl-comment">// 6</span>

<span class=3D"hl-keyword">double</span> twentyFour =3D parser.parseExpress=
ion(<span class=3D"hl-string">"2.0 * 3e0 * 4"</span>).getValue(Double.<span=
 class=3D"hl-keyword">class</span>); <span class=3D"hl-comment">// 24.0</sp=
an>

<span class=3D"hl-comment">// Division</span>
<span class=3D"hl-keyword">int</span> minusTwo =3D parser.parseExpression(<=
span class=3D"hl-string">"6 / -3"</span>).getValue(Integer.<span class=3D"h=
l-keyword">class</span>); <span class=3D"hl-comment">// -2</span>

<span class=3D"hl-keyword">double</span> one =3D parser.parseExpression(<sp=
an class=3D"hl-string">"8.0 / 4e0 / 2"</span>).getValue(Double.<span class=
=3D"hl-keyword">class</span>); <span class=3D"hl-comment">// 1.0</span>

<span class=3D"hl-comment">// Modulus</span>
<span class=3D"hl-keyword">int</span> three =3D parser.parseExpression(<spa=
n class=3D"hl-string">"7 % 4"</span>).getValue(Integer.<span class=3D"hl-ke=
yword">class</span>); <span class=3D"hl-comment">// 3</span>

<span class=3D"hl-keyword">int</span> one =3D parser.parseExpression(<span =
class=3D"hl-string">"8 / 5 % 2"</span>).getValue(Integer.<span class=3D"hl-=
keyword">class</span>); <span class=3D"hl-comment">// 1</span>

<span class=3D"hl-comment">// Operator precedence</span>
<span class=3D"hl-keyword">int</span> minusTwentyOne =3D parser.parseExpres=
sion(<span class=3D"hl-string">"1+2-3*8"</span>).getValue(Integer.<span cla=
ss=3D"hl-keyword">class</span>); <span class=3D"hl-comment">// -21</span></=
pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-assignment" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-ass=
ignment"></a>10.4.8&nbsp;Assignment</h3></div></div></div>
<p>Setting of a property is done by using the assignment operator. This wou=
ld typically be
done within a call to <code class=3D"literal">setValue</code> but can also =
be done inside a call to <code class=3D"literal">getValue</code>.</p>
<pre class=3D"programlisting">Inventor inventor =3D <span class=3D"hl-keywo=
rd">new</span> Inventor();
SimpleEvaluationContext context =3D SimpleEvaluationContext.create();

parser.parseExpression(<span class=3D"hl-string">"Name"</span>).setValue(co=
ntext, inventor, <span class=3D"hl-string">"Alexander Seovic2"</span>);

<span class=3D"hl-comment">// alternatively</span>

String aleks =3D parser.parseExpression(
        <span class=3D"hl-string">"Name =3D 'Alexandar Seovic'"</span>).get=
Value(context, inventor, String.<span class=3D"hl-keyword">class</span>);</=
pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-types" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-types"><=
/a>10.4.9&nbsp;Types</h3></div></div></div>
<p>The special <code class=3D"literal">T</code> operator can be used to spe=
cify an instance of java.lang.Class (the
<span class=3D"emphasis"><em>type</em></span>). Static methods are invoked =
using this operator as well. The
<code class=3D"literal">StandardEvaluationContext</code> uses a <code class=
=3D"literal">TypeLocator</code> to find types and the
<code class=3D"literal">StandardTypeLocator</code> (which can be replaced) =
is built with an understanding of the
java.lang package. This means T() references to types within java.lang do n=
ot need to be
fully qualified, but all other type references must be.</p>
<pre class=3D"programlisting">Class dateClass =3D parser.parseExpression(<s=
pan class=3D"hl-string">"T(java.util.Date)"</span>).getValue(Class.<span cl=
ass=3D"hl-keyword">class</span>);

Class stringClass =3D parser.parseExpression(<span class=3D"hl-string">"T(S=
tring)"</span>).getValue(Class.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-keyword">boolean</span> trueValue =3D parser.parseExpress=
ion(
        <span class=3D"hl-string">"T(java.math.RoundingMode).CEILING &lt; T=
(java.math.RoundingMode).FLOOR"</span>)
        .getValue(Boolean.<span class=3D"hl-keyword">class</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-constructors" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-c=
onstructors"></a>10.4.10&nbsp;Constructors</h3></div></div></div>
<p>Constructors can be invoked using the new operator. The fully qualified =
class name
should be used for all but the primitive type and String (where int, float,=
 etc, can be
used).</p>
<pre class=3D"programlisting">Inventor einstein =3D p.parseExpression(
        <span class=3D"hl-string">"new org.spring.samples.spel.inventor.Inv=
entor('Albert Einstein', 'German')"</span>)
        .getValue(Inventor.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">//create new inventor instance within add method=
 of List</span>
p.parseExpression(
        <span class=3D"hl-string">"Members.add(new org.spring.samples.spel.=
inventor.Inventor(
</span>            <span class=3D"hl-string">'Albert Einstein'</span>, <spa=
n class=3D"hl-string">'German'</span>))<span class=3D"hl-string">").getValu=
e(societyContext);</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-ref-variables" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-=
ref-variables"></a>10.4.11&nbsp;Variables</h3></div></div></div>
<p>Variables can be referenced in the expression using the syntax <code cla=
ss=3D"literal">#variableName</code>. Variables
are set using the method setVariable on <code class=3D"literal">EvaluationC=
ontext</code> implementations.</p>
<pre class=3D"programlisting">Inventor tesla =3D <span class=3D"hl-keyword"=
>new</span> Inventor(<span class=3D"hl-string">"Nikola Tesla"</span>, <span=
 class=3D"hl-string">"Serbian"</span>);
SimpleEvaluationContext context =3D SimpleEvaluationContext.create();
context.setVariable(<span class=3D"hl-string">"newName"</span>, <span class=
=3D"hl-string">"Mike Tesla"</span>);

parser.parseExpression(<span class=3D"hl-string">"Name =3D #newName"</span>=
).getValue(context, tesla);

System.out.println(tesla.getName()) <span class=3D"hl-comment">// "Mike Tes=
la"</span></pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"expressions-this-root" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-this=
-root"></a>The #this and #root variables</h4></div></div></div>
<p>The variable #this is always defined and refers to the current evaluatio=
n object
(against which unqualified references are resolved). The variable #root is =
always
defined and refers to the root context object. Although #this may vary as c=
omponents of
an expression are evaluated, #root always refers to the root.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// create an array=
 of integers</span>
List&lt;Integer&gt; primes =3D <span class=3D"hl-keyword">new</span> ArrayL=
ist&lt;Integer&gt;();
primes.addAll(Arrays.asList(<span class=3D"hl-number">2</span>,<span class=
=3D"hl-number">3</span>,<span class=3D"hl-number">5</span>,<span class=3D"h=
l-number">7</span>,<span class=3D"hl-number">11</span>,<span class=3D"hl-nu=
mber">13</span>,<span class=3D"hl-number">17</span>));

<span class=3D"hl-comment">// create parser and set variable 'primes' as th=
e array of integers</span>
ExpressionParser parser =3D <span class=3D"hl-keyword">new</span> SpelExpre=
ssionParser();
SimpleEvaluationContext context =3D SimpleEvaluationContext.create();
context.setVariable(<span class=3D"hl-string">"primes"</span>,primes);

<span class=3D"hl-comment">// all prime numbers &gt; 10 from the list (usin=
g selection ?{...})</span>
<span class=3D"hl-comment">// evaluates to [11, 13, 17]</span>
List&lt;Integer&gt; primesGreaterThanTen =3D (List&lt;Integer&gt;) parser.p=
arseExpression(
        <span class=3D"hl-string">"#primes.?[#this&gt;10]"</span>).getValue=
(context);</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-ref-functions" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-=
ref-functions"></a>10.4.12&nbsp;Functions</h3></div></div></div>
<p>You can extend SpEL by registering user defined functions that can be ca=
lled within the
expression string. The function is registered through the <code class=3D"li=
teral">EvaluationContext</code>.</p>
<pre class=3D"programlisting">Method method =3D ...;

SimpleEvaluationContext context =3D SimpleEvaluationContext.create();
context.setVariable(<span class=3D"hl-string">"myFunction"</span>, method);=
</pre>
<p>For example, given a utility method to reverse a string is shown below:<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">abstract</span> <span class=3D"hl-keyword">class</sp=
an> StringUtils {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> String reverseString(String input) {
        StringBuilder backwards =3D <span class=3D"hl-keyword">new</span> S=
tringBuilder();
        <span class=3D"hl-keyword">for</span> (<span class=3D"hl-keyword">i=
nt</span> i =3D <span class=3D"hl-number">0</span>; i &lt; input.length(); =
i++)
            backwards.append(input.charAt(input.length() - <span class=3D"h=
l-number">1</span> - i));
        }
        <span class=3D"hl-keyword">return</span> backwards.toString();
    }
}</pre>
<p>The above method can then be registered and used as follows:</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
SimpleEvaluationContext context =3D SimpleEvaluationContext.create();

context.setVariable(<span class=3D"hl-string">"reverseString"</span>,
    StringUtils.<span class=3D"hl-keyword">class</span>.getDeclaredMethod(<=
span class=3D"hl-string">"reverseString"</span>, String.<span class=3D"hl-k=
eyword">class</span>));

String helloWorldReversed =3D parser.parseExpression(
    <span class=3D"hl-string">"#reverseString('hello')"</span>).getValue(co=
ntext, String.<span class=3D"hl-keyword">class</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-bean-references" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expression=
s-bean-references"></a>10.4.13&nbsp;Bean references</h3></div></div></div>
<p>If the evaluation context has been configured with a bean resolver it is=
 possible to
lookup beans from an expression using the (@) symbol.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
StandardEvaluationContext context =3D StandardEvaluationContext.create();
context.setBeanResolver(<span class=3D"hl-keyword">new</span> MyBeanResolve=
r());

<span class=3D"hl-comment">// This will end up calling resolve(context,"foo=
") on MyBeanResolver during evaluation</span>
Object bean =3D parser.parseExpression(<span class=3D"hl-string">"@foo"</sp=
an>).getValue(context);</pre>
<p>To access a factory bean itself, the bean name should instead be prefixe=
d with a (&amp;) symbol.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();
StandardEvaluationContext context =3D StandardEvaluationContext.create();
context.setBeanResolver(<span class=3D"hl-keyword">new</span> MyBeanResolve=
r());

<span class=3D"hl-comment">// This will end up calling resolve(context,"&am=
p;foo") on MyBeanResolver during evaluation</span>
Object bean =3D parser.parseExpression(<span class=3D"hl-string">"&amp;foo"=
</span>).getValue(context);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-operator-ternary" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressio=
ns-operator-ternary"></a>10.4.14&nbsp;Ternary Operator (If-Then-Else)</h3><=
/div></div></div>
<p>You can use the ternary operator for performing if-then-else conditional=
 logic inside
the expression. A minimal example is:</p>
<pre class=3D"programlisting">String falseString =3D parser.parseExpression=
(
        <span class=3D"hl-string">"false ? 'trueExp' : 'falseExp'"</span>).=
getValue(String.<span class=3D"hl-keyword">class</span>);</pre>
<p>In this case, the boolean false results in returning the string value 'f=
alseExp'. A more
realistic example is shown below.</p>
<pre class=3D"programlisting">parser.parseExpression(<span class=3D"hl-stri=
ng">"Name"</span>).setValue(societyContext, <span class=3D"hl-string">"IEEE=
"</span>);
societyContext.setVariable(<span class=3D"hl-string">"queryName"</span>, <s=
pan class=3D"hl-string">"Nikola Tesla"</span>);

expression =3D <span class=3D"hl-string">"isMember(#queryName)? #queryName =
+ ' is a member of the ' "</span> +
        <span class=3D"hl-string">"+ Name + ' Society' : #queryName + ' is =
not a member of the ' + Name + ' Society'"</span>;

String queryResultString =3D parser.parseExpression(expression)
        .getValue(societyContext, String.<span class=3D"hl-keyword">class</=
span>);
<span class=3D"hl-comment">// queryResultString =3D "Nikola Tesla is a memb=
er of the IEEE Society"</span></pre>
<p>Also see the next section on the Elvis operator for an even shorter synt=
ax for the
ternary operator.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-operator-elvis" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions=
-operator-elvis"></a>10.4.15&nbsp;The Elvis Operator</h3></div></div></div>
<p>The Elvis operator is a shortening of the ternary operator syntax and is=
 used in the
<a class=3D"ulink" href=3D"http://www.groovy-lang.org/operators.html#_elvis=
_operator" target=3D"_top">Groovy</a> language.
With the ternary operator syntax you usually have to repeat a variable twic=
e, for
example:</p>
<pre class=3D"programlisting">String name =3D <span class=3D"hl-string">"El=
vis Presley"</span>;
String displayName =3D name !=3D null ? name : <span class=3D"hl-string">"U=
nknown"</span>;</pre>
<p>Instead you can use the Elvis operator, named for the resemblance to Elv=
is' hair style.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();

String name =3D parser.parseExpression(<span class=3D"hl-string">"name?:'Un=
known'"</span>).getValue(String.<span class=3D"hl-keyword">class</span>);

System.out.println(name); <span class=3D"hl-comment">// 'Unknown'</span></p=
re>
<p>Here is a more complex example.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();

Inventor tesla =3D <span class=3D"hl-keyword">new</span> Inventor(<span cla=
ss=3D"hl-string">"Nikola Tesla"</span>, <span class=3D"hl-string">"Serbian"=
</span>);
SimpleEvaluationContext context =3D SimpleEvaluationContext.create();

String name =3D parser.parseExpression(<span class=3D"hl-string">"Name?:'El=
vis Presley'"</span>).getValue(context, tesla, String.<span class=3D"hl-key=
word">class</span>);

System.out.println(name); <span class=3D"hl-comment">// Nikola Tesla</span>

tesla.setName(null);

name =3D parser.parseExpression(<span class=3D"hl-string">"Name?:'Elvis Pre=
sley'"</span>).getValue(context, tesla, String.<span class=3D"hl-keyword">c=
lass</span>);

System.out.println(name); <span class=3D"hl-comment">// Elvis Presley</span=
></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-operator-safe-navigation" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#e=
xpressions-operator-safe-navigation"></a>10.4.16&nbsp;Safe Navigation opera=
tor</h3></div></div></div>
<p>The Safe Navigation operator is used to avoid a <code class=3D"literal">=
NullPointerException</code> and comes from
the <a class=3D"ulink" href=3D"http://www.groovy-lang.org/operators.html#_s=
afe_navigation_operator" target=3D"_top">Groovy</a>
language. Typically when you have a reference to an object you might need t=
o verify that
it is not null before accessing methods or properties of the object. To avo=
id this, the
safe navigation operator will simply return null instead of throwing an exc=
eption.</p>
<pre class=3D"programlisting">ExpressionParser parser =3D <span class=3D"hl=
-keyword">new</span> SpelExpressionParser();

Inventor tesla =3D <span class=3D"hl-keyword">new</span> Inventor(<span cla=
ss=3D"hl-string">"Nikola Tesla"</span>, <span class=3D"hl-string">"Serbian"=
</span>);
tesla.setPlaceOfBirth(<span class=3D"hl-keyword">new</span> PlaceOfBirth(<s=
pan class=3D"hl-string">"Smiljan"</span>));

SimpleEvaluationContext context =3D SimpleEvaluationContext.create();

String city =3D parser.parseExpression(<span class=3D"hl-string">"PlaceOfBi=
rth?.City"</span>).getValue(context, tesla, String.<span class=3D"hl-keywor=
d">class</span>);
System.out.println(city); <span class=3D"hl-comment">// Smiljan</span>

tesla.setPlaceOfBirth(null);

city =3D parser.parseExpression(<span class=3D"hl-string">"PlaceOfBirth?.Ci=
ty"</span>).getValue(context, tesla, String.<span class=3D"hl-keyword">clas=
s</span>);

System.out.println(city); <span class=3D"hl-comment">// null - does not thr=
ow NullPointerException!!!</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The Elvis operator can be used to apply default values in expressions, e=
.g. in an
<code class=3D"literal">@Value</code> expression:</p>
<pre class=3D"programlisting">@Value(<span class=3D"hl-string">"#{systemPro=
perties['pop3.port'] ?: 25}"</span>)</pre>
<p>This will inject a system property <code class=3D"literal">pop3.port</co=
de> if it is defined or 25 if not.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-collection-selection" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expre=
ssions-collection-selection"></a>10.4.17&nbsp;Collection Selection</h3></di=
v></div></div>
<p>Selection is a powerful expression language feature that allows you to t=
ransform some
source collection into another by selecting from its entries.</p>
<p>Selection uses the syntax <code class=3D"literal">.?[selectionExpression=
]</code>. This will filter the collection and
return a new collection containing a subset of the original elements. For e=
xample,
selection would allow us to easily get a list of Serbian inventors:</p>
<pre class=3D"programlisting">List&lt;Inventor&gt; list =3D (List&lt;Invent=
or&gt;) parser.parseExpression(
        <span class=3D"hl-string">"Members.?[Nationality =3D=3D 'Serbian']"=
</span>).getValue(societyContext);</pre>
<p>Selection is possible upon both lists and maps. In the former case the s=
election
criteria is evaluated against each individual list element whilst against a=
 map the
selection criteria is evaluated against each map entry (objects of the Java=
 type
<code class=3D"literal">Map.Entry</code>). Map entries have their key and v=
alue accessible as properties for use in
the selection.</p>
<p>This expression will return a new map consisting of those elements of th=
e original map
where the entry value is less than 27.</p>
<pre class=3D"programlisting">Map newMap =3D parser.parseExpression(<span c=
lass=3D"hl-string">"map.?[value&lt;27]"</span>).getValue();</pre>
<p>In addition to returning all the selected elements, it is possible to re=
trieve just the
first or the last value. To obtain the first entry matching the selection t=
he syntax is
<code class=3D"literal">^[=85&#8203;]</code> whilst to obtain the last matc=
hing selection the syntax is <code class=3D"literal">$[=85&#8203;]</code>.<=
/p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-collection-projection" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expr=
essions-collection-projection"></a>10.4.18&nbsp;Collection Projection</h3><=
/div></div></div>
<p>Projection allows a collection to drive the evaluation of a sub-expressi=
on and the
result is a new collection. The syntax for projection is <code class=3D"lit=
eral">![projectionExpression]</code>. Most
easily understood by example, suppose we have a list of inventors but want =
the list of
cities where they were born. Effectively we want to evaluate 'placeOfBirth.=
city' for
every entry in the inventor list. Using projection:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// returns ['Smilj=
an', 'Idvor' ]</span>
List placesOfBirth =3D (List)parser.parseExpression(<span class=3D"hl-strin=
g">"Members.![placeOfBirth.city]"</span>);</pre>
<p>A map can also be used to drive projection and in this case the projecti=
on expression is
evaluated against each entry in the map (represented as a Java <code class=
=3D"literal">Map.Entry</code>). The result
of a projection across a map is a list consisting of the evaluation of the =
projection
expression against each map entry.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"expressions-templating" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#expressions-tem=
plating"></a>10.4.19&nbsp;Expression templating</h3></div></div></div>
<p>Expression templates allow a mixing of literal text with one or more eva=
luation blocks.
Each evaluation block is delimited with prefix and suffix characters that y=
ou can
define, a common choice is to use <code class=3D"literal">#{ }</code> as th=
e delimiters. For example,</p>
<pre class=3D"programlisting">String randomPhrase =3D parser.parseExpressio=
n(
        <span class=3D"hl-string">"random number is #{T(java.lang.Math).ran=
dom()}"</span>,
        <span class=3D"hl-keyword">new</span> TemplateParserContext()).getV=
alue(String.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// evaluates to "random number is 0.703818681831=
2008"</span></pre>
<p>The string is evaluated by concatenating the literal text 'random number=
 is ' with the
result of evaluating the expression inside the #{ } delimiter, in this case=
 the result
of calling that random() method. The second argument to the method <code cl=
ass=3D"literal">parseExpression()</code>
is of the type <code class=3D"literal">ParserContext</code>. The <code clas=
s=3D"literal">ParserContext</code> interface is used to influence how
the expression is parsed in order to support the expression templating func=
tionality.
The definition of <code class=3D"literal">TemplateParserContext</code> is s=
hown below.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> TemplateParserContext <span class=3D"hl=
-keyword">implements</span> ParserContext {

    <span class=3D"hl-keyword">public</span> String getExpressionPrefix() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-string">=
"#{"</span>;
    }

    <span class=3D"hl-keyword">public</span> String getExpressionSuffix() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-string">=
"}"</span>;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boo=
lean</span> isTemplate() {
        <span class=3D"hl-keyword">return</span> true;
    }
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"expressions-example-classes" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#expressions-example-classes"></a>10.5&nbsp;Classes used in the =
examples</h2></div></div></div>
<p>Inventor.java</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.spring.samples.spel.inventor;

<span class=3D"hl-keyword">import</span> java.util.Date;
<span class=3D"hl-keyword">import</span> java.util.GregorianCalendar;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> Inventor {

    <span class=3D"hl-keyword">private</span> String name;
    <span class=3D"hl-keyword">private</span> String nationality;
    <span class=3D"hl-keyword">private</span> String[] inventions;
    <span class=3D"hl-keyword">private</span> Date birthdate;
    <span class=3D"hl-keyword">private</span> PlaceOfBirth placeOfBirth;

    <span class=3D"hl-keyword">public</span> Inventor(String name, String n=
ationality) {
        GregorianCalendar c=3D <span class=3D"hl-keyword">new</span> Gregor=
ianCalendar();
        <span class=3D"hl-keyword">this</span>.name =3D name;
        <span class=3D"hl-keyword">this</span>.nationality =3D nationality;
        <span class=3D"hl-keyword">this</span>.birthdate =3D c.getTime();
    }

    <span class=3D"hl-keyword">public</span> Inventor(String name, Date bir=
thdate, String nationality) {
        <span class=3D"hl-keyword">this</span>.name =3D name;
        <span class=3D"hl-keyword">this</span>.nationality =3D nationality;
        <span class=3D"hl-keyword">this</span>.birthdate =3D birthdate;
    }

    <span class=3D"hl-keyword">public</span> Inventor() {
    }

    <span class=3D"hl-keyword">public</span> String getName() {
        <span class=3D"hl-keyword">return</span> name;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setName(String name) {
        <span class=3D"hl-keyword">this</span>.name =3D name;
    }

    <span class=3D"hl-keyword">public</span> String getNationality() {
        <span class=3D"hl-keyword">return</span> nationality;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setNationality(String nationality) {
        <span class=3D"hl-keyword">this</span>.nationality =3D nationality;
    }

    <span class=3D"hl-keyword">public</span> Date getBirthdate() {
        <span class=3D"hl-keyword">return</span> birthdate;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setBirthdate(Date birthdate) {
        <span class=3D"hl-keyword">this</span>.birthdate =3D birthdate;
    }

    <span class=3D"hl-keyword">public</span> PlaceOfBirth getPlaceOfBirth()=
 {
        <span class=3D"hl-keyword">return</span> placeOfBirth;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setPlaceOfBirth(PlaceOfBirth placeOfBirth) {
        <span class=3D"hl-keyword">this</span>.placeOfBirth =3D placeOfBirt=
h;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setInventions(String[] inventions) {
        <span class=3D"hl-keyword">this</span>.inventions =3D inventions;
    }

    <span class=3D"hl-keyword">public</span> String[] getInventions() {
        <span class=3D"hl-keyword">return</span> inventions;
    }
}</pre>
<p>PlaceOfBirth.java</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.spring.samples.spel.inventor;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> PlaceOfBirth {

    <span class=3D"hl-keyword">private</span> String city;
    <span class=3D"hl-keyword">private</span> String country;

    <span class=3D"hl-keyword">public</span> PlaceOfBirth(String city) {
        <span class=3D"hl-keyword">this</span>.city=3Dcity;
    }

    <span class=3D"hl-keyword">public</span> PlaceOfBirth(String city, Stri=
ng country) {
        <span class=3D"hl-keyword">this</span>(city);
        <span class=3D"hl-keyword">this</span>.country =3D country;
    }

    <span class=3D"hl-keyword">public</span> String getCity() {
        <span class=3D"hl-keyword">return</span> city;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setCity(String s) {
        <span class=3D"hl-keyword">this</span>.city =3D s;
    }

    <span class=3D"hl-keyword">public</span> String getCountry() {
        <span class=3D"hl-keyword">return</span> country;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setCountry(String country) {
        <span class=3D"hl-keyword">this</span>.country =3D country;
    }

}</pre>
<p>Society.java</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.spring.samples.spel.inventor;

<span class=3D"hl-keyword">import</span> java.util.*;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> Society {

    <span class=3D"hl-keyword">private</span> String name;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> String Advisors =3D <span class=3D"hl-string">"advisors"</span>;
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> String President =3D <span class=3D"hl-string">"president"</span=
>;

    <span class=3D"hl-keyword">private</span> List&lt;Inventor&gt; members =
=3D <span class=3D"hl-keyword">new</span> ArrayList&lt;Inventor&gt;();
    <span class=3D"hl-keyword">private</span> Map officers =3D <span class=
=3D"hl-keyword">new</span> HashMap();

    <span class=3D"hl-keyword">public</span> List getMembers() {
        <span class=3D"hl-keyword">return</span> members;
    }

    <span class=3D"hl-keyword">public</span> Map getOfficers() {
        <span class=3D"hl-keyword">return</span> officers;
    }

    <span class=3D"hl-keyword">public</span> String getName() {
        <span class=3D"hl-keyword">return</span> name;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setName(String name) {
        <span class=3D"hl-keyword">this</span>.name =3D name;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boo=
lean</span> isMember(String name) {
        <span class=3D"hl-keyword">for</span> (Inventor inventor : members)=
 {
            <span class=3D"hl-keyword">if</span> (inventor.getName().equals=
(name)) {
                <span class=3D"hl-keyword">return</span> true;
            }
        }
        <span class=3D"hl-keyword">return</span> false;
    }

}</pre>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"aop" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#aop"></a>11.&nbsp;Aspect Oriented =
Programming with Spring</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-introduction" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-introduction"></a>11.1&nbsp;Introduction</h2></div></div></div>
<p><span class=3D"emphasis"><em>Aspect-Oriented Programming</em></span> (AO=
P) complements Object-Oriented Programming (OOP) by
providing another way of thinking about program structure. The key unit of =
modularity in
OOP is the class, whereas in AOP the unit of modularity is the <span class=
=3D"emphasis"><em>aspect</em></span>. Aspects
enable the modularization of concerns such as transaction management that c=
ut across
multiple types and objects. (Such concerns are often termed <span class=3D"=
emphasis"><em>crosscutting</em></span> concerns in
AOP literature.)</p>
<p>One of the key components of Spring is the <span class=3D"emphasis"><em>=
AOP framework</em></span>. While the Spring IoC
container does not depend on AOP, meaning you do not need to use AOP if you=
 don=92t want
to, AOP complements Spring IoC to provide a very capable middleware solutio=
n.</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Spring 2.0+ AOP</b></p></div></div></div>
<p>Spring 2.0 introduced a simpler and more powerful way of writing custom =
aspects using
either a <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#aop-schema" title=3D"11.3&=
nbsp;Schema-based AOP support">schema-based approach</a> or the <a class=3D=
"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#aop-ataspectj" title=3D"11.2&nbsp;@AspectJ sup=
port">@AspectJ annotation
style</a>. Both of these styles offer fully typed advice and use of the Asp=
ectJ pointcut
language, while still using Spring AOP for weaving.</p>
<p>The Spring 2.0+ schema- and @AspectJ-based AOP support is discussed in t=
his chapter.
The lower-level AOP support, as commonly exposed in Spring 1.2 applications=
, is
discussed in <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api" title=3D"12.&=
nbsp;Spring AOP APIs">the following chapter</a>.</p>
</div>
<p>AOP is used in the Spring Framework to=85&#8203;</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
=85&#8203; provide declarative enterprise services, especially as a replace=
ment for EJB
declarative services. The most important such service is
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-declarative" title=3D"1=
7.5&nbsp;Declarative transaction management"><span class=3D"emphasis"><em>d=
eclarative transaction management</em></span></a>.
</li><li class=3D"listitem">
=85&#8203; allow users to implement custom aspects, complementing their use=
 of OOP with AOP.
</li></ul></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you are interested only in generic declarative services or other pre-=
packaged
declarative middleware services such as pooling, you do not need to work di=
rectly with
Spring AOP, and can skip most of this chapter.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-introduction-defn" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-introduction=
-defn"></a>11.1.1&nbsp;AOP concepts</h3></div></div></div>
<p>Let us begin by defining some central AOP concepts and terminology. Thes=
e terms are not
Spring-specific=85&#8203; unfortunately, AOP terminology is not particularl=
y intuitive;
however, it would be even more confusing if Spring used its own terminology=
.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>Aspect</em></span>: a modularization of a conc=
ern that cuts across multiple classes.
Transaction management is a good example of a crosscutting concern in enter=
prise Java
applications. In Spring AOP, aspects are implemented using regular classes
(the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#aop-schema" title=3D"11.3&nbsp=
;Schema-based AOP support">schema-based approach</a>) or regular classes an=
notated with the
<code class=3D"literal">@Aspect</code> annotation (the <a class=3D"link" hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#aop-ataspectj" title=3D"11.2&nbsp;@AspectJ support"><co=
de class=3D"literal">@AspectJ</code> style</a>).
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Join point</em></span>: a point during the exe=
cution of a program, such as the execution of a
method or the handling of an exception. In Spring AOP, a join point <span c=
lass=3D"emphasis"><em>always</em></span>
represents a method execution.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Advice</em></span>: action taken by an aspect =
at a particular join point. Different types of
advice include "around", "before" and "after" advice. (Advice types are dis=
cussed
below.) Many AOP frameworks, including Spring, model an advice as an <span =
class=3D"emphasis"><em>interceptor</em></span>,
maintaining a chain of interceptors <span class=3D"emphasis"><em>around</em=
></span> the join point.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Pointcut</em></span>: a predicate that matches=
 join points. Advice is associated with a
pointcut expression and runs at any join point matched by the pointcut (for=
 example,
the execution of a method with a certain name). The concept of join points =
as matched
by pointcut expressions is central to AOP, and Spring uses the AspectJ poin=
tcut
expression language by default.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Introduction</em></span>: declaring additional=
 methods or fields on behalf of a type. Spring
AOP allows you to introduce new interfaces (and a corresponding implementat=
ion) to any
advised object. For example, you could use an introduction to make a bean i=
mplement an
<code class=3D"literal">IsModified</code> interface, to simplify caching. (=
An introduction is known as an
inter-type declaration in the AspectJ community.)
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Target object</em></span>: object being advise=
d by one or more aspects. Also referred to as
the <span class=3D"emphasis"><em>advised</em></span> object. Since Spring A=
OP is implemented using runtime proxies, this
object will always be a <span class=3D"emphasis"><em>proxied</em></span> ob=
ject.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>AOP proxy</em></span>: an object created by th=
e AOP framework in order to implement the aspect
contracts (advise method executions and so on). In the Spring Framework, an=
 AOP proxy
will be a JDK dynamic proxy or a CGLIB proxy.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Weaving</em></span>: linking aspects with othe=
r application types or objects to create an
advised object. This can be done at compile time (using the AspectJ compile=
r, for
example), load time, or at runtime. Spring AOP, like other pure Java AOP fr=
ameworks,
performs weaving at runtime.
</li></ul></div>
<p>Types of advice:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>Before advice</em></span>: Advice that execute=
s before a join point, but which does not have
the ability to prevent execution flow proceeding to the join point (unless =
it throws
an exception).
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>After returning advice</em></span>: Advice to =
be executed after a join point completes
normally: for example, if a method returns without throwing an exception.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>After throwing advice</em></span>: Advice to b=
e executed if a method exits by throwing an
exception.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>After (finally) advice</em></span>: Advice to =
be executed regardless of the means by which a
join point exits (normal or exceptional return).
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Around advice</em></span>: Advice that surroun=
ds a join point such as a method invocation.
This is the most powerful kind of advice. Around advice can perform custom =
behavior
before and after the method invocation. It is also responsible for choosing=
 whether to
proceed to the join point or to shortcut the advised method execution by re=
turning its
own return value or throwing an exception.
</li></ul></div>
<p>Around advice is the most general kind of advice. Since Spring AOP, like=
 AspectJ,
provides a full range of advice types, we recommend that you use the least =
powerful
advice type that can implement the required behavior. For example, if you n=
eed only to
update a cache with the return value of a method, you are better off implem=
enting an
after returning advice than an around advice, although an around advice can=
 accomplish
the same thing. Using the most specific advice type provides a simpler prog=
ramming model
with less potential for errors. For example, you do not need to invoke the =
<code class=3D"literal">proceed()</code>
method on the <code class=3D"literal">JoinPoint</code> used for around advi=
ce, and hence cannot fail to invoke it.</p>
<p>In Spring 2.0, all advice parameters are statically typed, so that you w=
ork with advice
parameters of the appropriate type (the type of the return value from a met=
hod execution
for example) rather than <code class=3D"literal">Object</code> arrays.</p>
<p>The concept of join points, matched by pointcuts, is the key to AOP whic=
h distinguishes
it from older technologies offering only interception. Pointcuts enable adv=
ice to be
targeted independently of the Object-Oriented hierarchy. For example, an ar=
ound advice
providing declarative transaction management can be applied to a set of met=
hods spanning
multiple objects (such as all business operations in the service layer).</p=
>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-introduction-spring-defn" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-intro=
duction-spring-defn"></a>11.1.2&nbsp;Spring AOP capabilities and goals</h3>=
</div></div></div>
<p>Spring AOP is implemented in pure Java. There is no need for a special c=
ompilation
process. Spring AOP does not need to control the class loader hierarchy, an=
d is thus
suitable for use in a Servlet container or application server.</p>
<p>Spring AOP currently supports only method execution join points (advisin=
g the execution
of methods on Spring beans). Field interception is not implemented, althoug=
h support for
field interception could be added without breaking the core Spring AOP APIs=
. If you need
to advise field access and update join points, consider a language such as =
AspectJ.</p>
<p>Spring AOP=92s approach to AOP differs from that of most other AOP frame=
works. The aim is
not to provide the most complete AOP implementation (although Spring AOP is=
 quite
capable); it is rather to provide a close integration between AOP implement=
ation and
Spring IoC to help solve common problems in enterprise applications.</p>
<p>Thus, for example, the Spring Framework=92s AOP functionality is normall=
y used in
conjunction with the Spring IoC container. Aspects are configured using nor=
mal bean
definition syntax (although this allows powerful "autoproxying" capabilitie=
s): this is a
crucial difference from other AOP implementations. There are some things yo=
u cannot do
easily or efficiently with Spring AOP, such as advise very fine-grained obj=
ects (such as
domain objects typically): AspectJ is the best choice in such cases. Howeve=
r, our
experience is that Spring AOP provides an excellent solution to most proble=
ms in
enterprise Java applications that are amenable to AOP.</p>
<p>Spring AOP will never strive to compete with AspectJ to provide a compre=
hensive AOP
solution. We believe that both proxy-based frameworks like Spring AOP and f=
ull-blown
frameworks such as AspectJ are valuable, and that they are complementary, r=
ather than in
competition. Spring seamlessly integrates Spring AOP and IoC with AspectJ, =
to enable
all uses of AOP to be catered for within a consistent Spring-based applicat=
ion
architecture. This integration does not affect the Spring AOP API or the AO=
P Alliance
API: Spring AOP remains backward-compatible. See <a class=3D"link" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#aop-api" title=3D"12.&nbsp;Spring AOP APIs">the following cha=
pter</a> for a
discussion of the Spring AOP APIs.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>One of the central tenets of the Spring Framework is that of <span class=
=3D"emphasis"><em>non-invasiveness</em></span>; this
is the idea that you should not be forced to introduce framework-specific c=
lasses and
interfaces into your business/domain model. However, in some places the Spr=
ing Framework
does give you the option to introduce Spring Framework-specific dependencie=
s into your
codebase: the rationale in giving you such options is because in certain sc=
enarios it
might be just plain easier to read or code some specific piece of functiona=
lity in such
a way. The Spring Framework (almost) always offers you the choice though: y=
ou have the
freedom to make an informed decision as to which option best suits your par=
ticular use
case or scenario.</p>
<p>One such choice that is relevant to this chapter is that of which AOP fr=
amework (and
which AOP style) to choose. You have the choice of AspectJ and/or Spring AO=
P, and you
also have the choice of either the @AspectJ annotation-style approach or th=
e Spring XML
configuration-style approach. The fact that this chapter chooses to introdu=
ce the
@AspectJ-style approach first should not be taken as an indication that the=
 Spring team
favors the @AspectJ annotation-style approach over the Spring XML configura=
tion-style.</p>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#aop-choosing" title=3D"11.4&=
nbsp;Choosing which AOP declaration style to use">Section&nbsp;11.4, =93Cho=
osing which AOP declaration style to use=94</a> for a more complete discuss=
ion of the whys and wherefores of each
style.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-introduction-proxies" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-introduct=
ion-proxies"></a>11.1.3&nbsp;AOP Proxies</h3></div></div></div>
<p>Spring AOP defaults to using standard JDK <span class=3D"emphasis"><em>d=
ynamic proxies</em></span> for AOP proxies. This
enables any interface (or set of interfaces) to be proxied.</p>
<p>Spring AOP can also use CGLIB proxies. This is necessary to proxy classe=
s rather than
interfaces. CGLIB is used by default if a business object does not implemen=
t an
interface. As it is good practice to program to interfaces rather than clas=
ses; business
classes normally will implement one or more business interfaces. It is poss=
ible to
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-proxying" title=3D"11.6&nbsp;Pr=
oxying mechanisms">force the use of CGLIB</a>, in those (hopefully rare) ca=
ses where you
need to advise a method that is not declared on an interface, or where you =
need to
pass a proxied object to a method as a concrete type.</p>
<p>It is important to grasp the fact that Spring AOP is <span class=3D"emph=
asis"><em>proxy-based</em></span>. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-understanding-aop-proxies" titl=
e=3D"11.6.1&nbsp;Understanding AOP proxies">Section&nbsp;11.6.1, =93Underst=
anding AOP proxies=94</a> for a thorough examination of exactly what this
implementation detail actually means.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-ataspectj" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ao=
p-ataspectj"></a>11.2&nbsp;@AspectJ support</h2></div></div></div>
<p>@AspectJ refers to a style of declaring aspects as regular Java classes =
annotated with
annotations. The @AspectJ style was introduced by the
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj" target=3D"_top"=
>AspectJ project</a> as part of the AspectJ 5 release. Spring
interprets the same annotations as AspectJ 5, using a library supplied by A=
spectJ
for pointcut parsing and matching. The AOP runtime is still pure Spring AOP=
 though, and
there is no dependency on the AspectJ compiler or weaver.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Using the AspectJ compiler and weaver enables use of the full AspectJ la=
nguage, and is
discussed in <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-using-aspectj" tit=
le=3D"11.8&nbsp;Using AspectJ with Spring applications">Section&nbsp;11.8, =
=93Using AspectJ with Spring applications=94</a>.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-aspectj-support" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aspectj-suppor=
t"></a>11.2.1&nbsp;Enabling @AspectJ Support</h3></div></div></div>
<p>To use @AspectJ aspects in a Spring configuration you need to enable Spr=
ing support for
configuring Spring AOP based on @AspectJ aspects, and <span class=3D"emphas=
is"><em>autoproxying</em></span> beans based on
whether or not they are advised by those aspects. By autoproxying we mean t=
hat if Spring
determines that a bean is advised by one or more aspects, it will automatic=
ally generate
a proxy for that bean to intercept method invocations and ensure that advic=
e is executed
as needed.</p>
<p>The @AspectJ support can be enabled with XML or Java style configuration=
. In either
case you will also need to ensure that AspectJ=92s <code class=3D"literal">=
aspectjweaver.jar</code> library is on the
classpath of your application (version 1.6.8 or later). This library is ava=
ilable in the
<code class=3D"literal">'lib'</code> directory of an AspectJ distribution o=
r via the Maven Central repository.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-enable-aspectj-java" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-enable-asp=
ectj-java"></a>Enabling @AspectJ Support with Java configuration</h4></div>=
</div></div>
<p>To enable @AspectJ support with Java <code class=3D"literal">@Configurat=
ion</code> add the <code class=3D"literal">@EnableAspectJAutoProxy</code>
annotation:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@EnableAspectJAutoP=
roxy</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-enable-aspectj-xml" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-enable-aspe=
ctj-xml"></a>Enabling @AspectJ Support with XML configuration</h4></div></d=
iv></div>
<p>To enable @AspectJ support with XML based configuration use the <code cl=
ass=3D"literal">aop:aspectj-autoproxy</code>
element:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspectj-autopr=
oxy/&gt;</span></pre>
<p>This assumes that you are using schema support as described in <a class=
=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#xsd-configuration" title=3D"41.&nbsp;XML Sc=
hema-based configuration">Chapter&nbsp;41, <i>XML Schema-based configuratio=
n</i></a>.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-aop" ti=
tle=3D"41.2.7&nbsp;the aop schema">Section&nbsp;41.2.7, =93the aop schema=
=94</a> for how to import the tags in the <code class=3D"literal">aop</code=
> namespace.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-at-aspectj" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-at-aspectj"></a>11.=
2.2&nbsp;Declaring an aspect</h3></div></div></div>
<p>With the @AspectJ support enabled, any bean defined in your application =
context with a
class that is an @AspectJ aspect (has the <code class=3D"literal">@Aspect</=
code> annotation) will be automatically
detected by Spring and used to configure Spring AOP. The following example =
shows the
minimal definition required for a not-very-useful aspect:</p>
<p>A regular bean definition in the application context, pointing to a bean=
 class that has
the <code class=3D"literal">@Aspect</code> annotation:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myAspect"</spa=
n> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"or=
g.xyz.NotVeryUsefulAspect"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- configure properties of aspect here =
as normal --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>And the <code class=3D"literal">NotVeryUsefulAspect</code> class definit=
ion, annotated with
<code class=3D"literal">org.aspectj.lang.annotation.Aspect</code> annotatio=
n;</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> org=
.xyz;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Aspect=
;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> NotVeryUsefulAspect {

}</pre>
<p>Aspects (classes annotated with <code class=3D"literal">@Aspect</code>) =
may have methods and fields just like any
other class. They may also contain pointcut, advice, and introduction (inte=
r-type)
declarations.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: Autodetecting aspects through component sc=
anning"><tbody><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=
=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/images/note.png"></td><th a=
lign=3D"left">Autodetecting aspects through component scanning</th></tr><tr=
><td align=3D"left" valign=3D"top">
<p>You may register aspect classes as regular beans in your Spring XML conf=
iguration, or
autodetect them through classpath scanning - just like any other Spring-man=
aged bean.
However, note that the <span class=3D"emphasis"><em>@Aspect</em></span> ann=
otation is <span class=3D"emphasis"><em>not</em></span> sufficient for auto=
detection in
the classpath: For that purpose, you need to add a separate <span class=3D"=
emphasis"><em>@Component</em></span> annotation
(or alternatively a custom stereotype annotation that qualifies, as per the=
 rules of
Spring=92s component scanner).</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: Advising aspects with other aspects?"><tbo=
dy><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><img =
alt=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spr=
ing-framework-reference/htmlsingle/images/note.png"></td><th align=3D"left"=
>Advising aspects with other aspects?</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>In Spring AOP, it is <span class=3D"emphasis"><em>not</em></span> possib=
le to have aspects themselves be the target of advice
from other aspects. The <span class=3D"emphasis"><em>@Aspect</em></span> an=
notation on a class marks it as an aspect, and
hence excludes it from auto-proxying.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-pointcuts" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts"></a>11.2.=
3&nbsp;Declaring a pointcut</h3></div></div></div>
<p>Recall that pointcuts determine join points of interest, and thus enable=
 us to control
when advice executes. <span class=3D"emphasis"><em>Spring AOP only supports=
 method execution join points for Spring
beans</em></span>, so you can think of a pointcut as matching the execution=
 of methods on Spring
beans. A pointcut declaration has two parts: a signature comprising a name =
and any
parameters, and a pointcut expression that determines <span class=3D"emphas=
is"><em>exactly</em></span> which method
executions we are interested in. In the @AspectJ annotation-style of AOP, a=
 pointcut
signature is provided by a regular method definition, and the pointcut expr=
ession is
indicated using the <code class=3D"literal">@Pointcut</code> annotation (th=
e method serving as the pointcut signature
<span class=3D"emphasis"><em>must</em></span> have a <code class=3D"literal=
">void</code> return type).</p>
<p>An example will help make this distinction between a pointcut signature =
and a pointcut
expression clear. The following example defines a pointcut named <code clas=
s=3D"literal">'anyOldTransfer'</code> that
will match the execution of any method named <code class=3D"literal">'trans=
fer'</code>:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Pointcut("execution(* transfer(..))")//</span></em> the pointcu=
t expression
<span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">void</=
span> anyOldTransfer() {}<span class=3D"hl-comment">// the pointcut signatu=
re</span></pre>
<p>The pointcut expression that forms the value of the <code class=3D"liter=
al">@Pointcut</code> annotation is a regular
AspectJ 5 pointcut expression. For a full discussion of AspectJ=92s pointcu=
t language, see
the <a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released=
/progguide/index.html" target=3D"_top">AspectJ
Programming Guide</a> (and for extensions, the
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released/adk=
15notebook/index.html" target=3D"_top">AspectJ 5
Developers Notebook</a>) or one of the books on AspectJ such as "Eclipse As=
pectJ" by Colyer
et. al. or "AspectJ in Action" by Ramnivas Laddad.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-pointcuts-designators" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcut=
s-designators"></a>Supported Pointcut Designators</h4></div></div></div>
<p>Spring AOP supports the following AspectJ pointcut designators (PCD) for=
 use in pointcut
expressions:</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Other pointcut types</b></p></div></div></div>
<p>The full AspectJ pointcut language supports additional pointcut designat=
ors that are not
supported in Spring. These are: <code class=3D"literal">call, get, set, pre=
initialization,
staticinitialization, initialization, handler, adviceexecution, withincode,=
 cflow,
cflowbelow, if, @this</code>, and <code class=3D"literal">@withincode</code=
>. Use of these pointcut designators in pointcut
expressions interpreted by Spring AOP will result in an <code class=3D"lite=
ral">IllegalArgumentException</code> being
thrown.</p>
<p>The set of pointcut designators supported by Spring AOP may be extended =
in future
releases to support more of the AspectJ pointcut designators.</p>
</div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>execution</em></span> - for matching method ex=
ecution join points, this is the primary
pointcut designator you will use when working with Spring AOP
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>within</em></span> - limits matching to join p=
oints within certain types (simply the execution
of a method declared within a matching type when using Spring AOP)
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>this</em></span> - limits matching to join poi=
nts (the execution of methods when using Spring
AOP) where the bean reference (Spring AOP proxy) is an instance of the give=
n type
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>target</em></span> - limits matching to join p=
oints (the execution of methods when using
Spring AOP) where the target object (application object being proxied) is a=
n instance
of the given type
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>args</em></span> - limits matching to join poi=
nts (the execution of methods when using Spring
AOP) where the arguments are instances of the given types
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>@target</em></span> - limits matching to join =
points (the execution of methods when using
Spring AOP) where the class of the executing object has an annotation of th=
e given type
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>@args</em></span> - limits matching to join po=
ints (the execution of methods when using Spring
AOP) where the runtime type of the actual arguments passed have annotations=
 of the
given type(s)
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>@within</em></span> - limits matching to join =
points within types that have the given
annotation (the execution of methods declared in types with the given annot=
ation when
using Spring AOP)
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>@annotation</em></span> - limits matching to j=
oin points where the subject of the join point
(method being executed in Spring AOP) has the given annotation
</li></ul></div>
<p>Because Spring AOP limits matching to only method execution join points,=
 the discussion
of the pointcut designators above gives a narrower definition than you will=
 find in the
AspectJ programming guide. In addition, AspectJ itself has type-based seman=
tics and at
an execution join point both <code class=3D"literal">this</code> and <code =
class=3D"literal">target</code> refer to the same object - the
object executing the method. Spring AOP is a proxy-based system and differe=
ntiates
between the proxy object itself (bound to <code class=3D"literal">this</cod=
e>) and the target object behind the
proxy (bound to <code class=3D"literal">target</code>).</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Due to the proxy-based nature of Spring=92s AOP framework, calls within =
the target object
are by definition <span class=3D"emphasis"><em>not</em></span> intercepted.=
 For JDK proxies, only public interface method
calls on the proxy can be intercepted. With CGLIB, public and protected met=
hod calls on
the proxy will be intercepted, and even package-visible methods if necessar=
y. However,
common interactions through proxies should always be designed through publi=
c signatures.</p>
<p>Note that pointcut definitions are generally matched against any interce=
pted method.
If a pointcut is strictly meant to be public-only, even in a CGLIB proxy sc=
enario with
potential non-public interactions through proxies, it needs to be defined a=
ccordingly.</p>
<p>If your interception needs include method calls or even constructors wit=
hin the target
class, consider the use of Spring-driven <a class=3D"link" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#aop-aj-ltw" title=3D"11.8.4&nbsp;Load-time weaving with AspectJ in th=
e Spring Framework">native AspectJ weaving</a> instead
of Spring=92s proxy-based AOP framework. This constitutes a different mode =
of AOP usage
with different characteristics, so be sure to make yourself familiar with w=
eaving first
before making a decision.</p>
</td></tr></tbody></table></div>
<p>Spring AOP also supports an additional PCD named <code class=3D"literal"=
>bean</code>. This PCD allows you to limit
the matching of join points to a particular named Spring bean, or to a set =
of named
Spring beans (when using wildcards). The <code class=3D"literal">bean</code=
> PCD has the following form:</p>
<pre class=3D"programlisting">bean(idOrNameOfBean)</pre>
<p>The <code class=3D"literal">idOrNameOfBean</code> token can be the name =
of any Spring bean: limited wildcard
support using the <code class=3D"literal">*</code> character is provided, s=
o if you establish some naming
conventions for your Spring beans you can quite easily write a <code class=
=3D"literal">bean</code> PCD expression
to pick them out. As is the case with other pointcut designators, the <code=
 class=3D"literal">bean</code> PCD can
be &amp;&amp;'ed, ||'ed, and ! (negated) too.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Please note that the <code class=3D"literal">bean</code> PCD is <span cl=
ass=3D"emphasis"><em>only</em></span> supported in Spring AOP - and <span c=
lass=3D"emphasis"><em>not</em></span> in
native AspectJ weaving. It is a Spring-specific extension to the standard P=
CDs that
AspectJ defines and therefore not available for aspects declared in the <co=
de class=3D"literal">@Aspect</code> model.</p>
<p>The <code class=3D"literal">bean</code> PCD operates at the <span class=
=3D"emphasis"><em>instance</em></span> level (building on the Spring bean n=
ame
concept) rather than at the type level only (which is what weaving-based AO=
P is limited
to). Instance-based pointcut designators are a special capability of Spring=
=92s
proxy-based AOP framework and its close integration with the Spring bean fa=
ctory, where
it is natural and straightforward to identify specific beans by name.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-pointcuts-combining" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts-=
combining"></a>Combining pointcut expressions</h4></div></div></div>
<p>Pointcut expressions can be combined using '&amp;&amp;', '||' and '!'. I=
t is also possible to
refer to pointcut expressions by name. The following example shows three po=
intcut
expressions: <code class=3D"literal">anyPublicOperation</code> (which match=
es if a method execution join point
represents the execution of any public method); <code class=3D"literal">inT=
rading</code> (which matches if a method
execution is in the trading module), and <code class=3D"literal">tradingOpe=
ration</code> (which matches if a method
execution represents any public method in the trading module).</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Pointcut("execution(public * *(..))")</span></em>
<span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">void</=
span> anyPublicOperation() {}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("within(c=
om.xyz.someapp.trading..*)")</span></em>
<span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">void</=
span> inTrading() {}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("anyPubli=
cOperation() &amp;&amp; inTrading()")</span></em>
<span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">void</=
span> tradingOperation() {}</pre>
<p>It is a best practice to build more complex pointcut expressions out of =
smaller named
components as shown above. When referring to pointcuts by name, normal Java=
 visibility
rules apply (you can see private pointcuts in the same type, protected poin=
tcuts in the
hierarchy, public pointcuts anywhere and so on). Visibility does not affect=
 pointcut
<span class=3D"emphasis"><em>matching</em></span>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-common-pointcuts" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-common-pointc=
uts"></a>Sharing common pointcut definitions</h4></div></div></div>
<p>When working with enterprise applications, you often want to refer to mo=
dules of the
application and particular sets of operations from within several aspects. =
We recommend
defining a "SystemArchitecture" aspect that captures common pointcut expres=
sions for
this purpose. A typical such aspect would look as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.xyz.someapp;

<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Aspect=
;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Pointc=
ut;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SystemArchitecture {

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * A join point is in the web layer if the method is defined
     * in a type in the com.xyz.someapp.web package or any sub-package
     * under that.
     */</strong>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("with=
in(com.xyz.someapp.web..*)")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> inWebLayer() {}

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * A join point is in the service layer if the method is defined
     * in a type in the com.xyz.someapp.service package or any sub-package
     * under that.
     */</strong>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("with=
in(com.xyz.someapp.service..*)")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> inServiceLayer() {}

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * A join point is in the data access layer if the method is defined
     * in a type in the com.xyz.someapp.dao package or any sub-package
     * under that.
     */</strong>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("with=
in(com.xyz.someapp.dao..*)")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> inDataAccessLayer() {}

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * A business service is the execution of any method defined on a servi=
ce
     * interface. This definition assumes that interfaces are placed in the
     * "service" package, and that implementation types are in sub-packages=
.
     *
     * If you group service interfaces by functional area (for example,
     * in packages com.xyz.someapp.abc.service and com.xyz.someapp.def.serv=
ice) then
     * the pointcut expression "execution(* com.xyz.someapp..service.*.*(..=
))"
     * could be used instead.
     *
     * Alternatively, you can write the expression using the 'bean'
     * PCD, like so "bean(*Service)". (This assumes that you have
     * named your Spring service beans in a consistent fashion.)
     */</strong>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("exec=
ution(* com.xyz.someapp..service.*.*(..))")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> businessService() {}

    <strong class=3D"hl-tag" style=3D"color: blue">/**
     * A data access operation is the execution of any method defined on a
     * dao interface. This definition assumes that interfaces are placed in=
 the
     * "dao" package, and that implementation types are in sub-packages.
     */</strong>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("exec=
ution(* com.xyz.someapp.dao.*.*(..))")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> dataAccessOperation() {}

}</pre>
<p>The pointcuts defined in such an aspect can be referred to anywhere that=
 you need a
pointcut expression. For example, to make the service layer transactional, =
you could
write:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;aop:advisor</span>
        <span class=3D"hl-attribute">pointcut</span>=3D<span class=3D"hl-va=
lue">"com.xyz.someapp.SystemArchitecture.businessService()"</span>
        <span class=3D"hl-attribute">advice-ref</span>=3D<span class=3D"hl-=
value">"tx-advice"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/aop:config&gt;</span>

<span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute">id=
</span>=3D<span class=3D"hl-value">"tx-advice"</span><span class=3D"hl-tag"=
>&gt;</span>
    <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
        <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attri=
bute">name</span>=3D<span class=3D"hl-value">"*"</span> <span class=3D"hl-a=
ttribute">propagation</span>=3D<span class=3D"hl-value">"REQUIRED"</span><s=
pan class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
<span class=3D"hl-tag">&lt;/tx:advice&gt;</span></pre>
<p>The <code class=3D"literal">&lt;aop:config&gt;</code> and <code class=3D=
"literal">&lt;aop:advisor&gt;</code> elements are discussed in <a class=3D"=
xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fram=
ework-reference/htmlsingle/#aop-schema" title=3D"11.3&nbsp;Schema-based AOP=
 support">Section&nbsp;11.3, =93Schema-based AOP support=94</a>. The
transaction elements are discussed in <a class=3D"xref" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#transaction" title=3D"17.&nbsp;Transaction Management">Chapter&nbsp;17, =
<i>Transaction Management</i></a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-pointcuts-examples" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pointcuts-e=
xamples"></a>Examples</h4></div></div></div>
<p>Spring AOP users are likely to use the <code class=3D"literal">execution=
</code> pointcut designator the most often.
The format of an execution expression is:</p>
<pre class=3D"programlisting">execution(modifiers-pattern? ret-type-pattern=
 declaring-type-pattern?name-pattern(param-pattern)
            <span class=3D"hl-keyword">throws</span>-pattern?)</pre>
<p>All parts except the returning type pattern (ret-type-pattern in the sni=
ppet above),
name pattern, and parameters pattern are optional. The returning type patte=
rn determines
what the return type of the method must be in order for a join point to be =
matched. Most
frequently you will use <code class=3D"literal">*</code> as the returning t=
ype pattern, which matches any return
type. A fully-qualified type name will match only when the method returns t=
he given
type. The name pattern matches the method name. You can use the <code class=
=3D"literal">*</code> wildcard as all or
part of a name pattern. If specifying a declaring type pattern
then include a trailing <code class=3D"literal">.</code> to join it to the =
name pattern component.
The parameters pattern is slightly more complex: <code class=3D"literal">()=
</code> matches a
method that takes no parameters, whereas <code class=3D"literal">(..)</code=
> matches any number of parameters (zero
or more). The pattern <code class=3D"literal">(*)</code> matches a method t=
aking one parameter of any type,
<code class=3D"literal">(*,String)</code> matches a method taking two param=
eters, the first can be of any type, the
second must be a String. Consult the
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released/pro=
gguide/semantics-pointcuts.html" target=3D"_top">Language
Semantics</a> section of the AspectJ Programming Guide for more information=
.</p>
<p>Some examples of common pointcut expressions are given below.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the execution of any public method:
</li></ul></div>
<pre class=3D"programlisting">execution(<span class=3D"hl-keyword">public</=
span> * *(..))</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the execution of any method with a name beginning with "set":
</li></ul></div>
<pre class=3D"programlisting">execution(* set*(..))</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the execution of any method defined by the <code class=3D"literal">AccountS=
ervice</code> interface:
</li></ul></div>
<pre class=3D"programlisting">execution(* com.xyz.service.AccountService.*(=
..))</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the execution of any method defined in the service package:
</li></ul></div>
<pre class=3D"programlisting">execution(* com.xyz.service.*.*(..))</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the execution of any method defined in the service package or a sub-package=
:
</li></ul></div>
<pre class=3D"programlisting">execution(* com.xyz.service..*.*(..))</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) within the service pac=
kage:
</li></ul></div>
<pre class=3D"programlisting">within(com.xyz.service.*)</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) within the service pac=
kage or a
sub-package:
</li></ul></div>
<pre class=3D"programlisting">within(com.xyz.service..*)</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) where the proxy implem=
ents the
<code class=3D"literal">AccountService</code> interface:
</li></ul></div>
<pre class=3D"programlisting"><span class=3D"hl-keyword">this</span>(com.xy=
z.service.AccountService)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'this' is more commonly used in a binding form :- see the following sect=
ion on advice
for how to make the proxy object available in the advice body.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) where the target objec=
t
implements the <code class=3D"literal">AccountService</code> interface:
</li></ul></div>
<pre class=3D"programlisting">target(com.xyz.service.AccountService)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'target' is more commonly used in a binding form :- see the following se=
ction on advice
for how to make the target object available in the advice body.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) which takes a single p=
arameter,
and where the argument passed at runtime is <code class=3D"literal">Seriali=
zable</code>:
</li></ul></div>
<pre class=3D"programlisting">args(java.io.Serializable)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'args' is more commonly used in a binding form :- see the following sect=
ion on advice
for how to make the method arguments available in the advice body.</p>
</td></tr></tbody></table></div>
<p>Note that the pointcut given in this example is different to <code class=
=3D"literal">execution(*
*(java.io.Serializable))</code>: the args version matches if the argument p=
assed at runtime is
Serializable, the execution version matches if the method signature declare=
s a single
parameter of type <code class=3D"literal">Serializable</code>.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) where the target objec=
t has an
<code class=3D"literal">@Transactional</code> annotation:
</li></ul></div>
<pre class=3D"programlisting">@target(org.springframework.transaction.annot=
ation.Transactional)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'@target' can also be used in a binding form :- see the following sectio=
n on advice for
how to make the annotation object available in the advice body.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) where the declared typ=
e of the
target object has an <code class=3D"literal">@Transactional</code> annotati=
on:
</li></ul></div>
<pre class=3D"programlisting">@within(org.springframework.transaction.annot=
ation.Transactional)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'@within' can also be used in a binding form :- see the following sectio=
n on advice for
how to make the annotation object available in the advice body.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) where the executing me=
thod has an
<code class=3D"literal">@Transactional</code> annotation:
</li></ul></div>
<pre class=3D"programlisting">@annotation(org.springframework.transaction.a=
nnotation.Transactional)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'@annotation' can also be used in a binding form :- see the following se=
ction on advice
for how to make the annotation object available in the advice body.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) which takes a single p=
arameter,
and where the runtime type of the argument passed has the <code class=3D"li=
teral">@Classified</code> annotation:
</li></ul></div>
<pre class=3D"programlisting">@args(com.xyz.security.Classified)</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>'@args' can also be used in a binding form :- see the following section =
on advice for
how to make the annotation object(s) available in the advice body.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) on a Spring bean named
<code class=3D"literal">tradeService</code>:
</li></ul></div>
<pre class=3D"programlisting">bean(tradeService)</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
any join point (method execution only in Spring AOP) on Spring beans having=
 names that
match the wildcard expression <code class=3D"literal">*Service</code>:
</li></ul></div>
<pre class=3D"programlisting">bean(*Service)</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"writing-good-pointcuts" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#writing-good-po=
intcuts"></a>Writing good pointcuts</h4></div></div></div>
<p>During compilation, AspectJ processes pointcuts in order to try and opti=
mize matching
performance. Examining code and determining if each join point matches (sta=
tically or
dynamically) a given pointcut is a costly process. (A dynamic match means t=
he match
cannot be fully determined from static analysis and a test will be placed i=
n the code to
determine if there is an actual match when the code is running). On first e=
ncountering a
pointcut declaration, AspectJ will rewrite it into an optimal form for the =
matching
process. What does this mean? Basically pointcuts are rewritten in DNF (Dis=
junctive
Normal Form) and the components of the pointcut are sorted such that those =
components
that are cheaper to evaluate are checked first. This means you do not have =
to worry
about understanding the performance of various pointcut designators and may=
 supply them
in any order in a pointcut declaration.</p>
<p>However, AspectJ can only work with what it is told, and for optimal per=
formance of
matching you should think about what they are trying to achieve and narrow =
the search
space for matches as much as possible in the definition. The existing desig=
nators
naturally fall into one of three groups: kinded, scoping and context:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Kinded designators are those which select a particular kind of join point. =
For
example: execution, get, set, call, handler
</li><li class=3D"listitem">
Scoping designators are those which select a group of join points of intere=
st (of
probably many kinds). For example: within, withincode
</li><li class=3D"listitem">
Contextual designators are those that match (and optionally bind) based on =
context.
For example: this, target, @annotation
</li></ul></div>
<p>A well written pointcut should try and include at least the first two ty=
pes (kinded and
scoping), whilst the contextual designators may be included if wishing to m=
atch based on
join point context, or bind that context for use in the advice. Supplying e=
ither just a
kinded designator or just a contextual designator will work but could affec=
t weaving
performance (time and memory used) due to all the extra processing and anal=
ysis. Scoping
designators are very fast to match and their usage means AspectJ can very q=
uickly
dismiss groups of join points that should not be further processed - that i=
s why a good
pointcut should always include one if possible.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-advice" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#aop-advice"></a>11.2.4&nbsp=
;Declaring advice</h3></div></div></div>
<p>Advice is associated with a pointcut expression, and runs before, after,=
 or around
method executions matched by the pointcut. The pointcut expression may be e=
ither a
simple reference to a named pointcut, or a pointcut expression declared in =
place.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-advice-before" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-before"><=
/a>Before advice</h4></div></div></div>
<p>Before advice is declared in an aspect using the <code class=3D"literal"=
>@Before</code> annotation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Before=
;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BeforeExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before("com.xy=
z.myapp.SystemArchitecture.dataAccessOperation()")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doAccessCheck() {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
<p>If using an in-place pointcut expression we could rewrite the above exam=
ple as:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Before=
;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BeforeExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before("execut=
ion(* com.xyz.myapp.dao.*.*(..))")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doAccessCheck() {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-advice-after-returning" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-=
after-returning"></a>After returning advice</h4></div></div></div>
<p>After returning advice runs when a matched method execution returns norm=
ally. It is
declared using the <code class=3D"literal">@AfterReturning</code> annotatio=
n:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.AfterR=
eturning;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AfterReturningExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AfterReturning=
("com.xyz.myapp.SystemArchitecture.dataAccessOperation()")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doAccessCheck() {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Note: it is of course possible to have multiple advice declarations, and=
 other members
as well, all inside the same aspect. We=92re just showing a single advice d=
eclaration in
these examples to focus on the issue under discussion at the time.</p>
</td></tr></tbody></table></div>
<p>Sometimes you need access in the advice body to the actual value that wa=
s returned. You
can use the form of <code class=3D"literal">@AfterReturning</code> that bin=
ds the return value for this:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.AfterR=
eturning;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AfterReturningExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AfterReturning=
(
        pointcut=3D"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"=
,
        returning=3D"retVal")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doAccessCheck(Object retVal) {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
<p>The name used in the <code class=3D"literal">returning</code> attribute =
must correspond to the name of a parameter in
the advice method. When a method execution returns, the return value will b=
e passed to
the advice method as the corresponding argument value. A <code class=3D"lit=
eral">returning</code> clause also
restricts matching to only those method executions that return a value of t=
he specified
type ( <code class=3D"literal">Object</code> in this case, which will match=
 any return value).</p>
<p>Please note that it is <span class=3D"emphasis"><em>not</em></span> poss=
ible to return a totally different reference when
using after-returning advice.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-advice-after-throwing" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-a=
fter-throwing"></a>After throwing advice</h4></div></div></div>
<p>After throwing advice runs when a matched method execution exits by thro=
wing an
exception. It is declared using the <code class=3D"literal">@AfterThrowing<=
/code> annotation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.AfterT=
hrowing;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AfterThrowingExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AfterThrowing(=
"com.xyz.myapp.SystemArchitecture.dataAccessOperation()")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doRecoveryActions() {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
<p>Often you want the advice to run only when exceptions of a given type ar=
e thrown, and
you also often need access to the thrown exception in the advice body. Use =
the
<code class=3D"literal">throwing</code> attribute to both restrict matching=
 (if desired, use <code class=3D"literal">Throwable</code> as the
exception type otherwise) and bind the thrown exception to an advice parame=
ter.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.AfterT=
hrowing;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AfterThrowingExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AfterThrowing(
        pointcut=3D"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"=
,
        throwing=3D"ex")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doRecoveryActions(DataAccessException ex) {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
<p>The name used in the <code class=3D"literal">throwing</code> attribute m=
ust correspond to the name of a parameter in
the advice method. When a method execution exits by throwing an exception, =
the exception
will be passed to the advice method as the corresponding argument value. A =
<code class=3D"literal">throwing</code>
clause also restricts matching to only those method executions that throw a=
n exception
of the specified type ( <code class=3D"literal">DataAccessException</code> =
in this case).</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-advice-after-finally" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-advice-af=
ter-finally"></a>After (finally) advice</h4></div></div></div>
<p>After (finally) advice runs however a matched method execution exits. It=
 is declared
using the <code class=3D"literal">@After</code> annotation. After advice mu=
st be prepared to handle both normal and
exception return conditions. It is typically used for releasing resources, =
etc.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.After;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AfterFinallyExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@After("com.xyz=
.myapp.SystemArchitecture.dataAccessOperation()")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doReleaseLock() {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-ataspectj-around-advice" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspe=
ctj-around-advice"></a>Around advice</h4></div></div></div>

<p>The final kind of advice is around advice. Around advice runs "around" a=
 matched method
execution. It has the opportunity to do work both before and after the meth=
od executes,
and to determine when, how, and even if, the method actually gets to execut=
e at all.
Around advice is often used if you need to share state before and after a m=
ethod
execution in a thread-safe manner (starting and stopping a timer for exampl=
e). Always
use the least powerful form of advice that meets your requirements (i.e. do=
n=92t use
around advice if simple before advice would do).</p>
<p>Around advice is declared using the <code class=3D"literal">@Around</cod=
e> annotation. The first parameter of the
advice method must be of type <code class=3D"literal">ProceedingJoinPoint</=
code>. Within the body of the advice,
calling <code class=3D"literal">proceed()</code> on the <code class=3D"lite=
ral">ProceedingJoinPoint</code> causes the underlying method to
execute. The <code class=3D"literal">proceed</code> method may also be call=
ed passing in an <code class=3D"literal">Object[]</code> - the values
in the array will be used as the arguments to the method execution when it =
proceeds.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The behavior of proceed when called with an Object[] is a little differe=
nt than the
behavior of proceed for around advice compiled by the AspectJ compiler. For=
 around
advice written using the traditional AspectJ language, the number of argume=
nts passed to
proceed must match the number of arguments passed to the around advice (not=
 the number
of arguments taken by the underlying join point), and the value passed to p=
roceed in a
given argument position supplants the original value at the join point for =
the entity
the value was bound to (Don=92t worry if this doesn=92t make sense right no=
w!). The approach
taken by Spring is simpler and a better match to its proxy-based, execution=
 only
semantics. You only need to be aware of this difference if you are compilin=
g @AspectJ
aspects written for Spring and using proceed with arguments with the Aspect=
J compiler
and weaver. There is a way to write such aspects that is 100% compatible ac=
ross both
Spring AOP and AspectJ, and this is discussed in the following section on a=
dvice
parameters.</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
aspectj.lang.annotation.Aspect;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Around=
;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.ProceedingJoinPoi=
nt;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AroundExample {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Around("com.xy=
z.myapp.SystemArchitecture.businessService()")</span></em>
    <span class=3D"hl-keyword">public</span> Object doBasicProfiling(Procee=
dingJoinPoint pjp) <span class=3D"hl-keyword">throws</span> Throwable {
        <span class=3D"hl-comment">// start stopwatch</span>
        Object retVal =3D pjp.proceed();
        <span class=3D"hl-comment">// stop stopwatch</span>
        <span class=3D"hl-keyword">return</span> retVal;
    }

}</pre>
<p>The value returned by the around advice will be the return value seen by=
 the caller of
the method. A simple caching aspect for example could return a value from a=
 cache if it
has one, and invoke proceed() if it does not. Note that proceed may be invo=
ked once,
many times, or not at all within the body of the around advice, all of thes=
e are quite
legal.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-params" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspe=
ctj-advice-params"></a>Advice parameters</h4></div></div></div>
<p>Spring offers fully typed advice - meaning that you declare the paramete=
rs you need
in the advice signature (as we saw for the returning and throwing examples =
above) rather
than work with <code class=3D"literal">Object[]</code> arrays all the time.=
 We=92ll see how to make argument and other
contextual values available to the advice body in a moment. First let=92s t=
ake a look at
how to write generic advice that can find out about the method the advice i=
s currently
advising.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-params-the-joinpoint" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#aop-ataspectj-advice-params-the-joinpoint"></a>Access to the current Jo=
inPoint</h5></div></div></div>
<p>Any advice method may declare as its first parameter, a parameter of typ=
e
<code class=3D"literal">org.aspectj.lang.JoinPoint</code> (please note that=
 around advice is <span class=3D"emphasis"><em>required</em></span> to decl=
are
a first parameter of type <code class=3D"literal">ProceedingJoinPoint</code=
>, which is a subclass of <code class=3D"literal">JoinPoint</code>. The
<code class=3D"literal">JoinPoint</code> interface provides a number of use=
ful methods such as <code class=3D"literal">getArgs()</code> (returns
the method arguments), <code class=3D"literal">getThis()</code> (returns th=
e proxy object), <code class=3D"literal">getTarget()</code> (returns
the target object), <code class=3D"literal">getSignature()</code> (returns =
a description of the method that is being
advised) and <code class=3D"literal">toString()</code> (prints a useful des=
cription of the method being advised).
Please do consult the javadocs for full details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-params-passing" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ao=
p-ataspectj-advice-params-passing"></a>Passing parameters to advice</h5></d=
iv></div></div>
<p>We=92ve already seen how to bind the returned value or exception value (=
using after
returning and after throwing advice). To make argument values available to =
the advice
body, you can use the binding form of <code class=3D"literal">args</code>. =
If a parameter name is used in place of a
type name in an args expression, then the value of the corresponding argume=
nt will be
passed as the parameter value when the advice is invoked. An example should=
 make this
clearer. Suppose you want to advise the execution of dao operations that ta=
ke an Account
object as the first parameter, and you need access to the account in the ad=
vice body.
You could write the following:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before("com.xyz.myapp.SystemArchitecture.dataAccessOperation() =
&amp;&amp; args(account,..)")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> validateAccount(Account account) {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The <code class=3D"literal">args(account,..)</code> part of the pointcut=
 expression serves two purposes: firstly, it
restricts matching to only those method executions where the method takes a=
t least one
parameter, and the argument passed to that parameter is an instance of <cod=
e class=3D"literal">Account</code>;
secondly, it makes the actual <code class=3D"literal">Account</code> object=
 available to the advice via the <code class=3D"literal">account</code>
parameter.</p>
<p>Another way of writing this is to declare a pointcut that "provides" the=
 <code class=3D"literal">Account</code>
object value when it matches a join point, and then just refer to the named=
 pointcut
from the advice. This would look as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Pointcut("com.xyz.myapp.SystemArchitecture.dataAccessOperation(=
) &amp;&amp; args(account,..)")</span></em>
<span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">void</=
span> accountDataAccessOperation(Account account) {}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Before("accountDat=
aAccessOperation(account)")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> validateAccount(Account account) {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The interested reader is once more referred to the AspectJ programming g=
uide for more
details.</p>
<p>The proxy object ( <code class=3D"literal">this</code>), target object (=
 <code class=3D"literal">target</code>), and annotations ( <code class=3D"l=
iteral">@within,
@target, @annotation, @args</code>) can all be bound in a similar fashion. =
The following
example shows how you could match the execution of methods annotated with a=
n
<code class=3D"literal">@Auditable</code> annotation, and extract the audit=
 code.</p>
<p>First the definition of the <code class=3D"literal">@Auditable</code> an=
notation:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Retention(RetentionPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Target(ElementType=
.METHOD)</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Auditable {
    AuditCode value();
}</pre>
<p>And then the advice that matches the execution of <code class=3D"literal=
">@Auditable</code> methods:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before("com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @ann=
otation(auditable)")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> audit(Auditable auditable) {
    AuditCode code =3D auditable.value();
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-params-generics" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#a=
op-ataspectj-advice-params-generics"></a>Advice parameters and generics</h5=
></div></div></div>
<p>Spring AOP can handle generics used in class declarations and method par=
ameters. Suppose
you have a generic type like this:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Sample&lt;T&gt; {
    <span class=3D"hl-keyword">void</span> sampleGenericMethod(T param);
    <span class=3D"hl-keyword">void</span> sampleGenericCollectionMethod(Co=
llection&lt;T&gt; param);
}</pre>
<p>You can restrict interception of method types to certain parameter types=
 by simply
typing the advice parameter to the parameter type you want to intercept the=
 method for:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before("execution(* ..Sample+.sampleGenericMethod(*)) &amp;&amp=
; args(param)")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> beforeSampleMethod(MyType param) {
    <span class=3D"hl-comment">// Advice implementation</span>
}</pre>
<p>That this works is pretty obvious as we already discussed above. However=
, it=92s worth
pointing out that this won=92t work for generic collections. So you cannot =
define a
pointcut like this:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before("execution(* ..Sample+.sampleGenericCollectionMethod(*))=
 &amp;&amp; args(param)")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> beforeSampleMethod(Collection&lt;MyType&gt; param) {
    <span class=3D"hl-comment">// Advice implementation</span>
}</pre>
<p>To make this work we would have to inspect every element of the collecti=
on, which is not
reasonable as we also cannot decide how to treat <code class=3D"literal">nu=
ll</code> values in general. To achieve
something similar to this you have to type the parameter to <code class=3D"=
literal">Collection&lt;?&gt;</code> and manually
check the type of the elements.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-params-names" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
ataspectj-advice-params-names"></a>Determining argument names</h5></div></d=
iv></div>
<p>The parameter binding in advice invocations relies on matching names use=
d in pointcut
expressions to declared parameter names in (advice and pointcut) method sig=
natures.
Parameter names are <span class=3D"emphasis"><em>not</em></span> available =
through Java reflection, so Spring AOP uses the
following strategies to determine parameter names:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
If the parameter names have been specified by the user explicitly, then the=
 specified
parameter names are used: both the advice and the pointcut annotations have
an optional "argNames" attribute which can be used to specify the argument =
names of
the annotated method - these argument names <span class=3D"emphasis"><em>ar=
e</em></span> available at runtime. For example:
</li></ul></div>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before(value=3D"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&a=
mp; target(bean) &amp;&amp; @annotation(auditable)",
        argNames=3D"bean,auditable")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> audit(Object bean, Auditable auditable) {
    AuditCode code =3D auditable.value();
    <span class=3D"hl-comment">// ... use code and bean</span>
}</pre>
<p>If the first parameter is of the <code class=3D"literal">JoinPoint</code=
>, <code class=3D"literal">ProceedingJoinPoint</code>, or
<code class=3D"literal">JoinPoint.StaticPart</code> type, you may leave out=
 the name of the parameter from the value
of the "argNames" attribute. For example, if you modify the preceding advic=
e to receive
the join point object, the "argNames" attribute need not include it:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before(value=3D"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&a=
mp; target(bean) &amp;&amp; @annotation(auditable)",
        argNames=3D"bean,auditable")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> audit(JoinPoint jp, Object bean, Auditable auditable) {
    AuditCode code =3D auditable.value();
    <span class=3D"hl-comment">// ... use code, bean, and jp</span>
}</pre>
<p>The special treatment given to the first parameter of the <code class=3D=
"literal">JoinPoint</code>,
<code class=3D"literal">ProceedingJoinPoint</code>, and <code class=3D"lite=
ral">JoinPoint.StaticPart</code> types is particularly convenient for
advice that do not collect any other join point context. In such situations=
, you may
simply omit the "argNames" attribute. For example, the following advice nee=
d not declare
the "argNames" attribute:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Before("com.xyz.lib.Pointcuts.anyPublicMethod()")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> audit(JoinPoint jp) {
    <span class=3D"hl-comment">// ... use jp</span>
}</pre>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Using the <code class=3D"literal">'argNames'</code> attribute is a little c=
lumsy, so if the <code class=3D"literal">'argNames'</code> attribute
has not been specified, then Spring AOP will look at the debug information =
for the
class and try to determine the parameter names from the local variable tabl=
e. This
information will be present as long as the classes have been compiled with =
debug
information ( <code class=3D"literal">'-g:vars'</code> at a minimum). The c=
onsequences of compiling with this flag
on are: (1) your code will be slightly easier to understand (reverse engine=
er), (2)
the class file sizes will be very slightly bigger (typically inconsequentia=
l), (3) the
optimization to remove unused local variables will not be applied by your c=
ompiler. In
other words, you should encounter no difficulties building with this flag o=
n.
</li></ul></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If an @AspectJ aspect has been compiled by the AspectJ compiler (ajc) ev=
en without the
debug information then there is no need to add the argNames attribute as th=
e compiler
will retain the needed information.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
If the code has been compiled without the necessary debug information, then=
 Spring AOP
will attempt to deduce the pairing of binding variables to parameters (for =
example, if
only one variable is bound in the pointcut expression, and the advice metho=
d only
takes one parameter, the pairing is obvious!). If the binding of variables =
is
ambiguous given the available information, then an <code class=3D"literal">=
AmbiguousBindingException</code> will be
thrown.
</li><li class=3D"listitem">
If all of the above strategies fail then an <code class=3D"literal">Illegal=
ArgumentException</code> will be thrown.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-proceeding-with-the-call" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#aop-ataspectj-advice-proceeding-with-the-call"></a>Proceeding with =
arguments</h5></div></div></div>
<p>We remarked earlier that we would describe how to write a proceed call <=
span class=3D"emphasis"><em>with
arguments</em></span> that works consistently across Spring AOP and AspectJ=
. The solution is
simply to ensure that the advice signature binds each of the method paramet=
ers in order.
For example:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Around("execution(List&lt;Account&gt; find*(..)) &amp;&amp; " +
        "com.xyz.myapp.SystemArchitecture.inDataAccessLayer() &amp;&amp; " =
+
        "args(accountHolderNamePattern)")</span></em>
<span class=3D"hl-keyword">public</span> Object preProcessQueryPattern(Proc=
eedingJoinPoint pjp,
        String accountHolderNamePattern) <span class=3D"hl-keyword">throws<=
/span> Throwable {
    String newPattern =3D preProcess(accountHolderNamePattern);
    <span class=3D"hl-keyword">return</span> pjp.proceed(<span class=3D"hl-=
keyword">new</span> Object[] {newPattern});
}</pre>
<p>In many cases you will be doing this binding anyway (as in the example a=
bove).</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-ataspectj-advice-ordering" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-atas=
pectj-advice-ordering"></a>Advice ordering</h4></div></div></div>
<p>What happens when multiple pieces of advice all want to run at the same =
join point?
Spring AOP follows the same precedence rules as AspectJ to determine the or=
der of advice
execution. The highest precedence advice runs first "on the way in" (so giv=
en two pieces
of before advice, the one with highest precedence runs first). "On the way =
out" from a
join point, the highest precedence advice runs last (so given two pieces of=
 after
advice, the one with the highest precedence will run second).</p>
<p>When two pieces of advice defined in <span class=3D"emphasis"><em>differ=
ent</em></span> aspects both need to run at the same
join point, unless you specify otherwise the order of execution is undefine=
d. You can
control the order of execution by specifying precedence. This is done in th=
e normal
Spring way by either implementing the <code class=3D"literal">org.springfra=
mework.core.Ordered</code> interface in
the aspect class or annotating it with the <code class=3D"literal">Order</c=
ode> annotation. Given two aspects, the
aspect returning the lower value from <code class=3D"literal">Ordered.getVa=
lue()</code> (or the annotation value) has
the higher precedence.</p>
<p>When two pieces of advice defined in <span class=3D"emphasis"><em>the sa=
me</em></span> aspect both need to run at the same
join point, the ordering is undefined (since there is no way to retrieve th=
e declaration
order via reflection for javac-compiled classes). Consider collapsing such =
advice
methods into one advice method per join point in each aspect class, or refa=
ctor the
pieces of advice into separate aspect classes - which can be ordered at the=
 aspect level.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-introductions" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-introductions"><=
/a>11.2.5&nbsp;Introductions</h3></div></div></div>
<p>Introductions (known as inter-type declarations in AspectJ) enable an as=
pect to declare
that advised objects implement a given interface, and to provide an impleme=
ntation of
that interface on behalf of those objects.</p>
<p>An introduction is made using the <code class=3D"literal">@DeclareParent=
s</code> annotation. This annotation is used
to declare that matching types have a new parent (hence the name). For exam=
ple, given an
interface <code class=3D"literal">UsageTracked</code>, and an implementatio=
n of that interface <code class=3D"literal">DefaultUsageTracked</code>,
the following aspect declares that all implementors of service interfaces a=
lso implement
the <code class=3D"literal">UsageTracked</code> interface. (In order to exp=
ose statistics via JMX for example.)</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> UsageTracking {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@DeclareParents=
(value=3D"com.xzy.myapp.service.*+", defaultImpl=3DDefaultUsageTracked.clas=
s)</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> UsageTracked mixin;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before("com.xy=
z.myapp.SystemArchitecture.businessService() &amp;&amp; this(usageTracked)"=
)</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> recordUsage(UsageTracked usageTracked) {
        usageTracked.incrementUseCount();
    }

}</pre>
<p>The interface to be implemented is determined by the type of the annotat=
ed field. The
<code class=3D"literal">value</code> attribute of the <code class=3D"litera=
l">@DeclareParents</code> annotation is an AspectJ type pattern :- any
bean of a matching type will implement the UsageTracked interface. Note tha=
t in the
before advice of the above example, service beans can be directly used as
implementations of the <code class=3D"literal">UsageTracked</code> interfac=
e. If accessing a bean programmatically
you would write the following:</p>
<pre class=3D"programlisting">UsageTracked usageTracked =3D (UsageTracked) =
context.getBean(<span class=3D"hl-string">"myService"</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-instantiation-models" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-instantia=
tion-models"></a>11.2.6&nbsp;Aspect instantiation models</h3></div></div></=
div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>(This is an advanced topic, so if you are just starting out with AOP you=
 can safely skip
it until later.)</p>
</td></tr></tbody></table></div>
<p>By default there will be a single instance of each aspect within the app=
lication
context. AspectJ calls this the singleton instantiation model. It is possib=
le to define
aspects with alternate lifecycles :- Spring supports AspectJ=92s <code clas=
s=3D"literal">perthis</code> and <code class=3D"literal">pertarget</code>
instantiation models ( <code class=3D"literal">percflow, percflowbelow,</co=
de> and <code class=3D"literal">pertypewithin</code> are not currently
supported).</p>
<p>A "perthis" aspect is declared by specifying a <code class=3D"literal">p=
erthis</code> clause in the <code class=3D"literal">@Aspect</code>
annotation. Let=92s look at an example, and then we=92ll explain how it wor=
ks.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Aspect("perthis(com.xyz.myapp.SystemArchitecture.businessServic=
e())")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyAspect {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> someState;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before(com.xyz=
.myapp.SystemArchitecture.businessService())</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> recordServiceUsage() {
        <span class=3D"hl-comment">// ...</span>
    }

}</pre>
<p>The effect of the <code class=3D"literal">'perthis'</code> clause is tha=
t one aspect instance will be created for
each unique service object executing a business service (each unique object=
 bound to
'this' at join points matched by the pointcut expression). The aspect insta=
nce is
created the first time that a method is invoked on the service object. The =
aspect goes
out of scope when the service object goes out of scope. Before the aspect i=
nstance is
created, none of the advice within it executes. As soon as the aspect insta=
nce has been
created, the advice declared within it will execute at matched join points,=
 but only
when the service object is the one this aspect is associated with. See the =
AspectJ
programming guide for more information on per-clauses.</p>
<p>The <code class=3D"literal">'pertarget'</code> instantiation model works=
 in exactly the same way as perthis, but
creates one aspect instance for each unique target object at matched join p=
oints.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ataspectj-example" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-ex=
ample"></a>11.2.7&nbsp;Example</h3></div></div></div>
<p>Now that you have seen how all the constituent parts work, let=92s put t=
hem together to do
something useful!</p>
<p>The execution of business services can sometimes fail due to concurrency=
 issues (for
example, deadlock loser). If the operation is retried, it is quite likely t=
o succeed
next time round. For business services where it is appropriate to retry in =
such
conditions (idempotent operations that don=92t need to go back to the user =
for conflict
resolution), we=92d like to transparently retry the operation to avoid the =
client seeing a
<code class=3D"literal">PessimisticLockingFailureException</code>. This is =
a requirement that clearly cuts across
multiple services in the service layer, and hence is ideal for implementing=
 via an
aspect.</p>
<p>Because we want to retry the operation, we will need to use around advic=
e so that we can
call proceed multiple times. Here=92s how the basic aspect implementation l=
ooks:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ConcurrentOperationExecutor <span class=3D"hl-keyword">implements</sp=
an> Ordered {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> <span class=3D"hl-keyword">final</span> <span class=3D"hl-keywo=
rd">int</span> DEFAULT_MAX_RETRIES =3D <span class=3D"hl-number">2</span>;

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> maxRetries =3D DEFAULT_MAX_RETRIES;
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> order =3D <span class=3D"hl-number">1</span>;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMaxRetries(<span class=3D"hl-keyword">int</span> maxRetries) {
        <span class=3D"hl-keyword">this</span>.maxRetries =3D maxRetries;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span> getOrder() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.order;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setOrder(<span class=3D"hl-keyword">int</span> order) {
        <span class=3D"hl-keyword">this</span>.order =3D order;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Around("com.xy=
z.myapp.SystemArchitecture.businessService()")</span></em>
    <span class=3D"hl-keyword">public</span> Object doConcurrentOperation(P=
roceedingJoinPoint pjp) <span class=3D"hl-keyword">throws</span> Throwable =
{
        <span class=3D"hl-keyword">int</span> numAttempts =3D <span class=
=3D"hl-number">0</span>;
        PessimisticLockingFailureException lockFailureException;
        <span class=3D"hl-keyword">do</span> {
            numAttempts++;
            <span class=3D"hl-keyword">try</span> {
                <span class=3D"hl-keyword">return</span> pjp.proceed();
            }
            <span class=3D"hl-keyword">catch</span>(PessimisticLockingFailu=
reException ex) {
                lockFailureException =3D ex;
            }
        } <span class=3D"hl-keyword">while</span>(numAttempts &lt;=3D <span=
 class=3D"hl-keyword">this</span>.maxRetries);
        <span class=3D"hl-keyword">throw</span> lockFailureException;
    }

}</pre>
<p>Note that the aspect implements the <code class=3D"literal">Ordered</cod=
e> interface so we can set the precedence of
the aspect higher than the transaction advice (we want a fresh transaction =
each time we
retry). The <code class=3D"literal">maxRetries</code> and <code class=3D"li=
teral">order</code> properties will both be configured by Spring. The
main action happens in the <code class=3D"literal">doConcurrentOperation</c=
ode> around advice. Notice that for the
moment we=92re applying the retry logic to all <code class=3D"literal">busi=
nessService()s</code>. We try to proceed,
and if we fail with an <code class=3D"literal">PessimisticLockingFailureExc=
eption</code> we simply try again unless
we have exhausted all of our retry attempts.</p>
<p>The corresponding Spring configuration is:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspectj-autopr=
oxy/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"concurrentOperationExecutor"</span> <span cl=
ass=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"com.xyz.myapp=
.service.impl.ConcurrentOperationExecutor"</span><span class=3D"hl-tag">&gt=
;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"maxRetries"</span> <span class=3D"=
hl-attribute">value</span>=3D<span class=3D"hl-value">"3"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"order"</span> <span class=3D"hl-at=
tribute">value</span>=3D<span class=3D"hl-value">"100"</span><span class=3D=
"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>To refine the aspect so that it only retries idempotent operations, we m=
ight define an
<code class=3D"literal">Idempotent</code> annotation:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Retention(RetentionPolicy.RUNTIME)</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Idempotent {
    <span class=3D"hl-comment">// marker annotation</span>
}</pre>
<p>and use the annotation to annotate the implementation of service operati=
ons. The change
to the aspect to only retry idempotent operations simply involves refining =
the pointcut
expression so that only <code class=3D"literal">@Idempotent</code> operatio=
ns match:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Around("com.xyz.myapp.SystemArchitecture.businessService() &amp=
;&amp; " +
        "@annotation(com.xyz.myapp.service.Idempotent)")</span></em>
<span class=3D"hl-keyword">public</span> Object doConcurrentOperation(Proce=
edingJoinPoint pjp) <span class=3D"hl-keyword">throws</span> Throwable {
    ...
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-schema" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-s=
chema"></a>11.3&nbsp;Schema-based AOP support</h2></div></div></div>
<p>If you prefer an XML-based format, then Spring also offers support for d=
efining aspects
using the new "aop" namespace tags. The exact same pointcut expressions and=
 advice kinds
are supported as when using the @AspectJ style, hence in this section we wi=
ll focus on
the new <span class=3D"emphasis"><em>syntax</em></span> and refer the reade=
r to the discussion in the previous section
(<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#aop-ataspectj" title=3D"11.2&nbsp;=
@AspectJ support">Section&nbsp;11.2, =93@AspectJ support=94</a>) for an und=
erstanding of writing pointcut expressions and the binding
of advice parameters.</p>
<p>To use the aop namespace tags described in this section, you need to imp=
ort the
<code class=3D"literal">spring-aop</code> schema as described in <a class=
=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/#xsd-configuration" title=3D"41.&nbsp;XML Sc=
hema-based configuration">Chapter&nbsp;41, <i>XML Schema-based configuratio=
n</i></a>.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-aop" ti=
tle=3D"41.2.7&nbsp;the aop schema">Section&nbsp;41.2.7, =93the aop schema=
=94</a> for how to import the tags in the <code class=3D"literal">aop</code=
> namespace.</p>
<p>Within your Spring configurations, all aspect and advisor elements must =
be placed within
an <code class=3D"literal">&lt;aop:config&gt;</code> element (you can have =
more than one <code class=3D"literal">&lt;aop:config&gt;</code> element in =
an
application context configuration). An <code class=3D"literal">&lt;aop:conf=
ig&gt;</code> element can contain pointcut,
advisor, and aspect elements (note these must be declared in that order).</=
p>
<div class=3D"warning" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><=
table border=3D"0" summary=3D"Warning"><tbody><tr><td rowspan=3D"2" align=
=3D"center" valign=3D"top" width=3D"25"><img alt=3D"[Warning]" src=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/images/warning.png"></td><th align=3D"left">Warning</th></tr><tr><t=
d align=3D"left" valign=3D"top">
<p>The <code class=3D"literal">&lt;aop:config&gt;</code> style of configura=
tion makes heavy use of Spring=92s
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-autoproxy" title=3D"12.9&nbsp;U=
sing the &quot;auto-proxy&quot; facility">auto-proxying</a> mechanism. This=
 can cause issues (such as advice not
being woven) if you are already using explicit auto-proxying via the use of
<code class=3D"literal">BeanNameAutoProxyCreator</code> or suchlike. The re=
commended usage pattern is to use either
just the <code class=3D"literal">&lt;aop:config&gt;</code> style, or just t=
he <code class=3D"literal">AutoProxyCreator</code> style.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-declaring-an-aspect" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-sch=
ema-declaring-an-aspect"></a>11.3.1&nbsp;Declaring an aspect</h3></div></di=
v></div>
<p>Using the schema support, an aspect is simply a regular Java object defi=
ned as a bean in
your Spring application context. The state and behavior is captured in the =
fields and
methods of the object, and the pointcut and advice information is captured =
in the XML.</p>
<p>An aspect is declared using the &lt;aop:aspect&gt; element, and the back=
ing bean is referenced
using the <code class=3D"literal">ref</code> attribute:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attribut=
e">id</span>=3D<span class=3D"hl-value">"myAspect"</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"aBean"</span><span class=
=3D"hl-tag">&gt;</span>
        ...
    <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>
<span class=3D"hl-tag">&lt;/aop:config&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"aBean"</span> <span class=3D"hl-attribute">c=
lass</span>=3D<span class=3D"hl-value">"..."</span><span class=3D"hl-tag">&=
gt;</span>
    ...
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The bean backing the aspect (<code class=3D"literal">"aBean"</code> in t=
his case) can of course be configured and
dependency injected just like any other Spring bean.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-pointcuts" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-pointc=
uts"></a>11.3.2&nbsp;Declaring a pointcut</h3></div></div></div>
<p>A named pointcut can be declared inside an &lt;aop:config&gt; element, e=
nabling the pointcut
definition to be shared across several aspects and advisors.</p>
<p>A pointcut representing the execution of any business service in the ser=
vice layer could
be defined as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-attrib=
ute">id</span>=3D<span class=3D"hl-value">"businessService"</span>
        <span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-=
value">"execution(* com.xyz.myapp.service.*.*(..))"</span><span class=3D"hl=
-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<p>Note that the pointcut expression itself is using the same AspectJ point=
cut expression
language as described in <a class=3D"xref" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspe=
ctj" title=3D"11.2&nbsp;@AspectJ support">Section&nbsp;11.2, =93@AspectJ su=
pport=94</a>. If you are using the schema based
declaration style, you can refer to named pointcuts defined in types
(@Aspects) within the pointcut expression. Another way of defining the abov=
e pointcut
would be:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-attrib=
ute">id</span>=3D<span class=3D"hl-value">"businessService"</span>
        <span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-=
value">"com.xyz.myapp.SystemArchitecture.businessService()"</span><span cla=
ss=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<p>Assuming you have a <code class=3D"literal">SystemArchitecture</code> as=
pect as described in <a class=3D"xref" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-common-poi=
ntcuts" title=3D"Sharing common pointcut definitions">the section called =
=93Sharing common pointcut definitions=94</a>.</p>
<p>Declaring a pointcut inside an aspect is very similar to declaring a top=
-level pointcut:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attribut=
e">id</span>=3D<span class=3D"hl-value">"myAspect"</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"aBean"</span><span class=
=3D"hl-tag">&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"businessService"</span>
            <span class=3D"hl-attribute">expression</span>=3D<span class=3D=
"hl-value">"execution(* com.xyz.myapp.service.*.*(..))"</span><span class=
=3D"hl-tag">/&gt;</span>

        ...

    <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>

<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<p>Much the same way in an @AspectJ aspect, pointcuts declared using the sc=
hema based
definition style may collect join point context. For example, the following=
 pointcut
collects the 'this' object as the join point context and passes it to advic=
e:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attribut=
e">id</span>=3D<span class=3D"hl-value">"myAspect"</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"aBean"</span><span class=
=3D"hl-tag">&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"businessService"</span>
            <span class=3D"hl-attribute">expression</span>=3D<span class=3D=
"hl-value">"execution(* com.xyz.myapp.service.*.*(..)) &amp;amp;&amp;amp; t=
his(service)"</span><span class=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;aop:before</span> <span class=3D"hl-attr=
ibute">pointcut-ref</span>=3D<span class=3D"hl-value">"businessService"</sp=
an> <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-value">"=
monitor"</span><span class=3D"hl-tag">/&gt;</span>

        ...

    <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>

<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<p>The advice must be declared to receive the collected join point context =
by including
parameters of the matching names:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">void</span> monitor(Object service) {
    ...
}</pre>
<p>When combining pointcut sub-expressions, <code class=3D"literal">&amp;&a=
mp;</code> is awkward within an XML document, and so
the keywords <code class=3D"literal">and</code>, <code class=3D"literal">or=
</code>, and <code class=3D"literal">not</code> can be used in place of <co=
de class=3D"literal">&amp;&amp;</code>, <code class=3D"literal">||</code>, =
and <code class=3D"literal">!</code>
respectively. For example, the previous pointcut may be better written as:<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attribut=
e">id</span>=3D<span class=3D"hl-value">"myAspect"</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"aBean"</span><span class=
=3D"hl-tag">&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"businessService"</span>
            <span class=3D"hl-attribute">expression</span>=3D<span class=3D=
"hl-value">"execution(* com.xyz.myapp.service.</span><span class=3D"strong"=
><strong>.</strong></span>(..)) <span class=3D"strong"><strong>and</strong>=
</span> this(service)"/&gt;

        <span class=3D"hl-tag">&lt;aop:before</span> <span class=3D"hl-attr=
ibute">pointcut-ref</span>=3D<span class=3D"hl-value">"businessService"</sp=
an> <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-value">"=
monitor"</span><span class=3D"hl-tag">/&gt;</span>

        ...
    <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>
<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<p>Note that pointcuts defined in this way are referred to by their XML id =
and cannot be
used as named pointcuts to form composite pointcuts. The named pointcut sup=
port in the
schema based definition style is thus more limited than that offered by the=
 @AspectJ
style.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-advice" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advice"><=
/a>11.3.3&nbsp;Declaring advice</h3></div></div></div>
<p>The same five advice kinds are supported as for the @AspectJ style, and =
they have
exactly the same semantics.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-schema-advice-before" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-ad=
vice-before"></a>Before advice</h4></div></div></div>
<p>Before advice runs before a matched method execution. It is declared ins=
ide an
<code class=3D"literal">&lt;aop:aspect&gt;</code> using the &lt;aop:before&=
gt; element.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"beforeEx=
ample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-v=
alue">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:before</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"dataAccessOperation"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doAccessCheck"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>Here <code class=3D"literal">dataAccessOperation</code> is the id of a p=
ointcut defined at the top ( <code class=3D"literal">&lt;aop:config&gt;</co=
de>)
level. To define the pointcut inline instead, replace the <code class=3D"li=
teral">pointcut-ref</code> attribute with
a <code class=3D"literal">pointcut</code> attribute:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"beforeEx=
ample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-v=
alue">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:before</span>
        <span class=3D"hl-attribute">pointcut</span>=3D<span class=3D"hl-va=
lue">"execution(* com.xyz.myapp.dao.*.*(..))"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doAccessCheck"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>As we noted in the discussion of the @AspectJ style, using named pointcu=
ts can
significantly improve the readability of your code.</p>
<p>The method attribute identifies a method ( <code class=3D"literal">doAcc=
essCheck</code>) that provides the body of
the advice. This method must be defined for the bean referenced by the aspe=
ct element
containing the advice. Before a data access operation is executed (a method=
 execution
join point matched by the pointcut expression), the "doAccessCheck" method =
on the aspect
bean will be invoked.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-schema-advice-after-returning" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-=
schema-advice-after-returning"></a>After returning advice</h4></div></div><=
/div>
<p>After returning advice runs when a matched method execution completes no=
rmally. It is
declared inside an <code class=3D"literal">&lt;aop:aspect&gt;</code> in the=
 same way as before advice. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"afterRet=
urningExample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=
=3D"hl-value">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:after-returning</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"dataAccessOperation"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doAccessCheck"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>Just as in the @AspectJ style, it is possible to get hold of the return =
value within the
advice body. Use the returning attribute to specify the name of the paramet=
er to which
the return value should be passed:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"afterRet=
urningExample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=
=3D"hl-value">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:after-returning</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"dataAccessOperation"</span>
        <span class=3D"hl-attribute">returning</span>=3D<span class=3D"hl-v=
alue">"retVal"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doAccessCheck"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>The doAccessCheck method must declare a parameter named <code class=3D"l=
iteral">retVal</code>. The type of this
parameter constrains matching in the same way as described for @AfterReturn=
ing. For
example, the method signature may be declared as:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">void</span> doAccessCheck(Object retVal) {...</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-schema-advice-after-throwing" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-s=
chema-advice-after-throwing"></a>After throwing advice</h4></div></div></di=
v>
<p>After throwing advice executes when a matched method execution exits by =
throwing an
exception. It is declared inside an <code class=3D"literal">&lt;aop:aspect&=
gt;</code> using the after-throwing element:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"afterThr=
owingExample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=
=3D"hl-value">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:after-throwing</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"dataAccessOperation"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doRecoveryActions"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>Just as in the @AspectJ style, it is possible to get hold of the thrown =
exception within
the advice body. Use the throwing attribute to specify the name of the para=
meter to
which the exception should be passed:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"afterThr=
owingExample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=
=3D"hl-value">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:after-throwing</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"dataAccessOperation"</span>
        <span class=3D"hl-attribute">throwing</span>=3D<span class=3D"hl-va=
lue">"dataAccessEx"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doRecoveryActions"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>The doRecoveryActions method must declare a parameter named <code class=
=3D"literal">dataAccessEx</code>. The type of
this parameter constrains matching in the same way as described for @AfterT=
hrowing. For
example, the method signature may be declared as:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">void</span> doRecoveryActions(DataAccessException da=
taAccessEx) {...</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-schema-advice-after-finally" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-sc=
hema-advice-after-finally"></a>After (finally) advice</h4></div></div></div=
>
<p>After (finally) advice runs however a matched method execution exits. It=
 is declared
using the <code class=3D"literal">after</code> element:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"afterFin=
allyExample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=
=3D"hl-value">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:after</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"dataAccessOperation"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doReleaseLock"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-schema-advice-around" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-ad=
vice-around"></a>Around advice</h4></div></div></div>
<p>The final kind of advice is around advice. Around advice runs "around" a=
 matched method
execution. It has the opportunity to do work both before and after the meth=
od executes,
and to determine when, how, and even if, the method actually gets to execut=
e at all.
Around advice is often used if you need to share state before and after a m=
ethod
execution in a thread-safe manner (starting and stopping a timer for exampl=
e). Always
use the least powerful form of advice that meets your requirements; don=92t=
 use around
advice if simple before advice would do.</p>
<p>Around advice is declared using the <code class=3D"literal">aop:around</=
code> element. The first parameter of the
advice method must be of type <code class=3D"literal">ProceedingJoinPoint</=
code>. Within the body of the advice,
calling <code class=3D"literal">proceed()</code> on the <code class=3D"lite=
ral">ProceedingJoinPoint</code> causes the underlying method to
execute. The <code class=3D"literal">proceed</code> method may also be call=
ing passing in an <code class=3D"literal">Object[]</code> - the values
in the array will be used as the arguments to the method execution when it =
proceeds. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-ataspectj-around-advice" title=
=3D"Around advice">the section called =93Around advice=94</a> for notes on =
calling proceed with an <code class=3D"literal">Object[]</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"aroundEx=
ample"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-v=
alue">"aBean"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:around</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"businessService"</span>
        <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-valu=
e">"doBasicProfiling"</span><span class=3D"hl-tag">/&gt;</span>

    ...

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>The implementation of the <code class=3D"literal">doBasicProfiling</code=
> advice would be exactly the same as in the
@AspectJ example (minus the annotation of course):</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> Obje=
ct doBasicProfiling(ProceedingJoinPoint pjp) <span class=3D"hl-keyword">thr=
ows</span> Throwable {
    <span class=3D"hl-comment">// start stopwatch</span>
    Object retVal =3D pjp.proceed();
    <span class=3D"hl-comment">// stop stopwatch</span>
    <span class=3D"hl-keyword">return</span> retVal;
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-schema-params" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-params"><=
/a>Advice parameters</h4></div></div></div>
<p>The schema based declaration style supports fully typed advice in the sa=
me way as
described for the @AspectJ support - by matching pointcut parameters by nam=
e against
advice method parameters. See <a class=3D"xref" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-a=
taspectj-advice-params" title=3D"Advice parameters">the section called =93A=
dvice parameters=94</a> for details. If you wish
to explicitly specify argument names for the advice methods (not relying on=
 the
detection strategies previously described) then this is done using the <cod=
e class=3D"literal">arg-names</code>
attribute of the advice element, which is treated in the same manner to the=
 "argNames"
attribute in an advice annotation as described in <a class=3D"xref" href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#aop-ataspectj-advice-params-names" title=3D"Determining argu=
ment names">the section called =93Determining argument names=94</a>.
For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:before</span>
    <span class=3D"hl-attribute">pointcut</span>=3D<span class=3D"hl-value"=
>"com.xyz.lib.Pointcuts.anyPublicMethod() and @annotation(auditable)"</span=
>
    <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-value">"=
audit"</span>
    <span class=3D"hl-attribute">arg-names</span>=3D<span class=3D"hl-value=
">"auditable"</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>The <code class=3D"literal">arg-names</code> attribute accepts a comma-d=
elimited list of parameter names.</p>
<p>Find below a slightly more involved example of the XSD-based approach th=
at illustrates
some around advice used in conjunction with a number of strongly typed para=
meters.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> x.y=
.service;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> FooService {

    Foo getFoo(String fooName, <span class=3D"hl-keyword">int</span> age);
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultFooService <span class=3D"hl-keyword">implements</span> FooSer=
vice {

    <span class=3D"hl-keyword">public</span> Foo getFoo(String name, <span =
class=3D"hl-keyword">int</span> age) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> Foo(name, age);
    }
}</pre>
<p>Next up is the aspect. Notice the fact that the <code class=3D"literal">=
profile(..)</code> method accepts a number of
strongly-typed parameters, the first of which happens to be the join point =
used to
proceed with the method call: the presence of this parameter is an indicati=
on that the
<code class=3D"literal">profile(..)</code> is to be used as <code class=3D"=
literal">around</code> advice:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> x.y=
;

<span class=3D"hl-keyword">import</span> org.aspectj.lang.ProceedingJoinPoi=
nt;
<span class=3D"hl-keyword">import</span> org.springframework.util.StopWatch=
;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleProfiler {

    <span class=3D"hl-keyword">public</span> Object profile(ProceedingJoinP=
oint call, String name, <span class=3D"hl-keyword">int</span> age) <span cl=
ass=3D"hl-keyword">throws</span> Throwable {
        StopWatch clock =3D <span class=3D"hl-keyword">new</span> StopWatch=
(<span class=3D"hl-string">"Profiling for '"</span> + name + <span class=3D=
"hl-string">"' and '"</span> + age + <span class=3D"hl-string">"'"</span>);
        <span class=3D"hl-keyword">try</span> {
            clock.start(call.toShortString());
            <span class=3D"hl-keyword">return</span> call.proceed();
        } <span class=3D"hl-keyword">finally</span> {
            clock.stop();
            System.out.println(clock.prettyPrint());
        }
    }
}</pre>
<p>Finally, here is the XML configuration that is required to effect the ex=
ecution of the
above advice for a particular join point:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans</span> <span=
 class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"http://www=
.springframework.org/schema/beans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans http://www.springframew=
ork.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframewor=
k.org/schema/aop/spring-aop.xsd"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this is the object that will be prox=
ied by Spring's AOP infrastructure --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this is the actual advice itself --&=
gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"profiler"</span> <span class=3D"hl-attri=
bute">class</span>=3D<span class=3D"hl-value">"x.y.SimpleProfiler"</span><s=
pan class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;aop:config&gt;</span>
        <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attr=
ibute">ref</span>=3D<span class=3D"hl-value">"profiler"</span><span class=
=3D"hl-tag">&gt;</span>

            <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"h=
l-attribute">id</span>=3D<span class=3D"hl-value">"theExecutionOfSomeFooSer=
viceMethod"</span>
                <span class=3D"hl-attribute">expression</span>=3D<span clas=
s=3D"hl-value">"execution(* x.y.service.FooService.getFoo(String,int))
                and args(name, age)"</span><span class=3D"hl-tag">/&gt;</sp=
an>

            <span class=3D"hl-tag">&lt;aop:around</span> <span class=3D"hl-=
attribute">pointcut-ref</span>=3D<span class=3D"hl-value">"theExecutionOfSo=
meFooServiceMethod"</span>
                <span class=3D"hl-attribute">method</span>=3D<span class=3D=
"hl-value">"profile"</span><span class=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>
    <span class=3D"hl-tag">&lt;/aop:config&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>If we had the following driver script, we would get output something lik=
e this on
standard output:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> org.=
springframework.beans.factory.BeanFactory;
<span class=3D"hl-keyword">import</span> org.springframework.context.suppor=
t.ClassPathXmlApplicationContext;
<span class=3D"hl-keyword">import</span> x.y.service.FooService;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> Boot {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(<span class=3D"hl-ke=
yword">final</span> String[] args) <span class=3D"hl-keyword">throws</span>=
 Exception {
        BeanFactory ctx =3D <span class=3D"hl-keyword">new</span> ClassPath=
XmlApplicationContext(<span class=3D"hl-string">"x/y/plain.xml"</span>);
        FooService foo =3D (FooService) ctx.getBean(<span class=3D"hl-strin=
g">"fooService"</span>);
        foo.getFoo(<span class=3D"hl-string">"Pengo"</span>, <span class=3D=
"hl-number">12</span>);
    }
}</pre>
<pre class=3D"literallayout">StopWatch 'Profiling for 'Pengo' and '12'': ru=
nning time (millis) =3D 0
-----------------------------------------
ms     %     Task name
-----------------------------------------
00000  ?  execution(getFoo)</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-ordering" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#aop-ordering"></a>Advice =
ordering</h4></div></div></div>
<p>When multiple advice needs to execute at the same join point (executing =
method) the
ordering rules are as described in <a class=3D"xref" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
aop-ataspectj-advice-ordering" title=3D"Advice ordering">the section called=
 =93Advice ordering=94</a>. The precedence
between aspects is determined by either adding the <code class=3D"literal">=
Order</code> annotation to the bean
backing the aspect or by having the bean implement the <code class=3D"liter=
al">Ordered</code> interface.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-introductions" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-in=
troductions"></a>11.3.4&nbsp;Introductions</h3></div></div></div>
<p>Introductions (known as inter-type declarations in AspectJ) enable an as=
pect to declare
that advised objects implement a given interface, and to provide an impleme=
ntation of
that interface on behalf of those objects.</p>
<p>An introduction is made using the <code class=3D"literal">aop:declare-pa=
rents</code> element inside an <code class=3D"literal">aop:aspect</code>
This element is used to declare that matching types have a new parent (henc=
e the name).
For example, given an interface <code class=3D"literal">UsageTracked</code>=
, and an implementation of that interface
<code class=3D"literal">DefaultUsageTracked</code>, the following aspect de=
clares that all implementors of service
interfaces also implement the <code class=3D"literal">UsageTracked</code> i=
nterface. (In order to expose statistics
via JMX for example.)</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspect</span> =
<span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"usageTra=
ckerAspect"</span> <span class=3D"hl-attribute">ref</span>=3D<span class=3D=
"hl-value">"usageTracking"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:declare-parents</span>
        <span class=3D"hl-attribute">types-matching</span>=3D<span class=3D=
"hl-value">"com.xzy.myapp.service.*+"</span>
        <span class=3D"hl-attribute">implement-interface</span>=3D<span cla=
ss=3D"hl-value">"com.xyz.myapp.service.tracking.UsageTracked"</span>
        <span class=3D"hl-attribute">default-impl</span>=3D<span class=3D"h=
l-value">"com.xyz.myapp.service.tracking.DefaultUsageTracked"</span><span c=
lass=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;aop:before</span>
        <span class=3D"hl-attribute">pointcut</span>=3D<span class=3D"hl-va=
lue">"com.xyz.myapp.SystemArchitecture.businessService()
            and this(usageTracked)"</span>
            <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-=
value">"recordUsage"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/aop:aspect&gt;</span></pre>
<p>The class backing the <code class=3D"literal">usageTracking</code> bean =
would contain the method:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">void</span> recordUsage(UsageTracked usageTracked) {
    usageTracked.incrementUseCount();
}</pre>
<p>The interface to be implemented is determined by <code class=3D"literal"=
>implement-interface</code> attribute. The
value of the <code class=3D"literal">types-matching</code> attribute is an =
AspectJ type pattern :- any bean of a
matching type will implement the <code class=3D"literal">UsageTracked</code=
> interface. Note that in the before
advice of the above example, service beans can be directly used as implemen=
tations of
the <code class=3D"literal">UsageTracked</code> interface. If accessing a b=
ean programmatically you would write the
following:</p>
<pre class=3D"programlisting">UsageTracked usageTracked =3D (UsageTracked) =
context.getBean(<span class=3D"hl-string">"myService"</span>);</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-instatiation-models" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-sch=
ema-instatiation-models"></a>11.3.5&nbsp;Aspect instantiation models</h3></=
div></div></div>
<p>The only supported instantiation model for schema-defined aspects is the=
 singleton
model. Other instantiation models may be supported in future releases.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-advisors" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-advisor=
s"></a>11.3.6&nbsp;Advisors</h3></div></div></div>
<p>The concept of "advisors" is brought forward from the AOP support define=
d in Spring
and does not have a direct equivalent in AspectJ. An advisor is like a smal=
l
self-contained aspect that has a single piece of advice. The advice itself =
is
represented by a bean, and must implement one of the advice interfaces desc=
ribed in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-api-advice-types" title=3D"12.3=
.2&nbsp;Advice types in Spring">Section&nbsp;12.3.2, =93Advice types in Spr=
ing=94</a>. Advisors can take advantage of AspectJ pointcut expressions
though.</p>
<p>Spring supports the advisor concept with the <code class=3D"literal">&lt=
;aop:advisor&gt;</code> element. You will most
commonly see it used in conjunction with transactional advice, which also h=
as its own
namespace support in Spring. Here=92s how it looks:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-attrib=
ute">id</span>=3D<span class=3D"hl-value">"businessService"</span>
        <span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-=
value">"execution(* com.xyz.myapp.service.*.*(..))"</span><span class=3D"hl=
-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;aop:advisor</span>
        <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"h=
l-value">"businessService"</span>
        <span class=3D"hl-attribute">advice-ref</span>=3D<span class=3D"hl-=
value">"tx-advice"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/aop:config&gt;</span>

<span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute">id=
</span>=3D<span class=3D"hl-value">"tx-advice"</span><span class=3D"hl-tag"=
>&gt;</span>
    <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
        <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attri=
bute">name</span>=3D<span class=3D"hl-value">"*"</span> <span class=3D"hl-a=
ttribute">propagation</span>=3D<span class=3D"hl-value">"REQUIRED"</span><s=
pan class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
<span class=3D"hl-tag">&lt;/tx:advice&gt;</span></pre>
<p>As well as the <code class=3D"literal">pointcut-ref</code> attribute use=
d in the above example, you can also use the
<code class=3D"literal">pointcut</code> attribute to define a pointcut expr=
ession inline.</p>
<p>To define the precedence of an advisor so that the advice can participat=
e in ordering,
use the <code class=3D"literal">order</code> attribute to define the <code =
class=3D"literal">Ordered</code> value of the advisor.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-schema-example" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-schema-example"=
></a>11.3.7&nbsp;Example</h3></div></div></div>
<p>Let=92s see how the concurrent locking failure retry example from
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-ataspectj-example" title=3D"11.=
2.7&nbsp;Example">Section&nbsp;11.2.7, =93Example=94</a> looks when rewritt=
en using the schema support.</p>
<p>The execution of business services can sometimes fail due to concurrency=
 issues (for
example, deadlock loser). If the operation is retried, it is quite likely i=
t will
succeed next time round. For business services where it is appropriate to r=
etry in such
conditions (idempotent operations that don=92t need to go back to the user =
for conflict
resolution), we=92d like to transparently retry the operation to avoid the =
client seeing a
<code class=3D"literal">PessimisticLockingFailureException</code>. This is =
a requirement that clearly cuts across
multiple services in the service layer, and hence is ideal for implementing=
 via an
aspect.</p>
<p>Because we want to retry the operation, we=92ll need to use around advic=
e so that we can
call proceed multiple times. Here=92s how the basic aspect implementation l=
ooks (it=92s just
a regular Java class using the schema support):</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ConcurrentOperationExecutor <span class=
=3D"hl-keyword">implements</span> Ordered {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">st=
atic</span> <span class=3D"hl-keyword">final</span> <span class=3D"hl-keywo=
rd">int</span> DEFAULT_MAX_RETRIES =3D <span class=3D"hl-number">2</span>;

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> maxRetries =3D DEFAULT_MAX_RETRIES;
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> order =3D <span class=3D"hl-number">1</span>;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setMaxRetries(<span class=3D"hl-keyword">int</span> maxRetries) {
        <span class=3D"hl-keyword">this</span>.maxRetries =3D maxRetries;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span> getOrder() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.order;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setOrder(<span class=3D"hl-keyword">int</span> order) {
        <span class=3D"hl-keyword">this</span>.order =3D order;
    }

    <span class=3D"hl-keyword">public</span> Object doConcurrentOperation(P=
roceedingJoinPoint pjp) <span class=3D"hl-keyword">throws</span> Throwable =
{
        <span class=3D"hl-keyword">int</span> numAttempts =3D <span class=
=3D"hl-number">0</span>;
        PessimisticLockingFailureException lockFailureException;
        <span class=3D"hl-keyword">do</span> {
            numAttempts++;
            <span class=3D"hl-keyword">try</span> {
                <span class=3D"hl-keyword">return</span> pjp.proceed();
            }
            <span class=3D"hl-keyword">catch</span>(PessimisticLockingFailu=
reException ex) {
                lockFailureException =3D ex;
            }
        } <span class=3D"hl-keyword">while</span>(numAttempts &lt;=3D <span=
 class=3D"hl-keyword">this</span>.maxRetries);
        <span class=3D"hl-keyword">throw</span> lockFailureException;
    }

}</pre>
<p>Note that the aspect implements the <code class=3D"literal">Ordered</cod=
e> interface so we can set the precedence of
the aspect higher than the transaction advice (we want a fresh transaction =
each time we
retry). The <code class=3D"literal">maxRetries</code> and <code class=3D"li=
teral">order</code> properties will both be configured by Spring. The
main action happens in the <code class=3D"literal">doConcurrentOperation</c=
ode> around advice method. We try to
proceed, and if we fail with a <code class=3D"literal">PessimisticLockingFa=
ilureException</code> we simply try again
unless we have exhausted all of our retry attempts.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This class is identical to the one used in the @AspectJ example, but wit=
h the
annotations removed.</p>
</td></tr></tbody></table></div>
<p>The corresponding Spring configuration is:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>

    <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attribut=
e">id</span>=3D<span class=3D"hl-value">"concurrentOperationRetry"</span> <=
span class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"concurre=
ntOperationExecutor"</span><span class=3D"hl-tag">&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"idempotentOperation"</span>
            <span class=3D"hl-attribute">expression</span>=3D<span class=3D=
"hl-value">"execution(* com.xyz.myapp.service.*.*(..))"</span><span class=
=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;aop:around</span>
            <span class=3D"hl-attribute">pointcut-ref</span>=3D<span class=
=3D"hl-value">"idempotentOperation"</span>
            <span class=3D"hl-attribute">method</span>=3D<span class=3D"hl-=
value">"doConcurrentOperation"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>

<span class=3D"hl-tag">&lt;/aop:config&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"concurrentOperationExecutor"</span>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"c=
om.xyz.myapp.service.impl.ConcurrentOperationExecutor"</span><span class=3D=
"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"maxRetries"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"3"</span><span c=
lass=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"order"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"100"</span><span clas=
s=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Notice that for the time being we assume that all business services are =
idempotent. If
this is not the case we can refine the aspect so that it only retries genui=
nely
idempotent operations, by introducing an <code class=3D"literal">Idempotent=
</code> annotation:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Retention(RetentionPolicy.RUNTIME)</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> Idempotent {
    <span class=3D"hl-comment">// marker annotation</span>
}</pre>
<p>and using the annotation to annotate the implementation of service opera=
tions. The
change to the aspect to retry only idempotent operations simply involves re=
fining the
pointcut expression so that only <code class=3D"literal">@Idempotent</code>=
 operations match:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:pointcut</span=
> <span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"idempo=
tentOperation"</span>
        <span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-=
value">"execution(* com.xyz.myapp.service.*.*(..)) and
        @annotation(com.xyz.myapp.service.Idempotent)"</span><span class=3D=
"hl-tag">/&gt;</span></pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-choosing" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop=
-choosing"></a>11.4&nbsp;Choosing which AOP declaration style to use</h2></=
div></div></div>
<p>Once you have decided that an aspect is the best approach for implementi=
ng a given
requirement, how do you decide between using Spring AOP or AspectJ, and bet=
ween the
Aspect language (code) style, @AspectJ annotation style, or the Spring XML =
style? These
decisions are influenced by a number of factors including application requi=
rements,
development tools, and team familiarity with AOP.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-spring-or-aspectj" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-spring-or-as=
pectj"></a>11.4.1&nbsp;Spring AOP or full AspectJ?</h3></div></div></div>
<p>Use the simplest thing that can work. Spring AOP is simpler than using f=
ull AspectJ as
there is no requirement to introduce the AspectJ compiler / weaver into you=
r development
and build processes. If you only need to advise the execution of operations=
 on Spring
beans, then Spring AOP is the right choice. If you need to advise objects n=
ot managed by
the Spring container (such as domain objects typically), then you will need=
 to use
AspectJ. You will also need to use AspectJ if you wish to advise join point=
s other than
simple method executions (for example, field get or set join points, and so=
 on).</p>
<p>When using AspectJ, you have the choice of the AspectJ language syntax (=
also known as
the "code style") or the @AspectJ annotation style. Clearly, if you are not=
 using Java
5+ then the choice has been made for you=85&#8203; use the code style. If a=
spects play a large
role in your design, and you are able to use the <a class=3D"ulink" href=3D=
"https://www.eclipse.org/ajdt/" target=3D"_top">AspectJ
Development Tools (AJDT)</a> plugin for Eclipse, then the AspectJ language =
syntax is the
preferred option: it is cleaner and simpler because the language was purpos=
efully
designed for writing aspects. If you are not using Eclipse, or have only a =
few aspects
that do not play a major role in your application, then you may want to con=
sider using
the @AspectJ style and sticking with a regular Java compilation in your IDE=
, and adding
an aspect weaving phase to your build script.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ataspectj-or-xml" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-or-=
xml"></a>11.4.2&nbsp;@AspectJ or XML for Spring AOP?</h3></div></div></div>
<p>If you have chosen to use Spring AOP, then you have a choice of @AspectJ=
 or XML style.
There are various tradeoffs to consider.</p>
<p>The XML style will be most familiar to existing Spring users and it is b=
acked by genuine
POJOs. When using AOP as a tool to configure enterprise services then XML c=
an be a good
choice (a good test is whether you consider the pointcut expression to be a=
 part of your
configuration you might want to change independently). With the XML style a=
rguably it is
clearer from your configuration what aspects are present in the system.</p>
<p>The XML style has two disadvantages. Firstly it does not fully encapsula=
te the
implementation of the requirement it addresses in a single place. The DRY p=
rinciple says
that there should be a single, unambiguous, authoritative representation of=
 any piece of
knowledge within a system. When using the XML style, the knowledge of <span=
 class=3D"emphasis"><em>how</em></span> a
requirement is implemented is split across the declaration of the backing b=
ean class,
and the XML in the configuration file. When using the @AspectJ style there =
is a single
module - the aspect - in which this information is encapsulated. Secondly, =
the XML style
is slightly more limited in what it can express than the @AspectJ style: on=
ly the
"singleton" aspect instantiation model is supported, and it is not possible=
 to combine
named pointcuts declared in XML. For example, in the @AspectJ style you can=
 write
something like:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Pointcut(execution(* get*()))</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> propertyAccess() {}

@Pointcut(execution(org.xyz.Account+ *(..))
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> operationReturningAnAccount() {}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut(propertyA=
ccess() &amp;&amp; operationReturningAnAccount())</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> accountPropertyAccess() {}</pre>
<p>In the XML style I can declare the first two pointcuts:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:pointcut</span=
> <span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"proper=
tyAccess"</span>
        <span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-=
value">"execution(* get*())"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-attribute"=
>id</span>=3D<span class=3D"hl-value">"operationReturningAnAccount"</span>
        <span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-=
value">"execution(org.xyz.Account+ *(..))"</span><span class=3D"hl-tag">/&g=
t;</span></pre>
<p>The downside of the XML approach is that you cannot define the
<code class=3D"literal">accountPropertyAccess</code> pointcut by combining =
these definitions.</p>
<p>The @AspectJ style supports additional instantiation models, and richer =
pointcut
composition. It has the advantage of keeping the aspect as a modular unit. =
It also has
the advantage the @AspectJ aspects can be understood (and thus consumed) bo=
th by Spring
AOP and by AspectJ - so if you later decide you need the capabilities of As=
pectJ to
implement additional requirements then it is very easy to migrate to an Asp=
ectJ-based
approach. On balance the Spring team prefer the @AspectJ style whenever you=
 have aspects
that do more than simple "configuration" of enterprise services.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-mixing-styles" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-mixing-styles"></a>11.5&nbsp;Mixing aspect types</h2></div></div></di=
v>
<p>It is perfectly possible to mix @AspectJ style aspects using the autopro=
xying support,
schema-defined <code class=3D"literal">&lt;aop:aspect&gt;</code> aspects, <=
code class=3D"literal">&lt;aop:advisor&gt;</code> declared advisors and eve=
n
proxies and interceptors defined using the Spring 1.2 style in the same con=
figuration.
All of these are implemented using the same underlying support mechanism an=
d will
co-exist without any difficulty.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-proxying" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop=
-proxying"></a>11.6&nbsp;Proxying mechanisms</h2></div></div></div>
<p>Spring AOP uses either JDK dynamic proxies or CGLIB to create the proxy =
for a given
target object. (JDK dynamic proxies are preferred whenever you have a choic=
e).</p>
<p>If the target object to be proxied implements at least one interface the=
n a JDK dynamic
proxy will be used. All of the interfaces implemented by the target type wi=
ll be
proxied. If the target object does not implement any interfaces then a CGLI=
B proxy will
be created.</p>
<p>If you want to force the use of CGLIB proxying (for example, to proxy ev=
ery method
defined for the target object, not just those implemented by its interfaces=
) you can do
so. However, there are some issues to consider:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">final</code> methods cannot be advised, as they can=
not be overridden.
</li><li class=3D"listitem">
As of Spring 3.2, it is no longer necessary to add CGLIB to your project cl=
asspath, as
CGLIB classes are repackaged under org.springframework and included directl=
y in the
spring-core JAR. This means that CGLIB-based proxy support 'just works' in =
the same
way that JDK dynamic proxies always have.
</li><li class=3D"listitem">
As of Spring 4.0, the constructor of your proxied object will NOT be called=
 twice
anymore since the CGLIB proxy instance will be created via Objenesis. Only =
if your
JVM does not allow for constructor bypassing, you might see double invocati=
ons and
corresponding debug log entries from Spring=92s AOP support.
</li></ul></div>
<p>To force the use of CGLIB proxies set the value of the <code class=3D"li=
teral">proxy-target-class</code> attribute of
the <code class=3D"literal">&lt;aop:config&gt;</code> element to true:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config</span> =
<span class=3D"hl-attribute">proxy-target-class</span>=3D<span class=3D"hl-=
value">"true"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- other beans defined here... --&gt;</=
span>
<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<p>To force CGLIB proxying when using the @AspectJ autoproxy support, set t=
he
<code class=3D"literal">'proxy-target-class'</code> attribute of the <code =
class=3D"literal">&lt;aop:aspectj-autoproxy&gt;</code> element to <code cla=
ss=3D"literal">true</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspectj-autopr=
oxy</span> <span class=3D"hl-attribute">proxy-target-class</span>=3D<span c=
lass=3D"hl-value">"true"</span><span class=3D"hl-tag">/&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Multiple <code class=3D"literal">&lt;aop:config/&gt;</code> sections are=
 collapsed into a single unified auto-proxy creator
at runtime, which applies the <span class=3D"emphasis"><em>strongest</em></=
span> proxy settings that any of the
<code class=3D"literal">&lt;aop:config/&gt;</code> sections (typically from=
 different XML bean definition files) specified.
This also applies to the <code class=3D"literal">&lt;tx:annotation-driven/&=
gt;</code> and <code class=3D"literal">&lt;aop:aspectj-autoproxy/&gt;</code=
>
elements.</p>
<p>To be clear: using <code class=3D"literal">proxy-target-class=3D"true"</=
code> on <code class=3D"literal">&lt;tx:annotation-driven/&gt;</code>,
<code class=3D"literal">&lt;aop:aspectj-autoproxy/&gt;</code> or <code clas=
s=3D"literal">&lt;aop:config/&gt;</code> elements will force the use of CGL=
IB
proxies <span class=3D"emphasis"><em>for all three of them</em></span>.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-understanding-aop-proxies" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-unde=
rstanding-aop-proxies"></a>11.6.1&nbsp;Understanding AOP proxies</h3></div>=
</div></div>
<p>Spring AOP is <span class=3D"emphasis"><em>proxy-based</em></span>. It i=
s vitally important that you grasp the semantics of
what that last statement actually means before you write your own aspects o=
r use any of
the Spring AOP-based aspects supplied with the Spring Framework.</p>
<p>Consider first the scenario where you have a plain-vanilla, un-proxied,
nothing-special-about-it, straight object reference, as illustrated by the =
following
code snippet.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimplePojo <span class=3D"hl-keyword">i=
mplements</span> Pojo {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> foo() {
        <span class=3D"hl-comment">// this next method invocation is a dire=
ct call on the 'this' reference</span>
        <span class=3D"hl-keyword">this</span>.bar();
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> bar() {
        <span class=3D"hl-comment">// some logic...</span>
    }
}</pre>
<p>If you invoke a method on an object reference, the method is invoked <sp=
an class=3D"emphasis"><em>directly</em></span> on
that object reference, as can be seen below.</p>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/aop-proxy-plain-=
pojo-call.png" alt=3D"aop proxy plain pojo call"></div>
</div>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Main {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(String[] args) {

        Pojo pojo =3D <span class=3D"hl-keyword">new</span> SimplePojo();

        <span class=3D"hl-comment">// this is a direct method call on the '=
pojo' reference</span>
        pojo.foo();
    }
}</pre>
<p>Things change slightly when the reference that client code has is a prox=
y. Consider the
following diagram and code snippet.</p>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/aop-proxy-call.p=
ng" alt=3D"aop proxy call"></div>
</div>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Main {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(String[] args) {

        ProxyFactory factory =3D <span class=3D"hl-keyword">new</span> Prox=
yFactory(<span class=3D"hl-keyword">new</span> SimplePojo());
        factory.addInterface(Pojo.<span class=3D"hl-keyword">class</span>);
        factory.addAdvice(<span class=3D"hl-keyword">new</span> RetryAdvice=
());

        Pojo pojo =3D (Pojo) factory.getProxy();

        <span class=3D"hl-comment">// this is a method call on the proxy!</=
span>
        pojo.foo();
    }
}</pre>
<p>The key thing to understand here is that the client code inside the <cod=
e class=3D"literal">main(..)</code> of the
<code class=3D"literal">Main</code> class <span class=3D"emphasis"><em>has =
a reference to the proxy</em></span>. This means that method calls on that
object reference will be calls on the proxy, and as such the proxy will be =
able to
delegate to all of the interceptors (advice) that are relevant to that part=
icular method
call. However, once the call has finally reached the target object, the <co=
de class=3D"literal">SimplePojo</code>
reference in this case, any method calls that it may make on itself, such a=
s
<code class=3D"literal">this.bar()</code> or <code class=3D"literal">this.f=
oo()</code>, are going to be invoked against the <span class=3D"emphasis"><=
em>this</em></span> reference,
and <span class=3D"emphasis"><em>not</em></span> the proxy. This has import=
ant implications. It means that self-invocation is
<span class=3D"emphasis"><em>not</em></span> going to result in the advice =
associated with a method invocation getting a
chance to execute.</p>
<p>Okay, so what is to be done about this? The best approach (the term best=
 is used loosely
here) is to refactor your code such that the self-invocation does not happe=
n. For sure,
this does entail some work on your part, but it is the best, least-invasive=
 approach.
The next approach is absolutely horrendous, and I am almost reticent to poi=
nt it out
precisely because it is so horrendous. You can (choke!) totally tie the log=
ic within
your class to Spring AOP by doing this:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimplePojo <span class=3D"hl-keyword">i=
mplements</span> Pojo {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> foo() {
        <span class=3D"hl-comment">// this works, but... gah!</span>
        ((Pojo) AopContext.currentProxy()).bar();
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> bar() {
        <span class=3D"hl-comment">// some logic...</span>
    }
}</pre>
<p>This totally couples your code to Spring AOP, <span class=3D"emphasis"><=
em>and</em></span> it makes the class itself aware of
the fact that it is being used in an AOP context, which flies in the face o=
f AOP. It
also requires some additional configuration when the proxy is being created=
:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Main {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(String[] args) {

        ProxyFactory factory =3D <span class=3D"hl-keyword">new</span> Prox=
yFactory(<span class=3D"hl-keyword">new</span> SimplePojo());
        factory.adddInterface(Pojo.<span class=3D"hl-keyword">class</span>)=
;
        factory.addAdvice(<span class=3D"hl-keyword">new</span> RetryAdvice=
());
        factory.setExposeProxy(true);

        Pojo pojo =3D (Pojo) factory.getProxy();

        <span class=3D"hl-comment">// this is a method call on the proxy!</=
span>
        pojo.foo();
    }
}</pre>
<p>Finally, it must be noted that AspectJ does not have this self-invocatio=
n issue because
it is not a proxy-based AOP framework.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-aspectj-programmatic" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#aop-aspectj-programmatic"></a>11.7&nbsp;Programmatic creation of @=
AspectJ Proxies</h2></div></div></div>
<p>In addition to declaring aspects in your configuration using either <cod=
e class=3D"literal">&lt;aop:config&gt;</code> or
<code class=3D"literal">&lt;aop:aspectj-autoproxy&gt;</code>, it is also po=
ssible programmatically to create proxies that
advise target objects. For the full details of Spring=92s AOP API, see the =
next chapter.
Here we want to focus on the ability to automatically create proxies using =
@AspectJ
aspects.</p>
<p>The class <code class=3D"literal">org.springframework.aop.aspectj.annota=
tion.AspectJProxyFactory</code> can be used
to create a proxy for a target object that is advised by one or more @Aspec=
tJ aspects.
Basic usage for this class is very simple, as illustrated below. See the ja=
vadocs for
full information.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// create a factor=
y that can generate a proxy for the given target object</span>
AspectJProxyFactory factory =3D <span class=3D"hl-keyword">new</span> Aspec=
tJProxyFactory(targetObject);

<span class=3D"hl-comment">// add an aspect, the class must be an @AspectJ =
aspect</span>
<span class=3D"hl-comment">// you can call this as many times as you need w=
ith different aspects</span>
factory.addAspect(SecurityManager.<span class=3D"hl-keyword">class</span>);

<span class=3D"hl-comment">// you can also add existing aspect instances, t=
he type of the object supplied must be an @AspectJ aspect</span>
factory.addAspect(usageTracker);

<span class=3D"hl-comment">// now get the proxy object...</span>
MyInterfaceType proxy =3D factory.getProxy();</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-using-aspectj" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-using-aspectj"></a>11.8&nbsp;Using AspectJ with Spring applications</=
h2></div></div></div>
<p>Everything we=92ve covered so far in this chapter is pure Spring AOP. In=
 this section,
we=92re going to look at how you can use the AspectJ compiler/weaver instea=
d of, or in
addition to, Spring AOP if your needs go beyond the facilities offered by S=
pring AOP
alone.</p>
<p>Spring ships with a small AspectJ aspect library, which is available sta=
ndalone in your
distribution as <code class=3D"literal">spring-aspects.jar</code>; you=92ll=
 need to add this to your classpath in order
to use the aspects in it. <a class=3D"xref" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-atcon=
figurable" title=3D"11.8.1&nbsp;Using AspectJ to dependency inject domain o=
bjects with Spring">Section&nbsp;11.8.1, =93Using AspectJ to dependency inj=
ect domain objects with Spring=94</a> and <a class=3D"xref" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#aop-ajlib-other" title=3D"11.8.2&nbsp;Other Spring aspects for Aspec=
tJ">Section&nbsp;11.8.2, =93Other Spring aspects for AspectJ=94</a> discuss=
 the
content of this library and how you can use it. <a class=3D"xref" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#aop-aj-configure" title=3D"11.8.3&nbsp;Configuring AspectJ asp=
ects using Spring IoC">Section&nbsp;11.8.3, =93Configuring AspectJ aspects =
using Spring IoC=94</a> discusses how to
dependency inject AspectJ aspects that are woven using the AspectJ compiler=
. Finally,
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-aj-ltw" title=3D"11.8.4&nbsp;Lo=
ad-time weaving with AspectJ in the Spring Framework">Section&nbsp;11.8.4, =
=93Load-time weaving with AspectJ in the Spring Framework=94</a> provides a=
n introduction to load-time weaving for Spring applications
using AspectJ.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-atconfigurable" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-atconfigurable"=
></a>11.8.1&nbsp;Using AspectJ to dependency inject domain objects with Spr=
ing</h3></div></div></div>
<p>The Spring container instantiates and configures beans defined in your a=
pplication
context. It is also possible to ask a bean factory to configure a <span cla=
ss=3D"emphasis"><em>pre-existing</em></span>
object given the name of a bean definition containing the configuration to =
be applied.
The <code class=3D"literal">spring-aspects.jar</code> contains an annotatio=
n-driven aspect that exploits this
capability to allow dependency injection of <span class=3D"emphasis"><em>an=
y object</em></span>. The support is intended to
be used for objects created <span class=3D"emphasis"><em>outside of the con=
trol of any container</em></span>. Domain objects
often fall into this category because they are often created programmatical=
ly using the
<code class=3D"literal">new</code> operator, or by an ORM tool as a result =
of a database query.</p>
<p>The <code class=3D"literal">@Configurable</code> annotation marks a clas=
s as eligible for Spring-driven
configuration. In the simplest case it can be used just as a marker annotat=
ion:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.xyz.myapp.domain;

<span class=3D"hl-keyword">import</span> org.springframework.beans.factory.=
annotation.Configurable;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configurable</span=
></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> Account {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>When used as a marker interface in this way, Spring will configure new i=
nstances of the
annotated type ( <code class=3D"literal">Account</code> in this case) using=
 a bean definition (typically
prototype-scoped) with the same name as the fully-qualified type name (
<code class=3D"literal">com.xyz.myapp.domain.Account</code>). Since the def=
ault name for a bean is the
fully-qualified name of its type, a convenient way to declare the prototype=
 definition
is simply to omit the <code class=3D"literal">id</code> attribute:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"com.xyz.mya=
pp.domain.Account"</span> <span class=3D"hl-attribute">scope</span>=3D<span=
 class=3D"hl-value">"prototype"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"fundsTransferService"</span> <span=
 class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"fundsTransfe=
rService"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>If you want to explicitly specify the name of the prototype bean definit=
ion to use, you
can do so directly in the annotation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.xyz.myapp.domain;

<span class=3D"hl-keyword">import</span> org.springframework.beans.factory.=
annotation.Configurable;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Configurable("acco=
unt")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> Account {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Spring will now look for a bean definition named "account" and use that =
as the
definition to configure new <code class=3D"literal">Account</code> instance=
s.</p>
<p>You can also use autowiring to avoid having to specify a dedicated bean =
definition at
all. To have Spring apply autowiring use the <code class=3D"literal">autowi=
re</code> property of the
<code class=3D"literal">@Configurable</code> annotation: specify either <co=
de class=3D"literal">@Configurable(autowire=3DAutowire.BY_TYPE)</code> or
<code class=3D"literal">@Configurable(autowire=3DAutowire.BY_NAME</code> fo=
r autowiring by type or by name
respectively. As an alternative, as of Spring 2.5 it is preferable to speci=
fy explicit,
annotation-driven dependency injection for your <code class=3D"literal">@Co=
nfigurable</code> beans by using
<code class=3D"literal">@Autowired</code> or <code class=3D"literal">@Injec=
t</code> at the field or method level (see <a class=3D"xref" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#beans-annotation-config" title=3D"7.9&nbsp;Annotation-based contain=
er configuration">Section&nbsp;7.9, =93Annotation-based container configura=
tion=94</a>
for further details).</p>
<p>Finally you can enable Spring dependency checking for the object referen=
ces in the newly
created and configured object by using the <code class=3D"literal">dependen=
cyCheck</code> attribute (for example:
<code class=3D"literal">@Configurable(autowire=3DAutowire.BY_NAME,dependenc=
yCheck=3Dtrue)</code>). If this attribute is
set to true, then Spring will validate after configuration that all propert=
ies (<span class=3D"emphasis"><em>which
are not primitives or collections</em></span>) have been set.</p>
<p>Using the annotation on its own does nothing of course. It is the
<code class=3D"literal">AnnotationBeanConfigurerAspect</code> in <code clas=
s=3D"literal">spring-aspects.jar</code> that acts on the presence of
the annotation. In essence the aspect says "after returning from the initia=
lization of a
new object of a type annotated with <code class=3D"literal">@Configurable</=
code>, configure the newly created object
using Spring in accordance with the properties of the annotation". In this =
context,
<span class=3D"emphasis"><em>initialization</em></span> refers to newly ins=
tantiated objects (e.g., objects instantiated with
the <code class=3D"literal">new</code> operator) as well as to <code class=
=3D"literal">Serializable</code> objects that are undergoing
deserialization (e.g., via
<a class=3D"ulink" href=3D"https://docs.oracle.com/javase/6/docs/api/java/i=
o/Serializable.html" target=3D"_top">readResolve()</a>).</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>One of the key phrases in the above paragraph is '<span class=3D"emphasi=
s"><em>in essence</em></span>'. For most cases, the
exact semantics of '<span class=3D"emphasis"><em>after returning from the i=
nitialization of a new object</em></span>' will be
fine=85&#8203; in this context, '<span class=3D"emphasis"><em>after initial=
ization</em></span>' means that the dependencies will be
injected <span class=3D"emphasis"><em>after</em></span> the object has been=
 constructed - this means that the dependencies
will not be available for use in the constructor bodies of the class. If yo=
u want the
dependencies to be injected <span class=3D"emphasis"><em>before</em></span>=
 the constructor bodies execute, and thus be
available for use in the body of the constructors, then you need to define =
this on the
<code class=3D"literal">@Configurable</code> declaration like so:</p>
<pre class=3D"programlisting">@Configurable(preConstruction=3Dtrue)</pre>
<p>You can find out more information about the language semantics of the va=
rious pointcut
types in AspectJ
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/next/proggui=
de/semantics-joinPoints.html" target=3D"_top">in this
appendix</a> of the <a class=3D"ulink" href=3D"https://www.eclipse.org/aspe=
ctj/doc/next/progguide/index.html" target=3D"_top">AspectJ
Programming Guide</a>.</p>
</td></tr></tbody></table></div>
<p>For this to work the annotated types must be woven with the AspectJ weav=
er - you can
either use a build-time Ant or Maven task to do this (see for example the
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released/dev=
guide/antTasks.html" target=3D"_top">AspectJ Development
Environment Guide</a>) or load-time weaving (see <a class=3D"xref" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#aop-aj-ltw" title=3D"11.8.4&nbsp;Load-time weaving with Aspec=
tJ in the Spring Framework">Section&nbsp;11.8.4, =93Load-time weaving with =
AspectJ in the Spring Framework=94</a>). The
<code class=3D"literal">AnnotationBeanConfigurerAspect</code> itself needs =
configuring by Spring (in order to obtain
a reference to the bean factory that is to be used to configure new objects=
). If you are
using Java based configuration simply add <code class=3D"literal">@EnableSp=
ringConfigured</code> to any
<code class=3D"literal">@Configuration</code> class.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@EnableSpringConfig=
ured</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

}</pre>
<p>If you prefer XML based configuration, the Spring <a class=3D"link" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#xsd-config-body-schemas-context" title=3D"41.2.8&nbsp;the=
 context schema"><code class=3D"literal">context</code> namespace</a> defin=
es a convenient <code class=3D"literal">context:spring-configured</code> el=
ement:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;context:spring-con=
figured/&gt;</span></pre>
<p>Instances of <code class=3D"literal">@Configurable</code> objects create=
d <span class=3D"emphasis"><em>before</em></span> the aspect has been confi=
gured
will result in a message being issued to the debug log and no configuration=
 of the
object taking place. An example might be a bean in the Spring configuration=
 that creates
domain objects when it is initialized by Spring. In this case you can use t=
he
"depends-on" bean attribute to manually specify that the bean depends on th=
e
configuration aspect.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myService"</sp=
an>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"com.xzy.myapp.service.MyService"</span>
        <span class=3D"hl-attribute">depends-on</span>=3D<span class=3D"hl-=
value">"org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerA=
spect"</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- ... --&gt;</span>

<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Do not activate <code class=3D"literal">@Configurable</code> processing =
through the bean configurer aspect unless you
really mean to rely on its semantics at runtime. In particular, make sure t=
hat you do
not use <code class=3D"literal">@Configurable</code> on bean classes which =
are registered as regular Spring beans
with the container: You would get double initialization otherwise, once thr=
ough the
container and once through the aspect.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-configurable-testing" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-configura=
ble-testing"></a>Unit testing @Configurable objects</h4></div></div></div>
<p>One of the goals of the <code class=3D"literal">@Configurable</code> sup=
port is to enable independent unit testing of
domain objects without the difficulties associated with hard-coded lookups.=
 If
<code class=3D"literal">@Configurable</code> types have not been woven by A=
spectJ then the annotation has no affect
during unit testing, and you can simply set mock or stub property reference=
s in the
object under test and proceed as normal. If <code class=3D"literal">@Config=
urable</code> types <span class=3D"emphasis"><em>have</em></span> been wove=
n by
AspectJ then you can still unit test outside of the container as normal, bu=
t you will
see a warning message each time that you construct an <code class=3D"litera=
l">@Configurable</code> object indicating
that it has not been configured by Spring.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-configurable-container" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-configu=
rable-container"></a>Working with multiple application contexts</h4></div><=
/div></div>
<p>The <code class=3D"literal">AnnotationBeanConfigurerAspect</code> used t=
o implement the <code class=3D"literal">@Configurable</code> support is an
AspectJ singleton aspect. The scope of a singleton aspect is the same as th=
e scope of
<code class=3D"literal">static</code> members, that is to say there is one =
aspect instance per classloader that
defines the type. This means that if you define multiple application contex=
ts within the
same classloader hierarchy you need to consider where to define the
<code class=3D"literal">@EnableSpringConfigured</code> bean and where to pl=
ace <code class=3D"literal">spring-aspects.jar</code> on the classpath.</p>
<p>Consider a typical Spring web-app configuration with a shared parent app=
lication context
defining common business services and everything needed to support them, an=
d one child
application context per servlet containing definitions particular to that s=
ervlet. All
of these contexts will co-exist within the same classloader hierarchy, and =
so the
<code class=3D"literal">AnnotationBeanConfigurerAspect</code> can only hold=
 a reference to one of them. In this case
we recommend defining the <code class=3D"literal">@EnableSpringConfigured</=
code> bean in the shared (parent)
application context: this defines the services that you are likely to want =
to inject
into domain objects. A consequence is that you cannot configure domain obje=
cts with
references to beans defined in the child (servlet-specific) contexts using =
the
@Configurable mechanism (probably not something you want to do anyway!).</p=
>
<p>When deploying multiple web-apps within the same container, ensure that =
each
web-application loads the types in <code class=3D"literal">spring-aspects.j=
ar</code> using its own classloader (for
example, by placing <code class=3D"literal">spring-aspects.jar</code> in <c=
ode class=3D"literal">'WEB-INF/lib'</code>). If <code class=3D"literal">spr=
ing-aspects.jar</code> is
only added to the container wide classpath (and hence loaded by the shared =
parent
classloader), all web applications will share the same aspect instance whic=
h is probably
not what you want.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ajlib-other" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ajlib-other"></a>1=
1.8.2&nbsp;Other Spring aspects for AspectJ</h3></div></div></div>
<p>In addition to the <code class=3D"literal">@Configurable</code> aspect, =
<code class=3D"literal">spring-aspects.jar</code> contains an AspectJ
aspect that can be used to drive Spring=92s transaction management for type=
s and methods
annotated with the <code class=3D"literal">@Transactional</code> annotation=
. This is primarily intended for users who
want to use the Spring Framework=92s transaction support outside of the Spr=
ing container.</p>
<p>The aspect that interprets <code class=3D"literal">@Transactional</code>=
 annotations is the
<code class=3D"literal">AnnotationTransactionAspect</code>. When using this=
 aspect, you must annotate the
<span class=3D"emphasis"><em>implementation</em></span> class (and/or metho=
ds within that class), <span class=3D"emphasis"><em>not</em></span> the int=
erface (if
any) that the class implements. AspectJ follows Java=92s rule that annotati=
ons on
interfaces are <span class=3D"emphasis"><em>not inherited</em></span>.</p>
<p>A <code class=3D"literal">@Transactional</code> annotation on a class sp=
ecifies the default transaction semantics for
the execution of any <span class=3D"emphasis"><em>public</em></span> operat=
ion in the class.</p>
<p>A <code class=3D"literal">@Transactional</code> annotation on a method w=
ithin the class overrides the default
transaction semantics given by the class annotation (if present). Methods o=
f any
visibility may be annotated, including private methods. Annotating non-publ=
ic methods
directly is the only way to get transaction demarcation for the execution o=
f such methods.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Since Spring Framework 4.2, <code class=3D"literal">spring-aspects</code=
> provides a similar aspect that offers the
exact same features for the standard <code class=3D"literal">javax.transact=
ion.Transactional</code> annotation. Check
<code class=3D"literal">JtaAnnotationTransactionAspect</code> for more deta=
ils.</p>
</td></tr></tbody></table></div>
<p>For AspectJ programmers that want to use the Spring configuration and tr=
ansaction
management support but don=92t want to (or cannot) use annotations, <code c=
lass=3D"literal">spring-aspects.jar</code>
also contains <code class=3D"literal">abstract</code> aspects you can exten=
d to provide your own pointcut
definitions. See the sources for the <code class=3D"literal">AbstractBeanCo=
nfigurerAspect</code> and
<code class=3D"literal">AbstractTransactionAspect</code> aspects for more i=
nformation. As an example, the following
excerpt shows how you could write an aspect to configure all instances of o=
bjects
defined in the domain model using prototype bean definitions that match the
fully-qualified class names:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> aspe=
ct DomainObjectConfiguration <span class=3D"hl-keyword">extends</span> Abst=
ractBeanConfigurerAspect {

    <span class=3D"hl-keyword">public</span> DomainObjectConfiguration() {
        setBeanWiringInfoResolver(<span class=3D"hl-keyword">new</span> Cla=
ssNameBeanWiringInfoResolver());
    }

    <span class=3D"hl-comment">// the creation of a new bean (any object in=
 the domain model)</span>
    <span class=3D"hl-keyword">protected</span> pointcut beanCreation(Objec=
t beanInstance) :
        initialization(<span class=3D"hl-keyword">new</span>(..)) &amp;&amp=
;
        SystemArchitecture.inDomainModel() &amp;&amp;
        <span class=3D"hl-keyword">this</span>(beanInstance);

}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-aj-configure" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-configure"></a=
>11.8.3&nbsp;Configuring AspectJ aspects using Spring IoC</h3></div></div><=
/div>
<p>When using AspectJ aspects with Spring applications, it is natural to bo=
th want and
expect to be able to configure such aspects using Spring. The AspectJ runti=
me itself is
responsible for aspect creation, and the means of configuring the AspectJ c=
reated
aspects via Spring depends on the AspectJ instantiation model (the <code cl=
ass=3D"literal">per-xxx</code> clause)
used by the aspect.</p>
<p>The majority of AspectJ aspects are <span class=3D"emphasis"><em>singlet=
on</em></span> aspects. Configuration of these
aspects is very easy: simply create a bean definition referencing the aspec=
t type as
normal, and include the bean attribute <code class=3D"literal">'factory-met=
hod=3D"aspectOf"'</code>. This ensures that
Spring obtains the aspect instance by asking AspectJ for it rather than try=
ing to create
an instance itself. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"profiler"</spa=
n> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"co=
m.xyz.profiler.Profiler"</span>
        <span class=3D"strong"><strong>factory-method=3D"aspectOf"</strong>=
</span>&gt;

    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"profilingStrategy"</span> <span cl=
ass=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"jamonProfilingS=
trategy"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Non-singleton aspects are harder to configure: however it is possible to=
 do so by
creating prototype bean definitions and using the <code class=3D"literal">@=
Configurable</code> support from
<code class=3D"literal">spring-aspects.jar</code> to configure the aspect i=
nstances once they have bean created by
the AspectJ runtime.</p>
<p>If you have some @AspectJ aspects that you want to weave with AspectJ (f=
or example,
using load-time weaving for domain model types) and other @AspectJ aspects =
that you want
to use with Spring AOP, and these aspects are all configured using Spring, =
then you will
need to tell the Spring AOP @AspectJ autoproxying support which exact subse=
t of the
@AspectJ aspects defined in the configuration should be used for autoproxyi=
ng. You can
do this by using one or more <code class=3D"literal">&lt;include/&gt;</code=
> elements inside the <code class=3D"literal">&lt;aop:aspectj-autoproxy/&gt=
;</code>
declaration. Each <code class=3D"literal">&lt;include/&gt;</code> element s=
pecifies a name pattern, and only beans with
names matched by at least one of the patterns will be used for Spring AOP a=
utoproxy
configuration:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:aspectj-autopr=
oxy&gt;</span>
    <span class=3D"hl-tag">&lt;aop:include</span> <span class=3D"hl-attribu=
te">name</span>=3D<span class=3D"hl-value">"thisBean"</span><span class=3D"=
hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;aop:include</span> <span class=3D"hl-attribu=
te">name</span>=3D<span class=3D"hl-value">"thatBean"</span><span class=3D"=
hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/aop:aspectj-autoproxy&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Do not be misled by the name of the <code class=3D"literal">&lt;aop:aspe=
ctj-autoproxy/&gt;</code> element: using it will
result in the creation of <span class=3D"emphasis"><em>Spring AOP proxies</=
em></span>. The @AspectJ style of aspect
declaration is just being used here, but the AspectJ runtime is <span class=
=3D"emphasis"><em>not</em></span> involved.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-aj-ltw" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw"></a>11.8.4&nbsp=
;Load-time weaving with AspectJ in the Spring Framework</h3></div></div></d=
iv>
<p>Load-time weaving (LTW) refers to the process of weaving AspectJ aspects=
 into an
application=92s class files as they are being loaded into the Java virtual =
machine (JVM).
The focus of this section is on configuring and using LTW in the specific c=
ontext of the
Spring Framework: this section is not an introduction to LTW though. For fu=
ll details on
the specifics of LTW and configuring LTW with just AspectJ (with Spring not=
 being
involved at all), see the
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released/dev=
guide/ltw.html" target=3D"_top">LTW section of the AspectJ
Development Environment Guide</a>.</p>
<p>The value-add that the Spring Framework brings to AspectJ LTW is in enab=
ling much
finer-grained control over the weaving process. 'Vanilla' AspectJ LTW is ef=
fected using
a Java (5+) agent, which is switched on by specifying a VM argument when st=
arting up a
JVM. It is thus a JVM-wide setting, which may be fine in some situations, b=
ut often is a
little too coarse. Spring-enabled LTW enables you to switch on LTW on a
<span class=3D"emphasis"><em>per-ClassLoader</em></span> basis, which obvio=
usly is more fine-grained and which can make more
sense in a 'single-JVM-multiple-application' environment (such as is found =
in a typical
application server environment).</p>
<p>Further, <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-environments=
" title=3D"Environment-specific configuration">in certain environments</a>,=
 this support enables
load-time weaving <span class=3D"emphasis"><em>without making any modificat=
ions to the application server=92s launch
script</em></span> that will be needed to add <code class=3D"literal">-java=
agent:path/to/aspectjweaver.jar</code> or (as we
describe later in this section)
<code class=3D"literal">-javaagent:path/to/org.springframework.instrument-{=
version}.jar</code> (previously named
<code class=3D"literal">spring-agent.jar</code>). Developers simply modify =
one or more files that form the
application context to enable load-time weaving instead of relying on admin=
istrators who
typically are in charge of the deployment configuration such as the launch =
script.</p>
<p>Now that the sales pitch is over, let us first walk through a quick exam=
ple of AspectJ
LTW using Spring, followed by detailed specifics about elements introduced =
in the
following example. For a complete example, please see the
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-petcli=
nic" target=3D"_top">Petclinic sample application</a>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-aj-ltw-first-example" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-fi=
rst-example"></a>A first example</h4></div></div></div>
<p>Let us assume that you are an application developer who has been tasked =
with diagnosing
the cause of some performance problems in a system. Rather than break out a=
 profiling
tool, what we are going to do is switch on a simple profiling aspect that w=
ill enable us
to very quickly get some performance metrics, so that we can then apply a f=
iner-grained
profiling tool to that specific area immediately afterwards.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The example presented here uses XML style configuration, it is also poss=
ible to
configure and use @AspectJ with <a class=3D"link" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#bea=
ns-java" title=3D"7.12&nbsp;Java-based container configuration">Java Config=
uration</a>.
Specifically the <code class=3D"literal">@EnableLoadTimeWeaving</code> anno=
tation can be used as an alternative to
<code class=3D"literal">&lt;context:load-time-weaver/&gt;</code> (see <a cl=
ass=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spri=
ng-framework-reference/htmlsingle/#aop-aj-ltw-spring" title=3D"Spring confi=
guration">below</a> for details).</p>
</td></tr></tbody></table></div>
<p>Here is the profiling aspect. Nothing too fancy, just a quick-and-dirty =
time-based
profiler, using the @AspectJ-style of aspect declaration.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> foo=
;

<span class=3D"hl-keyword">import</span> org.aspectj.lang.ProceedingJoinPoi=
nt;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Aspect=
;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Around=
;
<span class=3D"hl-keyword">import</span> org.aspectj.lang.annotation.Pointc=
ut;
<span class=3D"hl-keyword">import</span> org.springframework.util.StopWatch=
;
<span class=3D"hl-keyword">import</span> org.springframework.core.annotatio=
n.Order;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Aspect</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ProfilingAspect {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Around("method=
sToBeProfiled()")</span></em>
    <span class=3D"hl-keyword">public</span> Object profile(ProceedingJoinP=
oint pjp) <span class=3D"hl-keyword">throws</span> Throwable {
        StopWatch sw =3D <span class=3D"hl-keyword">new</span> StopWatch(ge=
tClass().getSimpleName());
        <span class=3D"hl-keyword">try</span> {
            sw.start(pjp.getSignature().getName());
            <span class=3D"hl-keyword">return</span> pjp.proceed();
        } <span class=3D"hl-keyword">finally</span> {
            sw.stop();
            System.out.println(sw.prettyPrint());
        }
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Pointcut("exec=
ution(public * foo..*.*(..))")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> methodsToBeProfiled(){}
}</pre>
<p>We will also need to create an <code class=3D"literal">META-INF/aop.xml<=
/code> file, to inform the AspectJ weaver
that we want to weave our <code class=3D"literal">ProfilingAspect</code> in=
to our classes. This file convention,
namely the presence of a file (or files) on the Java classpath called
<code class=3D"literal">META-INF/aop.xml</code> is standard AspectJ.</p>
<pre class=3D"programlisting"><strong class=3D"hl-tag" style=3D"color: blue=
">&lt;!DOCTYPE aspectj PUBLIC "-//AspectJ//DTD//EN" "http://www.eclipse.org=
/aspectj/dtd/aspectj.dtd"&gt;</strong>
<span class=3D"hl-tag">&lt;aspectj&gt;</span>

    <span class=3D"hl-tag">&lt;weaver&gt;</span>
        <span class=3D"hl-comment">&lt;!-- only weave classes in our applic=
ation-specific packages --&gt;</span>
        <span class=3D"hl-tag">&lt;include</span> <span class=3D"hl-attribu=
te">within</span>=3D<span class=3D"hl-value">"foo.*"</span><span class=3D"h=
l-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/weaver&gt;</span>

    <span class=3D"hl-tag">&lt;aspects&gt;</span>
        <span class=3D"hl-comment">&lt;!-- weave in just this aspect --&gt;=
</span>
        <span class=3D"hl-tag">&lt;aspect</span> <span class=3D"hl-attribut=
e">name</span>=3D<span class=3D"hl-value">"foo.ProfilingAspect"</span><span=
 class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/aspects&gt;</span>

<span class=3D"hl-tag">&lt;/aspectj&gt;</span></pre>
<p>Now to the Spring-specific portion of the configuration. We need to conf=
igure a
<code class=3D"literal">LoadTimeWeaver</code> (all explained later, just ta=
ke it on trust for now). This load-time
weaver is the essential component responsible for weaving the aspect config=
uration in
one or more <code class=3D"literal">META-INF/aop.xml</code> files into the =
classes in your application. The good
thing is that it does not require a lot of configuration, as can be seen be=
low (there
are some more options that you can specify, but these are detailed later).<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- a service object; we will be profili=
ng its methods --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"entitlementCalculationService"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"foo.StubEntitlementCalculationService"</span><span class=3D"hl-tag">=
/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this switches on the load-time weavi=
ng --&gt;</span>
    <span class=3D"strong"><strong>&lt;context:load-time-weaver/&gt;</stron=
g></span>
<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>Now that all the required artifacts are in place - the aspect, the <code=
 class=3D"literal">META-INF/aop.xml</code>
file, and the Spring configuration -, let us create a simple driver class w=
ith a
<code class=3D"literal">main(..)</code> method to demonstrate the LTW in ac=
tion.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> foo=
;

<span class=3D"hl-keyword">import</span> org.springframework.context.suppor=
t.ClassPathXmlApplicationContext;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> Main {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(String[] args) {

        ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Cl=
assPathXmlApplicationContext(<span class=3D"hl-string">"beans.xml"</span>, =
Main.<span class=3D"hl-keyword">class</span>);

        EntitlementCalculationService entitlementCalculationService
            =3D (EntitlementCalculationService) ctx.getBean(<span class=3D"=
hl-string">"entitlementCalculationService"</span>);

        <span class=3D"hl-comment">// the profiling aspect is 'woven' aroun=
d this method execution</span>
        entitlementCalculationService.calculateEntitlement();
    }
}</pre>
<p>There is one last thing to do. The introduction to this section did say =
that one could
switch on LTW selectively on a per- <code class=3D"literal">ClassLoader</co=
de> basis with Spring, and this is true.
However, just for this example, we are going to use a Java agent (supplied =
with Spring)
to switch on the LTW. This is the command line we will use to run the above=
 <code class=3D"literal">Main</code> class:</p>
<pre class=3D"literallayout">java -javaagent:C:/projects/foo/lib/global/spr=
ing-instrument.jar foo.Main</pre>
<p>The <code class=3D"literal">-javaagent</code> is a flag for specifying a=
nd enabling
<a class=3D"ulink" href=3D"https://docs.oracle.com/javase/6/docs/api/java/l=
ang/instrument/package-summary.html" target=3D"_top">agents
to instrument programs running on the JVM</a>. The Spring Framework ships w=
ith such an
agent, the <code class=3D"literal">InstrumentationSavingAgent</code>, which=
 is packaged in the
<code class=3D"literal">spring-instrument.jar</code> that was supplied as t=
he value of the <code class=3D"literal">-javaagent</code> argument in
the above example.</p>
<p>The output from the execution of the <code class=3D"literal">Main</code>=
 program will look something like that below.
(I have introduced a <code class=3D"literal">Thread.sleep(..)</code> statem=
ent into the <code class=3D"literal">calculateEntitlement()</code>
implementation so that the profiler actually captures something other than =
0
milliseconds - the <code class=3D"literal">01234</code> milliseconds is <sp=
an class=3D"emphasis"><em>not</em></span> an overhead introduced by the AOP=
 :) )</p>
<pre class=3D"literallayout">Calculating entitlement

StopWatch 'ProfilingAspect': running time (millis) =3D 1234
------ ----- ----------------------------
ms     %     Task name
------ ----- ----------------------------
01234  100%  calculateEntitlement</pre>
<p>Since this LTW is effected using full-blown AspectJ, we are not just lim=
ited to advising
Spring beans; the following slight variation on the <code class=3D"literal"=
>Main</code> program will yield the same
result.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> foo=
;

<span class=3D"hl-keyword">import</span> org.springframework.context.suppor=
t.ClassPathXmlApplicationContext;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">final</=
span> <span class=3D"hl-keyword">class</span> Main {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(String[] args) {

        <span class=3D"hl-keyword">new</span> ClassPathXmlApplicationContex=
t(<span class=3D"hl-string">"beans.xml"</span>, Main.<span class=3D"hl-keyw=
ord">class</span>);

        EntitlementCalculationService entitlementCalculationService =3D
            <span class=3D"hl-keyword">new</span> StubEntitlementCalculatio=
nService();

        <span class=3D"hl-comment">// the profiling aspect will be 'woven' =
around this method execution</span>
        entitlementCalculationService.calculateEntitlement();
    }
}</pre>
<p>Notice how in the above program we are simply bootstrapping the Spring c=
ontainer, and
then creating a new instance of the <code class=3D"literal">StubEntitlement=
CalculationService</code> totally outside
the context of Spring=85&#8203; the profiling advice still gets woven in.</=
p>
<p>The example admittedly is simplistic=85&#8203; however the basics of the=
 LTW support in Spring
have all been introduced in the above example, and the rest of this section=
 will explain
the 'why' behind each bit of configuration and usage in detail.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">ProfilingAspect</code> used in this example =
may be basic, but it is quite useful. It is a
nice example of a development-time aspect that developers can use during de=
velopment (of
course), and then quite easily exclude from builds of the application being=
 deployed
into UAT or production.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-aj-ltw-the-aspects" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-the-=
aspects"></a>Aspects</h4></div></div></div>
<p>The aspects that you use in LTW have to be AspectJ aspects. They can be =
written in
either the AspectJ language itself or you can write your aspects in the @As=
pectJ-style.
It means that your aspects are then both valid AspectJ <span class=3D"empha=
sis"><em>and</em></span> Spring AOP aspects.
Furthermore, the compiled aspect classes need to be available on the classp=
ath.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-aj-ltw-aop_dot_xml" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-aop_=
dot_xml"></a>'META-INF/aop.xml'</h4></div></div></div>
<p>The AspectJ LTW infrastructure is configured using one or more <code cla=
ss=3D"literal">META-INF/aop.xml</code>
files, that are on the Java classpath (either directly, or more typically i=
n jar files).</p>
<p>The structure and contents of this file is detailed in the main AspectJ =
reference
documentation, and the interested reader is
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released/dev=
guide/ltw-configuration.html" target=3D"_top">referred to
that resource</a>. (I appreciate that this section is brief, but the <code =
class=3D"literal">aop.xml</code> file is
100% AspectJ - there is no Spring-specific information or semantics that ap=
ply to it,
and so there is no extra value that I can contribute either as a result), s=
o rather than
rehash the quite satisfactory section that the AspectJ developers wrote, I =
am just
directing you there.)</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-aj-ltw-libraries" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-librar=
ies"></a>Required libraries (JARS)</h4></div></div></div>
<p>At a minimum you will need the following libraries to use the Spring Fra=
mework=92s support
for AspectJ LTW:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">spring-aop.jar</code> (version 2.5 or later, plus a=
ll mandatory dependencies)
</li><li class=3D"listitem">
<code class=3D"literal">aspectjweaver.jar</code> (version 1.6.8 or later)
</li></ul></div>
<p>If you are using the <a class=3D"link" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-=
environment-generic" title=3D"Generic Java applications">Spring-provided ag=
ent to enable
instrumentation</a>, you will also need:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">spring-instrument.jar</code>
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-aj-ltw-spring" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-spring"><=
/a>Spring configuration</h4></div></div></div>
<p>The key component in Spring=92s LTW support is the <code class=3D"litera=
l">LoadTimeWeaver</code> interface (in the
<code class=3D"literal">org.springframework.instrument.classloading</code> =
package), and the numerous implementations
of it that ship with the Spring distribution. A <code class=3D"literal">Loa=
dTimeWeaver</code> is responsible for
adding one or more <code class=3D"literal">java.lang.instrument.ClassFileTr=
ansformers</code> to a <code class=3D"literal">ClassLoader</code> at
runtime, which opens the door to all manner of interesting applications, on=
e of which
happens to be the LTW of aspects.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>If you are unfamiliar with the idea of runtime class file transformation=
, you are
encouraged to read the javadoc API documentation for the <code class=3D"lit=
eral">java.lang.instrument</code> package
before continuing. This is not a huge chore because there is - rather annoy=
ingly -
precious little documentation there=85&#8203; the key interfaces and classe=
s will at least be
laid out in front of you for reference as you read through this section.</p=
>
</td></tr></tbody></table></div>
<p>Configuring a <code class=3D"literal">LoadTimeWeaver</code> for a partic=
ular <code class=3D"literal">ApplicationContext</code> can be as easy as
adding one line. (Please note that you almost certainly will need to be usi=
ng an
<code class=3D"literal">ApplicationContext</code> as your Spring container =
- typically a <code class=3D"literal">BeanFactory</code> will not be
enough because the LTW support makes use of <code class=3D"literal">BeanFac=
toryPostProcessors</code>.)</p>
<p>To enable the Spring Framework=92s LTW support, you need to configure a =
<code class=3D"literal">LoadTimeWeaver</code>,
which typically is done using the <code class=3D"literal">@EnableLoadTimeWe=
aving</code> annotation.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@EnableLoadTimeWeav=
ing</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig {

}</pre>
<p>Alternatively, if you prefer XML based configuration, use the
<code class=3D"literal">&lt;context:load-time-weaver/&gt;</code> element. N=
ote that the element is defined in the
<code class=3D"literal">context</code> namespace.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:load-time-weaver/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The above configuration will define and register a number of LTW-specifi=
c infrastructure
beans for you automatically, such as a <code class=3D"literal">LoadTimeWeav=
er</code> and an <code class=3D"literal">AspectJWeavingEnabler</code>.
The default <code class=3D"literal">LoadTimeWeaver</code> is the <code clas=
s=3D"literal">DefaultContextLoadTimeWeaver</code> class, which attempts
to decorate an automatically detected <code class=3D"literal">LoadTimeWeave=
r</code>: the exact type of
<code class=3D"literal">LoadTimeWeaver</code> that will be 'automatically d=
etected' is dependent upon your runtime
environment (summarized in the following table).</p>
<div class=3D"table"><a name=3D"aop-aj-ltw-spring-env-impls" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#aop-aj-ltw-spring-env-impls"></a><p class=3D"title"><b>Table&nbsp;1=
1.1.&nbsp;DefaultContextLoadTimeWeaver LoadTimeWeavers</b></p><div class=3D=
"table-contents">
<table summary=3D"DefaultContextLoadTimeWeaver LoadTimeWeavers" style=3D"bo=
rder-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt soli=
d ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col=
 class=3D"col_1"><col class=3D"col_2"></colgroup><thead><tr><th style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top">Runtime Environment</th><th style=3D"border-bottom: 0.5pt solid=
 ; " align=3D"left" valign=3D"top"><code class=3D"literal">LoadTimeWeaver</=
code> implementation</th></tr></thead><tbody><tr><td style=3D"border-right:=
 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p>Running in Oracle=92s
<a class=3D"ulink" href=3D"http://www.oracle.com/technetwork/middleware/web=
logic/overview/index-085209.html" target=3D"_top">WebLogic</a></p></td><td =
style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><c=
ode class=3D"literal">WebLogicLoadTimeWeaver</code></p></td></tr><tr><td st=
yle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"=
left" valign=3D"top"><p>Running in Oracle=92s <a class=3D"ulink" href=3D"ht=
tp://glassfish.dev.java.net/" target=3D"_top">GlassFish</a></p></td><td sty=
le=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code=
 class=3D"literal">GlassFishLoadTimeWeaver</code></p></td></tr><tr><td styl=
e=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p>Running in <a class=3D"ulink" href=3D"https://tomcat.=
apache.org/" target=3D"_top">Apache Tomcat</a></p></td><td style=3D"border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"lit=
eral">TomcatLoadTimeWeaver</code></p></td></tr><tr><td style=3D"border-righ=
t: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"to=
p"><p>Running in Red Hat=92s <a class=3D"ulink" href=3D"http://www.jboss.or=
g/jbossas/" target=3D"_top">JBoss AS</a> or <a class=3D"ulink" href=3D"http=
://www.wildfly.org/" target=3D"_top">WildFly</a></p></td><td style=3D"borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"l=
iteral">JBossLoadTimeWeaver</code></p></td></tr><tr><td style=3D"border-rig=
ht: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>Running in IBM=92s <a class=3D"ulink" href=3D"https://www-01.ibm.com=
/software/webservers/appserv/was/" target=3D"_top">WebSphere</a></p></td><t=
d style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
<code class=3D"literal">WebSphereLoadTimeWeaver</code></p></td></tr><tr><td=
 style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>JVM started with Spring <code class=3D"literal"=
>InstrumentationSavingAgent</code> <span class=3D"emphasis"><em>(java
-javaagent:path/to/spring-instrument.jar)</em></span></p></td><td style=3D"=
border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">InstrumentationLoadTimeWeaver</code></p></td></tr><tr><td styl=
e=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Fallbac=
k, expecting the underlying ClassLoader to follow common conventions (e.g.
applicable to <code class=3D"literal">TomcatInstrumentableClassLoader</code=
> and <a class=3D"ulink" href=3D"http://www.caucho.com/" target=3D"_top">Re=
sin</a>)</p></td><td style=3D"" align=3D"left" valign=3D"top"><p><code clas=
s=3D"literal">ReflectiveLoadTimeWeaver</code></p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>Note that these are just the <code class=3D"literal">LoadTimeWeavers</co=
de> that are autodetected when using the
<code class=3D"literal">DefaultContextLoadTimeWeaver</code>: it is of cours=
e possible to specify exactly which
<code class=3D"literal">LoadTimeWeaver</code> implementation that you wish =
to use.</p>
<p>To specify a specific <code class=3D"literal">LoadTimeWeaver</code> with=
 Java configuration implement the
<code class=3D"literal">LoadTimeWeavingConfigurer</code> interface and over=
ride the <code class=3D"literal">getLoadTimeWeaver()</code> method:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@EnableLoadTimeWeav=
ing</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AppConfig <span class=3D"hl-keyword">implements</span> LoadTimeWeavin=
gConfigurer {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Override</span=
></em>
    <span class=3D"hl-keyword">public</span> LoadTimeWeaver getLoadTimeWeav=
er() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> ReflectiveLoadTimeWeaver();
    }
}</pre>
<p>If you are using XML based configuration you can specify the fully-quali=
fied classname
as the value of the <code class=3D"literal">weaver-class</code> attribute o=
n the <code class=3D"literal">&lt;context:load-time-weaver/&gt;</code>
element:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;context:load-time-weaver</span>
            <span class=3D"hl-attribute">weaver-class</span>=3D<span class=
=3D"hl-value">"org.springframework.instrument.classloading.ReflectiveLoadTi=
meWeaver"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The <code class=3D"literal">LoadTimeWeaver</code> that is defined and re=
gistered by the configuration can be later
retrieved from the Spring container using the well-known name <code class=
=3D"literal">loadTimeWeaver</code>.
Remember that the <code class=3D"literal">LoadTimeWeaver</code> exists just=
 as a mechanism for Spring=92s LTW
infrastructure to add one or more <code class=3D"literal">ClassFileTransfor=
mers</code>. The actual
<code class=3D"literal">ClassFileTransformer</code> that does the LTW is th=
e <code class=3D"literal">ClassPreProcessorAgentAdapter</code> (from
the <code class=3D"literal">org.aspectj.weaver.loadtime</code> package) cla=
ss. See the class-level javadocs of the
<code class=3D"literal">ClassPreProcessorAgentAdapter</code> class for furt=
her details, because the specifics of how
the weaving is actually effected is beyond the scope of this section.</p>
<p>There is one final attribute of the configuration left to discuss: the
<code class=3D"literal">aspectjWeaving</code> attribute (or <code class=3D"=
literal">aspectj-weaving</code> if you are using XML). This is a
simple attribute that controls whether LTW is enabled or not; it is as simp=
le as that.
It accepts one of three possible values, summarized below, with the default=
 value being
<code class=3D"literal">autodetect</code> if the attribute is not present.<=
/p>
<div class=3D"table"><a name=3D"aop-aj-ltw-ltw-tag-attrs" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#aop-aj-ltw-ltw-tag-attrs"></a><p class=3D"title"><b>Table&nbsp;11.2.&n=
bsp;AspectJ weaving attribute values</b></p><div class=3D"table-contents">
<table summary=3D"AspectJ weaving attribute values" style=3D"border-collaps=
e: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-l=
eft: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"co=
l_1"><col class=3D"col_2"><col class=3D"col_3"></colgroup><thead><tr><th st=
yle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"=
left" valign=3D"top">Annotation Value</th><th style=3D"border-right: 0.5pt =
solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">XML Va=
lue</th><th style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top">Explanation</th></tr></thead><tbody><tr><td style=3D"border-right:=
 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p><code class=3D"literal">ENABLED</code></p></td><td style=3D"border-righ=
t: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"to=
p"><p><code class=3D"literal">on</code></p></td><td style=3D"border-bottom:=
 0.5pt solid ; " align=3D"left" valign=3D"top"><p>AspectJ weaving is on, an=
d aspects will be woven at load-time as appropriate.</p></td></tr><tr><td s=
tyle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D=
"left" valign=3D"top"><p><code class=3D"literal">DISABLED</code></p></td><t=
d style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p><code class=3D"literal">off</code></p></td><td =
style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>LT=
W is off=85&#8203; no aspect will be woven at load-time.</p></td></tr><tr><=
td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
<code class=3D"literal">AUTODETECT</code></p></td><td style=3D"border-right=
: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal">=
autodetect</code></p></td><td style=3D"" align=3D"left" valign=3D"top"><p>I=
f the Spring LTW infrastructure can find at least one <code class=3D"litera=
l">META-INF/aop.xml</code> file,
then AspectJ weaving is on, else it is off. This is the default value.</p><=
/td></tr></tbody></table>
</div></div><br class=3D"table-break">
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-aj-ltw-environments" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-env=
ironments"></a>Environment-specific configuration</h4></div></div></div>
<p>This last section contains any additional settings and configuration tha=
t you will need
when using Spring=92s LTW support in environments such as application serve=
rs and web
containers.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-aj-ltw-environment-tomcat" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-l=
tw-environment-tomcat"></a>Tomcat</h5></div></div></div>
<p>Historically, <a class=3D"ulink" href=3D"https://tomcat.apache.org/" tar=
get=3D"_top">Apache Tomcat</a>'s default class loader did not
support class transformation which is why Spring provides an enhanced imple=
mentation
that addresses this need. Named <code class=3D"literal">TomcatInstrumentabl=
eClassLoader</code>, the loader works on
Tomcat 6.0 and above.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Do not define <code class=3D"literal">TomcatInstrumentableClassLoader</c=
ode> anymore on Tomcat 8.0 and higher.
Instead, let Spring automatically use Tomcat=92s new native <code class=3D"=
literal">InstrumentableClassLoader</code>
facility through the <code class=3D"literal">TomcatLoadTimeWeaver</code> st=
rategy.</p>
</td></tr></tbody></table></div>
<p>If you still need to use <code class=3D"literal">TomcatInstrumentableCla=
ssLoader</code>, it can be registered
individually for <span class=3D"emphasis"><em>each</em></span> web applicat=
ion as follows:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Copy <code class=3D"literal">org.springframework.instrument.tomcat.jar</cod=
e> into <span class=3D"emphasis"><em>$CATALINA_HOME</em></span>/lib, where
<span class=3D"emphasis"><em>$CATALINA_HOME</em></span> represents the root=
 of the Tomcat installation)
</li><li class=3D"listitem">
Instruct Tomcat to use the custom class loader (instead of the default) by =
editing the
web application context file:
</li></ul></div>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;Context</span> <sp=
an class=3D"hl-attribute">path</span>=3D<span class=3D"hl-value">"/myWebApp=
"</span> <span class=3D"hl-attribute">docBase</span>=3D<span class=3D"hl-va=
lue">"/my/webApp/location"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;Loader</span>
        <span class=3D"hl-attribute">loaderClass</span>=3D<span class=3D"hl=
-value">"org.springframework.instrument.classloading.tomcat.TomcatInstrumen=
tableClassLoader"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/Context&gt;</span></pre>
<p>Apache Tomcat (6.0+) supports several context locations:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
server configuration file - <span class=3D"emphasis"><em>$CATALINA_HOME/con=
f/server.xml</em></span>
</li><li class=3D"listitem">
default context configuration - <span class=3D"emphasis"><em>$CATALINA_HOME=
/conf/context.xml</em></span> - that affects all
deployed web applications
</li><li class=3D"listitem">
per-web application configuration which can be deployed either on the serve=
r-side at
<span class=3D"emphasis"><em>$CATALINA_HOME/conf/[enginename]/[hostname]/[w=
ebapp]-context.xml</em></span> or embedded
inside the web-app archive at <span class=3D"emphasis"><em>META-INF/context=
.xml</em></span>
</li></ul></div>
<p>For efficiency, the embedded per-web-app configuration style is recommen=
ded because it
will impact only applications that use the custom class loader and does not=
 require any
changes to the server configuration. See the Tomcat 6.0.x
<a class=3D"ulink" href=3D"https://tomcat.apache.org/tomcat-6.0-doc/config/=
context.html" target=3D"_top">documentation</a> for more
details about available context locations.</p>
<p>Alternatively, consider the use of the Spring-provided generic VM agent,=
 to be specified
in Tomcat=92s launch script (see above). This will make instrumentation ava=
ilable to all
deployed web applications, no matter what ClassLoader they happen to run on=
.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-aj-ltw-environments-weblogic-oc4j-resin-glassfish-jboss" =
href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-=
reference/htmlsingle/#aop-aj-ltw-environments-weblogic-oc4j-resin-glassfish=
-jboss"></a>WebLogic, WebSphere, Resin, GlassFish, JBoss</h5></div></div></=
div>
<p>Recent versions of WebLogic Server (version 10 and above), IBM WebSphere=
 Application
Server (version 7 and above), Resin (3.1 and above) and JBoss (6.x or above=
) provide a
ClassLoader that is capable of local instrumentation. Spring=92s native LTW=
 leverages such
ClassLoaders to enable AspectJ weaving. You can enable LTW by simply activa=
ting
load-time weaving as described earlier. Specifically, you do <span class=3D=
"emphasis"><em>not</em></span> need to modify the
launch script to add <code class=3D"literal">-javaagent:path/to/spring-inst=
rument.jar</code>.</p>
<p>Note that GlassFish instrumentation-capable ClassLoader is available onl=
y in its EAR
environment. For GlassFish web applications, follow the Tomcat setup instru=
ctions as
outlined above.</p>
<p>Note that on JBoss 6.x, the app server scanning needs to be disabled to =
prevent it from
loading the classes before the application actually starts. A quick workaro=
und is to add
to your artifact a file named <code class=3D"literal">WEB-INF/jboss-scannin=
g.xml</code> with the following content:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;scanning</span> <s=
pan class=3D"hl-attribute">xmlns</span>=3D<span class=3D"hl-value">"urn:jbo=
ss:scanning:1.0"</span><span class=3D"hl-tag">/&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-aj-ltw-environment-generic" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-=
ltw-environment-generic"></a>Generic Java applications</h5></div></div></di=
v>
<p>When class instrumentation is required in environments that do not suppo=
rt or are not
supported by the existing <code class=3D"literal">LoadTimeWeaver</code> imp=
lementations, a JDK agent can be the only
solution. For such cases, Spring provides <code class=3D"literal">Instrumen=
tationLoadTimeWeaver</code>, which
requires a Spring-specific (but very general) VM agent,
<code class=3D"literal">org.springframework.instrument-{version}.jar</code>=
 (previously named <code class=3D"literal">spring-agent.jar</code>).</p>
<p>To use it, you must start the virtual machine with the Spring agent, by =
supplying the
following JVM options:</p>
<pre class=3D"literallayout">-javaagent:/path/to/org.springframework.instru=
ment-{version}.jar</pre>
<p>Note that this requires modification of the VM launch script which may p=
revent you from
using this in application server environments (depending on your operation =
policies).
Additionally, the JDK agent will instrument the <span class=3D"emphasis"><e=
m>entire</em></span> VM which can prove expensive.</p>
<p>For performance reasons, it is recommended to use this configuration onl=
y if your target
environment (such as <a class=3D"ulink" href=3D"https://www.eclipse.org/jet=
ty/" target=3D"_top">Jetty</a>) does not have (or does not
support) a dedicated LTW.</p>
</div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-resources" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ao=
p-resources"></a>11.9&nbsp;Further Resources</h2></div></div></div>
<p>More information on AspectJ can be found on the <a class=3D"ulink" href=
=3D"https://www.eclipse.org/aspectj" target=3D"_top">AspectJ
website</a>.</p>
<p>The book <span class=3D"emphasis"><em>Eclipse AspectJ</em></span> by Adr=
ian Colyer et. al. (Addison-Wesley, 2005) provides a
comprehensive introduction and reference for the AspectJ language.</p>
<p>The book <span class=3D"emphasis"><em>AspectJ in Action, Second Edition<=
/em></span> by Ramnivas Laddad (Manning, 2009) comes highly
recommended; the focus of the book is on AspectJ, but a lot of general AOP =
themes are
explored (in some depth).</p>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"aop-api" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#aop-api"></a>12.&nbsp;Spring A=
OP APIs</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-api-introduction" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#aop-api-introduction"></a>12.1&nbsp;Introduction</h2></div></div></div=
>
<p>The previous chapter described the Spring=92s support for AOP using
@AspectJ and schema-based aspect definitions. In this chapter we discuss th=
e lower-level
Spring AOP APIs and the AOP support used in Spring 1.2 applications. For ne=
w
applications, we recommend the use of the Spring 2.0 and later AOP support =
described in
the previous chapter, but when working with existing applications, or when =
reading books
and articles, you may come across Spring 1.2 style examples. Spring 4.0 is =
backwards
compatible with Spring 1.2 and everything described in this chapter is full=
y supported
in Spring 4.0.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-api-pointcuts" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-api-pointcuts"></a>12.2&nbsp;Pointcut API in Spring</h2></div></div><=
/div>
<p>Let=92s look at how Spring handles the crucial pointcut concept.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-concepts" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-concepts"></a=
>12.2.1&nbsp;Concepts</h3></div></div></div>
<p>Spring=92s pointcut model enables pointcut reuse independent of advice t=
ypes. It=92s
possible to target different advice using the same pointcut.</p>
<p>The <code class=3D"literal">org.springframework.aop.Pointcut</code> inte=
rface is the central interface, used to
target advices to particular classes and methods. The complete interface is=
 shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Pointcut {

    ClassFilter getClassFilter();

    MethodMatcher getMethodMatcher();

}</pre>
<p>Splitting the <code class=3D"literal">Pointcut</code> interface into two=
 parts allows reuse of class and method
matching parts, and fine-grained composition operations (such as performing=
 a "union"
with another method matcher).</p>
<p>The <code class=3D"literal">ClassFilter</code> interface is used to rest=
rict the pointcut to a given set of target
classes. If the <code class=3D"literal">matches()</code> method always retu=
rns true, all target classes will be
matched:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> ClassFilter {

    <span class=3D"hl-keyword">boolean</span> matches(Class clazz);
}</pre>
<p>The <code class=3D"literal">MethodMatcher</code> interface is normally m=
ore important. The complete interface is
shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> MethodMatcher {

    <span class=3D"hl-keyword">boolean</span> matches(Method m, Class targe=
tClass);

    <span class=3D"hl-keyword">boolean</span> isRuntime();

    <span class=3D"hl-keyword">boolean</span> matches(Method m, Class targe=
tClass, Object[] args);
}</pre>
<p>The <code class=3D"literal">matches(Method, Class)</code> method is used=
 to test whether this pointcut will ever
match a given method on a target class. This evaluation can be performed wh=
en an AOP
proxy is created, to avoid the need for a test on every method invocation. =
If the
2-argument matches method returns true for a given method, and the <code cl=
ass=3D"literal">isRuntime()</code> method
for the MethodMatcher returns true, the 3-argument matches method will be i=
nvoked on
every method invocation. This enables a pointcut to look at the arguments p=
assed to the
method invocation immediately before the target advice is to execute.</p>
<p>Most MethodMatchers are static, meaning that their <code class=3D"litera=
l">isRuntime()</code> method returns false.
In this case, the 3-argument matches method will never be invoked.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>If possible, try to make pointcuts static, allowing the AOP framework to=
 cache the
results of pointcut evaluation when an AOP proxy is created.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-pointcut-ops" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointcut-=
ops"></a>12.2.2&nbsp;Operations on pointcuts</h3></div></div></div>
<p>Spring supports operations on pointcuts: notably, <span class=3D"emphasi=
s"><em>union</em></span> and <span class=3D"emphasis"><em>intersection</em>=
</span>.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Union means the methods that either pointcut matches.
</li><li class=3D"listitem">
Intersection means the methods that both pointcuts match.
</li><li class=3D"listitem">
Union is usually more useful.
</li><li class=3D"listitem">
Pointcuts can be composed using the static methods in the
<span class=3D"emphasis"><em>org.springframework.aop.support.Pointcuts</em>=
</span> class, or using the
<span class=3D"emphasis"><em>ComposablePointcut</em></span> class in the sa=
me package. However, using AspectJ pointcut
expressions is usually a simpler approach.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-aspectj" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-poin=
tcuts-aspectj"></a>12.2.3&nbsp;AspectJ expression pointcuts</h3></div></div=
></div>
<p>Since 2.0, the most important type of pointcut used by Spring is
<code class=3D"literal">org.springframework.aop.aspectj.AspectJExpressionPo=
intcut</code>. This is a pointcut that
uses an AspectJ supplied library to parse an AspectJ pointcut expression st=
ring.</p>
<p>See the previous chapter for a discussion of supported AspectJ pointcut =
primitives.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-impls" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointc=
uts-impls"></a>12.2.4&nbsp;Convenience pointcut implementations</h3></div><=
/div></div>
<p>Spring provides several convenient pointcut implementations. Some can be=
 used out of the
box; others are intended to be subclassed in application-specific pointcuts=
.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-static" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-point=
cuts-static"></a>Static pointcuts</h4></div></div></div>
<p>Static pointcuts are based on method and target class, and cannot take i=
nto account the
method=92s arguments. Static pointcuts are sufficient - <span class=3D"emph=
asis"><em>and best</em></span> - for most usages.
It=92s possible for Spring to evaluate a static pointcut only once, when a =
method is first
invoked: after that, there is no need to evaluate the pointcut again with e=
ach method
invocation.</p>
<p>Let=92s consider some static pointcut implementations included with Spri=
ng.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-regex" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointc=
uts-regex"></a>Regular expression pointcuts</h5></div></div></div>
<p>One obvious way to specify static pointcuts is regular expressions. Seve=
ral AOP
frameworks besides Spring make this possible.
<code class=3D"literal">org.springframework.aop.support.JdkRegexpMethodPoin=
tcut</code> is a generic regular
expression pointcut, using the regular expression support in JDK 1.4+.</p>
<p>Using the <code class=3D"literal">JdkRegexpMethodPointcut</code> class, =
you can provide a list of pattern Strings. If
any of these is a match, the pointcut will evaluate to true. (So the result=
 is
effectively the union of these pointcuts.)</p>
<p>The usage is shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"settersAndAbsq=
uatulatePointcut"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.aop.support.JdkRegexpMethodPointcut"</span><span cla=
ss=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"patterns"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>.*set.*<span class=
=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>.*absquatulate<span =
class=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Spring provides a convenience class, <code class=3D"literal">RegexpMetho=
dPointcutAdvisor</code>, that allows us to
also reference an Advice (remember that an Advice can be an interceptor, be=
fore advice,
throws advice etc.). Behind the scenes, Spring will use a <code class=3D"li=
teral">JdkRegexpMethodPointcut</code>.
Using <code class=3D"literal">RegexpMethodPointcutAdvisor</code> simplifies=
 wiring, as the one bean encapsulates both
pointcut and advice, as shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"settersAndAbsq=
uatulateAdvisor"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span><span=
 class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"advice"</span><span class=3D"hl-ta=
g">&gt;</span>
        <span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attribute">=
bean</span>=3D<span class=3D"hl-value">"beanNameOfAopAllianceInterceptor"</=
span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"patterns"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>.*set.*<span class=
=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>.*absquatulate<span =
class=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p><span class=3D"emphasis"><em>RegexpMethodPointcutAdvisor</em></span> can=
 be used with any Advice type.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-attribute-driven" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop=
-api-pointcuts-attribute-driven"></a>Attribute-driven pointcuts</h5></div><=
/div></div>
<p>An important type of static pointcut is a <span class=3D"emphasis"><em>m=
etadata-driven</em></span> pointcut. This uses the
values of metadata attributes: typically, source-level metadata.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-dynamic" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-poin=
tcuts-dynamic"></a>Dynamic pointcuts</h4></div></div></div>
<p>Dynamic pointcuts are costlier to evaluate than static pointcuts. They t=
ake into account
method <span class=3D"emphasis"><em>arguments</em></span>, as well as stati=
c information. This means that they must be
evaluated with every method invocation; the result cannot be cached, as arg=
uments will
vary.</p>
<p>The main example is the <code class=3D"literal">control flow</code> poin=
tcut.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-cflow" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-pointc=
uts-cflow"></a>Control flow pointcuts</h5></div></div></div>
<p>Spring control flow pointcuts are conceptually similar to AspectJ <span =
class=3D"emphasis"><em>cflow</em></span> pointcuts,
although less powerful. (There is currently no way to specify that a pointc=
ut executes
below a join point matched by another pointcut.) A control flow pointcut ma=
tches the
current call stack. For example, it might fire if the join point was invoke=
d by a method
in the <code class=3D"literal">com.mycompany.web</code> package, or by the =
<code class=3D"literal">SomeCaller</code> class. Control flow pointcuts
are specified using the <code class=3D"literal">org.springframework.aop.sup=
port.ControlFlowPointcut</code> class.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Control flow pointcuts are significantly more expensive to evaluate at r=
untime than even
other dynamic pointcuts. In Java 1.4, the cost is about 5 times that of oth=
er dynamic
pointcuts.</p>
</td></tr></tbody></table></div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-superclasses" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api=
-pointcuts-superclasses"></a>12.2.5&nbsp;Pointcut superclasses</h3></div></=
div></div>
<p>Spring provides useful pointcut superclasses to help you to implement yo=
ur own pointcuts.</p>
<p>Because static pointcuts are most useful, you=92ll probably subclass
StaticMethodMatcherPointcut, as shown below. This requires implementing jus=
t one
abstract method (although it=92s possible to override other methods to cust=
omize behavior):</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">class</span> TestS=
taticPointcut <span class=3D"hl-keyword">extends</span> StaticMethodMatcher=
Pointcut {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boo=
lean</span> matches(Method m, Class targetClass) {
        <span class=3D"hl-comment">// return true if custom criteria match<=
/span>
    }
}</pre>
<p>There are also superclasses for dynamic pointcuts.</p>
<p>You can use custom pointcuts with any advice type in Spring 1.0 RC2 and =
above.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-pointcuts-custom" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-point=
cuts-custom"></a>12.2.6&nbsp;Custom pointcuts</h3></div></div></div>
<p>Because pointcuts in Spring AOP are Java classes, rather than language f=
eatures (as in
AspectJ) it=92s possible to declare custom pointcuts, whether static or dyn=
amic. Custom
pointcuts in Spring can be arbitrarily complex. However, using the AspectJ =
pointcut
expression language is recommended if possible.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Later versions of Spring may offer support for "semantic pointcuts" as o=
ffered by JAC:
for example, "all methods that change instance variables in the target obje=
ct."</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-api-advice" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#a=
op-api-advice"></a>12.3&nbsp;Advice API in Spring</h2></div></div></div>
<p>Let=92s now look at how Spring AOP handles advice.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-advice-lifecycle" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advic=
e-lifecycle"></a>12.3.1&nbsp;Advice lifecycles</h3></div></div></div>
<p>Each advice is a Spring bean. An advice instance can be shared across al=
l advised
objects, or unique to each advised object. This corresponds to <span class=
=3D"emphasis"><em>per-class</em></span> or
<span class=3D"emphasis"><em>per-instance</em></span> advice.</p>
<p>Per-class advice is used most often. It is appropriate for generic advic=
e such as
transaction advisors. These do not depend on the state of the proxied objec=
t or add new
state; they merely act on the method and arguments.</p>
<p>Per-instance advice is appropriate for introductions, to support mixins.=
 In this case,
the advice adds state to the proxied object.</p>
<p>It=92s possible to use a mix of shared and per-instance advice in the sa=
me AOP proxy.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-advice-types" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-ty=
pes"></a>12.3.2&nbsp;Advice types in Spring</h3></div></div></div>
<p>Spring provides several advice types out of the box, and is extensible t=
o support
arbitrary advice types. Let us look at the basic concepts and standard advi=
ce types.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-advice-around" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-a=
round"></a>Interception around advice</h4></div></div></div>
<p>The most fundamental advice type in Spring is <span class=3D"emphasis"><=
em>interception around advice</em></span>.</p>
<p>Spring is compliant with the AOP Alliance interface for around advice us=
ing method
interception. MethodInterceptors implementing around advice should implemen=
t the
following interface:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> MethodInterceptor <span class=3D"hl=
-keyword">extends</span> Interceptor {

    Object invoke(MethodInvocation invocation) <span class=3D"hl-keyword">t=
hrows</span> Throwable;
}</pre>
<p>The <code class=3D"literal">MethodInvocation</code> argument to the <cod=
e class=3D"literal">invoke()</code> method exposes the method being
invoked; the target join point; the AOP proxy; and the arguments to the met=
hod. The
<code class=3D"literal">invoke()</code> method should return the invocation=
=92s result: the return value of the join
point.</p>
<p>A simple <code class=3D"literal">MethodInterceptor</code> implementation=
 looks as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> DebugInterceptor <span class=3D"hl-keyw=
ord">implements</span> MethodInterceptor {

    <span class=3D"hl-keyword">public</span> Object invoke(MethodInvocation=
 invocation) <span class=3D"hl-keyword">throws</span> Throwable {
        System.out.println(<span class=3D"hl-string">"Before: invocation=3D=
["</span> + invocation + <span class=3D"hl-string">"]"</span>);
        Object rval =3D invocation.proceed();
        System.out.println(<span class=3D"hl-string">"Invocation returned"<=
/span>);
        <span class=3D"hl-keyword">return</span> rval;
    }
}</pre>
<p>Note the call to the MethodInvocation=92s <code class=3D"literal">procee=
d()</code> method. This proceeds down the
interceptor chain towards the join point. Most interceptors will invoke thi=
s method, and
return its return value. However, a MethodInterceptor, like any around advi=
ce, can
return a different value or throw an exception rather than invoke the proce=
ed method.
However, you don=92t want to do this without good reason!</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>MethodInterceptors offer interoperability with other AOP Alliance-compli=
ant AOP
implementations. The other advice types discussed in the remainder of this =
section
implement common AOP concepts, but in a Spring-specific way. While there is=
 an advantage
in using the most specific advice type, stick with MethodInterceptor around=
 advice if
you are likely to want to run the aspect in another AOP framework. Note tha=
t pointcuts
are not currently interoperable between frameworks, and the AOP Alliance do=
es not
currently define pointcut interfaces.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-advice-before" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-b=
efore"></a>Before advice</h4></div></div></div>
<p>A simpler advice type is a <span class=3D"emphasis"><em>before advice</e=
m></span>. This does not need a <code class=3D"literal">MethodInvocation</c=
ode>
object, since it will only be called before entering the method.</p>
<p>The main advantage of a before advice is that there is no need to invoke=
 the <code class=3D"literal">proceed()</code>
method, and therefore no possibility of inadvertently failing to proceed do=
wn the
interceptor chain.</p>
<p>The <code class=3D"literal">MethodBeforeAdvice</code> interface is shown=
 below. (Spring=92s API design would allow for
field before advice, although the usual objects apply to field interception=
 and it=92s
unlikely that Spring will ever implement it).</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> MethodBeforeAdvice <span class=3D"h=
l-keyword">extends</span> BeforeAdvice {

    <span class=3D"hl-keyword">void</span> before(Method m, Object[] args, =
Object target) <span class=3D"hl-keyword">throws</span> Throwable;
}</pre>
<p>Note the return type is <code class=3D"literal">void</code>. Before advi=
ce can insert custom behavior before the join
point executes, but cannot change the return value. If a before advice thro=
ws an
exception, this will abort further execution of the interceptor chain. The =
exception
will propagate back up the interceptor chain. If it is unchecked, or on the=
 signature of
the invoked method, it will be passed directly to the client; otherwise it =
will be
wrapped in an unchecked exception by the AOP proxy.</p>
<p>An example of a before advice in Spring, which counts all method invocat=
ions:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CountingBeforeAdvice <span class=3D"hl-=
keyword">implements</span> MethodBeforeAdvice {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> count;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> before(Method m, Object[] args, Object target) <span class=3D"hl-k=
eyword">throws</span> Throwable {
        ++count;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span> getCount() {
        <span class=3D"hl-keyword">return</span> count;
    }
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Before advice can be used with any pointcut.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-advice-throws" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-advice-t=
hrows"></a>Throws advice</h4></div></div></div>
<p><span class=3D"emphasis"><em>Throws advice</em></span> is invoked after =
the return of the join point if the join point threw
an exception. Spring offers typed throws advice. Note that this means that =
the
<code class=3D"literal">org.springframework.aop.ThrowsAdvice</code> interfa=
ce does not contain any methods: It is a
tag interface identifying that the given object implements one or more type=
d throws
advice methods. These should be in the form of:</p>
<pre class=3D"programlisting">afterThrowing([Method, args, target], subclas=
sOfThrowable)</pre>
<p>Only the last argument is required. The method signatures may have eithe=
r one or four
arguments, depending on whether the advice method is interested in the meth=
od and
arguments. The following classes are examples of throws advice.</p>
<p>The advice below is invoked if a <code class=3D"literal">RemoteException=
</code> is thrown (including subclasses):</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> RemoteThrowsAdvice <span class=3D"hl-ke=
yword">implements</span> ThrowsAdvice {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> afterThrowing(RemoteException ex) <span class=3D"hl-keyword">throw=
s</span> Throwable {
        <span class=3D"hl-comment">// Do something with remote exception</s=
pan>
    }
}</pre>
<p>The following advice is invoked if a <code class=3D"literal">ServletExce=
ption</code> is thrown. Unlike the above
advice, it declares 4 arguments, so that it has access to the invoked metho=
d, method
arguments and target object:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> ServletThrowsAdviceWithArguments <span =
class=3D"hl-keyword">implements</span> ThrowsAdvice {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> afterThrowing(Method m, Object[] args, Object target, ServletExcep=
tion ex) {
        <span class=3D"hl-comment">// Do something with all arguments</span=
>
    }
}</pre>
<p>The final example illustrates how these two methods could be used in a s=
ingle class,
which handles both <code class=3D"literal">RemoteException</code> and <code=
 class=3D"literal">ServletException</code>. Any number of throws advice
methods can be combined in a single class.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">class</span=
> CombinedThrowsAdvice <span class=3D"hl-keyword">implements</span> ThrowsA=
dvice {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> afterThrowing(RemoteException ex) <span class=3D"hl-keyword">throw=
s</span> Throwable {
        <span class=3D"hl-comment">// Do something with remote exception</s=
pan>
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> afterThrowing(Method m, Object[] args, Object target, ServletExcep=
tion ex) {
        <span class=3D"hl-comment">// Do something with all arguments</span=
>
    }
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If a throws-advice method throws an exception itself, it will override t=
he
original exception (i.e. change the exception thrown to the user). The over=
riding
exception will typically be a RuntimeException; this is compatible with any=
 method
signature. However, if a throws-advice method throws a checked exception, i=
t will have
to match the declared exceptions of the target method and is hence to some =
degree
coupled to specific target method signatures. <span class=3D"emphasis"><em>=
Do not throw an undeclared checked
exception that is incompatible with the target method=92s signature!</em></=
span></p>
</td></tr></tbody></table></div>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Throws advice can be used with any pointcut.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-advice-after-returning" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api=
-advice-after-returning"></a>After Returning advice</h4></div></div></div>
<p>An after returning advice in Spring must implement the
<span class=3D"emphasis"><em>org.springframework.aop.AfterReturningAdvice</=
em></span> interface, shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> AfterReturningAdvice <span class=3D=
"hl-keyword">extends</span> Advice {

    <span class=3D"hl-keyword">void</span> afterReturning(Object returnValu=
e, Method m, Object[] args, Object target)
            <span class=3D"hl-keyword">throws</span> Throwable;
}</pre>
<p>An after returning advice has access to the return value (which it canno=
t modify),
invoked method, methods arguments and target.</p>
<p>The following after returning advice counts all successful method invoca=
tions that have
not thrown exceptions:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CountingAfterReturningAdvice <span clas=
s=3D"hl-keyword">implements</span> AfterReturningAdvice {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> count;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> afterReturning(Object returnValue, Method m, Object[] args, Object=
 target)
            <span class=3D"hl-keyword">throws</span> Throwable {
        ++count;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span> getCount() {
        <span class=3D"hl-keyword">return</span> count;
    }
}</pre>
<p>This advice doesn=92t change the execution path. If it throws an excepti=
on, this will be
thrown up the interceptor chain instead of the return value.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>After returning advice can be used with any pointcut.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-advice-introduction" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-ad=
vice-introduction"></a>Introduction advice</h4></div></div></div>
<p>Spring treats introduction advice as a special kind of interception advi=
ce.</p>
<p>Introduction requires an <code class=3D"literal">IntroductionAdvisor</co=
de>, and an <code class=3D"literal">IntroductionInterceptor</code>,
implementing the following interface:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> IntroductionInterceptor <span class=
=3D"hl-keyword">extends</span> MethodInterceptor {

    <span class=3D"hl-keyword">boolean</span> implementsInterface(Class int=
f);
}</pre>
<p>The <code class=3D"literal">invoke()</code> method inherited from the AO=
P Alliance <code class=3D"literal">MethodInterceptor</code> interface must
implement the introduction: that is, if the invoked method is on an introdu=
ced
interface, the introduction interceptor is responsible for handling the met=
hod call - it
cannot invoke <code class=3D"literal">proceed()</code>.</p>
<p>Introduction advice cannot be used with any pointcut, as it applies only=
 at class,
rather than method, level. You can only use introduction advice with the
<code class=3D"literal">IntroductionAdvisor</code>, which has the following=
 methods:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> IntroductionAdvisor <span class=3D"=
hl-keyword">extends</span> Advisor, IntroductionInfo {

    ClassFilter getClassFilter();

    <span class=3D"hl-keyword">void</span> validateInterfaces() <span class=
=3D"hl-keyword">throws</span> IllegalArgumentException;
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> IntroductionInfo {

    Class[] getInterfaces();
}</pre>
<p>There is no <code class=3D"literal">MethodMatcher</code>, and hence no <=
code class=3D"literal">Pointcut</code>, associated with introduction
advice. Only class filtering is logical.</p>
<p>The <code class=3D"literal">getInterfaces()</code> method returns the in=
terfaces introduced by this advisor.</p>
<p>The <code class=3D"literal">validateInterfaces()</code> method is used i=
nternally to see whether or not the
introduced interfaces can be implemented by the configured <code class=3D"l=
iteral">IntroductionInterceptor</code>.</p>
<p>Let=92s look at a simple example from the Spring test suite. Let=92s sup=
pose we want to
introduce the following interface to one or more objects:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> Lockable {
    <span class=3D"hl-keyword">void</span> lock();
    <span class=3D"hl-keyword">void</span> unlock();
    <span class=3D"hl-keyword">boolean</span> locked();
}</pre>
<p>This illustrates a <span class=3D"emphasis"><em>mixin</em></span>. We wa=
nt to be able to cast advised objects to Lockable,
whatever their type, and call lock and unlock methods. If we call the lock(=
) method, we
want all setter methods to throw a <code class=3D"literal">LockedException<=
/code>. Thus we can add an aspect that
provides the ability to make objects immutable, without them having any kno=
wledge of it:
a good example of AOP.</p>
<p>Firstly, we=92ll need an <code class=3D"literal">IntroductionInterceptor=
</code> that does the heavy lifting. In this
case, we extend the <code class=3D"literal">org.springframework.aop.support=
.DelegatingIntroductionInterceptor</code>
convenience class. We could implement IntroductionInterceptor directly, but=
 using
<code class=3D"literal">DelegatingIntroductionInterceptor</code> is best fo=
r most cases.</p>
<p>The <code class=3D"literal">DelegatingIntroductionInterceptor</code> is =
designed to delegate an introduction to an
actual implementation of the introduced interface(s), concealing the use of=
 interception
to do so. The delegate can be set to any object using a constructor argumen=
t; the
default delegate (when the no-arg constructor is used) is this. Thus in the=
 example
below, the delegate is the <code class=3D"literal">LockMixin</code> subclas=
s of <code class=3D"literal">DelegatingIntroductionInterceptor</code>.
Given a delegate (by default itself), a <code class=3D"literal">DelegatingI=
ntroductionInterceptor</code> instance
looks for all interfaces implemented by the delegate (other than
IntroductionInterceptor), and will support introductions against any of the=
m. It=92s
possible for subclasses such as <code class=3D"literal">LockMixin</code> to=
 call the <code class=3D"literal">suppressInterface(Class intf)</code>
method to suppress interfaces that should not be exposed. However, no matte=
r how many
interfaces an <code class=3D"literal">IntroductionInterceptor</code> is pre=
pared to support, the
<code class=3D"literal">IntroductionAdvisor</code> used will control which =
interfaces are actually exposed. An
introduced interface will conceal any implementation of the same interface =
by the target.</p>
<p>Thus <code class=3D"literal">LockMixin</code> extends <code class=3D"lit=
eral">DelegatingIntroductionInterceptor</code> and implements <code class=
=3D"literal">Lockable</code>
itself. The superclass automatically picks up that Lockable can be supporte=
d for
introduction, so we don=92t need to specify that. We could introduce any nu=
mber of
interfaces in this way.</p>
<p>Note the use of the <code class=3D"literal">locked</code> instance varia=
ble. This effectively adds additional state
to that held in the target object.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> LockMixin <span class=3D"hl-keyword">ex=
tends</span> DelegatingIntroductionInterceptor <span class=3D"hl-keyword">i=
mplements</span> Lockable {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">bo=
olean</span> locked;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> lock() {
        <span class=3D"hl-keyword">this</span>.locked =3D true;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> unlock() {
        <span class=3D"hl-keyword">this</span>.locked =3D false;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">boo=
lean</span> locked() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.locked;
    }

    <span class=3D"hl-keyword">public</span> Object invoke(MethodInvocation=
 invocation) <span class=3D"hl-keyword">throws</span> Throwable {
        <span class=3D"hl-keyword">if</span> (locked() &amp;&amp; invocatio=
n.getMethod().getName().indexOf(<span class=3D"hl-string">"set"</span>) =3D=
=3D <span class=3D"hl-number">0</span>) {
            <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keywo=
rd">new</span> LockedException();
        }
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>super</span>.invoke(invocation);
    }

}</pre>
<p>Often it isn=92t necessary to override the <code class=3D"literal">invok=
e()</code> method: the
<code class=3D"literal">DelegatingIntroductionInterceptor</code> implementa=
tion - which calls the delegate method if
the method is introduced, otherwise proceeds towards the join point - is us=
ually
sufficient. In the present case, we need to add a check: no setter method c=
an be invoked
if in locked mode.</p>
<p>The introduction advisor required is simple. All it needs to do is hold =
a distinct
<code class=3D"literal">LockMixin</code> instance, and specify the introduc=
ed interfaces - in this case, just
<code class=3D"literal">Lockable</code>. A more complex example might take =
a reference to the introduction
interceptor (which would be defined as a prototype): in this case, there=92=
s no
configuration relevant for a <code class=3D"literal">LockMixin</code>, so w=
e simply create it using <code class=3D"literal">new</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> LockMixinAdvisor <span class=3D"hl-keyw=
ord">extends</span> DefaultIntroductionAdvisor {

    <span class=3D"hl-keyword">public</span> LockMixinAdvisor() {
        <span class=3D"hl-keyword">super</span>(<span class=3D"hl-keyword">=
new</span> LockMixin(), Lockable.<span class=3D"hl-keyword">class</span>);
    }
}</pre>
<p>We can apply this advisor very simply: it requires no configuration. (Ho=
wever, it <span class=3D"emphasis"><em>is</em></span>
necessary: It=92s impossible to use an <code class=3D"literal">Introduction=
Interceptor</code> without an
<span class=3D"emphasis"><em>IntroductionAdvisor</em></span>.) As usual wit=
h introductions, the advisor must be per-instance,
as it is stateful. We need a different instance of <code class=3D"literal">=
LockMixinAdvisor</code>, and hence
<code class=3D"literal">LockMixin</code>, for each advised object. The advi=
sor comprises part of the advised object=92s
state.</p>
<p>We can apply this advisor programmatically, using the <code class=3D"lit=
eral">Advised.addAdvisor()</code> method, or
(the recommended way) in XML configuration, like any other advisor. All pro=
xy creation
choices discussed below, including "auto proxy creators," correctly handle =
introductions
and stateful mixins.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-api-advisor" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
aop-api-advisor"></a>12.4&nbsp;Advisor API in Spring</h2></div></div></div>
<p>In Spring, an Advisor is an aspect that contains just a single advice ob=
ject associated
with a pointcut expression.</p>
<p>Apart from the special case of introductions, any advisor can be used wi=
th any advice.
<code class=3D"literal">org.springframework.aop.support.DefaultPointcutAdvi=
sor</code> is the most commonly used
advisor class. For example, it can be used with a <code class=3D"literal">M=
ethodInterceptor</code>, <code class=3D"literal">BeforeAdvice</code> or
<code class=3D"literal">ThrowsAdvice</code>.</p>
<p>It is possible to mix advisor and advice types in Spring in the same AOP=
 proxy. For
example, you could use a interception around advice, throws advice and befo=
re advice in
one proxy configuration: Spring will automatically create the necessary int=
erceptor
chain.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-pfb" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb"=
></a>12.5&nbsp;Using the ProxyFactoryBean to create AOP proxies</h2></div><=
/div></div>
<p>If you=92re using the Spring IoC container (an ApplicationContext or Bea=
nFactory) for your
business objects - and you should be! - you will want to use one of Spring=
=92s AOP
FactoryBeans. (Remember that a factory bean introduces a layer of indirecti=
on, enabling
it to create objects of a different type.)</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The Spring AOP support also uses factory beans under the covers.</p>
</td></tr></tbody></table></div>
<p>The basic way to create an AOP proxy in Spring is to use the
<span class=3D"emphasis"><em>org.springframework.aop.framework.ProxyFactory=
Bean</em></span>. This gives complete control over
the pointcuts and advice that will apply, and their ordering. However, ther=
e are simpler
options that are preferable if you don=92t need such control.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-pfb-1" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-1"></a>12.5.1&nbsp;B=
asics</h3></div></div></div>
<p>The <code class=3D"literal">ProxyFactoryBean</code>, like other Spring <=
code class=3D"literal">FactoryBean</code> implementations, introduces a
level of indirection. If you define a <code class=3D"literal">ProxyFactoryB=
ean</code> with name <code class=3D"literal">foo</code>, what objects
referencing <code class=3D"literal">foo</code> see is not the <code class=
=3D"literal">ProxyFactoryBean</code> instance itself, but an object
created by the <code class=3D"literal">ProxyFactoryBean</code>'s implementa=
tion of the <code class=3D"literal">getObject()</code> method. This
method will create an AOP proxy wrapping a target object.</p>
<p>One of the most important benefits of using a <code class=3D"literal">Pr=
oxyFactoryBean</code> or another IoC-aware
class to create AOP proxies, is that it means that advices and pointcuts ca=
n also be
managed by IoC. This is a powerful feature, enabling certain approaches tha=
t are hard to
achieve with other AOP frameworks. For example, an advice may itself refere=
nce
application objects (besides the target, which should be available in any A=
OP
framework), benefiting from all the pluggability provided by Dependency Inj=
ection.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-pfb-2" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-2"></a>12.5.2&nbsp;J=
avaBean properties</h3></div></div></div>
<p>In common with most <code class=3D"literal">FactoryBean</code> implement=
ations provided with Spring, the
<code class=3D"literal">ProxyFactoryBean</code> class is itself a JavaBean.=
 Its properties are used to:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Specify the target you want to proxy.
</li><li class=3D"listitem">
Specify whether to use CGLIB (see below and also <a class=3D"xref" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#aop-pfb-proxy-types" title=3D"12.5.3&nbsp;JDK- and CGLIB-base=
d proxies">Section&nbsp;12.5.3, =93JDK- and CGLIB-based proxies=94</a>).
</li></ul></div>
<p>Some key properties are inherited from <code class=3D"literal">org.sprin=
gframework.aop.framework.ProxyConfig</code>
(the superclass for all AOP proxy factories in Spring). These key propertie=
s include:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">proxyTargetClass</code>: <code class=3D"literal">tr=
ue</code> if the target class is to be proxied, rather than the
target class' interfaces. If this property value is set to <code class=3D"l=
iteral">true</code>, then CGLIB proxies
will be created (but see also <a class=3D"xref" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-p=
fb-proxy-types" title=3D"12.5.3&nbsp;JDK- and CGLIB-based proxies">Section&=
nbsp;12.5.3, =93JDK- and CGLIB-based proxies=94</a>).
</li><li class=3D"listitem">
<code class=3D"literal">optimize</code>: controls whether or not aggressive=
 optimizations are applied to proxies
<span class=3D"emphasis"><em>created via CGLIB</em></span>. One should not =
blithely use this setting unless one fully
understands how the relevant AOP proxy handles optimization. This is curren=
tly used
only for CGLIB proxies; it has no effect with JDK dynamic proxies.
</li><li class=3D"listitem">
<code class=3D"literal">frozen</code>: if a proxy configuration is <code cl=
ass=3D"literal">frozen</code>, then changes to the configuration are
no longer allowed. This is useful both as a slight optimization and for tho=
se cases
when you don=92t want callers to be able to manipulate the proxy (via the <=
code class=3D"literal">Advised</code>
interface) after the proxy has been created. The default value of this prop=
erty is
<code class=3D"literal">false</code>, so changes such as adding additional =
advice are allowed.
</li><li class=3D"listitem">
<code class=3D"literal">exposeProxy</code>: determines whether or not the c=
urrent proxy should be exposed in a
<code class=3D"literal">ThreadLocal</code> so that it can be accessed by th=
e target. If a target needs to obtain
the proxy and the <code class=3D"literal">exposeProxy</code> property is se=
t to <code class=3D"literal">true</code>, the target can use the
<code class=3D"literal">AopContext.currentProxy()</code> method.
</li></ul></div>
<p>Other properties specific to <code class=3D"literal">ProxyFactoryBean</c=
ode> include:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">proxyInterfaces</code>: array of String interface n=
ames. If this isn=92t supplied, a CGLIB
proxy for the target class will be used (but see also <a class=3D"xref" hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#aop-pfb-proxy-types" title=3D"12.5.3&nbsp;JDK- and CGLIB=
-based proxies">Section&nbsp;12.5.3, =93JDK- and CGLIB-based proxies=94</a>=
).
</li><li class=3D"listitem">
<code class=3D"literal">interceptorNames</code>: String array of <code clas=
s=3D"literal">Advisor</code>, interceptor or other advice names to
apply. Ordering is significant, on a first come-first served basis. That is=
 to say
that the first interceptor in the list will be the first to be able to inte=
rcept the
invocation.
</li></ul></div>
<p>The names are bean names in the current factory, including bean names fr=
om ancestor
factories. You can=92t mention bean references here since doing so would re=
sult in the
<code class=3D"literal">ProxyFactoryBean</code> ignoring the singleton sett=
ing of the advice.</p>
<p>You can append an interceptor name with an asterisk ( <code class=3D"lit=
eral">*</code>). This will result in the
application of all advisor beans with names starting with the part before t=
he asterisk
to be applied. An example of using this feature can be found in <a class=3D=
"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#aop-global-advisors" title=3D"12.5.6&nbsp;Usin=
g 'global' advisors">Section&nbsp;12.5.6, =93Using 'global' advisors=94</a>=
.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
singleton: whether or not the factory should return a single object, no mat=
ter how
often the <code class=3D"literal">getObject()</code> method is called. Seve=
ral <code class=3D"literal">FactoryBean</code> implementations offer
such a method. The default value is <code class=3D"literal">true</code>. If=
 you want to use stateful advice - for
example, for stateful mixins - use prototype advices along with a singleton=
 value of
<code class=3D"literal">false</code>.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-pfb-proxy-types" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pfb-proxy-type=
s"></a>12.5.3&nbsp;JDK- and CGLIB-based proxies</h3></div></div></div>
<p>This section serves as the definitive documentation on how the <code cla=
ss=3D"literal">ProxyFactoryBean</code>
chooses to create one of either a JDK- and CGLIB-based proxy for a particul=
ar target
object (that is to be proxied).</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The behavior of the <code class=3D"literal">ProxyFactoryBean</code> with=
 regard to creating JDK- or CGLIB-based
proxies changed between versions 1.2.x and 2.0 of Spring. The <code class=
=3D"literal">ProxyFactoryBean</code> now
exhibits similar semantics with regard to auto-detecting interfaces as thos=
e of the
<code class=3D"literal">TransactionProxyFactoryBean</code> class.</p>
</td></tr></tbody></table></div>
<p>If the class of a target object that is to be proxied (hereafter simply =
referred to as
the target class) doesn=92t implement any interfaces, then a CGLIB-based pr=
oxy will be
created. This is the easiest scenario, because JDK proxies are interface ba=
sed, and no
interfaces means JDK proxying isn=92t even possible. One simply plugs in th=
e target bean,
and specifies the list of interceptors via the <code class=3D"literal">inte=
rceptorNames</code> property. Note that a
CGLIB-based proxy will be created even if the <code class=3D"literal">proxy=
TargetClass</code> property of the
<code class=3D"literal">ProxyFactoryBean</code> has been set to <code class=
=3D"literal">false</code>. (Obviously this makes no sense, and is best
removed from the bean definition because it is at best redundant, and at wo=
rst
confusing.)</p>
<p>If the target class implements one (or more) interfaces, then the type o=
f proxy that is
created depends on the configuration of the <code class=3D"literal">ProxyFa=
ctoryBean</code>.</p>
<p>If the <code class=3D"literal">proxyTargetClass</code> property of the <=
code class=3D"literal">ProxyFactoryBean</code> has been set to <code class=
=3D"literal">true</code>,
then a CGLIB-based proxy will be created. This makes sense, and is in keepi=
ng with the
principle of least surprise. Even if the <code class=3D"literal">proxyInter=
faces</code> property of the
<code class=3D"literal">ProxyFactoryBean</code> has been set to one or more=
 fully qualified interface names, the fact
that the <code class=3D"literal">proxyTargetClass</code> property is set to=
 <code class=3D"literal">true</code> <span class=3D"emphasis"><em>will</em>=
</span> cause CGLIB-based
proxying to be in effect.</p>
<p>If the <code class=3D"literal">proxyInterfaces</code> property of the <c=
ode class=3D"literal">ProxyFactoryBean</code> has been set to one or more
fully qualified interface names, then a JDK-based proxy will be created. Th=
e created
proxy will implement all of the interfaces that were specified in the <code=
 class=3D"literal">proxyInterfaces</code>
property; if the target class happens to implement a whole lot more interfa=
ces than
those specified in the <code class=3D"literal">proxyInterfaces</code> prope=
rty, that is all well and good but those
additional interfaces will not be implemented by the returned proxy.</p>
<p>If the <code class=3D"literal">proxyInterfaces</code> property of the <c=
ode class=3D"literal">ProxyFactoryBean</code> has <span class=3D"emphasis">=
<em>not</em></span> been set, but
the target class <span class=3D"emphasis"><em>does implement one (or more)<=
/em></span> interfaces, then the
<code class=3D"literal">ProxyFactoryBean</code> will auto-detect the fact t=
hat the target class does actually
implement at least one interface, and a JDK-based proxy will be created. Th=
e interfaces
that are actually proxied will be <span class=3D"emphasis"><em>all</em></sp=
an> of the interfaces that the target class
implements; in effect, this is the same as simply supplying a list of each =
and every
interface that the target class implements to the <code class=3D"literal">p=
roxyInterfaces</code> property. However,
it is significantly less work, and less prone to typos.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-proxying-intf" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-proxying=
-intf"></a>12.5.4&nbsp;Proxying interfaces</h3></div></div></div>
<p>Let=92s look at a simple example of <code class=3D"literal">ProxyFactory=
Bean</code> in action. This example involves:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
A <span class=3D"emphasis"><em>target bean</em></span> that will be proxied=
. This is the "personTarget" bean definition in
the example below.
</li><li class=3D"listitem">
An Advisor and an Interceptor used to provide advice.
</li><li class=3D"listitem">
An AOP proxy bean definition specifying the target object (the personTarget=
 bean) and
the interfaces to proxy, along with the advices to apply.
</li></ul></div>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"personTarget"<=
/span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value"=
>"com.mycompany.PersonImpl"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"name"</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"Tony"</span><span class=3D=
"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"age"</span> <span class=3D"hl-attr=
ibute">value</span>=3D<span class=3D"hl-value">"51"</span><span class=3D"hl=
-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"myAdvisor"</span> <span class=3D"hl-attribut=
e">class</span>=3D<span class=3D"hl-value">"com.mycompany.MyAdvisor"</span>=
<span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"someProperty"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Custom string pr=
operty value"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"debugInterceptor"</span> <span class=3D"hl-a=
ttribute">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.=
interceptor.DebugInterceptor"</span><span class=3D"hl-tag">&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"person"</span>
    <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.aop.framework.ProxyFactoryBean"</span><span class=3D"hl-=
tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"proxyInterfaces"</span> <span clas=
s=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"com.mycompany.P=
erson"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span> <span class=3D"hl-a=
ttribute">ref</span>=3D<span class=3D"hl-value">"personTarget"</span><span =
class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"interceptorNames"</span><span clas=
s=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>myAdvisor<span class=
=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>debugInterceptor<spa=
n class=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Note that the <code class=3D"literal">interceptorNames</code> property t=
akes a list of String: the bean names of the
interceptor or advisors in the current factory. Advisors, interceptors, bef=
ore, after
returning and throws advice objects can be used. The ordering of advisors i=
s significant.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>You might be wondering why the list doesn=92t hold bean references. The =
reason for this is
that if the ProxyFactoryBean=92s singleton property is set to false, it mus=
t be able to
return independent proxy instances. If any of the advisors is itself a prot=
otype, an
independent instance would need to be returned, so it=92s necessary to be a=
ble to obtain
an instance of the prototype from the factory; holding a reference isn=92t =
sufficient.</p>
</td></tr></tbody></table></div>
<p>The "person" bean definition above can be used in place of a Person impl=
ementation, as
follows:</p>
<pre class=3D"programlisting">Person person =3D (Person) factory.getBean(<s=
pan class=3D"hl-string">"person"</span>);</pre>
<p>Other beans in the same IoC context can express a strongly typed depende=
ncy on it, as
with an ordinary Java object:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"personUser"</s=
pan> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"=
com.mycompany.PersonUser"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"person"</span><span class=3D"hl-ta=
g">&gt;</span><span class=3D"hl-tag">&lt;ref</span> <span class=3D"hl-attri=
bute">bean</span>=3D<span class=3D"hl-value">"person"</span><span class=3D"=
hl-tag">/&gt;</span><span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The <code class=3D"literal">PersonUser</code> class in this example woul=
d expose a property of type Person. As far as
it=92s concerned, the AOP proxy can be used transparently in place of a "re=
al" person
implementation. However, its class would be a dynamic proxy class. It would=
 be possible
to cast it to the <code class=3D"literal">Advised</code> interface (discuss=
ed below).</p>
<p>It=92s possible to conceal the distinction between target and proxy usin=
g an anonymous
<span class=3D"emphasis"><em>inner bean</em></span>, as follows. Only the <=
code class=3D"literal">ProxyFactoryBean</code> definition is different; the
advice is included only for completeness:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myAdvisor"</sp=
an> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"c=
om.mycompany.MyAdvisor"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"someProperty"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Custom string pr=
operty value"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"debugInterceptor"</span> <span class=3D"hl-a=
ttribute">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.=
interceptor.DebugInterceptor"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"person"</span> <span class=3D"hl-attribute">=
class</span>=3D<span class=3D"hl-value">"org.springframework.aop.framework.=
ProxyFactoryBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"proxyInterfaces"</span> <span clas=
s=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"com.mycompany.P=
erson"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-comment">&lt;!-- Use inner bean, not local reference =
to target --&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span><span class=3D"hl-ta=
g">&gt;</span>
        <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"com.mycompany.PersonImpl"</span><=
span class=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-at=
tribute">name</span>=3D<span class=3D"hl-value">"name"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"Tony"</span><spa=
n class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-at=
tribute">name</span>=3D<span class=3D"hl-value">"age"</span> <span class=3D=
"hl-attribute">value</span>=3D<span class=3D"hl-value">"51"</span><span cla=
ss=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/bean&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"interceptorNames"</span><span clas=
s=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>myAdvisor<span class=
=3D"hl-tag">&lt;/value&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>debugInterceptor<spa=
n class=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>This has the advantage that there=92s only one object of type <code clas=
s=3D"literal">Person</code>: useful if we want
to prevent users of the application context from obtaining a reference to t=
he un-advised
object, or need to avoid any ambiguity with Spring IoC <span class=3D"empha=
sis"><em>autowiring</em></span>. There=92s also
arguably an advantage in that the ProxyFactoryBean definition is self-conta=
ined.
However, there are times when being able to obtain the un-advised target fr=
om the
factory might actually be an <span class=3D"emphasis"><em>advantage</em></s=
pan>: for example, in certain test scenarios.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-api-proxying-class" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-proxyin=
g-class"></a>12.5.5&nbsp;Proxying classes</h3></div></div></div>
<p>What if you need to proxy a class, rather than one or more interfaces?</=
p>
<p>Imagine that in our example above, there was no <code class=3D"literal">=
Person</code> interface: we needed to advise
a class called <code class=3D"literal">Person</code> that didn=92t implemen=
t any business interface. In this case, you
can configure Spring to use CGLIB proxying, rather than dynamic proxies. Si=
mply set the
<code class=3D"literal">proxyTargetClass</code> property on the ProxyFactor=
yBean above to true. While it=92s best to
program to interfaces, rather than classes, the ability to advise classes t=
hat don=92t
implement interfaces can be useful when working with legacy code. (In gener=
al, Spring
isn=92t prescriptive. While it makes it easy to apply good practices, it av=
oids forcing a
particular approach.)</p>
<p>If you want to, you can force the use of CGLIB in any case, even if you =
do have
interfaces.</p>
<p>CGLIB proxying works by generating a subclass of the target class at run=
time. Spring
configures this generated subclass to delegate method calls to the original=
 target: the
subclass is used to implement the <span class=3D"emphasis"><em>Decorator</e=
m></span> pattern, weaving in the advice.</p>
<p>CGLIB proxying should generally be transparent to users. However, there =
are some issues
to consider:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">Final</code> methods can=92t be advised, as they ca=
n=92t be overridden.
</li><li class=3D"listitem">
There is no need to add CGLIB to your classpath. As of Spring 3.2, CGLIB is=
 repackaged
and included in the spring-core JAR. In other words, CGLIB-based AOP will w=
ork "out of
the box" just as do JDK dynamic proxies.
</li></ul></div>
<p>There=92s little performance difference between CGLIB proxying and dynam=
ic proxies. As of
Spring 1.0, dynamic proxies are slightly faster. However, this may change i=
n the future.
Performance should not be a decisive consideration in this case.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-global-advisors" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-global-advisor=
s"></a>12.5.6&nbsp;Using 'global' advisors</h3></div></div></div>
<p>By appending an asterisk to an interceptor name, all advisors with bean =
names matching
the part before the asterisk, will be added to the advisor chain. This can =
come in handy
if you need to add a standard set of 'global' advisors:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"proxy"</span> =
<span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.s=
pringframework.aop.framework.ProxyFactoryBean"</span><span class=3D"hl-tag"=
>&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span> <span class=3D"hl-a=
ttribute">ref</span>=3D<span class=3D"hl-value">"service"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"interceptorNames"</span><span clas=
s=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>global*<span class=
=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"global_debug"</span> <span class=3D"hl-attri=
bute">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.inte=
rceptor.DebugInterceptor"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"global_performance"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"org.springframework.ao=
p.interceptor.PerformanceMonitorInterceptor"</span><span class=3D"hl-tag">/=
&gt;</span></pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-concise-proxy" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-concise-proxy"></a>12.6&nbsp;Concise proxy definitions</h2></div></di=
v></div>
<p>Especially when defining transactional proxies, you may end up with many=
 similar proxy
definitions. The use of parent and child bean definitions, along with inner=
 bean
definitions, can result in much cleaner and more concise proxy definitions.=
</p>
<p>First a parent, <span class=3D"emphasis"><em>template</em></span>, bean =
definition is created for the proxy:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"txProxyTemplat=
e"</span> <span class=3D"hl-attribute">abstract</span>=3D<span class=3D"hl-=
value">"true"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"=
</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionManager"</span> <span c=
lass=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"transactionMan=
ager"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionAttributes"</span><span=
 class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;props&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"hl-tag"=
>&gt;</span>PROPAGATION_REQUIRED<span class=3D"hl-tag">&lt;/prop&gt;</span>
        <span class=3D"hl-tag">&lt;/props&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>This will never be instantiated itself, so may actually be incomplete. T=
hen each proxy
which needs to be created is just a child bean definition, which wraps the =
target of the
proxy as an inner bean definition, since the target will never be used on i=
ts own anyway.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"myService"</sp=
an> <span class=3D"hl-attribute">parent</span>=3D<span class=3D"hl-value">"=
txProxyTemplate"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span><span class=3D"hl-ta=
g">&gt;</span>
        <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"org.springframework.samples.MySer=
viceImpl"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;/bean&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>It is of course possible to override properties from the parent template=
, such as in
this case, the transaction propagation settings:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"mySpecialServi=
ce"</span> <span class=3D"hl-attribute">parent</span>=3D<span class=3D"hl-v=
alue">"txProxyTemplate"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"target"</span><span class=3D"hl-ta=
g">&gt;</span>
        <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"org.springframework.samples.MySpe=
cialServiceImpl"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;/bean&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionAttributes"</span><span=
 class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;props&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"get*"</span><span class=3D"hl-t=
ag">&gt;</span>PROPAGATION_REQUIRED,readOnly<span class=3D"hl-tag">&lt;/pro=
p&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"find*"</span><span class=3D"hl-=
tag">&gt;</span>PROPAGATION_REQUIRED,readOnly<span class=3D"hl-tag">&lt;/pr=
op&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"load*"</span><span class=3D"hl-=
tag">&gt;</span>PROPAGATION_REQUIRED,readOnly<span class=3D"hl-tag">&lt;/pr=
op&gt;</span>
            <span class=3D"hl-tag">&lt;prop</span> <span class=3D"hl-attrib=
ute">key</span>=3D<span class=3D"hl-value">"store*"</span><span class=3D"hl=
-tag">&gt;</span>PROPAGATION_REQUIRED<span class=3D"hl-tag">&lt;/prop&gt;</=
span>
        <span class=3D"hl-tag">&lt;/props&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Note that in the example above, we have explicitly marked the parent bea=
n definition as
<span class=3D"emphasis"><em>abstract</em></span> by using the <span class=
=3D"emphasis"><em>abstract</em></span> attribute, as described
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-child-bean-definitions" title=
=3D"7.7&nbsp;Bean definition inheritance">previously</a>, so that it may no=
t actually ever be
instantiated. Application contexts (but not simple bean factories) will by =
default
pre-instantiate all singletons. It is therefore important (at least for sin=
gleton beans)
that if you have a (parent) bean definition which you intend to use only as=
 a template,
and this definition specifies a class, you must make sure to set the <span =
class=3D"emphasis"><em>abstract</em></span>
attribute to <span class=3D"emphasis"><em>true</em></span>, otherwise the a=
pplication context will actually try to
pre-instantiate it.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-prog" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-pro=
g"></a>12.7&nbsp;Creating AOP proxies programmatically with the ProxyFactor=
y</h2></div></div></div>
<p>It=92s easy to create AOP proxies programmatically using Spring. This en=
ables you to use
Spring AOP without dependency on Spring IoC.</p>
<p>The following listing shows creation of a proxy for a target object, wit=
h one
interceptor and one advisor. The interfaces implemented by the target objec=
t will
automatically be proxied:</p>
<pre class=3D"programlisting">ProxyFactory factory =3D <span class=3D"hl-ke=
yword">new</span> ProxyFactory(myBusinessInterfaceImpl);
factory.addAdvice(myMethodInterceptor);
factory.addAdvisor(myAdvisor);
MyBusinessInterface tb =3D (MyBusinessInterface) factory.getProxy();</pre>
<p>The first step is to construct an object of type
<code class=3D"literal">org.springframework.aop.framework.ProxyFactory</cod=
e>. You can create this with a target
object, as in the above example, or specify the interfaces to be proxied in=
 an alternate
constructor.</p>
<p>You can add advices (with interceptors as a specialized kind of advice) =
and/or advisors,
and manipulate them for the life of the ProxyFactory. If you add an
IntroductionInterceptionAroundAdvisor, you can cause the proxy to implement=
 additional
interfaces.</p>
<p>There are also convenience methods on ProxyFactory (inherited from <code=
 class=3D"literal">AdvisedSupport</code>)
which allow you to add other advice types such as before and throws advice.
AdvisedSupport is the superclass of both ProxyFactory and ProxyFactoryBean.=
</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Integrating AOP proxy creation with the IoC framework is best practice i=
n most
applications. We recommend that you externalize configuration from Java cod=
e with AOP,
as in general.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-api-advised" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
aop-api-advised"></a>12.8&nbsp;Manipulating advised objects</h2></div></div=
></div>
<p>However you create AOP proxies, you can manipulate them using the
<code class=3D"literal">org.springframework.aop.framework.Advised</code> in=
terface. Any AOP proxy can be cast to this
interface, whichever other interfaces it implements. This interface include=
s the
following methods:</p>
<pre class=3D"programlisting">Advisor[] getAdvisors();

<span class=3D"hl-keyword">void</span> addAdvice(Advice advice) <span class=
=3D"hl-keyword">throws</span> AopConfigException;

<span class=3D"hl-keyword">void</span> addAdvice(<span class=3D"hl-keyword"=
>int</span> pos, Advice advice) <span class=3D"hl-keyword">throws</span> Ao=
pConfigException;

<span class=3D"hl-keyword">void</span> addAdvisor(Advisor advisor) <span cl=
ass=3D"hl-keyword">throws</span> AopConfigException;

<span class=3D"hl-keyword">void</span> addAdvisor(<span class=3D"hl-keyword=
">int</span> pos, Advisor advisor) <span class=3D"hl-keyword">throws</span>=
 AopConfigException;

<span class=3D"hl-keyword">int</span> indexOf(Advisor advisor);

<span class=3D"hl-keyword">boolean</span> removeAdvisor(Advisor advisor) <s=
pan class=3D"hl-keyword">throws</span> AopConfigException;

<span class=3D"hl-keyword">void</span> removeAdvisor(<span class=3D"hl-keyw=
ord">int</span> index) <span class=3D"hl-keyword">throws</span> AopConfigEx=
ception;

<span class=3D"hl-keyword">boolean</span> replaceAdvisor(Advisor a, Advisor=
 b) <span class=3D"hl-keyword">throws</span> AopConfigException;

<span class=3D"hl-keyword">boolean</span> isFrozen();</pre>
<p>The <code class=3D"literal">getAdvisors()</code> method will return an A=
dvisor for every advisor, interceptor or
other advice type that has been added to the factory. If you added an Advis=
or, the
returned advisor at this index will be the object that you added. If you ad=
ded an
interceptor or other advice type, Spring will have wrapped this in an advis=
or with a
pointcut that always returns true. Thus if you added a <code class=3D"liter=
al">MethodInterceptor</code>, the advisor
returned for this index will be an <code class=3D"literal">DefaultPointcutA=
dvisor</code> returning your
<code class=3D"literal">MethodInterceptor</code> and a pointcut that matche=
s all classes and methods.</p>
<p>The <code class=3D"literal">addAdvisor()</code> methods can be used to a=
dd any Advisor. Usually the advisor holding
pointcut and advice will be the generic <code class=3D"literal">DefaultPoin=
tcutAdvisor</code>, which can be used with
any advice or pointcut (but not for introductions).</p>
<p>By default, it=92s possible to add or remove advisors or interceptors ev=
en once a proxy
has been created. The only restriction is that it=92s impossible to add or =
remove an
introduction advisor, as existing proxies from the factory will not show th=
e interface
change. (You can obtain a new proxy from the factory to avoid this problem.=
)</p>
<p>A simple example of casting an AOP proxy to the <code class=3D"literal">=
Advised</code> interface and examining and
manipulating its advice:</p>
<pre class=3D"programlisting">Advised advised =3D (Advised) myObject;
Advisor[] advisors =3D advised.getAdvisors();
<span class=3D"hl-keyword">int</span> oldAdvisorCount =3D advisors.length;
System.out.println(oldAdvisorCount + <span class=3D"hl-string">" advisors"<=
/span>);

<span class=3D"hl-comment">// Add an advice like an interceptor without a p=
ointcut</span>
<span class=3D"hl-comment">// Will match all proxied methods</span>
<span class=3D"hl-comment">// Can use for interceptors, before, after retur=
ning or throws advice</span>
advised.addAdvice(<span class=3D"hl-keyword">new</span> DebugInterceptor())=
;

<span class=3D"hl-comment">// Add selective advice using a pointcut</span>
advised.addAdvisor(<span class=3D"hl-keyword">new</span> DefaultPointcutAdv=
isor(mySpecialPointcut, myAdvice));

assertEquals(<span class=3D"hl-string">"Added two advisors"</span>, oldAdvi=
sorCount + <span class=3D"hl-number">2</span>, advised.getAdvisors().length=
);</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>It=92s questionable whether it=92s advisable (no pun intended) to modify=
 advice on a
business object in production, although there are no doubt legitimate usage=
 cases.
However, it can be very useful in development: for example, in tests. I hav=
e sometimes
found it very useful to be able to add test code in the form of an intercep=
tor or other
advice, getting inside a method invocation I want to test. (For example, th=
e advice can
get inside a transaction created for that method: for example, to run SQL t=
o check that
a database was correctly updated, before marking the transaction for roll b=
ack.)</p>
</td></tr></tbody></table></div>
<p>Depending on how you created the proxy, you can usually set a <code clas=
s=3D"literal">frozen</code> flag, in which
case the <code class=3D"literal">Advised</code> <code class=3D"literal">isF=
rozen()</code> method will return true, and any attempts to modify
advice through addition or removal will result in an <code class=3D"literal=
">AopConfigException</code>. The ability
to freeze the state of an advised object is useful in some cases, for examp=
le, to
prevent calling code removing a security interceptor. It may also be used i=
n Spring 1.1
to allow aggressive optimization if runtime advice modification is known no=
t to be
required.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-autoproxy" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#ao=
p-autoproxy"></a>12.9&nbsp;Using the "auto-proxy" facility</h2></div></div>=
</div>
<p>So far we=92ve considered explicit creation of AOP proxies using a <code=
 class=3D"literal">ProxyFactoryBean</code> or
similar factory bean.</p>
<p>Spring also allows us to use "auto-proxy" bean definitions, which can au=
tomatically
proxy selected bean definitions. This is built on Spring "bean post process=
or"
infrastructure, which enables modification of any bean definition as the co=
ntainer loads.</p>
<p>In this model, you set up some special bean definitions in your XML bean=
 definition file
to configure the auto proxy infrastructure. This allows you just to declare=
 the targets
eligible for auto-proxying: you don=92t need to use <code class=3D"literal"=
>ProxyFactoryBean</code>.</p>
<p>There are two ways to do this:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Using an auto-proxy creator that refers to specific beans in the current co=
ntext.
</li><li class=3D"listitem">
A special case of auto-proxy creation that deserves to be considered separa=
tely;
auto-proxy creation driven by source-level metadata attributes.
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-autoproxy-choices" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-autoproxy-ch=
oices"></a>12.9.1&nbsp;Autoproxy bean definitions</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.aop.framework.autoproxy<=
/code> package provides the following
standard auto-proxy creators.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-autoproxy" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-autoproxy"><=
/a>BeanNameAutoProxyCreator</h4></div></div></div>
<p>The <code class=3D"literal">BeanNameAutoProxyCreator</code> class is a <=
code class=3D"literal">BeanPostProcessor</code> that automatically creates
AOP proxies for beans with names matching literal values or wildcards.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span><span clas=
s=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"beanNames"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"jdk*,onlyJdk"</span><=
span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"interceptorNames"</span><span clas=
s=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>myInterceptor<span c=
lass=3D"hl-tag">&lt;/value&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>As with <code class=3D"literal">ProxyFactoryBean</code>, there is an <co=
de class=3D"literal">interceptorNames</code> property rather than a list
of interceptors, to allow correct behavior for prototype advisors. Named "i=
nterceptors"
can be advisors or any advice type.</p>
<p>As with auto proxying in general, the main point of using <code class=3D=
"literal">BeanNameAutoProxyCreator</code> is
to apply the same configuration consistently to multiple objects, with mini=
mal volume of
configuration. It is a popular choice for applying declarative transactions=
 to multiple
objects.</p>
<p>Bean definitions whose names match, such as "jdkMyBean" and "onlyJdk" in=
 the above
example, are plain old bean definitions with the target class. An AOP proxy=
 will be
created automatically by the <code class=3D"literal">BeanNameAutoProxyCreat=
or</code>. The same advice will be applied
to all matching beans. Note that if advisors are used (rather than the inte=
rceptor in
the above example), the pointcuts may apply differently to different beans.=
</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-autoproxy-default" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-auto=
proxy-default"></a>DefaultAdvisorAutoProxyCreator</h4></div></div></div>
<p>A more general and extremely powerful auto proxy creator is
<code class=3D"literal">DefaultAdvisorAutoProxyCreator</code>. This will au=
tomagically apply eligible advisors in the
current context, without the need to include specific bean names in the aut=
o-proxy
advisor=92s bean definition. It offers the same merit of consistent configu=
ration and
avoidance of duplication as <code class=3D"literal">BeanNameAutoProxyCreato=
r</code>.</p>
<p>Using this mechanism involves:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Specifying a <code class=3D"literal">DefaultAdvisorAutoProxyCreator</code> =
bean definition.
</li><li class=3D"listitem">
Specifying any number of Advisors in the same or related contexts. Note tha=
t these
<span class=3D"emphasis"><em>must</em></span> be Advisors, not just interce=
ptors or other advices. This is necessary
because there must be a pointcut to evaluate, to check the eligibility of e=
ach advice
to candidate bean definitions.
</li></ul></div>
<p>The <code class=3D"literal">DefaultAdvisorAutoProxyCreator</code> will a=
utomatically evaluate the pointcut contained
in each advisor, to see what (if any) advice it should apply to each busine=
ss object
(such as "businessObject1" and "businessObject2" in the example).</p>
<p>This means that any number of advisors can be applied automatically to e=
ach business
object. If no pointcut in any of the advisors matches any method in a busin=
ess object,
the object will not be proxied. As bean definitions are added for new busin=
ess objects,
they will automatically be proxied if necessary.</p>
<p>Autoproxying in general has the advantage of making it impossible for ca=
llers or
dependencies to obtain an un-advised object. Calling getBean("businessObjec=
t1") on this
ApplicationContext will return an AOP proxy, not the target business object=
. (The "inner
bean" idiom shown earlier also offers this benefit.)</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span><spa=
n class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">class</=
span>=3D<span class=3D"hl-value">"org.springframework.transaction.intercept=
or.TransactionAttributeSourceAdvisor"</span><span class=3D"hl-tag">&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionInterceptor"</span> <sp=
an class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"transactio=
nInterceptor"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"customAdvisor"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"com.mycompany.MyAdvisor"</s=
pan><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"businessObject1"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"com.mycompany.BusinessObj=
ect1"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-comment">&lt;!-- Properties omitted --&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"businessObject2"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"com.mycompany.BusinessObj=
ect2"</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>The <code class=3D"literal">DefaultAdvisorAutoProxyCreator</code> is ver=
y useful if you want to apply the same advice
consistently to many business objects. Once the infrastructure definitions =
are in place,
you can simply add new business objects without including specific proxy co=
nfiguration.
You can also drop in additional aspects very easily - for example, tracing =
or
performance monitoring aspects - with minimal change to configuration.</p>
<p>The DefaultAdvisorAutoProxyCreator offers support for filtering (using a=
 naming
convention so that only certain advisors are evaluated, allowing use of mul=
tiple,
differently configured, AdvisorAutoProxyCreators in the same factory) and o=
rdering.
Advisors can implement the <code class=3D"literal">org.springframework.core=
.Ordered</code> interface to ensure
correct ordering if this is an issue. The TransactionAttributeSourceAdvisor=
 used in the
above example has a configurable order value; the default setting is unorde=
red.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"aop-api-autoproxy-abstract" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-api-aut=
oproxy-abstract"></a>AbstractAdvisorAutoProxyCreator</h4></div></div></div>
<p>This is the superclass of DefaultAdvisorAutoProxyCreator. You can create=
 your own
auto-proxy creators by subclassing this class, in the unlikely event that a=
dvisor
definitions offer insufficient customization to the behavior of the framewo=
rk
<code class=3D"literal">DefaultAdvisorAutoProxyCreator</code>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-autoproxy-metadata" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-autoproxy-m=
etadata"></a>12.9.2&nbsp;Using metadata-driven auto-proxying</h3></div></di=
v></div>
<p>A particularly important type of auto-proxying is driven by metadata. Th=
is produces a
similar programming model to .NET <code class=3D"literal">ServicedComponent=
s</code>. Instead of defining metadata in
XML descriptors, configuration for transaction management and other enterpr=
ise services
is held in source-level attributes.</p>
<p>In this case, you use the <code class=3D"literal">DefaultAdvisorAutoProx=
yCreator</code>, in combination with Advisors
that understand metadata attributes. The metadata specifics are held in the=
 pointcut
part of the candidate advisors, rather than in the auto-proxy creation clas=
s itself.</p>
<p>This is really a special case of the <code class=3D"literal">DefaultAdvi=
sorAutoProxyCreator</code>, but deserves
consideration on its own. (The metadata-aware code is in the pointcuts cont=
ained in the
advisors, not the AOP framework itself.)</p>
<p>The <code class=3D"literal">/attributes</code> directory of the JPetStor=
e sample application shows the use of
attribute-driven auto-proxying. In this case, there=92s no need to use the
<code class=3D"literal">TransactionProxyFactoryBean</code>. Simply defining=
 transactional attributes on business
objects is sufficient, because of the use of metadata-aware pointcuts. The =
bean
definitions include the following code, in <code class=3D"literal">/WEB-INF=
/declarativeServices.xml</code>. Note that
this is generic, and can be used outside the JPetStore:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span><spa=
n class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">class</=
span>=3D<span class=3D"hl-value">"org.springframework.transaction.intercept=
or.TransactionAttributeSourceAdvisor"</span><span class=3D"hl-tag">&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionInterceptor"</span> <sp=
an class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"transactio=
nInterceptor"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"transactionInterceptor"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.transaction.interceptor.TransactionInterceptor"</spa=
n><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionManager"</span> <span c=
lass=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"transactionMan=
ager"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionAttributeSource"</span>=
<span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"org.springframework.transaction.i=
nterceptor.AttributesTransactionAttributeSource"</span><span class=3D"hl-ta=
g">&gt;</span>
            <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-at=
tribute">name</span>=3D<span class=3D"hl-value">"attributes"</span> <span c=
lass=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"attributes"</s=
pan><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/bean&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"attributes"</span> <span class=3D"hl-attribu=
te">class</span>=3D<span class=3D"hl-value">"org.springframework.metadata.c=
ommons.CommonsAttributes"</span><span class=3D"hl-tag">/&gt;</span></pre>
<p>The <code class=3D"literal">DefaultAdvisorAutoProxyCreator</code> bean d=
efinition (the name is not significant, hence
it can even be omitted) will pick up all eligible pointcuts in the current =
application
context. In this case, the "transactionAdvisor" bean definition, of type
<code class=3D"literal">TransactionAttributeSourceAdvisor</code>, will appl=
y to classes or methods carrying a
transaction attribute. The TransactionAttributeSourceAdvisor depends on a
TransactionInterceptor, via constructor dependency. The example resolves th=
is via
autowiring. The <code class=3D"literal">AttributesTransactionAttributeSourc=
e</code> depends on an implementation of
the <code class=3D"literal">org.springframework.metadata.Attributes</code> =
interface. In this fragment, the
"attributes" bean satisfies this, using the Jakarta Commons Attributes API =
to obtain
attribute information. (The application code must have been compiled using =
the Commons
Attributes compilation task.)</p>
<p>The <code class=3D"literal">/annotation</code> directory of the JPetStor=
e sample application contains an analogous
example for auto-proxying driven by JDK 1.5+ annotations. The following con=
figuration
enables automatic detection of Spring=92s <code class=3D"literal">Transacti=
onal</code> annotation, leading to implicit
proxies for beans containing that annotation:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springf=
ramework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span><spa=
n class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">class</=
span>=3D<span class=3D"hl-value">"org.springframework.transaction.intercept=
or.TransactionAttributeSourceAdvisor"</span><span class=3D"hl-tag">&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionInterceptor"</span> <sp=
an class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"transactio=
nInterceptor"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"transactionInterceptor"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.transaction.interceptor.TransactionInterceptor"</spa=
n><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionManager"</span> <span c=
lass=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"transactionMan=
ager"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"transactionAttributeSource"</span>=
<span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"org.springframework.transaction.a=
nnotation.AnnotationTransactionAttributeSource"</span><span class=3D"hl-tag=
">/&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The <code class=3D"literal">TransactionInterceptor</code> defined here d=
epends on a <code class=3D"literal">PlatformTransactionManager</code>
definition, which is not included in this generic file (although it could b=
e) because it
will be specific to the application=92s transaction requirements (typically=
 JTA, as in
this example, or Hibernate, JDO or JDBC):</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"transactionMan=
ager"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.transaction.jta.JtaTransactionManager"</span><span c=
lass=3D"hl-tag">/&gt;</span></pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>If you require only declarative transaction management, using these gene=
ric XML
definitions will result in Spring automatically proxying all classes or met=
hods with
transaction attributes. You won=92t need to work directly with AOP, and the=
 programming
model is similar to that of .NET ServicedComponents.</p>
</td></tr></tbody></table></div>
<p>This mechanism is extensible. It=92s possible to do auto-proxying based =
on custom
attributes. You need to:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Define your custom attribute.
</li><li class=3D"listitem">
Specify an Advisor with the necessary advice, including a pointcut that is =
triggered
by the presence of the custom attribute on a class or method. You may be ab=
le to use
an existing advice, merely implementing a static pointcut that picks up the=
 custom
attribute.
</li></ul></div>
<p>It=92s possible for such advisors to be unique to each advised class (fo=
r example, mixins):
they simply need to be defined as prototype, rather than singleton, bean de=
finitions.
For example, the <code class=3D"literal">LockMixin</code> introduction inte=
rceptor from the Spring test suite,
shown above, could be used in conjunction with a generic <code class=3D"lit=
eral">DefaultIntroductionAdvisor</code>:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"lockMixin"</sp=
an> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"t=
est.mixin.LockMixin"</span> <span class=3D"hl-attribute">scope</span>=3D<sp=
an class=3D"hl-value">"prototype"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"lockableAdvisor"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.s=
upport.DefaultIntroductionAdvisor"</span>
        <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-value=
">"prototype"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">ref</span>=3D<span class=3D"hl-value">"lockMixin"</span><span class=
=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Note that both <code class=3D"literal">lockMixin</code> and <code class=
=3D"literal">lockableAdvisor</code> are defined as prototypes.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-targetsource" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#aop-targetsource"></a>12.10&nbsp;Using TargetSources</h2></div></div></div=
>
<p>Spring offers the concept of a <span class=3D"emphasis"><em>TargetSource=
</em></span>, expressed in the
<code class=3D"literal">org.springframework.aop.TargetSource</code> interfa=
ce. This interface is responsible for
returning the "target object" implementing the join point. The <code class=
=3D"literal">TargetSource</code>
implementation is asked for a target instance each time the AOP proxy handl=
es a method
invocation.</p>
<p>Developers using Spring AOP don=92t normally need to work directly with =
TargetSources, but
this provides a powerful means of supporting pooling, hot swappable and oth=
er
sophisticated targets. For example, a pooling TargetSource can return a dif=
ferent target
instance for each invocation, using a pool to manage instances.</p>
<p>If you do not specify a TargetSource, a default implementation is used t=
hat wraps a
local object. The same target is returned for each invocation (as you would=
 expect).</p>
<p>Let=92s look at the standard target sources provided with Spring, and ho=
w you can use them.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>When using a custom target source, your target will usually need to be a=
 prototype
rather than a singleton bean definition. This allows Spring to create a new=
 target
instance when required.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ts-swap" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-swap"></a>12.10.1&n=
bsp;Hot swappable target sources</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.aop.target.HotSwappableT=
argetSource</code> exists to allow the target
of an AOP proxy to be switched while allowing callers to keep their referen=
ces to it.</p>
<p>Changing the target source=92s target takes effect immediately. The
<code class=3D"literal">HotSwappableTargetSource</code> is threadsafe.</p>
<p>You can change the target via the <code class=3D"literal">swap()</code> =
method on HotSwappableTargetSource as follows:</p>
<pre class=3D"programlisting">HotSwappableTargetSource swapper =3D (HotSwap=
pableTargetSource) beanFactory.getBean(<span class=3D"hl-string">"swapper"<=
/span>);
Object oldTarget =3D swapper.swap(newTarget);</pre>
<p>The XML definitions required look as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"initialTarget"=
</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"mycompany.OldTarget"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"swapper"</span> <span class=3D"hl-attribute"=
>class</span>=3D<span class=3D"hl-value">"org.springframework.aop.target.Ho=
tSwappableTargetSource"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">ref</span>=3D<span class=3D"hl-value">"initialTarget"</span><span c=
lass=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"swappable"</span> <span class=3D"hl-attribut=
e">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.framewo=
rk.ProxyFactoryBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetSource"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"swapper"</span><sp=
an class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The above <code class=3D"literal">swap()</code> call changes the target =
of the swappable bean. Clients who hold a
reference to that bean will be unaware of the change, but will immediately =
start hitting
the new target.</p>
<p>Although this example doesn=92t add any advice - and it=92s not necessar=
y to add advice to
use a <code class=3D"literal">TargetSource</code> - of course any <code cla=
ss=3D"literal">TargetSource</code> can be used in conjunction with
arbitrary advice.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ts-pool" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-pool"></a>12.10.2&n=
bsp;Pooling target sources</h3></div></div></div>
<p>Using a pooling target source provides a similar programming model to st=
ateless session
EJBs, in which a pool of identical instances is maintained, with method inv=
ocations
going to free objects in the pool.</p>
<p>A crucial difference between Spring pooling and SLSB pooling is that Spr=
ing pooling can
be applied to any POJO. As with Spring in general, this service can be appl=
ied in a
non-invasive way.</p>
<p>Spring provides out-of-the-box support for Commons Pool 2.2, which provi=
des a
fairly efficient pooling implementation. You=92ll need the commons-pool Jar=
 on your
application=92s classpath to use this feature. It=92s also possible to subc=
lass
<code class=3D"literal">org.springframework.aop.target.AbstractPoolingTarge=
tSource</code> to support any other
pooling API.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Commons Pool 1.5+ is also supported but deprecated as of Spring Framewor=
k 4.2.</p>
</td></tr></tbody></table></div>
<p>Sample configuration is shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"businessObject=
Target"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"h=
l-value">"com.mycompany.MyBusinessObject"</span>
        <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-value=
">"prototype"</span><span class=3D"hl-tag">&gt;</span>
    ... properties omitted
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"poolTargetSource"</span> <span class=3D"hl-a=
ttribute">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.=
target.CommonsPool2TargetSource"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetBeanName"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"businessObjectTa=
rget"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"maxSize"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"25"</span><span class=
=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"businessObject"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"org.springframework.aop.fr=
amework.ProxyFactoryBean"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetSource"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"poolTargetSource"<=
/span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"interceptorNames"</span> <span cla=
ss=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"myInterceptor"=
</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>Note that the target object - "businessObjectTarget" in the example - <s=
pan class=3D"emphasis"><em>must</em></span> be a
prototype. This allows the <code class=3D"literal">PoolingTargetSource</cod=
e> implementation to create new instances
of the target to grow the pool as necessary. See the javadocs of
<code class=3D"literal">AbstractPoolingTargetSource</code> and the concrete=
 subclass you wish to use for information
about its properties: "maxSize" is the most basic, and always guaranteed to=
 be present.</p>
<p>In this case, "myInterceptor" is the name of an interceptor that would n=
eed to be
defined in the same IoC context. However, it isn=92t necessary to specify i=
nterceptors to
use pooling. If you want only pooling, and no other advice, don=92t set the
interceptorNames property at all.</p>
<p>It=92s possible to configure Spring so as to be able to cast any pooled =
object to the
<code class=3D"literal">org.springframework.aop.target.PoolingConfig</code>=
 interface, which exposes information
about the configuration and current size of the pool through an introductio=
n. You=92ll
need to define an advisor like this:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"poolConfigAdvi=
sor"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"<=
/span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetObject"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"poolTargetSource"<=
/span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetMethod"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"getPoolingConfig=
Mixin"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>This advisor is obtained by calling a convenience method on the
<code class=3D"literal">AbstractPoolingTargetSource</code> class, hence the=
 use of MethodInvokingFactoryBean. This
advisor=92s name ("poolConfigAdvisor" here) must be in the list of intercep=
tors names in
the ProxyFactoryBean exposing the pooled object.</p>
<p>The cast will look as follows:</p>
<pre class=3D"programlisting">PoolingConfig conf =3D (PoolingConfig) beanFa=
ctory.getBean(<span class=3D"hl-string">"businessObject"</span>);
System.out.println(<span class=3D"hl-string">"Max pool size is "</span> + c=
onf.getMaxSize());</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Pooling stateless service objects is not usually necessary. We don=92t b=
elieve it should
be the default choice, as most stateless objects are naturally thread safe,=
 and instance
pooling is problematic if resources are cached.</p>
</td></tr></tbody></table></div>
<p>Simpler pooling is available using auto-proxying. It=92s possible to set=
 the TargetSources
used by any auto-proxy creator.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ts-prototype" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-prototype"></a=
>12.10.3&nbsp;Prototype target sources</h3></div></div></div>
<p>Setting up a "prototype" target source is similar to a pooling TargetSou=
rce. In this
case, a new instance of the target will be created on every method invocati=
on. Although
the cost of creating a new object isn=92t high in a modern JVM, the cost of=
 wiring up the
new object (satisfying its IoC dependencies) may be more expensive. Thus yo=
u shouldn=92t
use this approach without very good reason.</p>
<p>To do this, you could modify the <code class=3D"literal">poolTargetSourc=
e</code> definition shown above as follows.
(I=92ve also changed the name, for clarity.)</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"prototypeTarge=
tSource"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"=
hl-value">"org.springframework.aop.target.PrototypeTargetSource"</span><spa=
n class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetBeanName"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"businessObjectTarg=
et"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>There=92s only one property: the name of the target bean. Inheritance is=
 used in the
TargetSource implementations to ensure consistent naming. As with the pooli=
ng target
source, the target bean must be a prototype bean definition.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"aop-ts-threadlocal" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ts-threadlocal"=
></a>12.10.4&nbsp;ThreadLocal target sources</h3></div></div></div>
<p><code class=3D"literal">ThreadLocal</code> target sources are useful if =
you need an object to be created for each
incoming request (per thread that is). The concept of a <code class=3D"lite=
ral">ThreadLocal</code> provide a JDK-wide
facility to transparently store resource alongside a thread. Setting up a
<code class=3D"literal">ThreadLocalTargetSource</code> is pretty much the s=
ame as was explained for the other types
of target source:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"threadlocalTar=
getSource"</span> <span class=3D"hl-attribute">class</span>=3D<span class=
=3D"hl-value">"org.springframework.aop.target.ThreadLocalTargetSource"</spa=
n><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"targetBeanName"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"businessObjectTa=
rget"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>ThreadLocals come with serious issues (potentially resulting in memory l=
eaks) when
incorrectly using them in a multi-threaded and multi-classloader environmen=
ts. One
should always consider wrapping a threadlocal in some other class and never=
 directly use
the <code class=3D"literal">ThreadLocal</code> itself (except of course in =
the wrapper class). Also, one should
always remember to correctly set and unset (where the latter simply involve=
d a call to
<code class=3D"literal">ThreadLocal.set(null)</code>) the resource local to=
 the thread. Unsetting should be done in
any case since not unsetting it might result in problematic behavior. Sprin=
g=92s
ThreadLocal support does this for you and should always be considered in fa=
vor of using
ThreadLocals without other proper handling code.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-extensibility" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-extensibility"></a>12.11&nbsp;Defining new Advice types</h2></div></d=
iv></div>
<p>Spring AOP is designed to be extensible. While the interception implemen=
tation strategy
is presently used internally, it is possible to support arbitrary advice ty=
pes in
addition to the out-of-the-box interception around advice, before, throws a=
dvice and
after returning advice.</p>
<p>The <code class=3D"literal">org.springframework.aop.framework.adapter</c=
ode> package is an SPI package allowing
support for new custom advice types to be added without changing the core f=
ramework.
The only constraint on a custom <code class=3D"literal">Advice</code> type =
is that it must implement the
<code class=3D"literal">org.aopalliance.aop.Advice</code> marker interface.=
</p>
<p>Please refer to the <code class=3D"literal">org.springframework.aop.fram=
ework.adapter</code> javadocs for further
information.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"aop-api-resources" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#aop-api-resources"></a>12.12&nbsp;Further resources</h2></div></div></div=
>
<p>Please refer to the Spring sample applications for further examples of S=
pring AOP:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The JPetStore=92s default configuration illustrates the use of the
<code class=3D"literal">TransactionProxyFactoryBean</code> for declarative =
transaction management.
</li><li class=3D"listitem">
The <code class=3D"literal">/attributes</code> directory of the JPetStore i=
llustrates the use of attribute-driven
declarative transaction management.
</li></ul></div>
</div>
</div>
</div>
<div class=3D"part"><div class=3D"titlepage"><div><div><h1 class=3D"title">=
<a name=3D"testing" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#testing"></a>Part&nbsp;IV.&nbsp;T=
esting</h1></div></div></div>
<div class=3D"partintro"><div></div>
<p>The adoption of the test-driven-development (TDD) approach to software
development is certainly advocated by the Spring team, and so coverage of S=
pring=92s
support for integration testing is covered (alongside best practices for un=
it testing).
The Spring team has found that the correct use of IoC certainly does make b=
oth unit and
integration testing easier (in that the presence of setter methods and appr=
opriate
constructors on classes makes them easier to wire together in a test withou=
t having to
set up service locator registries and suchlike)=85&#8203; the chapter dedic=
ated solely to
testing will hopefully convince you of this as well.</p>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"testing-introduction" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing-introduct=
ion"></a>13.&nbsp;Introduction to Spring Testing</h2></div></div></div>
<p>Testing is an integral part of enterprise software development. This cha=
pter focuses on
the value-add of the IoC principle to <a class=3D"link" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#unit-testing" title=3D"14.&nbsp;Unit Testing">unit testing</a> and on th=
e benefits
of the Spring Framework=92s support for <a class=3D"link" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#integration-testing" title=3D"15.&nbsp;Integration Testing">integratio=
n testing</a>. <span class=3D"emphasis"><em>(A
thorough treatment of testing in the enterprise is beyond the scope of this=
 reference
manual.)</em></span></p>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"unit-testing" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#unit-testing"></a>14.&nbs=
p;Unit Testing</h2></div></div></div>
<p>Dependency Injection should make your code less dependent on the contain=
er than it would
be with traditional Java EE development. The POJOs that make up your applic=
ation should
be testable in JUnit or TestNG tests, with objects simply instantiated usin=
g the <code class=3D"literal">new</code>
operator, <span class=3D"emphasis"><em>without Spring or any other containe=
r</em></span>. You can use <a class=3D"link" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-obj=
ects" title=3D"14.1&nbsp;Mock Objects">mock
objects</a> (in conjunction with other valuable testing techniques) to test=
 your code in
isolation. If you follow the architecture recommendations for Spring, the r=
esulting
clean layering and componentization of your codebase will facilitate easier=
 unit
testing. For example, you can test service layer objects by stubbing or moc=
king DAO or
Repository interfaces, without needing to access persistent data while runn=
ing unit
tests.</p>
<p>True unit tests typically run extremely quickly, as there is no runtime =
infrastructure
to set up. Emphasizing true unit tests as part of your development methodol=
ogy will
boost your productivity. You may not need this section of the testing chapt=
er to help
you write effective unit tests for your IoC-based applications. For certain=
 unit testing
scenarios, however, the Spring Framework provides the following mock object=
s and testing
support classes.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"mock-objects" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#moc=
k-objects"></a>14.1&nbsp;Mock Objects</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"mock-objects-env" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-env"></a=
>14.1.1&nbsp;Environment</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.mock.env</code> package =
contains mock implementations of the
<code class=3D"literal">Environment</code> and <code class=3D"literal">Prop=
ertySource</code> abstractions (see <a class=3D"xref" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#beans-definition-profiles" title=3D"7.13.1&nbsp;Bean definition profiles">=
Section&nbsp;7.13.1, =93Bean definition profiles=94</a>
and <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#beans-property-source-abstracti=
on" title=3D"7.13.2&nbsp;PropertySource abstraction">Section&nbsp;7.13.2, =
=93PropertySource abstraction=94</a>). <code class=3D"literal">MockEnvironm=
ent</code> and
<code class=3D"literal">MockPropertySource</code> are useful for developing=
 <span class=3D"emphasis"><em>out-of-container</em></span> tests for code t=
hat
depends on environment-specific properties.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"mock-objects-jndi" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-jndi"><=
/a>14.1.2&nbsp;JNDI</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.mock.jndi</code> package=
 contains an implementation of the JNDI SPI,
which you can use to set up a simple JNDI environment for test suites or st=
and-alone
applications. If, for example, JDBC <code class=3D"literal">DataSource</cod=
e>s get bound to the same JNDI names in
test code as within a Java EE container, you can reuse both application cod=
e and
configuration in testing scenarios without modification.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"mock-objects-servlet" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-serv=
let"></a>14.1.3&nbsp;Servlet API</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.mock.web</code> package =
contains a comprehensive set of Servlet API
mock objects that are useful for testing web contexts, controllers, and fil=
ters. These
mock objects are targeted at usage with Spring=92s Web MVC framework and ar=
e generally more
convenient to use than dynamic mock objects such as <a class=3D"ulink" href=
=3D"http://www.easymock.org/" target=3D"_top">EasyMock</a> or
alternative Servlet API mock objects such as <a class=3D"ulink" href=3D"htt=
p://www.mockobjects.com/" target=3D"_top">MockObjects</a>. Since
Spring Framework 4.0, the set of mocks in the <code class=3D"literal">org.s=
pringframework.mock.web</code> package is
based on the Servlet 3.0 API.</p>
<p>For thorough integration testing of your Spring MVC and REST <code class=
=3D"literal">Controller</code>s in
conjunction with your <code class=3D"literal">WebApplicationContext</code> =
configuration for Spring MVC, see the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-framework" title=3D=
"15.6&nbsp;Spring MVC Test Framework"><span class=3D"emphasis"><em>Spring M=
VC Test Framework</em></span></a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"mock-objects-portlet" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-port=
let"></a>14.1.4&nbsp;Portlet API</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.mock.web.portlet</code> =
package contains a set of Portlet API mock
objects, targeted at usage with Spring=92s Portlet MVC framework.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"unit-testing-support-classes" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#unit-testing-support-classes"></a>14.2&nbsp;Unit Testing suppo=
rt Classes</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"unit-testing-utilities" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#unit-testing-ut=
ilities"></a>14.2.1&nbsp;General testing utilities</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.test.util</code> package=
 contains several general purpose utilities
for use in unit and integration testing.</p>
<p><code class=3D"literal">ReflectionTestUtils</code> is a collection of re=
flection-based utility methods. Developers use
these methods in testing scenarios where they need to change the value of a=
 constant, set
a non-<code class=3D"literal">public</code> field, invoke a non-<code class=
=3D"literal">public</code> setter method, or invoke a non-<code class=3D"li=
teral">public</code>
<span class=3D"emphasis"><em>configuration</em></span> or <span class=3D"em=
phasis"><em>lifecycle</em></span> callback method when testing application =
code involving
use cases such as the following.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
ORM frameworks such as JPA and Hibernate that condone <code class=3D"litera=
l">private</code> or <code class=3D"literal">protected</code> field
access as opposed to <code class=3D"literal">public</code> setter methods f=
or properties in a domain entity.
</li><li class=3D"listitem">
Spring=92s support for annotations such as <code class=3D"literal">@Autowir=
ed</code>, <code class=3D"literal">@Inject</code>, and <code class=3D"liter=
al">@Resource</code>,
which provides dependency injection for <code class=3D"literal">private</co=
de> or <code class=3D"literal">protected</code> fields, setter
methods, and configuration methods.
</li><li class=3D"listitem">
Use of annotations such as <code class=3D"literal">@PostConstruct</code> an=
d <code class=3D"literal">@PreDestroy</code> for lifecycle callback
methods.
</li></ul></div>
<p><code class=3D"literal">AopTestUtils</code> is a collection of AOP-relat=
ed utility methods. These methods can be used
to obtain a reference to the underlying target object hidden behind one or =
more Spring
proxies. For example, if you have configured a bean as a dynamic mock using=
 a library
like EasyMock or Mockito and the mock is wrapped in a Spring proxy, you may=
 need direct
access to the underlying mock in order to configure expectations on it and =
perform
verifications. For Spring=92s core AOP utilities, see <code class=3D"litera=
l">AopUtils</code> and <code class=3D"literal">AopProxyUtils</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"unit-testing-spring-mvc" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#unit-testing-s=
pring-mvc"></a>14.2.2&nbsp;Spring MVC</h3></div></div></div>
<p>The <code class=3D"literal">org.springframework.test.web</code> package =
contains <code class=3D"literal">ModelAndViewAssert</code>, which you can
use in combination with JUnit, TestNG, or any other testing framework for u=
nit tests
dealing with Spring MVC <code class=3D"literal">ModelAndView</code> objects=
.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip: Unit testing Spring MVC Controllers"><tbody>=
<tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><img alt=
=3D"[Tip]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-=
framework-reference/htmlsingle/images/tip.png"></td><th align=3D"left">Unit=
 testing Spring MVC Controllers</th></tr><tr><td align=3D"left" valign=3D"t=
op">
<p>To unit test your Spring MVC <code class=3D"literal">Controller</code>s =
as POJOs, use <code class=3D"literal">ModelAndViewAssert</code> combined
with <code class=3D"literal">MockHttpServletRequest</code>, <code class=3D"=
literal">MockHttpSession</code>, and so on from Spring=92s
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#mock-objects-servlet" title=3D"14.1=
.3&nbsp;Servlet API">Servlet API mocks</a>. For thorough integration testin=
g of your
Spring MVC and REST <code class=3D"literal">Controller</code>s in conjuncti=
on with your <code class=3D"literal">WebApplicationContext</code>
configuration for Spring MVC, use the <a class=3D"link" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#spring-mvc-test-framework" title=3D"15.6&nbsp;Spring MVC Test Framework"=
><span class=3D"emphasis"><em>Spring MVC Test
Framework</em></span></a> instead.</p>
</td></tr></tbody></table></div>
</div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"integration-testing" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#integration-testin=
g"></a>15.&nbsp;Integration Testing</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"integration-testing-overview" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#integration-testing-overview"></a>15.1&nbsp;Overview</h2></div=
></div></div>
<p>It is important to be able to perform some integration testing without r=
equiring
deployment to your application server or connecting to other enterprise inf=
rastructure.
This will enable you to test things such as:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The correct wiring of your Spring IoC container contexts.
</li><li class=3D"listitem">
Data access using JDBC or an ORM tool. This would include such things as th=
e
correctness of SQL statements, Hibernate queries, JPA entity mappings, etc.
</li></ul></div>
<p>The Spring Framework provides first-class support for integration testin=
g in the
<code class=3D"literal">spring-test</code> module. The name of the actual J=
AR file might include the release version
and might also be in the long <code class=3D"literal">org.springframework.t=
est</code> form, depending on where you
get it from (see the <a class=3D"link" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#dependency-man=
agement" title=3D"2.3.1&nbsp;Dependency Management and Naming Conventions">=
section on Dependency Management</a> for an
explanation). This library includes the <code class=3D"literal">org.springf=
ramework.test</code> package, which
contains valuable classes for integration testing with a Spring container. =
This testing
does not rely on an application server or other deployment environment. Suc=
h tests are
slower to run than unit tests but much faster than the equivalent Selenium =
tests or remote
tests that rely on deployment to an application server.</p>
<p>In Spring 2.5 and later, unit and integration testing support is provide=
d in the form of
the annotation-driven <a class=3D"link" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-f=
ramework" title=3D"15.5&nbsp;Spring TestContext Framework">Spring TestConte=
xt Framework</a>. The
TestContext framework is agnostic of the actual testing framework in use, t=
hus allowing
instrumentation of tests in various environments including JUnit, TestNG, a=
nd so on.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"integration-testing-goals" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#integration-testing-goals"></a>15.2&nbsp;Goals of Integration Tes=
ting</h2></div></div></div>
<p>Spring=92s integration testing support has the following primary goals:<=
/p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
To manage <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#testing-ctx-management" t=
itle=3D"15.2.1&nbsp;Context management and caching">Spring IoC container ca=
ching</a> between test
execution.
</li><li class=3D"listitem">
To provide <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#testing-fixture-di" titl=
e=3D"15.2.2&nbsp;Dependency Injection of test fixtures">Dependency Injectio=
n of test fixture instances</a>.
</li><li class=3D"listitem">
To provide <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#testing-tx" title=3D"15.=
2.3&nbsp;Transaction management">transaction management</a> appropriate to =
integration testing.
</li><li class=3D"listitem">
To supply <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#testing-support-classes" =
title=3D"15.2.4&nbsp;Support classes for integration testing">Spring-specif=
ic base classes</a> that assist
developers in writing integration tests.
</li></ul></div>
<p>The next few sections describe each goal and provide links to implementa=
tion and
configuration details.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testing-ctx-management" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing-ctx-man=
agement"></a>15.2.1&nbsp;Context management and caching</h3></div></div></d=
iv>
<p>The Spring TestContext Framework provides consistent loading of Spring
<code class=3D"literal">ApplicationContext</code>s and <code class=3D"liter=
al">WebApplicationContext</code>s as well as caching of those
contexts. Support for the caching of loaded contexts is important, because =
startup time
can become an issue&#8201;=97&#8201;not because of the overhead of Spring i=
tself, but because the
objects instantiated by the Spring container take time to instantiate. For =
example, a
project with 50 to 100 Hibernate mapping files might take 10 to 20 seconds =
to load the
mapping files, and incurring that cost before running every test in every t=
est fixture
leads to slower overall test runs that reduce developer productivity.</p>
<p>Test classes typically declare either an array of <span class=3D"emphasi=
s"><em>resource locations</em></span> for XML or Groovy
configuration metadata&#8201;=97&#8201;often in the classpath&#8201;=97&#82=
01;or an array of <span class=3D"emphasis"><em>annotated classes</em></span=
>
that is used to configure the application. These locations or classes are t=
he same as or
similar to those specified in <code class=3D"literal">web.xml</code> or oth=
er configuration files for production
deployments.</p>
<p>By default, once loaded, the configured <code class=3D"literal">Applicat=
ionContext</code> is reused for each test.
Thus the setup cost is incurred only once per test suite, and subsequent te=
st execution
is much faster. In this context, the term <span class=3D"emphasis"><em>test=
 suite</em></span> means all tests run in the same
JVM&#8201;=97&#8201;for example, all tests run from an Ant, Maven, or Gradl=
e build for a given
project or module. In the unlikely case that a test corrupts the applicatio=
n context and
requires reloading&#8201;=97&#8201;for example, by modifying a bean definit=
ion or the state of an
application object&#8201;=97&#8201;the TestContext framework can be configu=
red to reload the
configuration and rebuild the application context before executing the next=
 test.</p>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management" =
title=3D"15.5.4&nbsp;Context management">Section&nbsp;15.5.4, =93Context ma=
nagement=94</a> and <a class=3D"xref" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx=
-management-caching" title=3D"Context caching">the section called =93Contex=
t caching=94</a> with the
TestContext framework.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testing-fixture-di" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing-fixture-di"=
></a>15.2.2&nbsp;Dependency Injection of test fixtures</h3></div></div></di=
v>
<p>When the TestContext framework loads your application context, it can op=
tionally
configure instances of your test classes via Dependency Injection. This pro=
vides a
convenient mechanism for setting up test fixtures using preconfigured beans=
 from your
application context. A strong benefit here is that you can reuse applicatio=
n contexts
across various testing scenarios (e.g., for configuring Spring-managed obje=
ct graphs,
transactional proxies, <code class=3D"literal">DataSource</code>s, etc.), t=
hus avoiding the need to duplicate
complex test fixture setup for individual test cases.</p>
<p>As an example, consider the scenario where we have a class, <code class=
=3D"literal">HibernateTitleRepository</code>,
that implements data access logic for a <code class=3D"literal">Title</code=
> domain entity. We want to write
integration tests that test the following areas:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The Spring configuration: basically, is everything related to the configura=
tion of the
<code class=3D"literal">HibernateTitleRepository</code> bean correct and pr=
esent?
</li><li class=3D"listitem">
The Hibernate mapping file configuration: is everything mapped correctly, a=
nd are the
correct lazy-loading settings in place?
</li><li class=3D"listitem">
The logic of the <code class=3D"literal">HibernateTitleRepository</code>: d=
oes the configured instance of this
class perform as anticipated?
</li></ul></div>
<p>See dependency injection of test fixtures with the <a class=3D"link" hre=
f=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-ref=
erence/htmlsingle/#testcontext-fixture-di" title=3D"15.5.5&nbsp;Dependency =
injection of test fixtures">TestContext
framework</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testing-tx" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#testing-tx"></a>15.2.3&nbsp=
;Transaction management</h3></div></div></div>
<p>One common issue in tests that access a real database is their effect on=
 the state of
the persistence store. Even when you=92re using a development database, cha=
nges to the
state may affect future tests. Also, many operations&#8201;=97&#8201;such a=
s inserting or modifying
persistent data&#8201;=97&#8201;cannot be performed (or verified) outside a=
 transaction.</p>
<p>The TestContext framework addresses this issue. By default, the framewor=
k will create
and roll back a transaction for each test. You simply write code that can a=
ssume the
existence of a transaction. If you call transactionally proxied objects in =
your tests,
they will behave correctly, according to their configured transactional sem=
antics. In
addition, if a test method deletes the contents of selected tables while ru=
nning within
the transaction managed for the test, the transaction will roll back by def=
ault, and the
database will return to its state prior to execution of the test. Transacti=
onal support
is provided to a test via a <code class=3D"literal">PlatformTransactionMana=
ger</code> bean defined in the test=92s
application context.</p>
<p>If you want a transaction to commit&#8201;=97&#8201;unusual, but occasio=
nally useful when you want a
particular test to populate or modify the database&#8201;=97&#8201;the Test=
Context framework can be
instructed to cause the transaction to commit instead of roll back via the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-annotations" ti=
tle=3D"15.4&nbsp;Annotations"><code class=3D"literal">@Commit</code></a> an=
notation.</p>
<p>See transaction management with the <a class=3D"link" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#testcontext-tx" title=3D"15.5.7&nbsp;Transaction management">TestContex=
t framework</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testing-support-classes" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing-suppor=
t-classes"></a>15.2.4&nbsp;Support classes for integration testing</h3></di=
v></div></div>
<p>The Spring TestContext Framework provides several <code class=3D"literal=
">abstract</code> support classes that
simplify the writing of integration tests. These base test classes provide =
well-defined
hooks into the testing framework as well as convenient instance variables a=
nd methods,
which enable you to access:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
The <code class=3D"literal">ApplicationContext</code>, for performing expli=
cit bean lookups or testing the state of
the context as a whole.
</li><li class=3D"listitem">
A <code class=3D"literal">JdbcTemplate</code>, for executing SQL statements=
 to query the database. Such queries can
be used to confirm database state both <span class=3D"emphasis"><em>prior t=
o</em></span> and <span class=3D"emphasis"><em>after</em></span> execution =
of
database-related application code, and Spring ensures that such queries run=
 in the
scope of the same transaction as the application code. When used in conjunc=
tion with
an ORM tool, be sure to avoid <a class=3D"link" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testc=
ontext-tx-false-positives" title=3D"Avoid false positives when testing ORM =
code">false positives</a>.
</li></ul></div>
<p>In addition, you may want to create your own custom, application-wide su=
perclass with
instance variables and methods specific to your project.</p>
<p>See support classes for the <a class=3D"link" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#test=
context-support-classes" title=3D"15.5.9&nbsp;TestContext Framework support=
 classes">TestContext framework</a>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"integration-testing-support-jdbc" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#integration-testing-support-jdbc"></a>15.3&nbsp;JDBC Test=
ing Support</h2></div></div></div>
<p>The <code class=3D"literal">org.springframework.test.jdbc</code> package=
 contains <code class=3D"literal">JdbcTestUtils</code>, which is a
collection of JDBC related utility functions intended to simplify standard =
database
testing scenarios. Specifically, <code class=3D"literal">JdbcTestUtils</cod=
e> provides the following static utility
methods.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">countRowsInTable(..)</code>: counts the number of r=
ows in the given table
</li><li class=3D"listitem">
<code class=3D"literal">countRowsInTableWhere(..)</code>: counts the number=
 of rows in the given table, using
the provided <code class=3D"literal">WHERE</code> clause
</li><li class=3D"listitem">
<code class=3D"literal">deleteFromTables(..)</code>: deletes all rows from =
the specified tables
</li><li class=3D"listitem">
<code class=3D"literal">deleteFromTableWhere(..)</code>: deletes rows from =
the given table, using the provided
<code class=3D"literal">WHERE</code> clause
</li><li class=3D"listitem">
<code class=3D"literal">dropTables(..)</code>: drops the specified tables
</li></ul></div>
<p><span class=3D"emphasis"><em>Note that <a class=3D"link" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#testcontext-support-classes-junit4" title=3D"JUnit 4 support classes=
"><code class=3D"literal">AbstractTransactionalJUnit4SpringContextTests</co=
de></a> and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-support-classes-testng"=
 title=3D"TestNG support classes"><code class=3D"literal">AbstractTransacti=
onalTestNGSpringContextTests</code></a>
provide convenience methods which delegate to the aforementioned methods in
<code class=3D"literal">JdbcTestUtils</code>.</em></span></p>
<p>The <code class=3D"literal">spring-jdbc</code> module provides support f=
or configuring and launching an embedded
database which can be used in integration tests that interact with a databa=
se. For
details, see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-embedded-database=
-support" title=3D"19.8&nbsp;Embedded database support">Section&nbsp;19.8, =
=93Embedded database support=94</a> and
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc-embedded-database-dao-testing"=
 title=3D"19.8.5&nbsp;Testing data access logic with an embedded database">=
Section&nbsp;19.8.5, =93Testing data access logic with an embedded database=
=94</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"integration-testing-annotations" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#integration-testing-annotations"></a>15.4&nbsp;Annotation=
s</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"integration-testing-annotations-spring" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#integration-testing-annotations-spring"></a>15.4.1&nbsp;Spring Testing Ann=
otations</h3></div></div></div>
<p>The Spring Framework provides the following set of <span class=3D"emphas=
is"><em>Spring-specific</em></span> annotations that
you can use in your unit and integration tests in conjunction with the Test=
Context
framework. Refer to the corresponding javadocs for further information, inc=
luding
default attribute values, attribute aliases, and so on.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__bootstrapwith" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#__bootstrapwith"></a>@=
BootstrapWith</h4></div></div></div>
<p><code class=3D"literal">@BootstrapWith</code> is a class-level annotatio=
n that is used to configure how the <span class=3D"emphasis"><em>Spring
TestContext Framework</em></span> is bootstrapped. Specifically, <code clas=
s=3D"literal">@BootstrapWith</code> is used to specify
a custom <code class=3D"literal">TestContextBootstrapper</code>. Consult th=
e <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#testcontext-bootstrapping" title=
=3D"15.5.2&nbsp;Bootstrapping the TestContext framework">Bootstrapping
the TestContext framework</a> section for further details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__contextconfiguration" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__contextconfig=
uration"></a>@ContextConfiguration</h4></div></div></div>
<p><code class=3D"literal">@ContextConfiguration</code> defines class-level=
 metadata that is used to determine how to
load and configure an <code class=3D"literal">ApplicationContext</code> for=
 integration tests. Specifically,
<code class=3D"literal">@ContextConfiguration</code> declares the applicati=
on context resource <code class=3D"literal">locations</code> or the
annotated <code class=3D"literal">classes</code> that will be used to load =
the context.</p>
<p>Resource locations are typically XML configuration files or Groovy scrip=
ts located in
the classpath; whereas, annotated classes are typically <code class=3D"lite=
ral">@Configuration</code> classes. However,
resource locations can also refer to files and scripts in the file system, =
and annotated
classes can be component classes, etc.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ContextConfig=
uration</strong></span>(<span class=3D"hl-string">"/test-config.xml"</span>=
)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> XmlApplicationContextTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ContextConfig=
uration</strong></span>(<span class=3D"strong"><strong>classes</strong></sp=
an> =3D TestConfig.<span class=3D"hl-keyword">class</span>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ConfigClassApplicationContextTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>As an alternative or in addition to declaring resource locations or anno=
tated classes,
<code class=3D"literal">@ContextConfiguration</code> may be used to declare=
 <code class=3D"literal">ApplicationContextInitializer</code> classes.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ContextConfig=
uration</strong></span>(<span class=3D"strong"><strong>initializers</strong=
></span> =3D CustomContextIntializer.<span class=3D"hl-keyword">class</span=
>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ContextInitializerTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p><code class=3D"literal">@ContextConfiguration</code> may optionally be u=
sed to declare the <code class=3D"literal">ContextLoader</code> strategy
as well. Note, however, that you typically do not need to explicitly config=
ure the
loader since the default loader supports either resource <code class=3D"lit=
eral">locations</code> or annotated
<code class=3D"literal">classes</code> as well as <code class=3D"literal">i=
nitializers</code>.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ContextConfig=
uration</strong></span>(<span class=3D"strong"><strong>locations</strong></=
span> =3D <span class=3D"hl-string">"/test-context.xml"</span>, <span class=
=3D"strong"><strong>loader</strong></span> =3D CustomContextLoader.<span cl=
ass=3D"hl-keyword">class</span>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> CustomLoaderXmlApplicationContextTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@ContextConfiguration</code> provides support fo=
r <span class=3D"emphasis"><em>inheriting</em></span> resource locations or
configuration classes as well as context initializers declared by superclas=
ses by
default.</p>
</td></tr></tbody></table></div>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management" =
title=3D"15.5.4&nbsp;Context management">Section&nbsp;15.5.4, =93Context ma=
nagement=94</a> and the <code class=3D"literal">@ContextConfiguration</code=
> javadocs for
further details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__webappconfiguration" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__webappconfigur=
ation"></a>@WebAppConfiguration</h4></div></div></div>
<p><code class=3D"literal">@WebAppConfiguration</code> is a class-level ann=
otation that is used to declare that the
<code class=3D"literal">ApplicationContext</code> loaded for an integration=
 test should be a <code class=3D"literal">WebApplicationContext</code>.
The mere presence of <code class=3D"literal">@WebAppConfiguration</code> on=
 a test class ensures that a
<code class=3D"literal">WebApplicationContext</code> will be loaded for the=
 test, using the default value of
<code class=3D"literal">"file:src/main/webapp"</code> for the path to the r=
oot of the web application (i.e., the
<span class=3D"emphasis"><em>resource base path</em></span>). The resource =
base path is used behind the scenes to create a
<code class=3D"literal">MockServletContext</code> which serves as the <code=
 class=3D"literal">ServletContext</code> for the test=92s
<code class=3D"literal">WebApplicationContext</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@WebAppConfiguration</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WebAppTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>To override the default, specify a different base resource path via the =
<span class=3D"emphasis"><em>implicit</em></span>
<code class=3D"literal">value</code> attribute. Both <code class=3D"literal=
">classpath:</code> and <code class=3D"literal">file:</code> resource prefi=
xes are supported. If no
resource prefix is supplied the path is assumed to be a file system resourc=
e.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@WebAppConfiguration("classpath:test-web-res=
ources")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WebAppTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>Note that <code class=3D"literal">@WebAppConfiguration</code> must be us=
ed in conjunction with
<code class=3D"literal">@ContextConfiguration</code>, either within a singl=
e test class or within a test class
hierarchy. See the <code class=3D"literal">@WebAppConfiguration</code> java=
docs for further details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__contexthierarchy" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__contexthierarchy"=
></a>@ContextHierarchy</h4></div></div></div>
<p><code class=3D"literal">@ContextHierarchy</code> is a class-level annota=
tion that is used to define a hierarchy of
<code class=3D"literal">ApplicationContext</code>s for integration tests. <=
code class=3D"literal">@ContextHierarchy</code> should be declared
with a list of one or more <code class=3D"literal">@ContextConfiguration</c=
ode> instances, each of which defines a
level in the context hierarchy. The following examples demonstrate the use =
of
<code class=3D"literal">@ContextHierarchy</code> within a single test class=
; however, <code class=3D"literal">@ContextHierarchy</code> can also be
used within a test class hierarchy.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextHierarchy({
    @ContextConfiguration("/parent-config.xml"),
    @ContextConfiguration("/child-config.xml")
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ContextHierarchyTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@WebAppConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextHierarchy({
    @ContextConfiguration(classes =3D AppConfig.class),
    @ContextConfiguration(classes =3D WebConfig.class)
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WebIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>If you need to merge or override the configuration for a given level of =
the context
hierarchy within a test class hierarchy, you must explicitly name that leve=
l by
supplying the same value to the <code class=3D"literal">name</code> attribu=
te in <code class=3D"literal">@ContextConfiguration</code> at each
corresponding level in the class hierarchy. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-ctx-management-ctx-hier=
archies" title=3D"Context hierarchies">the section called =93Context hierar=
chies=94</a> and the <code class=3D"literal">@ContextHierarchy</code> javad=
ocs
for further examples.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__activeprofiles" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__activeprofiles"></a=
>@ActiveProfiles</h4></div></div></div>
<p><code class=3D"literal">@ActiveProfiles</code> is a class-level annotati=
on that is used to declare which <span class=3D"emphasis"><em>bean
definition profiles</em></span> should be active when loading an <code clas=
s=3D"literal">ApplicationContext</code> for an
integration test.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@ActiveProfiles</strong></span>(<span class=
=3D"hl-string">"dev"</span>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DeveloperTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@ActiveProfiles</strong></span>({<span class=
=3D"hl-string">"dev"</span>, <span class=3D"hl-string">"integration"</span>=
})
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DeveloperIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@ActiveProfiles</code> provides support for <spa=
n class=3D"emphasis"><em>inheriting</em></span> active bean definition prof=
iles
declared by superclasses by default. It is also possible to resolve active =
bean
definition profiles programmatically by implementing a custom
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-ctx-management-env-prof=
iles-ActiveProfilesResolver"><code class=3D"literal">ActiveProfilesResolver=
</code></a>
and registering it via the <code class=3D"literal">resolver</code> attribut=
e of <code class=3D"literal">@ActiveProfiles</code>.</p>
</td></tr></tbody></table></div>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#testcontext-ctx-management-e=
nv-profiles" title=3D"Context configuration with environment profiles">the =
section called =93Context configuration with environment profiles=94</a> an=
d the <code class=3D"literal">@ActiveProfiles</code> javadocs
for examples and further details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__testpropertysource" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__testpropertysou=
rce"></a>@TestPropertySource</h4></div></div></div>
<p><code class=3D"literal">@TestPropertySource</code> is a class-level anno=
tation that is used to configure the locations
of properties files and inlined properties to be added to the set of <code =
class=3D"literal">PropertySources</code> in
the <code class=3D"literal">Environment</code> for an <code class=3D"litera=
l">ApplicationContext</code> loaded for an integration test.</p>
<p>Test property sources have higher precedence than those loaded from the =
operating
system=92s environment or Java system properties as well as property source=
s added by the
application declaratively via <code class=3D"literal">@PropertySource</code=
> or programmatically. Thus, test property
sources can be used to selectively override properties defined in system an=
d application
property sources. Furthermore, inlined properties have higher precedence th=
an properties
loaded from resource locations.</p>
<p>The following example demonstrates how to declare a properties file from=
 the classpath.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@TestPropertySource</strong></span>(<span cl=
ass=3D"hl-string">"/test.properties"</span>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>The following example demonstrates how to declare <span class=3D"emphasi=
s"><em>inlined</em></span> properties.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@TestPropertySource</strong></span>(properti=
es =3D { <span class=3D"hl-string">"timezone =3D GMT"</span>, <span class=
=3D"hl-string">"port: 4242"</span> })
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__dirtiescontext" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__dirtiescontext"></a=
>@DirtiesContext</h4></div></div></div>
<p><code class=3D"literal">@DirtiesContext</code> indicates that the underl=
ying Spring <code class=3D"literal">ApplicationContext</code> has been
<span class=3D"emphasis"><em>dirtied</em></span> during the execution of a =
test (i.e., modified or corrupted in some manner&#8201;=97&#8201;for exampl=
e, by changing the state of a singleton bean) and should be closed. When an
application context is marked <span class=3D"emphasis"><em>dirty</em></span=
>, it is removed from the testing framework=92s cache
and closed. As a consequence, the underlying Spring container will be rebui=
lt for any
subsequent test that requires a context with the same configuration metadat=
a.</p>
<p><code class=3D"literal">@DirtiesContext</code> can be used as both a cla=
ss-level and method-level annotation within
the same class or class hierarchy. In such scenarios, the <code class=3D"li=
teral">ApplicationContext</code> is marked
as <span class=3D"emphasis"><em>dirty</em></span> before or after any such =
annotated method as well as before or after the
current test class, depending on the configured <code class=3D"literal">met=
hodMode</code> and <code class=3D"literal">classMode</code>.</p>
<p>The following examples explain when the context would be dirtied for var=
ious
configuration scenarios:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<p class=3D"simpara">Before the current test class, when declared on a clas=
s with class mode set to
<code class=3D"literal">BEFORE_CLASS</code>.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@DirtiesContex=
t(classMode =3D BEFORE_CLASS)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> FreshContextTests {
    <span class=3D"hl-comment">// some tests that require a new Spring cont=
ainer</span>
}</pre>
</li><li class=3D"listitem">
<p class=3D"simpara">After the current test class, when declared on a class=
 with class mode set to
<code class=3D"literal">AFTER_CLASS</code> (i.e., the default class mode).<=
/p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@DirtiesContex=
t</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ContextDirtyingTests {
    <span class=3D"hl-comment">// some tests that result in the Spring cont=
ainer being dirtied</span>
}</pre>
</li><li class=3D"listitem">
<p class=3D"simpara">Before each test method in the current test class, whe=
n declared on a class with class
mode set to <code class=3D"literal">BEFORE_EACH_TEST_METHOD.</code></p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@DirtiesContex=
t(classMode =3D BEFORE_EACH_TEST_METHOD)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> FreshContextTests {
    <span class=3D"hl-comment">// some tests that require a new Spring cont=
ainer</span>
}</pre>
</li><li class=3D"listitem">
<p class=3D"simpara">After each test method in the current test class, when=
 declared on a class with class
mode set to <code class=3D"literal">AFTER_EACH_TEST_METHOD.</code></p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@DirtiesContex=
t(classMode =3D AFTER_EACH_TEST_METHOD)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ContextDirtyingTests {
    <span class=3D"hl-comment">// some tests that result in the Spring cont=
ainer being dirtied</span>
}</pre>
</li><li class=3D"listitem">
<p class=3D"simpara">Before the current test, when declared on a method wit=
h the method mode set to
<code class=3D"literal">BEFORE_METHOD</code>.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@DirtiesContex=
t(methodMode =3D BEFORE_METHOD)</strong></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWhichRequiresFreshAppCtx() {
    <span class=3D"hl-comment">// some logic that requires a new Spring con=
tainer</span>
}</pre>
</li><li class=3D"listitem">
<p class=3D"simpara">After the current test, when declared on a method with=
 the method mode set to
<code class=3D"literal">AFTER_METHOD</code> (i.e., the default method mode)=
.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@DirtiesContex=
t</strong></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWhichDirtiesAppCtx() {
    <span class=3D"hl-comment">// some logic that results in the Spring con=
tainer being dirtied</span>
}</pre>
</li></ul></div>
<p>If <code class=3D"literal">@DirtiesContext</code> is used in a test whos=
e context is configured as part of a context
hierarchy via <code class=3D"literal">@ContextHierarchy</code>, the <code c=
lass=3D"literal">hierarchyMode</code> flag can be used to control how
the context cache is cleared. By default an <span class=3D"emphasis"><em>ex=
haustive</em></span> algorithm will be used that
clears the context cache including not only the current level but also all =
other context
hierarchies that share an ancestor context common to the current test; all
<code class=3D"literal">ApplicationContext</code>s that reside in a sub-hie=
rarchy of the common ancestor context
will be removed from the context cache and closed. If the <span class=3D"em=
phasis"><em>exhaustive</em></span> algorithm is
overkill for a particular use case, the simpler <span class=3D"emphasis"><e=
m>current level</em></span> algorithm can be
specified instead, as seen below.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextHierarchy({
    @ContextConfiguration("/parent-config.xml"),
    @ContextConfiguration("/child-config.xml")
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTests {
    <span class=3D"hl-comment">// class body...</span>
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTests <span class=3D"hl-keyword">extends</span> BaseTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    @DirtiesContext(<span class=3D"strong"><strong>hierarchyMode =3D CURREN=
T_LEVEL</strong></span>)
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> test() {
        <span class=3D"hl-comment">// some logic that results in the child =
context being dirtied</span>
    }
}</pre>
<p>For further details regarding the <code class=3D"literal">EXHAUSTIVE</co=
de> and <code class=3D"literal">CURRENT_LEVEL</code> algorithms see the
<code class=3D"literal">DirtiesContext.HierarchyMode</code> javadocs.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__testexecutionlisteners" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__testexecuti=
onlisteners"></a>@TestExecutionListeners</h4></div></div></div>
<p><code class=3D"literal">@TestExecutionListeners</code> defines class-lev=
el metadata for configuring the
<code class=3D"literal">TestExecutionListener</code> implementations that s=
hould be registered with the
<code class=3D"literal">TestContextManager</code>. Typically, <code class=
=3D"literal">@TestExecutionListeners</code> is used in conjunction with
<code class=3D"literal">@ContextConfiguration</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<span class=3D"strong"><strong>@TestExecutionListeners</strong></span>({Cus=
tomTestExecutionListener.<span class=3D"hl-keyword">class</span>, AnotherTe=
stExecutionListener.<span class=3D"hl-keyword">class</span>})
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> CustomTestExecutionListenerTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p><code class=3D"literal">@TestExecutionListeners</code> supports <span cl=
ass=3D"emphasis"><em>inherited</em></span> listeners by default. See the ja=
vadocs
for an example and further details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__commit" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#__commit"></a>@Commit</h4></d=
iv></div></div>
<p><code class=3D"literal">@Commit</code> indicates that the transaction fo=
r a transactional test method should be
<span class=3D"emphasis"><em>committed</em></span> after the test method ha=
s completed. <code class=3D"literal">@Commit</code> can be used as a direct
replacement for <code class=3D"literal">@Rollback(false)</code> in order to=
 more explicitly convey the intent of the
code. Analogous to <code class=3D"literal">@Rollback</code>, <code class=3D=
"literal">@Commit</code> may also be declared as a class-level or
method-level annotation.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@Commit</stron=
g></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWithoutRollback() {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__rollback" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#__rollback"></a>@Rollback</=
h4></div></div></div>
<p><code class=3D"literal">@Rollback</code> indicates whether the transacti=
on for a transactional test method should be
<span class=3D"emphasis"><em>rolled back</em></span> after the test method =
has completed. If <code class=3D"literal">true</code>, the transaction is r=
olled
back; otherwise, the transaction is committed (see also <code class=3D"lite=
ral">@Commit</code>). Rollback semantics
for integration tests in the Spring TestContext Framework default to <code =
class=3D"literal">true</code> even if
<code class=3D"literal">@Rollback</code> is not explicitly declared.</p>
<p>When declared as a class-level annotation, <code class=3D"literal">@Roll=
back</code> defines the default rollback
semantics for all test methods within the test class hierarchy. When declar=
ed as a
method-level annotation, <code class=3D"literal">@Rollback</code> defines r=
ollback semantics for the specific test
method, potentially overriding class-level <code class=3D"literal">@Rollbac=
k</code> or <code class=3D"literal">@Commit</code> semantics.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@Rollback</str=
ong></span>(false)
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWithoutRollback() {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__beforetransaction" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__beforetransactio=
n"></a>@BeforeTransaction</h4></div></div></div>
<p><code class=3D"literal">@BeforeTransaction</code> indicates that the ann=
otated <code class=3D"literal">void</code> method should be executed
<span class=3D"emphasis"><em>before</em></span> a transaction is started fo=
r test methods configured to run within a
transaction via Spring=92s <code class=3D"literal">@Transactional</code> an=
notation. As of Spring Framework 4.3,
<code class=3D"literal">@BeforeTransaction</code> methods are not required =
to be <code class=3D"literal">public</code> and may be declared on Java
8 based interface default methods.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@BeforeTransac=
tion</strong></span>
<span class=3D"hl-keyword">void</span> beforeTransaction() {
    <span class=3D"hl-comment">// logic to be executed before a transaction=
 is started</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__aftertransaction" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__aftertransaction"=
></a>@AfterTransaction</h4></div></div></div>
<p><code class=3D"literal">@AfterTransaction</code> indicates that the anno=
tated <code class=3D"literal">void</code> method should be executed
<span class=3D"emphasis"><em>after</em></span> a transaction is ended for t=
est methods configured to run within a transaction
via Spring=92s <code class=3D"literal">@Transactional</code> annotation. As=
 of Spring Framework 4.3, <code class=3D"literal">@AfterTransaction</code>
methods are not required to be <code class=3D"literal">public</code> and ma=
y be declared on Java 8 based interface
default methods.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@AfterTransact=
ion</strong></span>
<span class=3D"hl-keyword">void</span> afterTransaction() {
    <span class=3D"hl-comment">// logic to be executed after a transaction =
has ended</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__sql" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#__sql"></a>@Sql</h4></div></div>=
</div>
<p><code class=3D"literal">@Sql</code> is used to annotate a test class or =
test method to configure SQL scripts to be
executed against a given database during integration tests.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
<span class=3D"strong"><strong>@Sql</strong></span>({<span class=3D"hl-stri=
ng">"/test-schema.sql"</span>, <span class=3D"hl-string">"/test-user-data.s=
ql"</span>})
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> userTest {
    <span class=3D"hl-comment">// execute code that relies on the test sche=
ma and test data</span>
}</pre>
<p>See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/#testcontext-executing-sql-de=
claratively" title=3D"Executing SQL scripts declaratively with @Sql">the se=
ction called =93Executing SQL scripts declaratively with @Sql=94</a> for fu=
rther details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__sqlconfig" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#__sqlconfig"></a>@SqlConfi=
g</h4></div></div></div>
<p><code class=3D"literal">@SqlConfig</code> defines metadata that is used =
to determine how to parse and execute SQL
scripts configured via the <code class=3D"literal">@Sql</code> annotation.<=
/p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
@Sql(
    scripts =3D <span class=3D"hl-string">"/test-user-data.sql"</span>,
    config =3D <span class=3D"strong"><strong>@SqlConfig</strong></span>(co=
mmentPrefix =3D <span class=3D"hl-string">"`"</span>, separator =3D <span c=
lass=3D"hl-string">"@@"</span>)
)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> userTest {
    <span class=3D"hl-comment">// execute code that relies on the test data=
</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__sqlgroup" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#__sqlgroup"></a>@SqlGroup</=
h4></div></div></div>
<p><code class=3D"literal">@SqlGroup</code> is a container annotation that =
aggregates several <code class=3D"literal">@Sql</code> annotations.
<code class=3D"literal">@SqlGroup</code> can be used natively, declaring se=
veral nested <code class=3D"literal">@Sql</code> annotations, or it can
be used in conjunction with Java 8=92s support for repeatable annotations, =
where <code class=3D"literal">@Sql</code> can
simply be declared several times on the same class or method, implicitly ge=
nerating this
container annotation.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
<span class=3D"strong"><strong>@SqlGroup</strong></span>({
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Sql(scripts =
=3D "/test-schema.sql", config =3D @SqlConfig(commentPrefix =3D "`")),</spa=
n></em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Sql("/test-use=
r-data.sql")</span></em>
)}
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> userTest {
    <span class=3D"hl-comment">// execute code that uses the test schema an=
d test data</span>
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"integration-testing-annotations-standard" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#integration-testing-annotations-standard"></a>15.4.2&nbsp;Standard Annot=
ation Support</h3></div></div></div>
<p>The following annotations are supported with standard semantics for all =
configurations
of the Spring TestContext Framework. Note that these annotations are not sp=
ecific to
tests and can be used anywhere in the Spring Framework.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">@Autowired</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Qualifier</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Resource</code> (javax.annotation) <span class=3D"=
emphasis"><em>if JSR-250 is present</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">@ManagedBean</code> (javax.annotation) <span class=
=3D"emphasis"><em>if JSR-250 is present</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">@Inject</code> (javax.inject) <span class=3D"emphas=
is"><em>if JSR-330 is present</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">@Named</code> (javax.inject) <span class=3D"emphasi=
s"><em>if JSR-330 is present</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">@PersistenceContext</code> (javax.persistence) <spa=
n class=3D"emphasis"><em>if JPA is present</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">@PersistenceUnit</code> (javax.persistence) <span c=
lass=3D"emphasis"><em>if JPA is present</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">@Required</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Transactional</code>
</li></ul></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: JSR-250 Lifecycle Annotations"><tbody><tr>=
<td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><img alt=3D"=
[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/images/note.png"></td><th align=3D"left">JSR-25=
0 Lifecycle Annotations</th></tr><tr><td align=3D"left" valign=3D"top">
<p>In the Spring TestContext Framework <code class=3D"literal">@PostConstru=
ct</code> and <code class=3D"literal">@PreDestroy</code> may be used with
standard semantics on any application components configured in the <code cl=
ass=3D"literal">ApplicationContext</code>;
however, these lifecycle annotations have limited usage within an actual te=
st class.</p>
<p>If a method within a test class is annotated with <code class=3D"literal=
">@PostConstruct</code>, that method will be
executed before any <span class=3D"emphasis"><em>before</em></span> methods=
 of the underlying test framework (e.g., methods
annotated with JUnit 4=92s <code class=3D"literal">@Before</code>), and tha=
t will apply for every test method in the test
class. On the other hand, if a method within a test class is annotated with
<code class=3D"literal">@PreDestroy</code>, that method will <span class=3D=
"emphasis"><em>never</em></span> be executed. Within a test class it is
therefore recommended to use test lifecycle callbacks from the underlying t=
est framework
instead of <code class=3D"literal">@PostConstruct</code> and <code class=3D=
"literal">@PreDestroy</code>.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"integration-testing-annotations-junit" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
integration-testing-annotations-junit"></a>15.4.3&nbsp;Spring JUnit 4 Testi=
ng Annotations</h3></div></div></div>
<p>The following annotations are <span class=3D"emphasis"><em>only</em></sp=
an> supported when used in conjunction with the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-junit4-runner" title=3D=
"Spring JUnit 4 Runner">SpringRunner</a>, <a class=3D"link" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#testcontext-junit4-rules" title=3D"Spring JUnit 4 Rules">Spring=92s =
JUnit
rules</a>, or <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-support-c=
lasses-junit4" title=3D"JUnit 4 support classes">Spring=92s JUnit 4 support=
 classes</a>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__ifprofilevalue" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__ifprofilevalue"></a=
>@IfProfileValue</h4></div></div></div>
<p><code class=3D"literal">@IfProfileValue</code> indicates that the annota=
ted test is enabled for a specific testing
environment. If the configured <code class=3D"literal">ProfileValueSource</=
code> returns a matching <code class=3D"literal">value</code> for the
provided <code class=3D"literal">name</code>, the test is enabled. Otherwis=
e, the test will be disabled and
effectively <span class=3D"emphasis"><em>ignored</em></span>.</p>
<p><code class=3D"literal">@IfProfileValue</code> can be applied at the cla=
ss level, the method level, or both.
Class-level usage of <code class=3D"literal">@IfProfileValue</code> takes p=
recedence over method-level usage for any
methods within that class or its subclasses. Specifically, a test is enable=
d if it is
enabled both at the class level <span class=3D"emphasis"><em>and</em></span=
> at the method level; the absence of
<code class=3D"literal">@IfProfileValue</code> means the test is implicitly=
 enabled. This is analogous to the
semantics of JUnit 4=92s <code class=3D"literal">@Ignore</code> annotation,=
 except that the presence of <code class=3D"literal">@Ignore</code> always
disables a test.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@IfProfileValu=
e</strong></span>(<span class=3D"strong"><strong>name</strong></span>=3D<sp=
an class=3D"hl-string">"java.vendor"</span>, <span class=3D"strong"><strong=
>value</strong></span>=3D<span class=3D"hl-string">"Oracle Corporation"</sp=
an>)
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWhichRunsOnlyOnOracleJvm() {
    <span class=3D"hl-comment">// some logic that should run only on Java V=
Ms from Oracle Corporation</span>
}</pre>
<p>Alternatively, you can configure <code class=3D"literal">@IfProfileValue=
</code> with a list of <code class=3D"literal">values</code> (with <span cl=
ass=3D"emphasis"><em>OR</em></span>
semantics) to achieve TestNG-like support for <span class=3D"emphasis"><em>=
test groups</em></span> in a JUnit 4 environment.
Consider the following example:</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@IfProfileValu=
e</strong></span>(<span class=3D"strong"><strong>name</strong></span>=3D<sp=
an class=3D"hl-string">"test-groups"</span>, <span class=3D"strong"><strong=
>values</strong></span>=3D{<span class=3D"hl-string">"unit-tests"</span>, <=
span class=3D"hl-string">"integration-tests"</span>})
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWhichRunsForUnitOrIntegrationTestGroups() {
    <span class=3D"hl-comment">// some logic that should run only for unit =
and integration test groups</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__profilevaluesourceconfiguration" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#__pr=
ofilevaluesourceconfiguration"></a>@ProfileValueSourceConfiguration</h4></d=
iv></div></div>
<p><code class=3D"literal">@ProfileValueSourceConfiguration</code> is a cla=
ss-level annotation that specifies what type
of <code class=3D"literal">ProfileValueSource</code> to use when retrieving=
 <span class=3D"emphasis"><em>profile values</em></span> configured through=
 the
<code class=3D"literal">@IfProfileValue</code> annotation. If <code class=
=3D"literal">@ProfileValueSourceConfiguration</code> is not declared for a
test, <code class=3D"literal">SystemProfileValueSource</code> is used by de=
fault.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ProfileValueS=
ourceConfiguration</strong></span>(CustomProfileValueSource.<span class=3D"=
hl-keyword">class</span>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> CustomProfileValueSourceTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__timed" href=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/#__timed"></a>@Timed</h4></div>=
</div></div>
<p><code class=3D"literal">@Timed</code> indicates that the annotated test =
method must finish execution in a specified
time period (in milliseconds). If the text execution time exceeds the speci=
fied time
period, the test fails.</p>
<p>The time period includes execution of the test method itself, any repeti=
tions of the
test (see <code class=3D"literal">@Repeat</code>), as well as any <span cla=
ss=3D"emphasis"><em>set up</em></span> or <span class=3D"emphasis"><em>tear=
 down</em></span> of the test fixture.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@Timed</strong=
></span>(millis=3D<span class=3D"hl-number">1000</span>)
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessWithOneSecondTimeout() {
    <span class=3D"hl-comment">// some logic that should not take longer th=
an 1 second to execute</span>
}</pre>
<p>Spring=92s <code class=3D"literal">@Timed</code> annotation has differen=
t semantics than JUnit 4=92s <code class=3D"literal">@Test(timeout=3D=85&#8=
203;)</code>
support. Specifically, due to the manner in which JUnit 4 handles test exec=
ution timeouts
(that is, by executing the test method in a separate <code class=3D"literal=
">Thread</code>), <code class=3D"literal">@Test(timeout=3D=85&#8203;)</code=
>
preemptively fails the test if the test takes too long. Spring=92s <code cl=
ass=3D"literal">@Timed</code>, on the other
hand, does not preemptively fail the test but rather waits for the test to =
complete
before failing.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"__repeat" href=3D"https://docs.spring.io/spring/docs/4.3.21.R=
ELEASE/spring-framework-reference/htmlsingle/#__repeat"></a>@Repeat</h4></d=
iv></div></div>
<p><code class=3D"literal">@Repeat</code> indicates that the annotated test=
 method must be executed repeatedly. The
number of times that the test method is to be executed is specified in the =
annotation.</p>
<p>The scope of execution to be repeated includes execution of the test met=
hod itself as
well as any <span class=3D"emphasis"><em>set up</em></span> or <span class=
=3D"emphasis"><em>tear down</em></span> of the test fixture.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@Repeat</stron=
g></span>(<span class=3D"hl-number">10</span>)
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> testProcessRepeatedly() {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"integration-testing-annotations-meta" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#i=
ntegration-testing-annotations-meta"></a>15.4.4&nbsp;Meta-Annotation Suppor=
t for Testing</h3></div></div></div>
<p>It is possible to use most test-related annotations as
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-meta-annotations" title=3D"7.=
10.2&nbsp;Meta-annotations">meta-annotations</a> in order to create custom =
<span class=3D"emphasis"><em>composed
annotations</em></span> and reduce configuration duplication across a test =
suite.</p>
<p>Each of the following may be used as meta-annotations in conjunction wit=
h the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-framework" title=3D"15.=
5&nbsp;Spring TestContext Framework">TestContext framework</a>.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">@BootstrapWith</code>
</li><li class=3D"listitem">
<code class=3D"literal">@ContextConfiguration</code>
</li><li class=3D"listitem">
<code class=3D"literal">@ContextHierarchy</code>
</li><li class=3D"listitem">
<code class=3D"literal">@ActiveProfiles</code>
</li><li class=3D"listitem">
<code class=3D"literal">@TestPropertySource</code>
</li><li class=3D"listitem">
<code class=3D"literal">@DirtiesContext</code>
</li><li class=3D"listitem">
<code class=3D"literal">@WebAppConfiguration</code>
</li><li class=3D"listitem">
<code class=3D"literal">@TestExecutionListeners</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Transactional</code>
</li><li class=3D"listitem">
<code class=3D"literal">@BeforeTransaction</code>
</li><li class=3D"listitem">
<code class=3D"literal">@AfterTransaction</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Commit</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Rollback</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Sql</code>
</li><li class=3D"listitem">
<code class=3D"literal">@SqlConfig</code>
</li><li class=3D"listitem">
<code class=3D"literal">@SqlGroup</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Repeat</code>
</li><li class=3D"listitem">
<code class=3D"literal">@Timed</code>
</li><li class=3D"listitem">
<code class=3D"literal">@IfProfileValue</code>
</li><li class=3D"listitem">
<code class=3D"literal">@ProfileValueSourceConfiguration</code>
</li></ul></div>
<p>For example, if we discover that we are repeating the following configur=
ation
across our JUnit 4 based test suite=85&#8203;</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on({"/app-config.xml", "/test-data-access-config.xml"})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles("de=
v")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> OrderRepositoryTests { }

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on({"/app-config.xml", "/test-data-access-config.xml"})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles("de=
v")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> UserRepositoryTests { }</pre>
<p>We can reduce the above duplication by introducing a custom <span class=
=3D"emphasis"><em>composed annotation</em></span>
that centralizes the common test configuration like this:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target(ElementType.TYPE)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on({"/app-config.xml", "/test-data-access-config.xml"})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles("de=
v")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> TransactionalDevTest { }</pre>
<p>Then we can use our custom <code class=3D"literal">@TransactionalDevTest=
</code> annotation to simplify the
configuration of individual test classes as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TransactionalDevTe=
st</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> OrderRepositoryTests { }

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TransactionalDevTe=
st</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> UserRepositoryTests { }</pre>
<p>For further details, consult the <a class=3D"link" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#annotation-programming-model" title=3D"38.&nbsp;Spring Annotation Programm=
ing Model">Spring Annotation Programming Model</a>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"testcontext-framework" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#testcontext-framework"></a>15.5&nbsp;Spring TestContext Framework</h2=
></div></div></div>
<p>The <span class=3D"emphasis"><em>Spring TestContext Framework</em></span=
> (located in the
<code class=3D"literal">org.springframework.test.context</code> package) pr=
ovides generic, annotation-driven unit and
integration testing support that is agnostic of the testing framework in us=
e. The
TestContext framework also places a great deal of importance on <span class=
=3D"emphasis"><em>convention over
configuration</em></span> with reasonable defaults that can be overridden t=
hrough annotation-based
configuration.</p>
<p>In addition to generic testing infrastructure, the TestContext framework=
 provides
explicit support for JUnit 4 and TestNG in the form of <code class=3D"liter=
al">abstract</code> support classes. For
JUnit 4, Spring also provides a custom JUnit <code class=3D"literal">Runner=
</code> and custom JUnit <code class=3D"literal">Rules</code> that allow
one to write so-called <span class=3D"emphasis"><em>POJO test classes</em><=
/span>. POJO test classes are not required to
extend a particular class hierarchy.</p>
<p>The following section provides an overview of the internals of the TestC=
ontext
framework. If you are only interested in <span class=3D"emphasis"><em>using=
</em></span> the framework and not necessarily
interested in <span class=3D"emphasis"><em>extending</em></span> it with yo=
ur own custom listeners or custom loaders, feel free
to go directly to the configuration (<a class=3D"link" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#testcontext-ctx-management" title=3D"15.5.4&nbsp;Context management">cont=
ext management</a>,
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-fixture-di" title=3D"15=
.5.5&nbsp;Dependency injection of test fixtures">dependency injection</a>, =
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-tx" title=3D"15.5.7&nbs=
p;Transaction management">transaction
management</a>), <a class=3D"link" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-suppor=
t-classes" title=3D"15.5.9&nbsp;TestContext Framework support classes">supp=
ort classes</a>, and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-annotations" ti=
tle=3D"15.4&nbsp;Annotations">annotation support</a> sections.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-key-abstractions" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testconte=
xt-key-abstractions"></a>15.5.1&nbsp;Key abstractions</h3></div></div></div=
>
<p>The core of the framework consists of the <code class=3D"literal">TestCo=
ntextManager</code> class and the
<code class=3D"literal">TestContext</code>, <code class=3D"literal">TestExe=
cutionListener</code>, and <code class=3D"literal">SmartContextLoader</code=
> interfaces. A
<code class=3D"literal">TestContextManager</code> is created per test class=
 (e.g., for the execution of all test
methods within a single test class in JUnit 4). The <code class=3D"literal"=
>TestContextManager</code> in turn manages a
<code class=3D"literal">TestContext</code> that holds the context of the cu=
rrent test. The <code class=3D"literal">TestContextManager</code> also
updates the state of the <code class=3D"literal">TestContext</code> as the =
test progresses and delegates to
<code class=3D"literal">TestExecutionListener</code> implementations, which=
 instrument the actual test execution by
providing dependency injection, managing transactions, and so on. A <code c=
lass=3D"literal">SmartContextLoader</code>
is responsible for loading an <code class=3D"literal">ApplicationContext</c=
ode> for a given test class. Consult the
javadocs and the Spring test suite for further information and examples of =
various
implementations.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"_testcontext" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#_testcontext"></a>TestCon=
text</h4></div></div></div>
<p><code class=3D"literal">TestContext</code> encapsulates the context in w=
hich a test is executed, agnostic of the
actual testing framework in use, and provides context management and cachin=
g support for
the test instance for which it is responsible. The <code class=3D"literal">=
TestContext</code> also delegates to a
<code class=3D"literal">SmartContextLoader</code> to load an <code class=3D=
"literal">ApplicationContext</code> if requested.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"_testcontextmanager" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_testcontextmanage=
r"></a>TestContextManager</h4></div></div></div>
<p><code class=3D"literal">TestContextManager</code> is the main entry poin=
t into the <span class=3D"emphasis"><em>Spring TestContext Framework</em></=
span>,
which manages a single <code class=3D"literal">TestContext</code> and signa=
ls events to each registered
<code class=3D"literal">TestExecutionListener</code> at well-defined test e=
xecution points:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
prior to any <span class=3D"emphasis"><em>before class</em></span> or <span=
 class=3D"emphasis"><em>before all</em></span> methods of a particular test=
ing framework
</li><li class=3D"listitem">
test instance post-processing
</li><li class=3D"listitem">
prior to any <span class=3D"emphasis"><em>before</em></span> or <span class=
=3D"emphasis"><em>before each</em></span> methods of a particular testing f=
ramework
</li><li class=3D"listitem">
after any <span class=3D"emphasis"><em>after</em></span> or <span class=3D"=
emphasis"><em>after each</em></span> methods of a particular testing framew=
ork
</li><li class=3D"listitem">
after any <span class=3D"emphasis"><em>after class</em></span> or <span cla=
ss=3D"emphasis"><em>after all</em></span> methods of a particular testing f=
ramework
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"_testexecutionlistener" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_testexecutionl=
istener"></a>TestExecutionListener</h4></div></div></div>
<p><code class=3D"literal">TestExecutionListener</code> defines the API for=
 reacting to test execution events published
by the <code class=3D"literal">TestContextManager</code> with which the lis=
tener is registered. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-tel-config" title=3D"15=
.5.3&nbsp;TestExecutionListener configuration">Section&nbsp;15.5.3, =93Test=
ExecutionListener configuration=94</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"_context_loaders" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#_context_loaders"></a=
>Context Loaders</h4></div></div></div>
<p><code class=3D"literal">ContextLoader</code> is a strategy interface tha=
t was introduced in Spring 2.5 for loading an
<code class=3D"literal">ApplicationContext</code> for an integration test m=
anaged by the Spring TestContext Framework.
Implement <code class=3D"literal">SmartContextLoader</code> instead of this=
 interface in order to provide support for
annotated classes, active bean definition profiles, test property sources, =
context
hierarchies, and <code class=3D"literal">WebApplicationContext</code> suppo=
rt.</p>
<p><code class=3D"literal">SmartContextLoader</code> is an extension of the=
 <code class=3D"literal">ContextLoader</code> interface introduced in
Spring 3.1. The <code class=3D"literal">SmartContextLoader</code> SPI super=
sedes the <code class=3D"literal">ContextLoader</code> SPI that was
introduced in Spring 2.5. Specifically, a <code class=3D"literal">SmartCont=
extLoader</code> can choose to process
resource <code class=3D"literal">locations</code>, annotated <code class=3D=
"literal">classes</code>, or context <code class=3D"literal">initializers</=
code>. Furthermore, a
<code class=3D"literal">SmartContextLoader</code> can set active bean defin=
ition profiles and test property sources in
the context that it loads.</p>
<p>Spring provides the following implementations:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">DelegatingSmartContextLoader</code>: one of two def=
ault loaders which delegates internally
to an <code class=3D"literal">AnnotationConfigContextLoader</code>, a <code=
 class=3D"literal">GenericXmlContextLoader</code>, or a
<code class=3D"literal">GenericGroovyXmlContextLoader</code> depending eith=
er on the configuration declared for the
test class or on the presence of default locations or default configuration=
 classes.
Groovy support is only enabled if Groovy is on the classpath.
</li><li class=3D"listitem">
<code class=3D"literal">WebDelegatingSmartContextLoader</code>: one of two =
default loaders which delegates
internally to an <code class=3D"literal">AnnotationConfigWebContextLoader</=
code>, a <code class=3D"literal">GenericXmlWebContextLoader</code>, or a
<code class=3D"literal">GenericGroovyXmlWebContextLoader</code> depending e=
ither on the configuration declared for the
test class or on the presence of default locations or default configuration=
 classes. A
web <code class=3D"literal">ContextLoader</code> will only be used if <code=
 class=3D"literal">@WebAppConfiguration</code> is present on the test
class. Groovy support is only enabled if Groovy is on the classpath.
</li><li class=3D"listitem">
<code class=3D"literal">AnnotationConfigContextLoader</code>: loads a stand=
ard <code class=3D"literal">ApplicationContext</code> from
<span class=3D"emphasis"><em>annotated classes</em></span>.
</li><li class=3D"listitem">
<code class=3D"literal">AnnotationConfigWebContextLoader</code>: loads a <c=
ode class=3D"literal">WebApplicationContext</code> from <span class=3D"emph=
asis"><em>annotated
classes</em></span>.
</li><li class=3D"listitem">
<code class=3D"literal">GenericGroovyXmlContextLoader</code>: loads a stand=
ard <code class=3D"literal">ApplicationContext</code> from <span class=3D"e=
mphasis"><em>resource
locations</em></span> that are either Groovy scripts or XML configuration f=
iles.
</li><li class=3D"listitem">
<code class=3D"literal">GenericGroovyXmlWebContextLoader</code>: loads a <c=
ode class=3D"literal">WebApplicationContext</code> from <span class=3D"emph=
asis"><em>resource
locations</em></span> that are either Groovy scripts or XML configuration f=
iles.
</li><li class=3D"listitem">
<code class=3D"literal">GenericXmlContextLoader</code>: loads a standard <c=
ode class=3D"literal">ApplicationContext</code> from XML <span class=3D"emp=
hasis"><em>resource
locations</em></span>.
</li><li class=3D"listitem">
<code class=3D"literal">GenericXmlWebContextLoader</code>: loads a <code cl=
ass=3D"literal">WebApplicationContext</code> from XML <span class=3D"emphas=
is"><em>resource
locations</em></span>.
</li><li class=3D"listitem">
<code class=3D"literal">GenericPropertiesContextLoader</code>: loads a stan=
dard <code class=3D"literal">ApplicationContext</code> from Java
Properties files.
</li></ul></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-bootstrapping" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-=
bootstrapping"></a>15.5.2&nbsp;Bootstrapping the TestContext framework</h3>=
</div></div></div>
<p>The default configuration for the internals of the Spring TestContext Fr=
amework is
sufficient for all common use cases. However, there are times when a develo=
pment team or
third party framework would like to change the default <code class=3D"liter=
al">ContextLoader</code>, implement a
custom <code class=3D"literal">TestContext</code> or <code class=3D"literal=
">ContextCache</code>, augment the default sets of
<code class=3D"literal">ContextCustomizerFactory</code> and <code class=3D"=
literal">TestExecutionListener</code> implementations, etc. For such low
level control over how the TestContext framework operates, Spring provides =
a
bootstrapping strategy.</p>
<p><code class=3D"literal">TestContextBootstrapper</code> defines the SPI f=
or <span class=3D"emphasis"><em>bootstrapping</em></span> the TestContext f=
ramework.
A <code class=3D"literal">TestContextBootstrapper</code> is used by the <co=
de class=3D"literal">TestContextManager</code> to load the
<code class=3D"literal">TestExecutionListener</code> implementations for th=
e current test and to build the
<code class=3D"literal">TestContext</code> that it manages. A custom bootst=
rapping strategy can be configured for a
test class (or test class hierarchy) via <code class=3D"literal">@Bootstrap=
With</code>, either directly or as a
meta-annotation. If a bootstrapper is not explicitly configured via <code c=
lass=3D"literal">@BootstrapWith</code>,
either the <code class=3D"literal">DefaultTestContextBootstrapper</code> or=
 the <code class=3D"literal">WebTestContextBootstrapper</code> will be
used, depending on the presence of <code class=3D"literal">@WebAppConfigura=
tion</code>.</p>
<p>Since the <code class=3D"literal">TestContextBootstrapper</code> SPI is =
likely to change in the future in order to
accommodate new requirements, implementers are strongly encouraged not to i=
mplement this
interface directly but rather to extend <code class=3D"literal">AbstractTes=
tContextBootstrapper</code> or one of its
concrete subclasses instead.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-tel-config" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tel=
-config"></a>15.5.3&nbsp;TestExecutionListener configuration</h3></div></di=
v></div>
<p>Spring provides the following <code class=3D"literal">TestExecutionListe=
ner</code> implementations that are registered
by default, exactly in this order.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">ServletTestExecutionListener</code>: configures Ser=
vlet API mocks for a
<code class=3D"literal">WebApplicationContext</code>
</li><li class=3D"listitem">
<code class=3D"literal">DirtiesContextBeforeModesTestExecutionListener</cod=
e>: handles the <code class=3D"literal">@DirtiesContext</code> annotation f=
or
<span class=3D"emphasis"><em>before</em></span> modes
</li><li class=3D"listitem">
<code class=3D"literal">DependencyInjectionTestExecutionListener</code>: pr=
ovides dependency injection for the test
instance
</li><li class=3D"listitem">
<code class=3D"literal">DirtiesContextTestExecutionListener</code>: handles=
 the <code class=3D"literal">@DirtiesContext</code> annotation for
<span class=3D"emphasis"><em>after</em></span> modes
</li><li class=3D"listitem">
<code class=3D"literal">TransactionalTestExecutionListener</code>: provides=
 transactional test execution with
default rollback semantics
</li><li class=3D"listitem">
<code class=3D"literal">SqlScriptsTestExecutionListener</code>: executes SQ=
L scripts configured via the <code class=3D"literal">@Sql</code>
annotation
</li></ul></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tel-config-registering-tels" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#testcontext-tel-config-registering-tels"></a>Registering custom TestExecu=
tionListeners</h4></div></div></div>
<p>Custom <code class=3D"literal">TestExecutionListener</code>s can be regi=
stered for a test class and its subclasses
via the <code class=3D"literal">@TestExecutionListeners</code> annotation. =
See
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-annotations" ti=
tle=3D"15.4&nbsp;Annotations">annotation support</a> and the javadocs for
<code class=3D"literal">@TestExecutionListeners</code> for details and exam=
ples.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tel-config-automatic-discovery" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#testcontext-tel-config-automatic-discovery"></a>Automatic discovery of=
 default TestExecutionListeners</h4></div></div></div>

<p>Registering custom <code class=3D"literal">TestExecutionListener</code>s=
 via <code class=3D"literal">@TestExecutionListeners</code> is suitable
for custom listeners that are used in limited testing scenarios; however, i=
t can become
cumbersome if a custom listener needs to be used across a test suite. Since=
 Spring
Framework 4.1, this issue is addressed via support for automatic discovery =
of <span class=3D"emphasis"><em>default</em></span>
<code class=3D"literal">TestExecutionListener</code> implementations via th=
e <code class=3D"literal">SpringFactoriesLoader</code> mechanism.</p>
<p>Specifically, the <code class=3D"literal">spring-test</code> module decl=
ares all core default
<code class=3D"literal">TestExecutionListener</code>s under the
<code class=3D"literal">org.springframework.test.context.TestExecutionListe=
ner</code> key in its
<code class=3D"literal">META-INF/spring.factories</code> properties file. T=
hird-party frameworks and developers can
contribute their own <code class=3D"literal">TestExecutionListener</code>s =
to the list of default listeners in the
same manner via their own <code class=3D"literal">META-INF/spring.factories=
</code> properties file.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tel-config-ordering" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testco=
ntext-tel-config-ordering"></a>Ordering TestExecutionListeners</h4></div></=
div></div>
<p>When the TestContext framework discovers default <code class=3D"literal"=
>TestExecutionListener</code>s via the
aforementioned <code class=3D"literal">SpringFactoriesLoader</code> mechani=
sm, the instantiated listeners are sorted
using Spring=92s <code class=3D"literal">AnnotationAwareOrderComparator</co=
de> which honors Spring=92s <code class=3D"literal">Ordered</code> interfac=
e
and <code class=3D"literal">@Order</code> annotation for ordering. <code cl=
ass=3D"literal">AbstractTestExecutionListener</code> and all default
<code class=3D"literal">TestExecutionListener</code>s provided by Spring im=
plement <code class=3D"literal">Ordered</code> with appropriate
values. Third-party frameworks and developers should therefore make sure th=
at their
<span class=3D"emphasis"><em>default</em></span> <code class=3D"literal">Te=
stExecutionListener</code>s are registered in the proper order by implement=
ing
<code class=3D"literal">Ordered</code> or declaring <code class=3D"literal"=
>@Order</code>. Consult the javadocs for the <code class=3D"literal">getOrd=
er()</code> methods of the
core default <code class=3D"literal">TestExecutionListener</code>s for deta=
ils on what values are assigned to each
core listener.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tel-config-merging" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcon=
text-tel-config-merging"></a>Merging TestExecutionListeners</h4></div></div=
></div>
<p>If a custom <code class=3D"literal">TestExecutionListener</code> is regi=
stered via <code class=3D"literal">@TestExecutionListeners</code>, the
<span class=3D"emphasis"><em>default</em></span> listeners will not be regi=
stered. In most common testing scenarios, this
effectively forces the developer to manually declare all default listeners =
in addition to
any custom listeners. The following listing demonstrates this style of conf=
iguration.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TestExecutionListe=
ners({
    MyCustomTestExecutionListener.class,
    ServletTestExecutionListener.class,
    DirtiesContextBeforeModesTestExecutionListener.class,
    DependencyInjectionTestExecutionListener.class,
    DirtiesContextTestExecutionListener.class,
    TransactionalTestExecutionListener.class,
    SqlScriptsTestExecutionListener.class
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>The challenge with this approach is that it requires that the developer =
know exactly
which listeners are registered by default. Moreover, the set of default lis=
teners can
change from release to release&#8201;=97&#8201;for example, <code class=3D"=
literal">SqlScriptsTestExecutionListener</code> was
introduced in Spring Framework 4.1, and <code class=3D"literal">DirtiesCont=
extBeforeModesTestExecutionListener</code>
was introduced in Spring Framework 4.2. Furthermore, third-party frameworks=
 like Spring
Security register their own default <code class=3D"literal">TestExecutionLi=
stener</code>s via the aforementioned
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-tel-config-automatic-di=
scovery" title=3D"Automatic discovery of default TestExecutionListeners">au=
tomatic discovery mechanism</a>.</p>
<p>To avoid having to be aware of and re-declare <span class=3D"strong"><st=
rong>all</strong></span> <span class=3D"emphasis"><em>default</em></span> l=
isteners, the
<code class=3D"literal">mergeMode</code> attribute of <code class=3D"litera=
l">@TestExecutionListeners</code> can be set to
<code class=3D"literal">MergeMode.MERGE_WITH_DEFAULTS</code>. <code class=
=3D"literal">MERGE_WITH_DEFAULTS</code> indicates that locally declared
listeners should be merged with the default listeners. The merging algorith=
m ensures that
duplicates are removed from the list and that the resulting set of merged l=
isteners is
sorted according to the semantics of <code class=3D"literal">AnnotationAwar=
eOrderComparator</code> as described in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-tel-config-ordering" ti=
tle=3D"Ordering TestExecutionListeners">the section called =93Ordering Test=
ExecutionListeners=94</a>. If a listener implements <code class=3D"literal"=
>Ordered</code> or is annotated
with <code class=3D"literal">@Order</code> it can influence the position in=
 which it is merged with the defaults;
otherwise, locally declared listeners will simply be appended to the list o=
f default
listeners when merged.</p>
<p>For example, if the <code class=3D"literal">MyCustomTestExecutionListene=
r</code> class in the previous example
configures its <code class=3D"literal">order</code> value (for example, <co=
de class=3D"literal">500</code>) to be less than the order of the
<code class=3D"literal">ServletTestExecutionListener</code> (which happens =
to be <code class=3D"literal">1000</code>), the
<code class=3D"literal">MyCustomTestExecutionListener</code> can then be au=
tomatically merged with the list of
defaults <span class=3D"emphasis"><em>in front of</em></span> the <code cla=
ss=3D"literal">ServletTestExecutionListener</code>, and the previous exampl=
e could
be replaced with the following.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TestExecutionListe=
ners(
    listeners =3D MyCustomTestExecutionListener.class,
    mergeMode =3D MERGE_WITH_DEFAULTS
)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-ctx-management" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext=
-ctx-management"></a>15.5.4&nbsp;Context management</h3></div></div></div>
<p>Each <code class=3D"literal">TestContext</code> provides context managem=
ent and caching support for the test instance
it is responsible for. Test instances do not automatically receive access t=
o the
configured <code class=3D"literal">ApplicationContext</code>. However, if a=
 test class implements the
<code class=3D"literal">ApplicationContextAware</code> interface, a referen=
ce to the <code class=3D"literal">ApplicationContext</code> is supplied
to the test instance. Note that <code class=3D"literal">AbstractJUnit4Sprin=
gContextTests</code> and
<code class=3D"literal">AbstractTestNGSpringContextTests</code> implement <=
code class=3D"literal">ApplicationContextAware</code> and therefore
provide access to the <code class=3D"literal">ApplicationContext</code> aut=
omatically.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip: @Autowired ApplicationContext"><tbody><tr><t=
d rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><img alt=3D"[T=
ip]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framew=
ork-reference/htmlsingle/images/tip.png"></td><th align=3D"left">@Autowired=
 ApplicationContext</th></tr><tr><td align=3D"left" valign=3D"top">
<p>As an alternative to implementing the <code class=3D"literal">Applicatio=
nContextAware</code> interface, you can
inject the application context for your test class through the <code class=
=3D"literal">@Autowired</code> annotation
on either a field or setter method. For example:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {

    <span class=3D"strong"><strong>@Autowired</strong></span>
    <span class=3D"hl-keyword">private</span> ApplicationContext applicatio=
nContext;

    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>Similarly, if your test is configured to load a <code class=3D"literal">=
WebApplicationContext</code>, you can inject
the web application context into your test as follows:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"strong"><strong>@WebAppConfiguration</strong></span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyWebAppTest {
    <span class=3D"strong"><strong>@Autowired</strong></span>
    <span class=3D"hl-keyword">private</span> WebApplicationContext wac;

    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>Dependency injection via <code class=3D"literal">@Autowired</code> is pr=
ovided by the
<code class=3D"literal">DependencyInjectionTestExecutionListener</code> whi=
ch is configured by default (see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-fixture-di" title=3D"15=
.5.5&nbsp;Dependency injection of test fixtures">Section&nbsp;15.5.5, =93De=
pendency injection of test fixtures=94</a>).</p>
</td></tr></tbody></table></div>
<p>Test classes that use the TestContext framework do not need to extend an=
y particular
class or implement a specific interface to configure their application cont=
ext. Instead,
configuration is achieved simply by declaring the <code class=3D"literal">@=
ContextConfiguration</code> annotation at
the class level. If your test class does not explicitly declare application=
 context
resource <code class=3D"literal">locations</code> or annotated <code class=
=3D"literal">classes</code>, the configured <code class=3D"literal">Context=
Loader</code> determines
how to load a context from a default location or default configuration clas=
ses. In
addition to context resource <code class=3D"literal">locations</code> and a=
nnotated <code class=3D"literal">classes</code>, an application context
can also be configured via application context <code class=3D"literal">init=
ializers</code>.</p>
<p>The following sections explain how to configure an <code class=3D"litera=
l">ApplicationContext</code> via XML
configuration files, Groovy scripts, annotated classes (typically <code cla=
ss=3D"literal">@Configuration</code>
classes), or context initializers using Spring=92s <code class=3D"literal">=
@ContextConfiguration</code> annotation.
Alternatively, you can implement and configure your own custom <code class=
=3D"literal">SmartContextLoader</code> for
advanced use cases.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-xml" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcon=
text-ctx-management-xml"></a>Context configuration with XML resources</h4><=
/div></div></div>
<p>To load an <code class=3D"literal">ApplicationContext</code> for your te=
sts using XML configuration files, annotate
your test class with <code class=3D"literal">@ContextConfiguration</code> a=
nd configure the <code class=3D"literal">locations</code> attribute with
an array that contains the resource locations of XML configuration metadata=
. A plain or
relative path&#8201;=97&#8201;for example <code class=3D"literal">"context.=
xml"</code>&#8201;=97&#8201;will be treated as a classpath resource
that is relative to the package in which the test class is defined. A path =
starting with
a slash is treated as an absolute classpath location, for example
<code class=3D"literal">"/org/example/config.xml"</code>. A path which repr=
esents a resource URL (i.e., a path
prefixed with <code class=3D"literal">classpath:</code>, <code class=3D"lit=
eral">file:</code>, <code class=3D"literal">http:</code>, etc.) will be use=
d <span class=3D"emphasis"><em>as is</em></span>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from "/app-=
config.xml" and</span>
<span class=3D"hl-comment">// "/test-config.xml" in the root of the classpa=
th</span>
<span class=3D"strong"><strong>@ContextConfiguration(locations=3D{"/app-con=
fig.xml", "/test-config.xml"})</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p><code class=3D"literal">@ContextConfiguration</code> supports an alias f=
or the <code class=3D"literal">locations</code> attribute through the
standard Java <code class=3D"literal">value</code> attribute. Thus, if you =
do not need to declare additional
attributes in <code class=3D"literal">@ContextConfiguration</code>, you can=
 omit the declaration of the <code class=3D"literal">locations</code>
attribute name and declare the resource locations by using the shorthand fo=
rmat
demonstrated in the following example.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"strong"><strong>@ContextConfiguration({"/app-config.xml", "/=
test-config.xml"})</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>If you omit both the <code class=3D"literal">locations</code> and <code =
class=3D"literal">value</code> attributes from the <code class=3D"literal">=
@ContextConfiguration</code>
annotation, the TestContext framework will attempt to detect a default XML =
resource
location. Specifically, <code class=3D"literal">GenericXmlContextLoader</co=
de> and <code class=3D"literal">GenericXmlWebContextLoader</code> detect
a default location based on the name of the test class. If your class is na=
med
<code class=3D"literal">com.example.MyTest</code>, <code class=3D"literal">=
GenericXmlContextLoader</code> loads your application context from
<code class=3D"literal">"classpath:com/example/MyTest-context.xml"</code>.<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.example;

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from</span>
<span class=3D"hl-comment">// "classpath:com/example/MyTest-context.xml"</s=
pan>
<span class=3D"strong"><strong>@ContextConfiguration</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-groovy" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#test=
context-ctx-management-groovy"></a>Context configuration with Groovy script=
s</h4></div></div></div>
<p>To load an <code class=3D"literal">ApplicationContext</code> for your te=
sts using Groovy scripts that utilize the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#groovy-bean-definition-dsl" title=
=3D"The Groovy Bean Definition DSL">Groovy Bean Definition DSL</a>, annotat=
e your test class with
<code class=3D"literal">@ContextConfiguration</code> and configure the <cod=
e class=3D"literal">locations</code> or <code class=3D"literal">value</code=
> attribute with an array
that contains the resource locations of Groovy scripts. Resource lookup sem=
antics for
Groovy scripts are the same as those described for <a class=3D"link" href=
=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-refe=
rence/htmlsingle/#testcontext-ctx-management-xml" title=3D"Context configur=
ation with XML resources">XML
configuration files</a>.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip: Enabling Groovy script support"><tbody><tr><=
td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><img alt=3D"[=
Tip]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/images/tip.png"></td><th align=3D"left">Enabling =
Groovy script support</th></tr><tr><td align=3D"left" valign=3D"top">
<p>Support for using Groovy scripts to load an <code class=3D"literal">Appl=
icationContext</code> in the Spring
TestContext Framework is enabled automatically if Groovy is on the classpat=
h.</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from "/AppC=
onfig.groovy" and</span>
<span class=3D"hl-comment">// "/TestConfig.groovy" in the root of the class=
path</span>
<span class=3D"strong"><strong>@ContextConfiguration({"/AppConfig.groovy", =
"/TestConfig.Groovy"})</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>If you omit both the <code class=3D"literal">locations</code> and <code =
class=3D"literal">value</code> attributes from the <code class=3D"literal">=
@ContextConfiguration</code>
annotation, the TestContext framework will attempt to detect a default Groo=
vy script.
Specifically, <code class=3D"literal">GenericGroovyXmlContextLoader</code> =
and <code class=3D"literal">GenericGroovyXmlWebContextLoader</code>
detect a default location based on the name of the test class. If your clas=
s is named
<code class=3D"literal">com.example.MyTest</code>, the Groovy context loade=
r will load your application context from
<code class=3D"literal">"classpath:com/example/MyTestContext.groovy"</code>=
.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.example;

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from</span>
<span class=3D"hl-comment">// "classpath:com/example/MyTestContext.groovy"<=
/span>
<span class=3D"strong"><strong>@ContextConfiguration</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip: Declaring XML config and Groovy scripts simu=
ltaneously"><tbody><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" wi=
dth=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/images/tip.png"></td><th =
align=3D"left">Declaring XML config and Groovy scripts simultaneously</th><=
/tr><tr><td align=3D"left" valign=3D"top">
<p>Both XML configuration files and Groovy scripts can be declared simultan=
eously via the
<code class=3D"literal">locations</code> or <code class=3D"literal">value</=
code> attribute of <code class=3D"literal">@ContextConfiguration</code>. If=
 the path to a configured
resource location ends with <code class=3D"literal">.xml</code> it will be =
loaded using an <code class=3D"literal">XmlBeanDefinitionReader</code>;
otherwise it will be loaded using a <code class=3D"literal">GroovyBeanDefin=
itionReader</code>.</p>
<p>The following listing demonstrates how to combine both in an integration=
 test.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from</span>
<span class=3D"hl-comment">// "/app-config.xml" and "/TestConfig.groovy"</s=
pan>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on({ "/app-config.xml", "/TestConfig.groovy" })</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-javaconfig" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
testcontext-ctx-management-javaconfig"></a>Context configuration with annot=
ated classes</h4></div></div></div>
<p>To load an <code class=3D"literal">ApplicationContext</code> for your te=
sts using <span class=3D"emphasis"><em>annotated classes</em></span> (see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#beans-java" title=3D"7.12&nbsp;Java=
-based container configuration">Section&nbsp;7.12, =93Java-based container =
configuration=94</a>), annotate your test class with <code class=3D"literal=
">@ContextConfiguration</code> and configure the
<code class=3D"literal">classes</code> attribute with an array that contain=
s references to annotated classes.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from AppCon=
fig and TestConfig</span>
<span class=3D"strong"><strong>@ContextConfiguration(classes =3D {AppConfig=
.class, TestConfig.class})</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip: Annotated Classes"><tbody><tr><td rowspan=3D=
"2" align=3D"center" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/images/tip.png"></td><th align=3D"left">Annotated Classes</th>=
</tr><tr><td align=3D"left" valign=3D"top">
<p>The term <span class=3D"emphasis"><em>annotated class</em></span> can re=
fer to any of the following.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
A class annotated with <code class=3D"literal">@Configuration</code>
</li><li class=3D"listitem">
A component (i.e., a class annotated with <code class=3D"literal">@Componen=
t</code>, <code class=3D"literal">@Service</code>, <code class=3D"literal">=
@Repository</code>, etc.)
</li><li class=3D"listitem">
A JSR-330 compliant class that is annotated with <code class=3D"literal">ja=
vax.inject</code> annotations
</li><li class=3D"listitem">
Any other class that contains <code class=3D"literal">@Bean</code>-methods
</li></ul></div>
<p>Consult the javadocs of <code class=3D"literal">@Configuration</code> an=
d <code class=3D"literal">@Bean</code> for further information regarding
the configuration and semantics of <span class=3D"emphasis"><em>annotated c=
lasses</em></span>, paying special attention to
the discussion of <span class=3D"emphasis"><em>`@Bean` Lite Mode</em></span=
>.</p>
</td></tr></tbody></table></div>
<p>If you omit the <code class=3D"literal">classes</code> attribute from th=
e <code class=3D"literal">@ContextConfiguration</code> annotation, the
TestContext framework will attempt to detect the presence of default config=
uration
classes. Specifically, <code class=3D"literal">AnnotationConfigContextLoade=
r</code> and
<code class=3D"literal">AnnotationConfigWebContextLoader</code> will detect=
 all <code class=3D"literal">static</code> nested classes of the test class
that meet the requirements for configuration class implementations as speci=
fied in the
<code class=3D"literal">@Configuration</code> javadocs. In the following ex=
ample, the <code class=3D"literal">OrderServiceTest</code> class
declares a <code class=3D"literal">static</code> nested configuration class=
 named <code class=3D"literal">Config</code> that will be automatically
used to load the <code class=3D"literal">ApplicationContext</code> for the =
test class. Note that the name of the
configuration class is arbitrary. In addition, a test class can contain mor=
e than one
<code class=3D"literal">static</code> nested configuration class if desired=
.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from the</s=
pan>
<span class=3D"hl-comment">// static nested Config class</span>
<span class=3D"strong"><strong>@ContextConfiguration</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> OrderServiceTest {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Configuration<=
/span></em>
    <span class=3D"hl-keyword">static</span> <span class=3D"hl-keyword">cla=
ss</span> Config {

        <span class=3D"hl-comment">// this bean will be injected into the O=
rderServiceTest class</span>
        <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span=
></em>
        <span class=3D"hl-keyword">public</span> OrderService orderService(=
) {
            OrderService orderService =3D <span class=3D"hl-keyword">new</s=
pan> OrderServiceImpl();
            <span class=3D"hl-comment">// set properties, etc.</span>
            <span class=3D"hl-keyword">return</span> orderService;
        }
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> OrderService orderService;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> testOrderService() {
        <span class=3D"hl-comment">// test the orderService</span>
    }

}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-mixed-config" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#testcontext-ctx-management-mixed-config"></a>Mixing XML, Groovy scripts, =
and annotated classes</h4></div></div></div>
<p>It may sometimes be desirable to mix XML configuration files, Groovy scr=
ipts, and
annotated classes (i.e., typically <code class=3D"literal">@Configuration</=
code> classes) to configure an
<code class=3D"literal">ApplicationContext</code> for your tests. For examp=
le, if you use XML configuration in
production, you may decide that you want to use <code class=3D"literal">@Co=
nfiguration</code> classes to configure
specific Spring-managed components for your tests, or vice versa.</p>
<p>Furthermore, some third-party frameworks (like Spring Boot) provide firs=
t-class support
for loading an <code class=3D"literal">ApplicationContext</code> from diffe=
rent types of resources simultaneously
(e.g., XML configuration files, Groovy scripts, and <code class=3D"literal"=
>@Configuration</code> classes). The Spring
Framework historically has not supported this for standard deployments. Con=
sequently,
most of the <code class=3D"literal">SmartContextLoader</code> implementatio=
ns that the Spring Framework delivers in
the <code class=3D"literal">spring-test</code> module support only one reso=
urce type per test context; however, this
does not mean that you cannot use both. One exception to the general rule i=
s that the
<code class=3D"literal">GenericGroovyXmlContextLoader</code> and <code clas=
s=3D"literal">GenericGroovyXmlWebContextLoader</code> support both XML
configuration files and Groovy scripts simultaneously. Furthermore, third-p=
arty
frameworks may choose to support the declaration of both <code class=3D"lit=
eral">locations</code> and <code class=3D"literal">classes</code> via
<code class=3D"literal">@ContextConfiguration</code>, and with the standard=
 testing support in the TestContext
framework, you have the following options.</p>
<p>If you want to use resource locations (e.g., XML or Groovy) <span class=
=3D"emphasis"><em>and</em></span> <code class=3D"literal">@Configuration</c=
ode>
classes to configure your tests, you will have to pick one as the <span cla=
ss=3D"emphasis"><em>entry point</em></span>, and
that one will have to include or import the other. For example, in XML or G=
roovy scripts
you can include <code class=3D"literal">@Configuration</code> classes via c=
omponent scanning or define them as normal
Spring beans; whereas, in a <code class=3D"literal">@Configuration</code> c=
lass you can use <code class=3D"literal">@ImportResource</code> to
import XML configuration files or Groovy scripts. Note that this behavior i=
s semantically
equivalent to how you configure your application in production: in producti=
on
configuration you will define either a set of XML or Groovy resource locati=
ons or a set
of <code class=3D"literal">@Configuration</code> classes that your producti=
on <code class=3D"literal">ApplicationContext</code> will be loaded
from, but you still have the freedom to include or import the other type of=
 configuration.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-initializers" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#testcontext-ctx-management-initializers"></a>Context configuration with c=
ontext initializers</h4></div></div></div>
<p>To configure an <code class=3D"literal">ApplicationContext</code> for yo=
ur tests using context initializers, annotate
your test class with <code class=3D"literal">@ContextConfiguration</code> a=
nd configure the <code class=3D"literal">initializers</code> attribute
with an array that contains references to classes that implement
<code class=3D"literal">ApplicationContextInitializer</code>. The declared =
context initializers will then be used to
initialize the <code class=3D"literal">ConfigurableApplicationContext</code=
> that is loaded for your tests. Note that
the concrete <code class=3D"literal">ConfigurableApplicationContext</code> =
type supported by each declared
initializer must be compatible with the type of <code class=3D"literal">App=
licationContext</code> created by the
<code class=3D"literal">SmartContextLoader</code> in use (i.e., typically a=
 <code class=3D"literal">GenericApplicationContext</code>).
Furthermore, the order in which the initializers are invoked depends on whe=
ther they
implement Spring=92s <code class=3D"literal">Ordered</code> interface or ar=
e annotated with Spring=92s <code class=3D"literal">@Order</code> annotatio=
n
or the standard <code class=3D"literal">@Priority</code> annotation.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from TestCo=
nfig</span>
<span class=3D"hl-comment">// and initialized by TestAppCtxInitializer</spa=
n>
<span class=3D"strong"><strong>@ContextConfiguration(
    classes =3D TestConfig.class,
    initializers =3D TestAppCtxInitializer.class)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>It is also possible to omit the declaration of XML configuration files, =
Groovy scripts,
or annotated classes in <code class=3D"literal">@ContextConfiguration</code=
> entirely and instead declare only
<code class=3D"literal">ApplicationContextInitializer</code> classes which =
are then responsible for registering beans
in the context&#8201;=97&#8201;for example, by programmatically loading bea=
n definitions from XML
files or configuration classes.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be initialized by Ent=
ireAppInitializer</span>
<span class=3D"hl-comment">// which presumably registers beans in the conte=
xt</span>
<span class=3D"strong"><strong>@ContextConfiguration(initializers =3D Entir=
eAppInitializer.class)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-inheritance" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#testcontext-ctx-management-inheritance"></a>Context configuration inherita=
nce</h4></div></div></div>
<p><code class=3D"literal">@ContextConfiguration</code> supports boolean <c=
ode class=3D"literal">inheritLocations</code> and <code class=3D"literal">i=
nheritInitializers</code>
attributes that denote whether resource locations or annotated classes and =
context
initializers declared by superclasses should be <span class=3D"emphasis"><e=
m>inherited</em></span>. The default value for
both flags is <code class=3D"literal">true</code>. This means that a test c=
lass inherits the resource locations or
annotated classes as well as the context initializers declared by any super=
classes.
Specifically, the resource locations or annotated classes for a test class =
are appended
to the list of resource locations or annotated classes declared by supercla=
sses.
Similarly, the initializers for a given test class will be added to the set=
 of
initializers defined by test superclasses. Thus, subclasses have the option
of <span class=3D"emphasis"><em>extending</em></span> the resource location=
s, annotated classes, or context initializers.</p>
<p>If the <code class=3D"literal">inheritLocations</code> or <code class=3D=
"literal">inheritInitializers</code> attribute in <code class=3D"literal">@=
ContextConfiguration</code>
is set to <code class=3D"literal">false</code>, the resource locations or a=
nnotated classes and the context
initializers, respectively, for the test class <span class=3D"emphasis"><em=
>shadow</em></span> and effectively replace the
configuration defined by superclasses.</p>
<p>In the following example that uses XML resource locations, the <code cla=
ss=3D"literal">ApplicationContext</code> for
<code class=3D"literal">ExtendedTest</code> will be loaded from <span class=
=3D"emphasis"><em>"base-config.xml"</em></span> <span class=3D"emphasis"><e=
m>and</em></span>
<span class=3D"emphasis"><em>"extended-config.xml"</em></span>, in that ord=
er. Beans defined in <span class=3D"emphasis"><em>"extended-config.xml"</em=
></span> may
therefore <span class=3D"emphasis"><em>override</em></span> (i.e., replace)=
 those defined in <span class=3D"emphasis"><em>"base-config.xml"</em></span=
>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from "/base=
-config.xml"</span>
<span class=3D"hl-comment">// in the root of the classpath</span>
<span class=3D"strong"><strong>@ContextConfiguration("/base-config.xml")</s=
trong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTest {
    <span class=3D"hl-comment">// class body...</span>
}

<span class=3D"hl-comment">// ApplicationContext will be loaded from "/base=
-config.xml" and</span>
<span class=3D"hl-comment">// "/extended-config.xml" in the root of the cla=
sspath</span>
<span class=3D"strong"><strong>@ContextConfiguration("/extended-config.xml"=
)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTest <span class=3D"hl-keyword">extends</span> BaseTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>Similarly, in the following example that uses annotated classes, the
<code class=3D"literal">ApplicationContext</code> for <code class=3D"litera=
l">ExtendedTest</code> will be loaded from the <code class=3D"literal">Base=
Config</code> <span class=3D"emphasis"><em>and</em></span>
<code class=3D"literal">ExtendedConfig</code> classes, in that order. Beans=
 defined in <code class=3D"literal">ExtendedConfig</code> may therefore
override (i.e., replace) those defined in <code class=3D"literal">BaseConfi=
g</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from BaseCo=
nfig</span>
<span class=3D"strong"><strong>@ContextConfiguration(classes =3D BaseConfig=
.class)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTest {
    <span class=3D"hl-comment">// class body...</span>
}

<span class=3D"hl-comment">// ApplicationContext will be loaded from BaseCo=
nfig and ExtendedConfig</span>
<span class=3D"strong"><strong>@ContextConfiguration(classes =3D ExtendedCo=
nfig.class)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTest <span class=3D"hl-keyword">extends</span> BaseTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p>In the following example that uses context initializers, the <code class=
=3D"literal">ApplicationContext</code> for
<code class=3D"literal">ExtendedTest</code> will be initialized using <code=
 class=3D"literal">BaseInitializer</code> <span class=3D"emphasis"><em>and<=
/em></span>
<code class=3D"literal">ExtendedInitializer</code>. Note, however, that the=
 order in which the initializers are
invoked depends on whether they implement Spring=92s <code class=3D"literal=
">Ordered</code> interface or are annotated
with Spring=92s <code class=3D"literal">@Order</code> annotation or the sta=
ndard <code class=3D"literal">@Priority</code> annotation.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be initialized by Bas=
eInitializer</span>
<span class=3D"strong"><strong>@ContextConfiguration(initializers =3D BaseI=
nitializer.class)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTest {
    <span class=3D"hl-comment">// class body...</span>
}

<span class=3D"hl-comment">// ApplicationContext will be initialized by Bas=
eInitializer</span>
<span class=3D"hl-comment">// and ExtendedInitializer</span>
<span class=3D"strong"><strong>@ContextConfiguration(initializers =3D Exten=
dedInitializer.class)</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTest <span class=3D"hl-keyword">extends</span> BaseTest {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-env-profiles" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#testcontext-ctx-management-env-profiles"></a>Context configuration with e=
nvironment profiles</h4></div></div></div>
<p>Spring 3.1 introduced first-class support in the framework for the notio=
n of
environments and profiles (a.k.a., <span class=3D"emphasis"><em>bean defini=
tion profiles</em></span>), and integration tests
can be configured to activate particular bean definition profiles for vario=
us testing
scenarios. This is achieved by annotating a test class with the <code class=
=3D"literal">@ActiveProfiles</code>
annotation and supplying a list of profiles that should be activated when l=
oading the
<code class=3D"literal">ApplicationContext</code> for the test.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@ActiveProfiles</code> may be used with any impl=
ementation of the new <code class=3D"literal">SmartContextLoader</code>
SPI, but <code class=3D"literal">@ActiveProfiles</code> is not supported wi=
th implementations of the older
<code class=3D"literal">ContextLoader</code> SPI.</p>
</td></tr></tbody></table></div>
<p>Let=92s take a look at some examples with XML configuration and <code cl=
ass=3D"literal">@Configuration</code> classes.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- app-config=
.xml --&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:jdbc</span>=3D<span class=3D"hl-valu=
e">"http://www.springframework.org/schema/jdbc"</span>
    <span class=3D"hl-attribute">xmlns:jee</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/jee"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"..."</span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"transferService"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"com.bank.service.internal.DefaultTransferService"</span><span class=
=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"accountRepository"</span=
><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"feePolicy"</span><span c=
lass=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"accountRepository"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"com.bank.repository.internal.JdbcAccountRepository"</span><span clas=
s=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl=
-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span><span =
class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"feePolicy"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"com.bank.service.internal.ZeroFeePolicy"</span><span class=3D"hl-tag">/&=
gt;</span>

    <span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">pr=
ofile</span>=3D<span class=3D"hl-value">"dev"</span><span class=3D"hl-tag">=
&gt;</span>
        <span class=3D"hl-tag">&lt;jdbc:embedded-database</span> <span clas=
s=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;jdbc:script</span>
                <span class=3D"hl-attribute">location</span>=3D<span class=
=3D"hl-value">"classpath:com/bank/config/sql/schema.sql"</span><span class=
=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;jdbc:script</span>
                <span class=3D"hl-attribute">location</span>=3D<span class=
=3D"hl-value">"classpath:com/bank/config/sql/test-data.sql"</span><span cla=
ss=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/jdbc:embedded-database&gt;</span>
    <span class=3D"hl-tag">&lt;/beans&gt;</span>

    <span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">pr=
ofile</span>=3D<span class=3D"hl-value">"production"</span><span class=3D"h=
l-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;jee:jndi-lookup</span> <span class=3D"hl=
-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span> <span =
class=3D"hl-attribute">jndi-name</span>=3D<span class=3D"hl-value">"java:co=
mp/env/jdbc/datasource"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/beans&gt;</span>

    <span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">pr=
ofile</span>=3D<span class=3D"hl-value">"default"</span><span class=3D"hl-t=
ag">&gt;</span>
        <span class=3D"hl-tag">&lt;jdbc:embedded-database</span> <span clas=
s=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;jdbc:script</span>
                <span class=3D"hl-attribute">location</span>=3D<span class=
=3D"hl-value">"classpath:com/bank/config/sql/schema.sql"</span><span class=
=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/jdbc:embedded-database&gt;</span>
    <span class=3D"hl-tag">&lt;/beans&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service;

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<span class=3D"hl-comment">// ApplicationContext will be loaded from "class=
path:/app-config.xml"</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("/app-config.xml")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles("de=
v")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> TransferServiceTest {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> TransferService transferServi=
ce;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> testTransferService() {
        <span class=3D"hl-comment">// test the transferService</span>
    }
}</pre>
<p>When <code class=3D"literal">TransferServiceTest</code> is run, its <cod=
e class=3D"literal">ApplicationContext</code> will be loaded from the
<code class=3D"literal">app-config.xml</code> configuration file in the roo=
t of the classpath. If you inspect
<code class=3D"literal">app-config.xml</code> you=92ll notice that the <cod=
e class=3D"literal">accountRepository</code> bean has a dependency on a
<code class=3D"literal">dataSource</code> bean; however, <code class=3D"lit=
eral">dataSource</code> is not defined as a top-level bean. Instead,
<code class=3D"literal">dataSource</code> is defined three times: in the <s=
pan class=3D"emphasis"><em>production</em></span> profile, the
<span class=3D"emphasis"><em>dev</em></span> profile, and the <span class=
=3D"emphasis"><em>default</em></span> profile.</p>
<p>By annotating <code class=3D"literal">TransferServiceTest</code> with <c=
ode class=3D"literal">@ActiveProfiles("dev")</code> we instruct the Spring
TestContext Framework to load the <code class=3D"literal">ApplicationContex=
t</code> with the active profiles set to
<code class=3D"literal">{"dev"}</code>. As a result, an embedded database w=
ill be created and populated with test data,
and the <code class=3D"literal">accountRepository</code> bean will be wired=
 with a reference to the development
<code class=3D"literal">DataSource</code>. And that=92s likely what we want=
 in an integration test.</p>
<p>It is sometimes useful to assign beans to a <code class=3D"literal">defa=
ult</code> profile. Beans within the default profile
are only included when no other profile is specifically activated. This can=
 be used to define
<span class=3D"emphasis"><em>fallback</em></span> beans to be used in the a=
pplication=92s default state. For example, you may
explicitly provide a data source for <code class=3D"literal">dev</code> and=
 <code class=3D"literal">production</code> profiles, but define an in-memor=
y
data source as a default when neither of these is active.</p>
<p>The following code listings demonstrate how to implement the same config=
uration and
integration test but using <code class=3D"literal">@Configuration</code> cl=
asses instead of XML.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Profile("dev")</sp=
an></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> StandaloneDataConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.HSQL)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/schema.sql"</span>)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/test-data.sql"</span>)
            .build();
    }
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Profile("productio=
n")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> JndiDataConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean(destroyMe=
thod=3D"")</span></em>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() <span =
class=3D"hl-keyword">throws</span> Exception {
        Context ctx =3D <span class=3D"hl-keyword">new</span> InitialContex=
t();
        <span class=3D"hl-keyword">return</span> (DataSource) ctx.lookup(<s=
pan class=3D"hl-string">"java:comp/env/jdbc/datasource"</span>);
    }
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Profile("default")=
</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultDataConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> DataSource dataSource() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.HSQL)
            .addScript(<span class=3D"hl-string">"classpath:com/bank/config=
/sql/schema.sql"</span>)
            .build();
    }
}</pre>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Configuration</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> TransferServiceConfig {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em> DataSource dataSource;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> TransferService transferServic=
e() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> DefaultTransferService(accountRepository(), feePolicy());
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> AccountRepository accountRepos=
itory() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> JdbcAccountRepository(dataSource);
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Bean</span></e=
m>
    <span class=3D"hl-keyword">public</span> FeePolicy feePolicy() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> ZeroFeePolicy();
    }

}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service;

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on(classes =3D {
        TransferServiceConfig.class,
        StandaloneDataConfig.class,
        JndiDataConfig.class,
        DefaultDataConfig.class})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles("de=
v")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> TransferServiceTest {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> TransferService transferServi=
ce;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> testTransferService() {
        <span class=3D"hl-comment">// test the transferService</span>
    }
}</pre>
<p>In this variation, we have split the XML configuration into four indepen=
dent
<code class=3D"literal">@Configuration</code> classes:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">TransferServiceConfig</code>: acquires a <code clas=
s=3D"literal">dataSource</code> via dependency injection using
<code class=3D"literal">@Autowired</code>
</li><li class=3D"listitem">
<code class=3D"literal">StandaloneDataConfig</code>: defines a <code class=
=3D"literal">dataSource</code> for an embedded database suitable for
developer tests
</li><li class=3D"listitem">
<code class=3D"literal">JndiDataConfig</code>: defines a <code class=3D"lit=
eral">dataSource</code> that is retrieved from JNDI in a production
environment
</li><li class=3D"listitem">
<code class=3D"literal">DefaultDataConfig</code>: defines a <code class=3D"=
literal">dataSource</code> for a default embedded database in case
no profile is active
</li></ul></div>
<p>As with the XML-based configuration example, we still annotate <code cla=
ss=3D"literal">TransferServiceTest</code>
with <code class=3D"literal">@ActiveProfiles("dev")</code>, but this time w=
e specify all four configuration classes
via the <code class=3D"literal">@ContextConfiguration</code> annotation. Th=
e body of the test class itself remains
completely unchanged.</p>
<p>It is often the case that a single set of profiles is used across multip=
le test classes
within a given project. Thus, to avoid duplicate declarations of the <code =
class=3D"literal">@ActiveProfiles</code>
annotation it is possible to declare <code class=3D"literal">@ActiveProfile=
s</code> once on a base class, and
subclasses will automatically inherit the <code class=3D"literal">@ActivePr=
ofiles</code> configuration from the base
class. In the following example, the declaration of <code class=3D"literal"=
>@ActiveProfiles</code> (as well as other
annotations) has been moved to an abstract superclass, <code class=3D"liter=
al">AbstractIntegrationTest</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service;

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on(classes =3D {
        TransferServiceConfig.class,
        StandaloneDataConfig.class,
        JndiDataConfig.class,
        DefaultDataConfig.class})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles("de=
v")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">abstrac=
t</span> <span class=3D"hl-keyword">class</span> AbstractIntegrationTest {
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service;

<span class=3D"hl-comment">// "dev" profile inherited from superclass</span=
>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> TransferServiceTest <span class=3D"hl-keyword">extends</span> Abstrac=
tIntegrationTest {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> TransferService transferServi=
ce;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> testTransferService() {
        <span class=3D"hl-comment">// test the transferService</span>
    }
}</pre>
<p><code class=3D"literal">@ActiveProfiles</code> also supports an <code cl=
ass=3D"literal">inheritProfiles</code> attribute that can be used to
disable the inheritance of active profiles.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service;

<span class=3D"hl-comment">// "dev" profile overridden with "production"</s=
pan>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles(pro=
files =3D "production", inheritProfiles =3D false)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ProductionTransferServiceTest <span class=3D"hl-keyword">extends</spa=
n> AbstractIntegrationTest {
    <span class=3D"hl-comment">// test body</span>
}</pre>
<p><a name=3D"testcontext-ctx-management-env-profiles-ActiveProfilesResolve=
r" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#testcontext-ctx-management-env-profiles-ActiveProf=
ilesResolver"></a>Furthermore, it is sometimes necessary to resolve active =
profiles for tests
<span class=3D"emphasis"><em>programmatically</em></span> instead of declar=
atively&#8201;=97&#8201;for example, based on:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
the current operating system
</li><li class=3D"listitem">
whether tests are being executed on a continuous integration build server
</li><li class=3D"listitem">
the presence of certain environment variables
</li><li class=3D"listitem">
the presence of custom class-level annotations
</li><li class=3D"listitem">
etc.
</li></ul></div>
<p>To resolve active bean definition profiles programmatically, simply impl=
ement a custom
<code class=3D"literal">ActiveProfilesResolver</code> and register it via t=
he <code class=3D"literal">resolver</code> attribute of
<code class=3D"literal">@ActiveProfiles</code>. The following example demon=
strates how to implement and register a
custom <code class=3D"literal">OperatingSystemActiveProfilesResolver</code>=
. For further information, refer to the
corresponding javadocs.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service;

<span class=3D"hl-comment">// "dev" profile overridden programmatically via=
 a custom resolver</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ActiveProfiles(
    resolver =3D OperatingSystemActiveProfilesResolver.class,
    inheritProfiles =3D false)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> TransferServiceTest <span class=3D"hl-keyword">extends</span> Abstrac=
tIntegrationTest {
    <span class=3D"hl-comment">// test body</span>
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> com=
.bank.service.test;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> OperatingSystemActiveProfilesResolver <span class=3D"hl-keyword">impl=
ements</span> ActiveProfilesResolver {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Override</span=
></em>
    String[] resolve(Class&lt;?&gt; testClass) {
        String profile =3D ...;
        <span class=3D"hl-comment">// determine the value of profile based =
on the operating system</span>
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>new</span> String[] {profile};
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-property-sources" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#testcontext-ctx-management-property-sources"></a>Context configuratio=
n with test property sources</h4></div></div></div>
<p>Spring 3.1 introduced first-class support in the framework for the notio=
n of an
environment with a hierarchy of <span class=3D"emphasis"><em>property sourc=
es</em></span>, and since Spring 4.1 integration
tests can be configured with test-specific property sources. In contrast to=
 the
<code class=3D"literal">@PropertySource</code> annotation used on <code cla=
ss=3D"literal">@Configuration</code> classes, the <code class=3D"literal">@=
TestPropertySource</code>
annotation can be declared on a test class to declare resource locations fo=
r test
properties files or <span class=3D"emphasis"><em>inlined</em></span> proper=
ties. These test property sources will be added to
the set of <code class=3D"literal">PropertySources</code> in the <code clas=
s=3D"literal">Environment</code> for the <code class=3D"literal">Applicatio=
nContext</code> loaded
for the annotated integration test.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@TestPropertySource</code> may be used with any =
implementation of the <code class=3D"literal">SmartContextLoader</code>
SPI, but <code class=3D"literal">@TestPropertySource</code> is not supporte=
d with implementations of the older
<code class=3D"literal">ContextLoader</code> SPI.</p>
<p>Implementations of <code class=3D"literal">SmartContextLoader</code> gai=
n access to merged test property source values
via the <code class=3D"literal">getPropertySourceLocations()</code> and <co=
de class=3D"literal">getPropertySourceProperties()</code> methods in
<code class=3D"literal">MergedContextConfiguration</code>.</p>
</td></tr></tbody></table></div>
<p><span class=3D"strong"><strong>Declaring test property sources</strong><=
/span></p>
<p>Test properties files can be configured via the <code class=3D"literal">=
locations</code> or <code class=3D"literal">value</code> attribute of
<code class=3D"literal">@TestPropertySource</code> as shown in the followin=
g example.</p>
<p>Both traditional and XML-based properties file formats are supported&#82=
01;=97&#8201;for example,
<code class=3D"literal">"classpath:/com/example/test.properties"</code> or =
<code class=3D"literal">"file:///path/to/file.xml"</code>.</p>
<p>Each path will be interpreted as a Spring <code class=3D"literal">Resour=
ce</code>. A plain path&#8201;=97&#8201;for example,
<code class=3D"literal">"test.properties"</code>&#8201;=97&#8201;will be tr=
eated as a classpath resource that is <span class=3D"emphasis"><em>relative=
</em></span> to the
package in which the test class is defined. A path starting with a slash wi=
ll be treated
as an <span class=3D"emphasis"><em>absolute</em></span> classpath resource,=
 for example: <code class=3D"literal">"/org/example/test.xml"</code>. A pat=
h which
references a URL (e.g., a path prefixed with <code class=3D"literal">classp=
ath:</code>, <code class=3D"literal">file:</code>, <code class=3D"literal">=
http:</code>, etc.) will
be loaded using the specified resource protocol. Resource location wildcard=
s (e.g.
<code class=3D"literal"><span class=3D"strong"><strong>*/</strong></span>.p=
roperties</code>) are not permitted: each location must evaluate to exactly=
 one
<code class=3D"literal">.properties</code> or <code class=3D"literal">.xml<=
/code> resource.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TestPropertySource=
("/test.properties")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p><span class=3D"emphasis"><em>Inlined</em></span> properties in the form =
of key-value pairs can be configured via the
<code class=3D"literal">properties</code> attribute of <code class=3D"liter=
al">@TestPropertySource</code> as shown in the following example. All
key-value pairs will be added to the enclosing <code class=3D"literal">Envi=
ronment</code> as a single test
<code class=3D"literal">PropertySource</code> with the highest precedence.<=
/p>
<p>The supported syntax for key-value pairs is the same as the syntax defin=
ed for entries in
a Java properties file:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">"key=3Dvalue"</code>
</li><li class=3D"listitem">
<code class=3D"literal">"key:value"</code>
</li><li class=3D"listitem">
<code class=3D"literal">"key value"</code>
</li></ul></div>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TestPropertySource=
(properties =3D {"timezone =3D GMT", "port: 4242"})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p><span class=3D"strong"><strong>Default properties file detection</strong=
></span></p>
<p>If <code class=3D"literal">@TestPropertySource</code> is declared as an =
empty annotation (i.e., without explicit
values for the <code class=3D"literal">locations</code> or <code class=3D"l=
iteral">properties</code> attributes), an attempt will be made to detect
a <span class=3D"emphasis"><em>default</em></span> properties file relative=
 to the class that declared the annotation. For
example, if the annotated test class is <code class=3D"literal">com.example=
.MyTest</code>, the corresponding default
properties file is <code class=3D"literal">"classpath:com/example/MyTest.pr=
operties"</code>. If the default cannot be
detected, an <code class=3D"literal">IllegalStateException</code> will be t=
hrown.</p>
<p><span class=3D"strong"><strong>Precedence</strong></span></p>
<p>Test property sources have higher precedence than those loaded from the =
operating
system=92s environment or Java system properties as well as property source=
s added by the
application declaratively via <code class=3D"literal">@PropertySource</code=
> or programmatically. Thus, test property
sources can be used to selectively override properties defined in system an=
d application
property sources. Furthermore, inlined properties have higher precedence th=
an properties
loaded from resource locations.</p>
<p>In the following example, the <code class=3D"literal">timezone</code> an=
d <code class=3D"literal">port</code> properties as well as any properties
defined in <code class=3D"literal">"/test.properties"</code> will override =
any properties of the same name that are
defined in system and application property sources. Furthermore, if the
<code class=3D"literal">"/test.properties"</code> file defines entries for =
the <code class=3D"literal">timezone</code> and <code class=3D"literal">por=
t</code> properties those
will be overridden by the <span class=3D"emphasis"><em>inlined</em></span> =
properties declared via the <code class=3D"literal">properties</code> attri=
bute.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TestPropertySource=
(
    locations =3D "/test.properties",
    properties =3D {"timezone =3D GMT", "port: 4242"}
)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyIntegrationTests {
    <span class=3D"hl-comment">// class body...</span>
}</pre>
<p><span class=3D"strong"><strong>Inheriting and overriding test property s=
ources</strong></span></p>
<p><code class=3D"literal">@TestPropertySource</code> supports boolean <cod=
e class=3D"literal">inheritLocations</code> and <code class=3D"literal">inh=
eritProperties</code>
attributes that denote whether resource locations for properties files and =
inlined
properties declared by superclasses should be <span class=3D"emphasis"><em>=
inherited</em></span>. The default value for both
flags is <code class=3D"literal">true</code>. This means that a test class =
inherits the locations and inlined
properties declared by any superclasses. Specifically, the locations and in=
lined
properties for a test class are appended to the locations and inlined prope=
rties declared
by superclasses. Thus, subclasses have the option of <span class=3D"emphasi=
s"><em>extending</em></span> the locations and
inlined properties. Note that properties that appear later will <span class=
=3D"emphasis"><em>shadow</em></span> (i.e..,
override) properties of the same name that appear earlier. In addition, the
aforementioned precedence rules apply for inherited test property sources a=
s well.</p>
<p>If the <code class=3D"literal">inheritLocations</code> or <code class=3D=
"literal">inheritProperties</code> attribute in <code class=3D"literal">@Te=
stPropertySource</code> is set
to <code class=3D"literal">false</code>, the locations or inlined propertie=
s, respectively, for the test class <span class=3D"emphasis"><em>shadow</em=
></span>
and effectively replace the configuration defined by superclasses.</p>
<p>In the following example, the <code class=3D"literal">ApplicationContext=
</code> for <code class=3D"literal">BaseTest</code> will be loaded using
only the <code class=3D"literal">"base.properties"</code> file as a test pr=
operty source. In contrast, the
<code class=3D"literal">ApplicationContext</code> for <code class=3D"litera=
l">ExtendedTest</code> will be loaded using the <code class=3D"literal">"ba=
se.properties"</code>
<span class=3D"strong"><strong>and</strong></span> <code class=3D"literal">=
"extended.properties"</code> files as test property source locations.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@TestPropertySource("base.properties")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTest {
    <span class=3D"hl-comment">// ...</span>
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@TestPropertySource=
("extended.properties")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTest <span class=3D"hl-keyword">extends</span> BaseTest {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>In the following example, the <code class=3D"literal">ApplicationContext=
</code> for <code class=3D"literal">BaseTest</code> will be loaded using on=
ly
the <span class=3D"emphasis"><em>inlined</em></span> <code class=3D"literal=
">key1</code> property. In contrast, the <code class=3D"literal">Applicatio=
nContext</code> for <code class=3D"literal">ExtendedTest</code> will be
loaded using the <span class=3D"emphasis"><em>inlined</em></span> <code cla=
ss=3D"literal">key1</code> and <code class=3D"literal">key2</code> properti=
es.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@TestPropertySource(properties =3D "key1 =3D value1")</span></em=
>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTest {
    <span class=3D"hl-comment">// ...</span>
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@TestPropertySource=
(properties =3D "key2 =3D value2")</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTest <span class=3D"hl-keyword">extends</span> BaseTest {
    <span class=3D"hl-comment">// ...</span>
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-web" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcon=
text-ctx-management-web"></a>Loading a WebApplicationContext</h4></div></di=
v></div>
<p>Spring 3.2 introduced support for loading a <code class=3D"literal">WebA=
pplicationContext</code> in integration
tests. To instruct the TestContext framework to load a <code class=3D"liter=
al">WebApplicationContext</code> instead
of a standard <code class=3D"literal">ApplicationContext</code>, simply ann=
otate the respective test class with
<code class=3D"literal">@WebAppConfiguration</code>.</p>
<p>The presence of <code class=3D"literal">@WebAppConfiguration</code> on y=
our test class instructs the TestContext
framework (TCF) that a <code class=3D"literal">WebApplicationContext</code>=
 (WAC) should be loaded for your
integration tests. In the background the TCF makes sure that a <code class=
=3D"literal">MockServletContext</code> is
created and supplied to your test=92s WAC. By default the base resource pat=
h for your
<code class=3D"literal">MockServletContext</code> will be set to <span clas=
s=3D"emphasis"><em>"src/main/webapp"</em></span>. This is interpreted as a =
path
relative to the root of your JVM (i.e., normally the path to your project).=
 If you=92re
familiar with the directory structure of a web application in a Maven proje=
ct, you=92ll
know that <span class=3D"emphasis"><em>"src/main/webapp"</em></span> is the=
 default location for the root of your WAR. If you
need to override this default, simply provide an alternate path to the
<code class=3D"literal">@WebAppConfiguration</code> annotation (e.g., <code=
 class=3D"literal">@WebAppConfiguration("src/test/webapp")</code>). If
you wish to reference a base resource path from the classpath instead of th=
e file
system, just use Spring=92s <span class=3D"emphasis"><em>classpath:</em></s=
pan> prefix.</p>
<p>Please note that Spring=92s testing support for <code class=3D"literal">=
WebApplicationContexts</code> is on par with its
support for standard <code class=3D"literal">ApplicationContexts</code>. Wh=
en testing with a <code class=3D"literal">WebApplicationContext</code>
you are free to declare XML configuration files, Groovy scripts, or <code c=
lass=3D"literal">@Configuration</code>
classes via <code class=3D"literal">@ContextConfiguration</code>. You are o=
f course also free to use any other test
annotations such as <code class=3D"literal">@ActiveProfiles</code>, <code c=
lass=3D"literal">@TestExecutionListeners</code>, <code class=3D"literal">@S=
ql</code>, <code class=3D"literal">@Rollback</code>,
etc.</p>
<p>The following examples demonstrate some of the various configuration opt=
ions for loading
a <code class=3D"literal">WebApplicationContext</code>.</p>
<p>
<b>Conventions.&nbsp;</b>
</p><pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=
=3D"color: gray">@RunWith(SpringRunner.class)</span></em>

<span class=3D"hl-comment">// defaults to "file:src/main/webapp"</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>

<span class=3D"hl-comment">// detects "WacTests-context.xml" in same packag=
e</span>
<span class=3D"hl-comment">// or static nested @Configuration class</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WacTests {
    <span class=3D"hl-comment">//...</span>
}</pre><p>
</p>
<p>The above example demonstrates the TestContext framework=92s support for=
 <span class=3D"emphasis"><em>convention over
configuration</em></span>. If you annotate a test class with <code class=3D=
"literal">@WebAppConfiguration</code> without
specifying a resource base path, the resource path will effectively default
to <span class=3D"emphasis"><em>"file:src/main/webapp"</em></span>. Similar=
ly, if you declare <code class=3D"literal">@ContextConfiguration</code> wit=
hout
specifying resource <code class=3D"literal">locations</code>, annotated <co=
de class=3D"literal">classes</code>, or context <code class=3D"literal">ini=
tializers</code>, Spring
will attempt to detect the presence of your configuration using conventions
(i.e., <span class=3D"emphasis"><em>"WacTests-context.xml"</em></span> in t=
he same package as the <code class=3D"literal">WacTests</code> class or sta=
tic
nested <code class=3D"literal">@Configuration</code> classes).</p>
<p>
<b>Default resource semantics.&nbsp;</b>
</p><pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=
=3D"color: gray">@RunWith(SpringRunner.class)</span></em>

<span class=3D"hl-comment">// file system resource</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n("webapp")</span></em>

<span class=3D"hl-comment">// classpath resource</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("/spring/test-servlet-config.xml")</span></em>

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WacTests {
    <span class=3D"hl-comment">//...</span>
}</pre><p>
</p>
<p>This example demonstrates how to explicitly declare a resource base path=
 with
<code class=3D"literal">@WebAppConfiguration</code> and an XML resource loc=
ation with <code class=3D"literal">@ContextConfiguration</code>. The
important thing to note here is the different semantics for paths with thes=
e two
annotations. By default, <code class=3D"literal">@WebAppConfiguration</code=
> resource paths are file system based;
whereas, <code class=3D"literal">@ContextConfiguration</code> resource loca=
tions are classpath based.</p>
<p>
<b>Explicit resource semantics.&nbsp;</b>
</p><pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=
=3D"color: gray">@RunWith(SpringRunner.class)</span></em>

<span class=3D"hl-comment">// classpath resource</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n("classpath:test-web-resources")</span></em>

<span class=3D"hl-comment">// file system resource</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("file:src/main/webapp/WEB-INF/servlet-config.xml")</span></em>

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WacTests {
    <span class=3D"hl-comment">//...</span>
}</pre><p>
</p>
<p>In this third example, we see that we can override the default resource =
semantics for
both annotations by specifying a Spring resource prefix. Contrast the comme=
nts in this
example with the previous example.</p>
<p>To provide comprehensive web testing support, Spring 3.2 introduced a
<code class=3D"literal">ServletTestExecutionListener</code> that is enabled=
 by default. When testing against a
<code class=3D"literal">WebApplicationContext</code> this <a class=3D"link"=
 href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework=
-reference/htmlsingle/#testcontext-key-abstractions" title=3D"15.5.1&nbsp;K=
ey abstractions">TestExecutionListener</a> sets
up default thread-local state via Spring Web=92s <code class=3D"literal">Re=
questContextHolder</code> before each test
method and creates a <code class=3D"literal">MockHttpServletRequest</code>,=
 <code class=3D"literal">MockHttpServletResponse</code>, and
<code class=3D"literal">ServletWebRequest</code> based on the base resource=
 path configured via
<code class=3D"literal">@WebAppConfiguration</code>. <code class=3D"literal=
">ServletTestExecutionListener</code> also ensures that the
<code class=3D"literal">MockHttpServletResponse</code> and <code class=3D"l=
iteral">ServletWebRequest</code> can be injected into the test
instance, and once the test is complete it cleans up thread-local state.</p=
>
<p>Once you have a <code class=3D"literal">WebApplicationContext</code> loa=
ded for your test you might find that you
need to interact with the web mocks&#8201;=97&#8201;for example, to set up =
your test fixture or to
perform assertions after invoking your web component. The following example=
 demonstrates
which mocks can be autowired into your test instance. Note that the
<code class=3D"literal">WebApplicationContext</code> and <code class=3D"lit=
eral">MockServletContext</code> are both cached across the test suite;
whereas, the other mocks are managed per test method by the
<code class=3D"literal">ServletTestExecutionListener</code>.</p>
<p>
<b>Injecting mocks.&nbsp;</b>
</p><pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=
=3D"color: gray">@WebAppConfiguration</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> WacTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    WebApplicationContext wac; <span class=3D"hl-comment">// cached</span>

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    MockServletContext servletContext; <span class=3D"hl-comment">// cached=
</span>

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    MockHttpSession session;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    MockHttpServletRequest request;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    MockHttpServletResponse response;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    ServletWebRequest webRequest;

    <span class=3D"hl-comment">//...</span>
}</pre><p>
</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-caching" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tes=
tcontext-ctx-management-caching"></a>Context caching</h4></div></div></div>
<p>Once the TestContext framework loads an <code class=3D"literal">Applicat=
ionContext</code> (or <code class=3D"literal">WebApplicationContext</code>)
for a test, that context will be cached and reused for <span class=3D"empha=
sis"><em>all</em></span> subsequent tests that
declare the same unique context configuration within the same test suite. T=
o understand
how caching works, it is important to understand what is meant by <span cla=
ss=3D"emphasis"><em>unique</em></span> and <span class=3D"emphasis"><em>tes=
t
suite</em></span>.</p>
<p>An <code class=3D"literal">ApplicationContext</code> can be <span class=
=3D"emphasis"><em>uniquely</em></span> identified by the combination of
configuration parameters that are used to load it. Consequently, the unique=
 combination
of configuration parameters are used to generate a <span class=3D"emphasis"=
><em>key</em></span> under which the context is
cached. The TestContext framework uses the following configuration paramete=
rs to build
the context cache key:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">locations</code> <span class=3D"emphasis"><em>(from=
 @ContextConfiguration)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">classes</code> <span class=3D"emphasis"><em>(from @=
ContextConfiguration)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">contextInitializerClasses</code> <span class=3D"emp=
hasis"><em>(from @ContextConfiguration)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">contextCustomizers</code> <span class=3D"emphasis">=
<em>(from ContextCustomizerFactory)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">contextLoader</code> <span class=3D"emphasis"><em>(=
from @ContextConfiguration)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">parent</code> <span class=3D"emphasis"><em>(from @C=
ontextHierarchy)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">activeProfiles</code> <span class=3D"emphasis"><em>=
(from @ActiveProfiles)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">propertySourceLocations</code> <span class=3D"empha=
sis"><em>(from @TestPropertySource)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">propertySourceProperties</code> <span class=3D"emph=
asis"><em>(from @TestPropertySource)</em></span>
</li><li class=3D"listitem">
<code class=3D"literal">resourceBasePath</code> <span class=3D"emphasis"><e=
m>(from @WebAppConfiguration)</em></span>
</li></ul></div>
<p>For example, if <code class=3D"literal">TestClassA</code> specifies <cod=
e class=3D"literal">{"app-config.xml", "test-config.xml"}</code> for the
<code class=3D"literal">locations</code> (or <code class=3D"literal">value<=
/code>) attribute of <code class=3D"literal">@ContextConfiguration</code>, =
the TestContext framework
will load the corresponding <code class=3D"literal">ApplicationContext</cod=
e> and store it in a <code class=3D"literal">static</code> context cache
under a key that is based solely on those locations. So if <code class=3D"l=
iteral">TestClassB</code> also defines
<code class=3D"literal">{"app-config.xml", "test-config.xml"}</code> for it=
s locations (either explicitly or
implicitly through inheritance) but does not define <code class=3D"literal"=
>@WebAppConfiguration</code>, a different
<code class=3D"literal">ContextLoader</code>, different active profiles, di=
fferent context initializers, different
test property sources, or a different parent context, then the same <code c=
lass=3D"literal">ApplicationContext</code>
will be shared by both test classes. This means that the setup cost for loa=
ding an
application context is incurred only once (per test suite), and subsequent =
test execution
is much faster.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: Test suites and forked processes"><tbody><=
tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25"><img alt=
=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/images/note.png"></td><th align=3D"left">Te=
st suites and forked processes</th></tr><tr><td align=3D"left" valign=3D"to=
p">
<p>The Spring TestContext framework stores application contexts in a <span =
class=3D"emphasis"><em>static</em></span> cache. This
means that the context is literally stored in a <code class=3D"literal">sta=
tic</code> variable. In other words, if
tests execute in separate processes the static cache will be cleared betwee=
n each test
execution, and this will effectively disable the caching mechanism.</p>
<p>To benefit from the caching mechanism, all tests must run within the sam=
e process or
test suite. This can be achieved by executing all tests as a group within a=
n IDE.
Similarly, when executing tests with a build framework such as Ant, Maven, =
or Gradle it
is important to make sure that the build framework does not <span class=3D"=
emphasis"><em>fork</em></span> between tests. For
example, if the
<a class=3D"ulink" href=3D"https://maven.apache.org/plugins/maven-surefire-=
plugin/test-mojo.html#forkMode" target=3D"_top">forkMode</a>
for the Maven Surefire plug-in is set to <code class=3D"literal">always</co=
de> or <code class=3D"literal">pertest</code>, the TestContext
framework will not be able to cache application contexts between test class=
es and the
build process will run significantly slower as a result.</p>
</td></tr></tbody></table></div>
<p>Since Spring Framework 4.3, the size of the context cache is bounded wit=
h a default
maximum size of 32. Whenever the maximum size is reached, a <span class=3D"=
emphasis"><em>least recently used</em></span> (LRU)
eviction policy is used to evict and close stale contexts. The maximum size=
 can be
configured from the command line or a build script by setting a JVM system =
property named
<code class=3D"literal">spring.test.context.cache.maxSize</code>. As an alt=
ernative, the same property can be set
programmatically via the <code class=3D"literal">SpringProperties</code> AP=
I.</p>
<p>Since having a large number of application contexts loaded within a give=
n test suite can
cause the suite to take an unnecessarily long time to execute, it is often =
beneficial to
know exactly how many contexts have been loaded and cached. To view the sta=
tistics for
the underlying context cache, simply set the log level for the
<code class=3D"literal">org.springframework.test.context.cache</code> loggi=
ng category to <code class=3D"literal">DEBUG</code>.</p>
<p>In the unlikely case that a test corrupts the application context and re=
quires reloading&#8201;=97&#8201;for example, by modifying a bean definitio=
n or the state of an application object&#8201;=97&#8201;you can annotate yo=
ur test class or test method with <code class=3D"literal">@DirtiesContext</=
code> (see the
discussion of <code class=3D"literal">@DirtiesContext</code> in <a class=3D=
"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fra=
mework-reference/htmlsingle/#integration-testing-annotations-spring" title=
=3D"15.4.1&nbsp;Spring Testing Annotations">Section&nbsp;15.4.1, =93Spring =
Testing Annotations=94</a>). This
instructs Spring to remove the context from the cache and rebuild the appli=
cation
context before executing the next test. Note that support for the <code cla=
ss=3D"literal">@DirtiesContext</code>
annotation is provided by the <code class=3D"literal">DirtiesContextBeforeM=
odesTestExecutionListener</code> and the
<code class=3D"literal">DirtiesContextTestExecutionListener</code> which ar=
e enabled by default.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-ctx-management-ctx-hierarchies" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#testcontext-ctx-management-ctx-hierarchies"></a>Context hierarchies</h=
4></div></div></div>
<p>When writing integration tests that rely on a loaded Spring <code class=
=3D"literal">ApplicationContext</code>, it is
often sufficient to test against a single context; however, there are times=
 when it is
beneficial or even necessary to test against a hierarchy of <code class=3D"=
literal">ApplicationContext</code>s. For
example, if you are developing a Spring MVC web application you will typica=
lly have a
root <code class=3D"literal">WebApplicationContext</code> loaded via Spring=
=92s <code class=3D"literal">ContextLoaderListener</code> and a child
<code class=3D"literal">WebApplicationContext</code> loaded via Spring=92s =
<code class=3D"literal">DispatcherServlet</code>. This results in a
parent-child context hierarchy where shared components and infrastructure c=
onfiguration
are declared in the root context and consumed in the child context by web-s=
pecific
components. Another use case can be found in Spring Batch applications wher=
e you often
have a parent context that provides configuration for shared batch infrastr=
ucture and a
child context for the configuration of a specific batch job.</p>
<p>Since Spring Framework 3.2.2, it is possible to write integration tests =
that use context
hierarchies by declaring context configuration via the <code class=3D"liter=
al">@ContextHierarchy</code> annotation,
either on an individual test class or within a test class hierarchy. If a c=
ontext
hierarchy is declared on multiple classes within a test class hierarchy it =
is also
possible to merge or override the context configuration for a specific, nam=
ed level in
the context hierarchy. When merging configuration for a given level in the =
hierarchy the
configuration resource type (i.e., XML configuration files or annotated cla=
sses) must be
consistent; otherwise, it is perfectly acceptable to have different levels =
in a context
hierarchy configured using different resource types.</p>
<p>The following JUnit 4 based examples demonstrate common configuration sc=
enarios for
integration tests that require the use of context hierarchies.</p>
<p><code class=3D"literal">ControllerIntegrationTests</code> represents a t=
ypical integration testing scenario for a
Spring MVC web application by declaring a context hierarchy consisting of t=
wo levels,
one for the <span class=3D"emphasis"><em>root</em></span> WebApplicationCon=
text (loaded using the <code class=3D"literal">TestAppConfig</code>
<code class=3D"literal">@Configuration</code> class) and one for the <span =
class=3D"emphasis"><em>dispatcher servlet</em></span> <code class=3D"litera=
l">WebApplicationContext</code>
(loaded using the <code class=3D"literal">WebConfig</code> <code class=3D"l=
iteral">@Configuration</code> class). The <code class=3D"literal">WebApplic=
ationContext</code> that
is <span class=3D"emphasis"><em>autowired</em></span> into the test instanc=
e is the one for the child context (i.e., the
lowest context in the hierarchy).</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextHierarchy({
    @ContextConfiguration(classes =3D TestAppConfig.class),
    @ContextConfiguration(classes =3D WebConfig.class)
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ControllerIntegrationTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> WebApplicationContext wac;

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>The following test classes define a context hierarchy within a test clas=
s hierarchy.
<code class=3D"literal">AbstractWebTests</code> declares the configuration =
for a root <code class=3D"literal">WebApplicationContext</code> in a
Spring-powered web application. Note, however, that <code class=3D"literal"=
>AbstractWebTests</code> does not declare
<code class=3D"literal">@ContextHierarchy</code>; consequently, subclasses =
of <code class=3D"literal">AbstractWebTests</code> can optionally
participate in a context hierarchy or simply follow the standard semantics =
for
<code class=3D"literal">@ContextConfiguration</code>. <code class=3D"litera=
l">SoapWebServiceTests</code> and <code class=3D"literal">RestWebServiceTes=
ts</code> both extend
<code class=3D"literal">AbstractWebTests</code> and define a context hierar=
chy via <code class=3D"literal">@ContextHierarchy</code>. The result is
that three application contexts will be loaded (one for each declaration of
<code class=3D"literal">@ContextConfiguration</code>), and the application =
context loaded based on the configuration
in <code class=3D"literal">AbstractWebTests</code> will be set as the paren=
t context for each of the contexts loaded
for the concrete subclasses.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("file:src/main/webapp/WEB-INF/applicationContext.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">abstrac=
t</span> <span class=3D"hl-keyword">class</span> AbstractWebTests {}

@ContextHierarchy(<em><span class=3D"hl-annotation" style=3D"color: gray">@=
ContextConfiguration("/spring/soap-ws-config.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SoapWebServiceTests <span class=3D"hl-keyword">extends</span> Abstrac=
tWebTests {}

@ContextHierarchy(<em><span class=3D"hl-annotation" style=3D"color: gray">@=
ContextConfiguration("/spring/rest-ws-config.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> RestWebServiceTests <span class=3D"hl-keyword">extends</span> Abstrac=
tWebTests {}</pre>
<p>The following classes demonstrate the use of <span class=3D"emphasis"><e=
m>named</em></span> hierarchy levels in order to
<span class=3D"emphasis"><em>merge</em></span> the configuration for specif=
ic levels in a context hierarchy. <code class=3D"literal">BaseTests</code>
defines two levels in the hierarchy, <code class=3D"literal">parent</code> =
and <code class=3D"literal">child</code>. <code class=3D"literal">ExtendedT=
ests</code> extends
<code class=3D"literal">BaseTests</code> and instructs the Spring TestConte=
xt Framework to merge the context
configuration for the <code class=3D"literal">child</code> hierarchy level,=
 simply by ensuring that the names
declared via the <code class=3D"literal">name</code> attribute in <code cla=
ss=3D"literal">@ContextConfiguration</code> are both <code class=3D"literal=
">"child"</code>. The
result is that three application contexts will be loaded: one for <code cla=
ss=3D"literal">"/app-config.xml"</code>,
one for <code class=3D"literal">"/user-config.xml"</code>, and one for <cod=
e class=3D"literal">{"/user-config.xml", "/order-config.xml"}</code>.
As with the previous example, the application context loaded from <code cla=
ss=3D"literal">"/app-config.xml"</code>
will be set as the parent context for the contexts loaded from <code class=
=3D"literal">"/user-config.xml"</code>
and <code class=3D"literal">{"/user-config.xml", "/order-config.xml"}</code=
>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextHierarchy({
    @ContextConfiguration(name =3D "parent", locations =3D "/app-config.xml=
"),
    @ContextConfiguration(name =3D "child", locations =3D "/user-config.xml=
")
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTests {}

<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextHierarchy(
    @ContextConfiguration(name =3D "child", locations =3D "/order-config.xm=
l")
)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTests <span class=3D"hl-keyword">extends</span> BaseTests {}<=
/pre>
<p>In contrast to the previous example, this example demonstrates how to <s=
pan class=3D"emphasis"><em>override</em></span> the
configuration for a given named level in a context hierarchy by setting the
<code class=3D"literal">inheritLocations</code> flag in <code class=3D"lite=
ral">@ContextConfiguration</code> to <code class=3D"literal">false</code>. =
Consequently, the
application context for <code class=3D"literal">ExtendedTests</code> will b=
e loaded only from
<code class=3D"literal">"/test-user-config.xml"</code> and will have its pa=
rent set to the context loaded from
<code class=3D"literal">"/app-config.xml"</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextHierarchy({
    @ContextConfiguration(name =3D "parent", locations =3D "/app-config.xml=
"),
    @ContextConfiguration(name =3D "child", locations =3D "/user-config.xml=
")
})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> BaseTests {}

<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextHierarchy(
    @ContextConfiguration(
        name =3D "child",
        locations =3D "/test-user-config.xml",
        inheritLocations =3D false
))</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExtendedTests <span class=3D"hl-keyword">extends</span> BaseTests {}<=
/pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: Dirtying a context within a context hierar=
chy"><tbody><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"=
25"><img alt=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RE=
LEASE/spring-framework-reference/htmlsingle/images/note.png"></td><th align=
=3D"left">Dirtying a context within a context hierarchy</th></tr><tr><td al=
ign=3D"left" valign=3D"top">
<p>If <code class=3D"literal">@DirtiesContext</code> is used in a test whos=
e context is configured as part of a context
hierarchy, the <code class=3D"literal">hierarchyMode</code> flag can be use=
d to control how the context cache is
cleared. For further details consult the discussion of <code class=3D"liter=
al">@DirtiesContext</code> in
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-annotations-spr=
ing" title=3D"15.4.1&nbsp;Spring Testing Annotations">Spring Testing Annota=
tions</a> and the
<code class=3D"literal">@DirtiesContext</code> javadocs.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-fixture-di" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-fix=
ture-di"></a>15.5.5&nbsp;Dependency injection of test fixtures</h3></div></=
div></div>
<p>When you use the <code class=3D"literal">DependencyInjectionTestExecutio=
nListener</code>&#8201;=97&#8201;which is configured by
default&#8201;=97&#8201;the dependencies of your test instances are <span c=
lass=3D"emphasis"><em>injected</em></span> from beans in the
application context that you configured with <code class=3D"literal">@Conte=
xtConfiguration</code>. You may use setter
injection, field injection, or both, depending on which annotations you cho=
ose and
whether you place them on setter methods or fields. For consistency with th=
e annotation
support introduced in Spring 2.5 and 3.0, you can use Spring=92s <code clas=
s=3D"literal">@Autowired</code> annotation
or the <code class=3D"literal">@Inject</code> annotation from JSR 330.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>The TestContext framework does not instrument the manner in which a test=
 instance is
instantiated. Thus the use of <code class=3D"literal">@Autowired</code> or =
<code class=3D"literal">@Inject</code> for constructors has no effect
for test classes.</p>
</td></tr></tbody></table></div>
<p>Because <code class=3D"literal">@Autowired</code> is used to perform <a =
class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sp=
ring-framework-reference/htmlsingle/#beans-factory-autowire" title=3D"7.4.5=
&nbsp;Autowiring collaborators"><span class=3D"emphasis"><em>autowiring by =
type</em></span></a>, if you have multiple bean definitions of the same typ=
e, you cannot rely on this
approach for those particular beans. In that case, you can use <code class=
=3D"literal">@Autowired</code> in
conjunction with <code class=3D"literal">@Qualifier</code>. As of Spring 3.=
0 you may also choose to use <code class=3D"literal">@Inject</code> in
conjunction with <code class=3D"literal">@Named</code>. Alternatively, if y=
our test class has access to its
<code class=3D"literal">ApplicationContext</code>, you can perform an expli=
cit lookup by using (for example) a call
to <code class=3D"literal">applicationContext.getBean("titleRepository")</c=
ode>.</p>
<p>If you do not want dependency injection applied to your test instances, =
simply do not
annotate fields or setter methods with <code class=3D"literal">@Autowired</=
code> or <code class=3D"literal">@Inject</code>. Alternatively, you can
disable dependency injection altogether by explicitly configuring your clas=
s with
<code class=3D"literal">@TestExecutionListeners</code> and omitting <code c=
lass=3D"literal">DependencyInjectionTestExecutionListener.class</code>
from the list of listeners.</p>
<p>Consider the scenario of testing a <code class=3D"literal">HibernateTitl=
eRepository</code> class, as outlined in the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-goals" title=3D=
"15.2&nbsp;Goals of Integration Testing">Goals</a> section. The next two co=
de listings demonstrate the
use of <code class=3D"literal">@Autowired</code> on fields and setter metho=
ds. The application context configuration
is presented after all sample code listings.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The dependency injection behavior in the following code listings is not =
specific to
JUnit 4. The same DI techniques can be used in conjunction with any testing=
 framework.</p>
<p>The following examples make calls to static assertion methods such as <c=
ode class=3D"literal">assertNotNull()</code>
but without prepending the call with <code class=3D"literal">Assert</code>.=
 In such cases, assume that the method was
properly imported through an <code class=3D"literal">import static</code> d=
eclaration that is not shown in the
example.</p>
</td></tr></tbody></table></div>
<p>The first code listing shows a JUnit 4 based implementation of the test =
class that uses
<code class=3D"literal">@Autowired</code> for field injection.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// specifies the Spring configuration to load fo=
r this test fixture</span>
<span class=3D"strong"><strong>@ContextConfiguration("repository-config.xml=
")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> HibernateTitleRepositoryTests {

    <span class=3D"hl-comment">// this instance will be dependency injected=
 by type</span>
    <span class=3D"strong"><strong>@Autowired</strong></span>
    <span class=3D"hl-keyword">private</span> HibernateTitleRepository titl=
eRepository;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> findById() {
        Title title =3D titleRepository.findById(<span class=3D"hl-keyword"=
>new</span> Long(<span class=3D"hl-number">10</span>));
        assertNotNull(title);
    }
}</pre>
<p>Alternatively, you can configure the class to use <code class=3D"literal=
">@Autowired</code> for setter injection as
seen below.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<span class=3D"hl-comment">// specifies the Spring configuration to load fo=
r this test fixture</span>
<span class=3D"strong"><strong>@ContextConfiguration("repository-config.xml=
")</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> HibernateTitleRepositoryTests {

    <span class=3D"hl-comment">// this instance will be dependency injected=
 by type</span>
    <span class=3D"hl-keyword">private</span> HibernateTitleRepository titl=
eRepository;

    <span class=3D"strong"><strong>@Autowired</strong></span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setTitleRepository(HibernateTitleRepository titleRepository) {
        <span class=3D"hl-keyword">this</span>.titleRepository =3D titleRep=
ository;
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> findById() {
        Title title =3D titleRepository.findById(<span class=3D"hl-keyword"=
>new</span> Long(<span class=3D"hl-number">10</span>));
        assertNotNull(title);
    }
}</pre>
<p>The preceding code listings use the same XML context file referenced by =
the
<code class=3D"literal">@ContextConfiguration</code> annotation (that is, <=
code class=3D"literal">repository-config.xml</code>), which looks like
this:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"</span=
><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this bean will be injected into the =
HibernateTitleRepositoryTests class --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"</span><span class=3D"strong"><strong>ti=
tleRepository</strong></span>" class=3D"<span class=3D"strong"><strong>com.=
foo.repository.hibernate.HibernateTitleRepository</strong></span>"&gt;
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"sessionFactory"</span> <span c=
lass=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"sessionFactory=
"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"sessionFactory"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"org.springframework.or=
m.hibernate5.LocalSessionFactoryBean"</span><span class=3D"hl-tag">&gt;</sp=
an>
        <span class=3D"hl-comment">&lt;!-- configuration elided for brevity=
 --&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you are extending from a Spring-provided test base class that happens=
 to use
<code class=3D"literal">@Autowired</code> on one of its setter methods, you=
 might have multiple beans of the affected
type defined in your application context: for example, multiple <code class=
=3D"literal">DataSource</code> beans. In
such a case, you can override the setter method and use the <code class=3D"=
literal">@Qualifier</code> annotation to
indicate a specific target bean as follows, but make sure to delegate to th=
e overridden
method in the superclass as well.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// ...</span>

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Override</span=
></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(<span class=3D"strong"><strong>@Qualifier("myDataSou=
rce")</strong></span> DataSource dataSource) {
        <span class=3D"strong"><strong>super</strong></span>.setDataSource(=
dataSource);
    }

<span class=3D"hl-comment">// ...</span></pre>
<p>The specified qualifier value indicates the specific <code class=3D"lite=
ral">DataSource</code> bean to inject,
narrowing the set of type matches to a specific bean. Its value is matched =
against
<code class=3D"literal">&lt;qualifier&gt;</code> declarations within the co=
rresponding <code class=3D"literal">&lt;bean&gt;</code> definitions. The be=
an name
is used as a fallback qualifier value, so you may effectively also point to=
 a specific
bean by name there (as shown above, assuming that "myDataSource" is the bea=
n id).</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-web-scoped-beans" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testconte=
xt-web-scoped-beans"></a>15.5.6&nbsp;Testing request and session scoped bea=
ns</h3></div></div></div>
<p><a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/#beans-factory-scopes-other" titl=
e=3D"7.5.4&nbsp;Request, session, global session, application, and WebSocke=
t scopes">Request and session scoped beans</a> have been supported by
Spring since the early years, and since Spring 3.2 it=92s a breeze to test =
your
request-scoped and session-scoped beans by following these steps.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Ensure that a <code class=3D"literal">WebApplicationContext</code> is loade=
d for your test by annotating your test
class with <code class=3D"literal">@WebAppConfiguration</code>.
</li><li class=3D"listitem">
Inject the mock request or session into your test instance and prepare your=
 test
fixture as appropriate.
</li><li class=3D"listitem">
Invoke your web component that you retrieved from the configured
<code class=3D"literal">WebApplicationContext</code> (i.e., via dependency =
injection).
</li><li class=3D"listitem">
Perform assertions against the mocks.
</li></ul></div>
<p>The following code snippet displays the XML configuration for a login us=
e case. Note
that the <code class=3D"literal">userService</code> bean has a dependency o=
n a request-scoped <code class=3D"literal">loginAction</code> bean.
Also, the <code class=3D"literal">LoginAction</code> is instantiated using =
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#expressions" title=3D"10.&nbsp;Spri=
ng Expression Language (SpEL)">SpEL expressions</a> that
retrieve the username and password from the current HTTP request. In our te=
st, we will
want to configure these request parameters via the mock managed by the Test=
Context
framework.</p>
<p>
<b>Request-scoped bean configuration.&nbsp;</b>
</p><pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</spa=
n>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"userService"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"com.example.SimpleUserService"</span>
            <span class=3D"hl-attribute">c:loginAction-ref</span>=3D<span c=
lass=3D"hl-value">"loginAction"</span><span class=3D"hl-tag"> /&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"loginAction"</span> <span class=3D"hl-at=
tribute">class</span>=3D<span class=3D"hl-value">"com.example.LoginAction"<=
/span>
            <span class=3D"hl-attribute">c:username</span>=3D<span class=3D=
"hl-value">"#{request.getParameter('user')}"</span>
            <span class=3D"hl-attribute">c:password</span>=3D<span class=3D=
"hl-value">"#{request.getParameter('pswd')}"</span>
            <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-v=
alue">"request"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;aop:scoped-proxy /&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre><p>
</p>
<p>In <code class=3D"literal">RequestScopedBeanTests</code> we inject both =
the <code class=3D"literal">UserService</code> (i.e., the subject under
test) and the <code class=3D"literal">MockHttpServletRequest</code> into ou=
r test instance. Within our
<code class=3D"literal">requestScope()</code> test method we set up our tes=
t fixture by setting request parameters in
the provided <code class=3D"literal">MockHttpServletRequest</code>. When th=
e <code class=3D"literal">loginUser()</code> method is invoked on our
<code class=3D"literal">userService</code> we are assured that the user ser=
vice has access to the request-scoped
<code class=3D"literal">loginAction</code> for the current <code class=3D"l=
iteral">MockHttpServletRequest</code> (i.e., the one we just set
parameters in). We can then perform assertions against the results based on=
 the known
inputs for the username and password.</p>
<p>
<b>Request-scoped bean test.&nbsp;</b>
</p><pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=
=3D"color: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> RequestScopedBeanTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em> UserService userService;
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em> MockHttpServletRequest request;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> requestScope() {

        request.setParameter(<span class=3D"hl-string">"user"</span>, <span=
 class=3D"hl-string">"enigma"</span>);
        request.setParameter(<span class=3D"hl-string">"pswd"</span>, <span=
 class=3D"hl-string">"$pr!ng"</span>);

        LoginResults results =3D userService.loginUser();

        <span class=3D"hl-comment">// assert results</span>
    }
}</pre><p>
</p>
<p>The following code snippet is similar to the one we saw above for a requ=
est-scoped bean;
however, this time the <code class=3D"literal">userService</code> bean has =
a dependency on a session-scoped
<code class=3D"literal">userPreferences</code> bean. Note that the <code cl=
ass=3D"literal">UserPreferences</code> bean is instantiated using a
SpEL expression that retrieves the <span class=3D"emphasis"><em>theme</em><=
/span> from the current HTTP session. In our test,
we will need to configure a theme in the mock session managed by the TestCo=
ntext
framework.</p>
<p>
<b>Session-scoped bean configuration.&nbsp;</b>
</p><pre class=3D"programlisting"><span class=3D"hl-tag">&lt;beans&gt;</spa=
n>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"userService"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"com.example.SimpleUserService"</span>
            <span class=3D"hl-attribute">c:userPreferences-ref</span>=3D<sp=
an class=3D"hl-value">"userPreferences"</span><span class=3D"hl-tag"> /&gt;=
</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"userPreferences"</span>
            <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-v=
alue">"com.example.UserPreferences"</span>
            <span class=3D"hl-attribute">c:theme</span>=3D<span class=3D"hl=
-value">"#{session.getAttribute('theme')}"</span>
            <span class=3D"hl-attribute">scope</span>=3D<span class=3D"hl-v=
alue">"session"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;aop:scoped-proxy /&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre><p>
</p>
<p>In <code class=3D"literal">SessionScopedBeanTests</code> we inject the <=
code class=3D"literal">UserService</code> and the <code class=3D"literal">M=
ockHttpSession</code> into
our test instance. Within our <code class=3D"literal">sessionScope()</code>=
 test method we set up our test fixture by
setting the expected "theme" attribute in the provided <code class=3D"liter=
al">MockHttpSession</code>. When the
<code class=3D"literal">processUserPreferences()</code> method is invoked o=
n our <code class=3D"literal">userService</code> we are assured that
the user service has access to the session-scoped <code class=3D"literal">u=
serPreferences</code> for the current
<code class=3D"literal">MockHttpSession</code>, and we can perform assertio=
ns against the results based on the
configured theme.</p>
<p>
<b>Session-scoped bean test.&nbsp;</b>
</p><pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=
=3D"color: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SessionScopedBeanTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em> UserService userService;
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em> MockHttpSession session;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> sessionScope() <span class=3D"hl-keyword">throws</span> Exception =
{

        session.setAttribute(<span class=3D"hl-string">"theme"</span>, <spa=
n class=3D"hl-string">"blue"</span>);

        Results results =3D userService.processUserPreferences();

        <span class=3D"hl-comment">// assert results</span>
    }
}</pre><p>
</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-tx" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx"></a>15.=
5.7&nbsp;Transaction management</h3></div></div></div>
<p>In the TestContext framework, transactions are managed by the
<code class=3D"literal">TransactionalTestExecutionListener</code> which is =
configured by default, even if you do not
explicitly declare <code class=3D"literal">@TestExecutionListeners</code> o=
n your test class. To enable support for
transactions, however, you must configure a <code class=3D"literal">Platfor=
mTransactionManager</code> bean in the
<code class=3D"literal">ApplicationContext</code> that is loaded via <code =
class=3D"literal">@ContextConfiguration</code> semantics (further
details are provided below). In addition, you must declare Spring=92s <code=
 class=3D"literal">@Transactional</code>
annotation either at the class or method level for your tests.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-test-managed-transactions" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#testcontext-tx-test-managed-transactions"></a>Test-managed transactions<=
/h4></div></div></div>
<p><span class=3D"emphasis"><em>Test-managed transactions</em></span> are t=
ransactions that are managed <span class=3D"emphasis"><em>declaratively</em=
></span> via the
<code class=3D"literal">TransactionalTestExecutionListener</code> or <span =
class=3D"emphasis"><em>programmatically</em></span> via <code class=3D"lite=
ral">TestTransaction</code> (see
below). Such transactions should not be confused with <span class=3D"emphas=
is"><em>Spring-managed transactions</em></span>
(i.e., those managed directly by Spring within the <code class=3D"literal">=
ApplicationContext</code> loaded for tests)
or <span class=3D"emphasis"><em>application-managed transactions</em></span=
> (i.e., those managed programmatically within
application code that is invoked via tests). Spring-managed and application=
-managed
transactions will typically participate in test-managed transactions; howev=
er, caution
should be taken if Spring-managed or application-managed transactions are c=
onfigured with
any <span class=3D"emphasis"><em>propagation</em></span> type other than <c=
ode class=3D"literal">REQUIRED</code> or <code class=3D"literal">SUPPORTS</=
code> (see the discussion on
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#tx-propagation" title=3D"17.5.7&nbs=
p;Transaction propagation">transaction propagation</a> for details).</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-enabling-transactions" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#t=
estcontext-tx-enabling-transactions"></a>Enabling and disabling transaction=
s</h4></div></div></div>
<p>Annotating a test method with <code class=3D"literal">@Transactional</co=
de> causes the test to be run within a
transaction that will, by default, be automatically rolled back after compl=
etion of the
test. If a test class is annotated with <code class=3D"literal">@Transactio=
nal</code>, each test method within that
class hierarchy will be run within a transaction. Test methods that are not=
 annotated
with <code class=3D"literal">@Transactional</code> (at the class or method =
level) will not be run within a
transaction. Furthermore, tests that are annotated with <code class=3D"lite=
ral">@Transactional</code> but have the
<code class=3D"literal">propagation</code> type set to <code class=3D"liter=
al">NOT_SUPPORTED</code> will not be run within a transaction.</p>
<p><span class=3D"emphasis"><em>Note that <a class=3D"link" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#testcontext-support-classes-junit4" title=3D"JUnit 4 support classes=
"><code class=3D"literal">AbstractTransactionalJUnit4SpringContextTests</co=
de></a> and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-support-classes-testng"=
 title=3D"TestNG support classes"><code class=3D"literal">AbstractTransacti=
onalTestNGSpringContextTests</code></a>
are preconfigured for transactional support at the class level.</em></span>=
</p>
<p>The following example demonstrates a common scenario for writing an inte=
gration test for
a Hibernate-based <code class=3D"literal">UserRepository</code>. As explain=
ed in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-tx-rollback-and-commit-=
behavior" title=3D"Transaction rollback and commit behavior">the section ca=
lled =93Transaction rollback and commit behavior=94</a>, there is no need t=
o clean up the
database after the <code class=3D"literal">createUser()</code> method is ex=
ecuted since any changes made to the
database will be automatically rolled back by the <code class=3D"literal">T=
ransactionalTestExecutionListener</code>.
See <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#testing-examples-petclinic" tit=
le=3D"15.7&nbsp;PetClinic Example">Section&nbsp;15.7, =93PetClinic Example=
=94</a> for an additional example.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on(classes =3D TestConfig.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> HibernateUserRepositoryTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    HibernateUserRepository repository;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    SessionFactory sessionFactory;

    JdbcTemplate jdbcTemplate;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> createUser() {
        <span class=3D"hl-comment">// track initial state in test database:=
</span>
        <span class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">=
int</span> count =3D countRowsInTable(<span class=3D"hl-string">"user"</spa=
n>);

        User user =3D <span class=3D"hl-keyword">new</span> User(...);
        repository.save(user);

        <span class=3D"hl-comment">// Manual flush is required to avoid fal=
se positive in test</span>
        sessionFactory.getCurrentSession().flush();
        assertNumUsers(count + <span class=3D"hl-number">1</span>);
    }

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
int</span> countRowsInTable(String tableName) {
        <span class=3D"hl-keyword">return</span> JdbcTestUtils.countRowsInT=
able(<span class=3D"hl-keyword">this</span>.jdbcTemplate, tableName);
    }

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
void</span> assertNumUsers(<span class=3D"hl-keyword">int</span> expected) =
{
        assertEquals(<span class=3D"hl-string">"Number of rows in the [user=
] table."</span>, expected, countRowsInTable(<span class=3D"hl-string">"use=
r"</span>));
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-rollback-and-commit-behavior" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#testcontext-tx-rollback-and-commit-behavior"></a>Transaction rollback=
 and commit behavior</h4></div></div></div>
<p>By default, test transactions will be automatically rolled back after co=
mpletion of the
test; however, transactional commit and rollback behavior can be configured=
 declaratively
via the <code class=3D"literal">@Commit</code> and <code class=3D"literal">=
@Rollback</code> annotations. See the corresponding entries in the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-annotations" ti=
tle=3D"15.4&nbsp;Annotations">annotation support</a> section for further de=
tails.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-programmatic-tx-mgt" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tes=
tcontext-tx-programmatic-tx-mgt"></a>Programmatic transaction management</h=
4></div></div></div>
<p>Since Spring Framework 4.1, it is possible to interact with test-managed=
 transactions
<span class=3D"emphasis"><em>programmatically</em></span> via the static me=
thods in <code class=3D"literal">TestTransaction</code>. For example,
<code class=3D"literal">TestTransaction</code> may be used within <span cla=
ss=3D"emphasis"><em>test</em></span> methods, <span class=3D"emphasis"><em>=
before</em></span> methods, and <span class=3D"emphasis"><em>after</em></sp=
an>
methods to start or end the current test-managed transaction or to configur=
e the current
test-managed transaction for rollback or commit. Support for <code class=3D=
"literal">TestTransaction</code> is
automatically available whenever the <code class=3D"literal">TransactionalT=
estExecutionListener</code> is enabled.</p>
<p>The following example demonstrates some of the features of <code class=
=3D"literal">TestTransaction</code>. Consult the
javadocs for <code class=3D"literal">TestTransaction</code> for further det=
ails.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@ContextConfiguration(classes =3D TestConfig.class)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ProgrammaticTransactionManagementTests <span class=3D"hl-keyword">ext=
ends</span>
        AbstractTransactionalJUnit4SpringContextTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> transactionalTest() {
        <span class=3D"hl-comment">// assert initial state in test database=
:</span>
        assertNumUsers(<span class=3D"hl-number">2</span>);

        deleteFromTables(<span class=3D"hl-string">"user"</span>);

        <span class=3D"hl-comment">// changes to the database will be commi=
tted!</span>
        TestTransaction.flagForCommit();
        TestTransaction.end();
        assertFalse(TestTransaction.isActive());
        assertNumUsers(<span class=3D"hl-number">0</span>);

        TestTransaction.start();
        <span class=3D"hl-comment">// perform other actions against the dat=
abase that will</span>
        <span class=3D"hl-comment">// be automatically rolled back after th=
e test completes...</span>
    }

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
void</span> assertNumUsers(<span class=3D"hl-keyword">int</span> expected) =
{
        assertEquals(<span class=3D"hl-string">"Number of rows in the [user=
] table."</span>, expected, countRowsInTable(<span class=3D"hl-string">"use=
r"</span>));
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-before-and-after-tx" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tes=
tcontext-tx-before-and-after-tx"></a>Executing code outside of a transactio=
n</h4></div></div></div>
<p>Occasionally you need to execute certain code before or after a transact=
ional test method
but outside the transactional context&#8201;=97&#8201;for example, to verif=
y the initial database state
prior to execution of your test or to verify expected transactional commit =
behavior after
test execution (if the test was configured to commit the transaction).
<code class=3D"literal">TransactionalTestExecutionListener</code> supports =
the <code class=3D"literal">@BeforeTransaction</code> and
<code class=3D"literal">@AfterTransaction</code> annotations exactly for su=
ch scenarios. Simply annotate any <code class=3D"literal">void</code>
method in a test class or any <code class=3D"literal">void</code> default m=
ethod in a test interface with one of these
annotations, and the <code class=3D"literal">TransactionalTestExecutionList=
ener</code> ensures that your <span class=3D"emphasis"><em>before
transaction method</em></span> or <span class=3D"emphasis"><em>after transa=
ction method</em></span> is executed at the appropriate time.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Any <span class=3D"emphasis"><em>before methods</em></span> (such as met=
hods annotated with JUnit 4=92s <code class=3D"literal">@Before</code>) and=
 any <span class=3D"emphasis"><em>after
methods</em></span> (such as methods annotated with JUnit 4=92s <code class=
=3D"literal">@After</code>) are executed <span class=3D"emphasis"><em>withi=
n</em></span> a
transaction. In addition, methods annotated with <code class=3D"literal">@B=
eforeTransaction</code> or
<code class=3D"literal">@AfterTransaction</code> are naturally not executed=
 for test methods that are not configured
to run within a transaction.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-mgr-config" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-=
tx-mgr-config"></a>Configuring a transaction manager</h4></div></div></div>
<p><code class=3D"literal">TransactionalTestExecutionListener</code> expect=
s a <code class=3D"literal">PlatformTransactionManager</code> bean to be
defined in the Spring <code class=3D"literal">ApplicationContext</code> for=
 the test. In case there are multiple
instances of <code class=3D"literal">PlatformTransactionManager</code> with=
in the test=92s <code class=3D"literal">ApplicationContext</code>, a
<span class=3D"emphasis"><em>qualifier</em></span> may be declared via <cod=
e class=3D"literal">@Transactional("myTxMgr")</code> or
<code class=3D"literal">@Transactional(transactionManager =3D "myTxMgr")</c=
ode>, or <code class=3D"literal">TransactionManagementConfigurer</code>
can be implemented by an <code class=3D"literal">@Configuration</code> clas=
s. Consult the javadocs for
<code class=3D"literal">TestContextTransactionUtils.retrieveTransactionMana=
ger()</code> for details on the algorithm
used to look up a transaction manager in the test=92s <code class=3D"litera=
l">ApplicationContext</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-tx-annotation-demo" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcon=
text-tx-annotation-demo"></a>Demonstration of all transaction-related annot=
ations</h4></div></div></div>
<p>The following JUnit 4 based example displays a fictitious integration te=
sting scenario
highlighting all transaction-related annotations. The example is <span clas=
s=3D"strong"><strong>not</strong></span> intended to
demonstrate best practices but rather to demonstrate how these annotations =
can be used.
Consult the <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#integration-testing-ann=
otations" title=3D"15.4&nbsp;Annotations">annotation support</a> section fo=
r further
information and configuration examples. <a class=3D"link" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#testcontext-executing-sql-declaratively-tx">Transaction management for=
 <code class=3D"literal">@Sql</code></a> contains an additional example usi=
ng <code class=3D"literal">@Sql</code> for
declarative SQL script execution with default transaction rollback semantic=
s.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"strong"><strong>@Transactional(transactionManager =3D "txMgr=
")</strong></span>
<span class=3D"strong"><strong>@Commit</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> FictitiousTransactionalTest {

    <span class=3D"strong"><strong>@BeforeTransaction</strong></span>
    <span class=3D"hl-keyword">void</span> verifyInitialDatabaseState() {
        <span class=3D"hl-comment">// logic to verify the initial state bef=
ore a transaction is started</span>
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setUpTestDataWithinTransaction() {
        <span class=3D"hl-comment">// set up test data within the transacti=
on</span>
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-comment">// overrides the class-level @Commit setting=
</span>
    <span class=3D"strong"><strong>@Rollback</strong></span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> modifyDatabaseWithinTransaction() {
        <span class=3D"hl-comment">// logic which uses the test data and mo=
difies database state</span>
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@After</span></=
em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> tearDownWithinTransaction() {
        <span class=3D"hl-comment">// execute "tear down" logic within the =
transaction</span>
    }

    <span class=3D"strong"><strong>@AfterTransaction</strong></span>
    <span class=3D"hl-keyword">void</span> verifyFinalDatabaseState() {
        <span class=3D"hl-comment">// logic to verify the final state after=
 transaction has rolled back</span>
    }

}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note: Avoid false positives when testing ORM cod=
e"><tbody><tr><td rowspan=3D"2" align=3D"center" valign=3D"top" width=3D"25=
"><img alt=3D"[Note]" src=3D"https://docs.spring.io/spring/docs/4.3.21.RELE=
ASE/spring-framework-reference/htmlsingle/images/note.png"></td><th align=
=3D"left"><a name=3D"testcontext-tx-false-positives" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
testcontext-tx-false-positives"></a>Avoid false positives when testing ORM =
code</th></tr><tr><td align=3D"left" valign=3D"top">
<p>When you test application code that manipulates the state of a Hibernate=
 session or JPA
persistence context, make sure to <span class=3D"emphasis"><em>flush</em></=
span> the underlying unit of work within test
methods that execute that code. Failing to flush the underlying unit of wor=
k can produce
<span class=3D"emphasis"><em>false positives</em></span>: your test may pas=
s, but the same code throws an exception in a live,
production environment. In the following Hibernate-based example test case,=
 one method
demonstrates a false positive, and the other method correctly exposes the r=
esults of
flushing the session. Note that this applies to any ORM frameworks that mai=
ntain an
in-memory <span class=3D"emphasis"><em>unit of work</em></span>.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// ...</span>

<em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</span></=
em>
SessionFactory sessionFactory;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em> <=
span class=3D"hl-comment">// no expected exception!</span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> falsePositive() {
    updateEntityInHibernateSession();
    <span class=3D"hl-comment">// False positive: an exception will be thro=
wn once the Hibernate</span>
    <span class=3D"hl-comment">// Session is finally flushed (i.e., in prod=
uction code)</span>
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test(expected =3D =
...)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> updateWithSessionFlush() {
    updateEntityInHibernateSession();
    <span class=3D"hl-comment">// Manual flush is required to avoid false p=
ositive in test</span>
    sessionFactory.getCurrentSession().flush();
}

<span class=3D"hl-comment">// ...</span></pre>
<p>Or for JPA:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// ...</span>

<em><span class=3D"hl-annotation" style=3D"color: gray">@PersistenceContext=
</span></em>
EntityManager entityManager;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></em> <=
span class=3D"hl-comment">// no expected exception!</span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> falsePositive() {
    updateEntityInJpaPersistenceContext();
    <span class=3D"hl-comment">// False positive: an exception will be thro=
wn once the JPA</span>
    <span class=3D"hl-comment">// EntityManager is finally flushed (i.e., i=
n production code)</span>
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Test(expected =3D =
...)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> updateWithEntityManagerFlush() {
    updateEntityInJpaPersistenceContext();
    <span class=3D"hl-comment">// Manual flush is required to avoid false p=
ositive in test</span>
    entityManager.flush();
}

<span class=3D"hl-comment">// ...</span></pre>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-executing-sql" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-=
executing-sql"></a>15.5.8&nbsp;Executing SQL scripts</h3></div></div></div>
<p>When writing integration tests against a relational database, it is ofte=
n beneficial
to execute SQL scripts to modify the database schema or insert test data in=
to tables.
The <code class=3D"literal">spring-jdbc</code> module provides support for =
<span class=3D"emphasis"><em>initializing</em></span> an embedded or existi=
ng
database by executing SQL scripts when the Spring <code class=3D"literal">A=
pplicationContext</code> is loaded. See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc-embedded-database-support" tit=
le=3D"19.8&nbsp;Embedded database support">Section&nbsp;19.8, =93Embedded d=
atabase support=94</a> and <a class=3D"xref" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-emb=
edded-database-dao-testing" title=3D"19.8.5&nbsp;Testing data access logic =
with an embedded database">Section&nbsp;19.8.5, =93Testing data access logi=
c with an embedded database=94</a> for
details.</p>
<p>Although it is very useful to initialize a database for testing <span cl=
ass=3D"emphasis"><em>once</em></span> when the
<code class=3D"literal">ApplicationContext</code> is loaded, sometimes it i=
s essential to be able to modify the
database <span class=3D"emphasis"><em>during</em></span> integration tests.=
 The following sections explain how to execute SQL
scripts programmatically and declaratively during integration tests.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-executing-sql-programmatically" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#testcontext-executing-sql-programmatically"></a>Executing SQL scripts =
programmatically</h4></div></div></div>
<p>Spring provides the following options for executing SQL scripts programm=
atically within
integration test methods.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">org.springframework.jdbc.datasource.init.ScriptUtil=
s</code>
</li><li class=3D"listitem">
<code class=3D"literal">org.springframework.jdbc.datasource.init.ResourceDa=
tabasePopulator</code>
</li><li class=3D"listitem">
<code class=3D"literal">org.springframework.test.context.junit4.AbstractTra=
nsactionalJUnit4SpringContextTests</code>
</li><li class=3D"listitem">
<code class=3D"literal">org.springframework.test.context.testng.AbstractTra=
nsactionalTestNGSpringContextTests</code>
</li></ul></div>
<p><code class=3D"literal">ScriptUtils</code> provides a collection of stat=
ic utility methods for working with SQL scripts
and is mainly intended for internal use within the framework. However, if y=
ou require
full control over how SQL scripts are parsed and executed, <code class=3D"l=
iteral">ScriptUtils</code> may suit your
needs better than some of the other alternatives described below. Consult t=
he javadocs for
individual methods in <code class=3D"literal">ScriptUtils</code> for furthe=
r details.</p>
<p><code class=3D"literal">ResourceDatabasePopulator</code> provides a simp=
le object-based API for programmatically
populating, initializing, or cleaning up a database using SQL scripts defin=
ed in
external resources. <code class=3D"literal">ResourceDatabasePopulator</code=
> provides options for configuring the
character encoding, statement separator, comment delimiters, and error hand=
ling flags
used when parsing and executing the scripts, and each of the configuration =
options has
a reasonable default value. Consult the javadocs for details on default val=
ues. To
execute the scripts configured in a <code class=3D"literal">ResourceDatabas=
ePopulator</code>, you can invoke either
the <code class=3D"literal">populate(Connection)</code> method to execute t=
he populator against a
<code class=3D"literal">java.sql.Connection</code> or the <code class=3D"li=
teral">execute(DataSource)</code> method to execute the populator
against a <code class=3D"literal">javax.sql.DataSource</code>. The followin=
g example specifies SQL scripts for a test
schema and test data, sets the statement separator to <code class=3D"litera=
l">"@@"</code>, and then executes the
scripts against a <code class=3D"literal">DataSource</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> databaseTest {
    ResourceDatabasePopulator populator =3D <span class=3D"hl-keyword">new<=
/span> ResourceDatabasePopulator();
    populator.addScripts(
            <span class=3D"hl-keyword">new</span> ClassPathResource(<span c=
lass=3D"hl-string">"test-schema.sql"</span>),
            <span class=3D"hl-keyword">new</span> ClassPathResource(<span c=
lass=3D"hl-string">"test-data.sql"</span>));
    populator.setSeparator(<span class=3D"hl-string">"@@"</span>);
    populator.execute(<span class=3D"hl-keyword">this</span>.dataSource);
    <span class=3D"hl-comment">// execute code that uses the test schema an=
d data</span>
}</pre>
<p>Note that <code class=3D"literal">ResourceDatabasePopulator</code> inter=
nally delegates to <code class=3D"literal">ScriptUtils</code> for parsing
and executing SQL scripts. Similarly, the <code class=3D"literal">executeSq=
lScript(..)</code> methods in
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-support-classes-junit4"=
 title=3D"JUnit 4 support classes"><code class=3D"literal">AbstractTransact=
ionalJUnit4SpringContextTests</code></a> and
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-support-classes-testng"=
 title=3D"TestNG support classes"><code class=3D"literal">AbstractTransacti=
onalTestNGSpringContextTests</code></a>
internally use a <code class=3D"literal">ResourceDatabasePopulator</code> f=
or executing SQL scripts. Consult the javadocs
for the various <code class=3D"literal">executeSqlScript(..)</code> methods=
 for further details.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-executing-sql-declaratively" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#testcontext-executing-sql-declaratively"></a>Executing SQL scripts declar=
atively with @Sql</h4></div></div></div>
<p>In addition to the aforementioned mechanisms for executing SQL scripts
<span class=3D"emphasis"><em>programmatically</em></span>, SQL scripts can =
also be configured <span class=3D"emphasis"><em>declaratively</em></span> i=
n the Spring
TestContext Framework. Specifically, the <code class=3D"literal">@Sql</code=
> annotation can be declared on a test
class or test method to configure the resource paths to SQL scripts that sh=
ould be
executed against a given database either before or after an integration tes=
t method. Note
that method-level declarations override class-level declarations and that s=
upport for
<code class=3D"literal">@Sql</code> is provided by the <code class=3D"liter=
al">SqlScriptsTestExecutionListener</code> which is enabled by default.</p>
<p><span class=3D"strong"><strong>Path resource semantics</strong></span></=
p>
<p>Each path will be interpreted as a Spring <code class=3D"literal">Resour=
ce</code>. A plain path&#8201;=97&#8201;for example,
<code class=3D"literal">"schema.sql"</code>&#8201;=97&#8201;will be treated=
 as a classpath resource that is <span class=3D"emphasis"><em>relative</em>=
</span> to the
package in which the test class is defined. A path starting with a slash wi=
ll be treated
as an <span class=3D"emphasis"><em>absolute</em></span> classpath resource,=
 for example: <code class=3D"literal">"/org/example/schema.sql"</code>. A p=
ath
which references a URL (e.g., a path prefixed with <code class=3D"literal">=
classpath:</code>, <code class=3D"literal">file:</code>, <code class=3D"lit=
eral">http:</code>, etc.)
will be loaded using the specified resource protocol.</p>
<p>The following example demonstrates how to use <code class=3D"literal">@S=
ql</code> at the class level and at the method
level within a JUnit 4 based integration test class.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Sql("/test-schema.=
sql")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DatabaseTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> emptySchemaTest {
        <span class=3D"hl-comment">// execute code that uses the test schem=
a without any test data</span>
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Sql({"/test-sc=
hema.sql", "/test-user-data.sql"})</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> userTest {
        <span class=3D"hl-comment">// execute code that uses the test schem=
a and test data</span>
    }
}</pre>
<p><span class=3D"strong"><strong>Default script detection</strong></span><=
/p>
<p>If no SQL scripts are specified, an attempt will be made to detect a <co=
de class=3D"literal">default</code> script
depending on where <code class=3D"literal">@Sql</code> is declared. If a de=
fault cannot be detected, an
<code class=3D"literal">IllegalStateException</code> will be thrown.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>class-level declaration</em></span>: if the an=
notated test class is <code class=3D"literal">com.example.MyTest</code>, th=
e
corresponding default script is <code class=3D"literal">"classpath:com/exam=
ple/MyTest.sql"</code>.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>method-level declaration</em></span>: if the a=
nnotated test method is named <code class=3D"literal">testMethod()</code> a=
nd is
defined in the class <code class=3D"literal">com.example.MyTest</code>, the=
 corresponding default script is
<code class=3D"literal">"classpath:com/example/MyTest.testMethod.sql"</code=
>.
</li></ul></div>
<p><span class=3D"strong"><strong>Declaring multiple <code class=3D"literal=
">@Sql</code> sets</strong></span></p>
<p>If multiple sets of SQL scripts need to be configured for a given test c=
lass or test
method but with different syntax configuration, different error handling ru=
les, or
different execution phases per set, it is possible to declare multiple inst=
ances of
<code class=3D"literal">@Sql</code>. With Java 8, <code class=3D"literal">@=
Sql</code> can be used as a <span class=3D"emphasis"><em>repeatable</em></s=
pan> annotation. Otherwise, the
<code class=3D"literal">@SqlGroup</code> annotation can be used as an expli=
cit container for declaring multiple
instances of <code class=3D"literal">@Sql</code>.</p>
<p>The following example demonstrates the use of <code class=3D"literal">@S=
ql</code> as a repeatable annotation using
Java 8. In this scenario the <code class=3D"literal">test-schema.sql</code>=
 script uses a different syntax for
single-line comments.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Sql(scripts =3D "/=
test-schema.sql", config =3D @SqlConfig(commentPrefix =3D "`"))</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Sql("/test-user-da=
ta.sql")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> userTest {
    <span class=3D"hl-comment">// execute code that uses the test schema an=
d test data</span>
}</pre>
<p>The following example is identical to the above except that the <code cl=
ass=3D"literal">@Sql</code> declarations are
grouped together within <code class=3D"literal">@SqlGroup</code> for compat=
ibility with Java 6 and Java 7.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@SqlGroup({
    @Sql(scripts =3D "/test-schema.sql", config =3D @SqlConfig(commentPrefi=
x =3D "`")),
    @Sql("/test-user-data.sql")
)}</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> userTest {
    <span class=3D"hl-comment">// execute code that uses the test schema an=
d test data</span>
}</pre>
<p><span class=3D"strong"><strong>Script execution phases</strong></span></=
p>
<p>By default, SQL scripts will be executed <span class=3D"emphasis"><em>be=
fore</em></span> the corresponding test method. However,
if a particular set of scripts needs to be executed <span class=3D"emphasis=
"><em>after</em></span> the test method&#8201;=97&#8201;for
example, to clean up database state&#8201;=97&#8201;the <code class=3D"lite=
ral">executionPhase</code> attribute in <code class=3D"literal">@Sql</code>=
 can be
used as seen in the following example. Note that <code class=3D"literal">IS=
OLATED</code> and <code class=3D"literal">AFTER_TEST_METHOD</code> are
statically imported from <code class=3D"literal">Sql.TransactionMode</code>=
 and <code class=3D"literal">Sql.ExecutionPhase</code> respectively.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Test</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Sql(
    scripts =3D "create-test-data.sql",
    config =3D @SqlConfig(transactionMode =3D ISOLATED)
)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Sql(
    scripts =3D "delete-test-data.sql",
    config =3D @SqlConfig(transactionMode =3D ISOLATED),
    executionPhase =3D AFTER_TEST_METHOD
)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> userTest {
    <span class=3D"hl-comment">// execute code that needs the test data to =
be committed</span>
    <span class=3D"hl-comment">// to the database outside of the test's tra=
nsaction</span>
}</pre>
<p><span class=3D"strong"><strong>Script configuration with <code class=3D"=
literal">@SqlConfig</code></strong></span></p>
<p>Configuration for script parsing and error handling can be configured vi=
a the
<code class=3D"literal">@SqlConfig</code> annotation. When declared as a cl=
ass-level annotation on an integration test
class, <code class=3D"literal">@SqlConfig</code> serves as <span class=3D"e=
mphasis"><em>global</em></span> configuration for all SQL scripts within th=
e test
class hierarchy. When declared directly via the <code class=3D"literal">con=
fig</code> attribute of the <code class=3D"literal">@Sql</code>
annotation, <code class=3D"literal">@SqlConfig</code> serves as <span class=
=3D"emphasis"><em>local</em></span> configuration for the SQL scripts decla=
red
within the enclosing <code class=3D"literal">@Sql</code> annotation. Every =
attribute in <code class=3D"literal">@SqlConfig</code> has an implicit
default value which is documented in the javadocs of the corresponding attr=
ibute. Due to
the rules defined for annotation attributes in the Java Language Specificat=
ion, it is
unfortunately not possible to assign a value of <code class=3D"literal">nul=
l</code> to an annotation attribute. Thus,
in order to support overrides of inherited global configuration, <code clas=
s=3D"literal">@SqlConfig</code> attributes
have an explicit default value of either <code class=3D"literal">""</code> =
for Strings or <code class=3D"literal">DEFAULT</code> for Enums. This
approach allows local declarations of <code class=3D"literal">@SqlConfig</c=
ode> to selectively override individual
attributes from global declarations of <code class=3D"literal">@SqlConfig</=
code> by providing a value other than <code class=3D"literal">""</code>
or <code class=3D"literal">DEFAULT</code>. Global <code class=3D"literal">@=
SqlConfig</code> attributes are inherited whenever local <code class=3D"lit=
eral">@SqlConfig</code>
attributes do not supply an explicit value other than <code class=3D"litera=
l">""</code> or <code class=3D"literal">DEFAULT</code>. Explicit <span clas=
s=3D"emphasis"><em>local</em></span>
configuration therefore overrides <span class=3D"emphasis"><em>global</em><=
/span> configuration.</p>
<p>The configuration options provided by <code class=3D"literal">@Sql</code=
> and <code class=3D"literal">@SqlConfig</code> are equivalent to those
supported by <code class=3D"literal">ScriptUtils</code> and <code class=3D"=
literal">ResourceDatabasePopulator</code> but are a superset of those
provided by the <code class=3D"literal">&lt;jdbc:initialize-database/&gt;</=
code> XML namespace element. Consult the javadocs
of individual attributes in <code class=3D"literal">@Sql</code> and <code c=
lass=3D"literal">@SqlConfig</code> for details.</p>
<p><a name=3D"testcontext-executing-sql-declaratively-tx" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#testcontext-executing-sql-declaratively-tx"></a><span class=3D"strong"=
><strong>Transaction management for <code class=3D"literal">@Sql</code></st=
rong></span></p>
<p>By default, the <code class=3D"literal">SqlScriptsTestExecutionListener<=
/code> will infer the desired transaction
semantics for scripts configured via <code class=3D"literal">@Sql</code>. S=
pecifically, SQL scripts will be executed
without a transaction, within an existing Spring-managed transaction&#8201;=
=97&#8201;for example, a
transaction managed by the <code class=3D"literal">TransactionalTestExecuti=
onListener</code> for a test annotated with
<code class=3D"literal">@Transactional</code>&#8201;=97&#8201;or within an =
isolated transaction, depending on the configured value
of the <code class=3D"literal">transactionMode</code> attribute in <code cl=
ass=3D"literal">@SqlConfig</code> and the presence of a
<code class=3D"literal">PlatformTransactionManager</code> in the test=92s <=
code class=3D"literal">ApplicationContext</code>. As a bare minimum
however, a <code class=3D"literal">javax.sql.DataSource</code> must be pres=
ent in the test=92s <code class=3D"literal">ApplicationContext</code>.</p>
<p>If the algorithms used by <code class=3D"literal">SqlScriptsTestExecutio=
nListener</code> to detect a <code class=3D"literal">DataSource</code> and
<code class=3D"literal">PlatformTransactionManager</code> and infer the tra=
nsaction semantics do not suit your needs,
you may specify explicit names via the <code class=3D"literal">dataSource</=
code> and <code class=3D"literal">transactionManager</code> attributes
of <code class=3D"literal">@SqlConfig</code>. Furthermore, the transaction =
propagation behavior can be controlled via
the <code class=3D"literal">transactionMode</code> attribute of <code class=
=3D"literal">@SqlConfig</code>&#8201;=97&#8201;for example, if scripts shou=
ld be
executed in an isolated transaction. Although a thorough discussion of all =
supported
options for transaction management with <code class=3D"literal">@Sql</code>=
 is beyond the scope of this reference
manual, the javadocs for <code class=3D"literal">@SqlConfig</code> and <cod=
e class=3D"literal">SqlScriptsTestExecutionListener</code> provide
detailed information, and the following example demonstrates a typical test=
ing scenario
using JUnit 4 and transactional tests with <code class=3D"literal">@Sql</co=
de>. Note that there is no need to clean up
the database after the <code class=3D"literal">usersTest()</code> method is=
 executed since any changes made to the
database (either within the test method or within the <code class=3D"litera=
l">/test-data.sql</code> script) will
be automatically rolled back by the <code class=3D"literal">TransactionalTe=
stExecutionListener</code> (see
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#testcontext-tx" title=3D"15.5.7&nbs=
p;Transaction management">transaction management</a> for details).</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on(classes =3D TestDatabaseConfig.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional</spa=
n></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> TransactionalSqlScriptsTests {

    <span class=3D"hl-keyword">protected</span> JdbcTemplate jdbcTemplate;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Sql("/test-dat=
a.sql")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> usersTest() {
        <span class=3D"hl-comment">// verify state in test database:</span>
        assertNumUsers(<span class=3D"hl-number">2</span>);
        <span class=3D"hl-comment">// execute code that uses the test data.=
..</span>
    }

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
int</span> countRowsInTable(String tableName) {
        <span class=3D"hl-keyword">return</span> JdbcTestUtils.countRowsInT=
able(<span class=3D"hl-keyword">this</span>.jdbcTemplate, tableName);
    }

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
void</span> assertNumUsers(<span class=3D"hl-keyword">int</span> expected) =
{
        assertEquals(<span class=3D"hl-string">"Number of rows in the [user=
] table."</span>, expected, countRowsInTable(<span class=3D"hl-string">"use=
r"</span>));
    }
}</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"testcontext-support-classes" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontex=
t-support-classes"></a>15.5.9&nbsp;TestContext Framework support classes</h=
3></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-junit4-runner" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-=
junit4-runner"></a>Spring JUnit 4 Runner</h4></div></div></div>
<p>The <span class=3D"emphasis"><em>Spring TestContext Framework</em></span=
> offers full integration with JUnit 4 through a
custom runner (supported on JUnit 4.12 or higher). By annotating test class=
es with
<code class=3D"literal">@RunWith(SpringJUnit4ClassRunner.class)</code> or t=
he shorter <code class=3D"literal">@RunWith(SpringRunner.class)</code>
variant, developers can implement standard JUnit 4 based unit and integrati=
on tests and
simultaneously reap the benefits of the TestContext framework such as suppo=
rt for loading
application contexts, dependency injection of test instances, transactional=
 test method
execution, and so on. If you would like to use the Spring TestContext Frame=
work with an
alternative runner such as JUnit 4=92s <code class=3D"literal">Parameterize=
d</code> or third-party runners such as the
<code class=3D"literal">MockitoJUnitRunner</code>, you may optionally use <=
a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/=
spring-framework-reference/htmlsingle/#testcontext-junit4-rules" title=3D"S=
pring JUnit 4 Rules">Spring=92s support
for JUnit rules</a> instead.</p>
<p>The following code listing displays the minimal requirements for configu=
ring a test class
to run with the custom Spring <code class=3D"literal">Runner</code>. <code =
class=3D"literal">@TestExecutionListeners</code> is configured with an
empty list in order to disable the default listeners, which otherwise would=
 require an
<code class=3D"literal">ApplicationContext</code> to be configured through =
<code class=3D"literal">@ContextConfiguration</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@TestExecutionListe=
ners({})</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleTest {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> testMethod() {
        <span class=3D"hl-comment">// execute test logic...</span>
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-junit4-rules" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-j=
unit4-rules"></a>Spring JUnit 4 Rules</h4></div></div></div>
<p>The <code class=3D"literal">org.springframework.test.context.junit4.rule=
s</code> package provides the following JUnit
4 rules (supported on JUnit 4.12 or higher).</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">SpringClassRule</code>
</li><li class=3D"listitem">
<code class=3D"literal">SpringMethodRule</code>
</li></ul></div>
<p><code class=3D"literal">SpringClassRule</code> is a JUnit <code class=3D=
"literal">TestRule</code> that supports <span class=3D"emphasis"><em>class-=
level</em></span> features of the
<span class=3D"emphasis"><em>Spring TestContext Framework</em></span>; wher=
eas, <code class=3D"literal">SpringMethodRule</code> is a JUnit <code class=
=3D"literal">MethodRule</code> that
supports instance-level and method-level features of the <span class=3D"emp=
hasis"><em>Spring TestContext Framework</em></span>.</p>
<p>In contrast to the <code class=3D"literal">SpringRunner</code>, Spring=
=92s rule-based JUnit support has the advantage
that it is independent of any <code class=3D"literal">org.junit.runner.Runn=
er</code> implementation and can therefore
be combined with existing alternative runners like JUnit 4=92s <code class=
=3D"literal">Parameterized</code> or third-party
runners such as the <code class=3D"literal">MockitoJUnitRunner</code>.</p>
<p>In order to support the full functionality of the TestContext framework,=
 a
<code class=3D"literal">SpringClassRule</code> must be combined with a <cod=
e class=3D"literal">SpringMethodRule</code>. The following example
demonstrates the proper way to declare these rules in an integration test.<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// Optionally spec=
ify a non-Spring Runner via @RunWith(...)</span>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> IntegrationTest {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@ClassRule</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">final</span> SpringClassRule springCl=
assRule =3D <span class=3D"hl-keyword">new</span> SpringClassRule();

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Rule</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">fin=
al</span> SpringMethodRule springMethodRule =3D <span class=3D"hl-keyword">=
new</span> SpringMethodRule();

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> testMethod() {
        <span class=3D"hl-comment">// execute test logic...</span>
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-support-classes-junit4" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tes=
tcontext-support-classes-junit4"></a>JUnit 4 support classes</h4></div></di=
v></div>
<p>The <code class=3D"literal">org.springframework.test.context.junit4</cod=
e> package provides the following support
classes for JUnit 4 based test cases (supported on JUnit 4.12 or higher).</=
p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">AbstractJUnit4SpringContextTests</code>
</li><li class=3D"listitem">
<code class=3D"literal">AbstractTransactionalJUnit4SpringContextTests</code=
>
</li></ul></div>
<p><code class=3D"literal">AbstractJUnit4SpringContextTests</code> is an ab=
stract base test class that integrates the
<span class=3D"emphasis"><em>Spring TestContext Framework</em></span> with =
explicit <code class=3D"literal">ApplicationContext</code> testing support =
in
a JUnit 4 environment. When you extend <code class=3D"literal">AbstractJUni=
t4SpringContextTests</code>, you can
access a <code class=3D"literal">protected</code> <code class=3D"literal">a=
pplicationContext</code> instance variable that can be used to perform
explicit bean lookups or to test the state of the context as a whole.</p>
<p><code class=3D"literal">AbstractTransactionalJUnit4SpringContextTests</c=
ode> is an abstract <span class=3D"emphasis"><em>transactional</em></span> =
extension
of <code class=3D"literal">AbstractJUnit4SpringContextTests</code> that add=
s some convenience functionality for JDBC
access. This class expects a <code class=3D"literal">javax.sql.DataSource</=
code> bean and a <code class=3D"literal">PlatformTransactionManager</code>
bean to be defined in the <code class=3D"literal">ApplicationContext</code>=
. When you extend
<code class=3D"literal">AbstractTransactionalJUnit4SpringContextTests</code=
> you can access a <code class=3D"literal">protected</code> <code class=3D"=
literal">jdbcTemplate</code>
instance variable that can be used to execute SQL statements to query the d=
atabase. Such
queries can be used to confirm database state both <span class=3D"emphasis"=
><em>prior to</em></span> and <span class=3D"emphasis"><em>after</em></span=
> execution of
database-related application code, and Spring ensures that such queries run=
 in the scope of
the same transaction as the application code. When used in conjunction with=
 an ORM tool,
be sure to avoid <a class=3D"link" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx-fal=
se-positives" title=3D"Avoid false positives when testing ORM code">false p=
ositives</a>. As mentioned in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-support-jdbc" t=
itle=3D"15.3&nbsp;JDBC Testing Support">Section&nbsp;15.3, =93JDBC Testing =
Support=94</a>, <code class=3D"literal">AbstractTransactionalJUnit4SpringCo=
ntextTests</code>
also provides convenience methods which delegate to methods in <code class=
=3D"literal">JdbcTestUtils</code> using the
aforementioned <code class=3D"literal">jdbcTemplate</code>. Furthermore, <c=
ode class=3D"literal">AbstractTransactionalJUnit4SpringContextTests</code>
provides an <code class=3D"literal">executeSqlScript(..)</code> method for =
executing SQL scripts against the configured
<code class=3D"literal">DataSource</code>.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>These classes are a convenience for extension. If you do not want your t=
est classes to be
tied to a Spring-specific class hierarchy, you can configure your own custo=
m test classes
by using <code class=3D"literal">@RunWith(SpringRunner.class)</code> or <a =
class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/sp=
ring-framework-reference/htmlsingle/#testcontext-junit4-rules" title=3D"Spr=
ing JUnit 4 Rules">Spring=92s
JUnit rules</a>.</p>
</td></tr></tbody></table></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-junit-jupiter-extension" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#te=
stcontext-junit-jupiter-extension"></a>JUnit 5 Support</h4></div></div></di=
v>
<p>Spring Framework 5.0 offers full integration with the <span class=3D"emp=
hasis"><em>JUnit Jupiter</em></span> testing framework
introduced in JUnit 5. Developers are therefore encouraged to upgrade to Sp=
ring 5.x to
benefit fully from Spring=92s support for JUnit 5. However, if your project=
 for some reason
cannot yet upgrade to Spring 5.x, you may be interested in using the
<a class=3D"ulink" href=3D"https://github.com/sbrannen/spring-test-junit5" =
target=3D"_top">spring-test-junit5</a> project as a temporary
solution to assist you in upgrading to JUnit 5 while still using Spring Fra=
mework 4.3.x.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"testcontext-support-classes-testng" href=3D"https://docs.spri=
ng.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tes=
tcontext-support-classes-testng"></a>TestNG support classes</h4></div></div=
></div>
<p>The <code class=3D"literal">org.springframework.test.context.testng</cod=
e> package provides the following support
classes for TestNG based test cases.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<code class=3D"literal">AbstractTestNGSpringContextTests</code>
</li><li class=3D"listitem">
<code class=3D"literal">AbstractTransactionalTestNGSpringContextTests</code=
>
</li></ul></div>
<p><code class=3D"literal">AbstractTestNGSpringContextTests</code> is an ab=
stract base test class that integrates the
<span class=3D"emphasis"><em>Spring TestContext Framework</em></span> with =
explicit <code class=3D"literal">ApplicationContext</code> testing support =
in
a TestNG environment. When you extend <code class=3D"literal">AbstractTestN=
GSpringContextTests</code>, you can
access a <code class=3D"literal">protected</code> <code class=3D"literal">a=
pplicationContext</code> instance variable that can be used to perform
explicit bean lookups or to test the state of the context as a whole.</p>
<p><code class=3D"literal">AbstractTransactionalTestNGSpringContextTests</c=
ode> is an abstract <span class=3D"emphasis"><em>transactional</em></span> =
extension
of <code class=3D"literal">AbstractTestNGSpringContextTests</code> that add=
s some convenience functionality for JDBC
access. This class expects a <code class=3D"literal">javax.sql.DataSource</=
code> bean and a <code class=3D"literal">PlatformTransactionManager</code>
bean to be defined in the <code class=3D"literal">ApplicationContext</code>=
. When you extend
<code class=3D"literal">AbstractTransactionalTestNGSpringContextTests</code=
> you can access a <code class=3D"literal">protected</code> <code class=3D"=
literal">jdbcTemplate</code>
instance variable that can be used to execute SQL statements to query the d=
atabase. Such
queries can be used to confirm database state both <span class=3D"emphasis"=
><em>prior to</em></span> and <span class=3D"emphasis"><em>after</em></span=
> execution of
database-related application code, and Spring ensures that such queries run=
 in the scope of
the same transaction as the application code. When used in conjunction with=
 an ORM tool,
be sure to avoid <a class=3D"link" href=3D"https://docs.spring.io/spring/do=
cs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testcontext-tx-fal=
se-positives" title=3D"Avoid false positives when testing ORM code">false p=
ositives</a>. As mentioned in
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#integration-testing-support-jdbc" t=
itle=3D"15.3&nbsp;JDBC Testing Support">Section&nbsp;15.3, =93JDBC Testing =
Support=94</a>, <code class=3D"literal">AbstractTransactionalTestNGSpringCo=
ntextTests</code>
also provides convenience methods which delegate to methods in <code class=
=3D"literal">JdbcTestUtils</code> using the
aforementioned <code class=3D"literal">jdbcTemplate</code>. Furthermore, <c=
ode class=3D"literal">AbstractTransactionalTestNGSpringContextTests</code>
provides an <code class=3D"literal">executeSqlScript(..)</code> method for =
executing SQL scripts against the configured
<code class=3D"literal">DataSource</code>.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>These classes are a convenience for extension. If you do not want your t=
est classes to be
tied to a Spring-specific class hierarchy, you can configure your own custo=
m test classes
by using <code class=3D"literal">@ContextConfiguration</code>, <code class=
=3D"literal">@TestExecutionListeners</code>, and so on, and by manually
instrumenting your test class with a <code class=3D"literal">TestContextMan=
ager</code>. See the source code of
<code class=3D"literal">AbstractTestNGSpringContextTests</code> for an exam=
ple of how to instrument your test class.</p>
</td></tr></tbody></table></div>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"spring-mvc-test-framework" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#spring-mvc-test-framework"></a>15.6&nbsp;Spring MVC Test Framewor=
k</h2></div></div></div>
<p>The <span class=3D"emphasis"><em>Spring MVC Test framework</em></span> p=
rovides first class support for testing Spring MVC
code using a fluent API that can be used with JUnit, TestNG, or any other t=
esting
framework. It=92s built on the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-framework/docs/4.3=
.21.RELEASE/javadoc-api/org/springframework/mock/web/package-summary.html" =
target=3D"_top">Servlet API mock objects</a>
from the <code class=3D"literal">spring-test</code> module and hence does <=
span class=3D"emphasis"><em>not</em></span> use a running Servlet container=
. It
uses the <code class=3D"literal">DispatcherServlet</code> to provide full S=
pring MVC runtime behavior and provides support
for loading actual Spring configuration with the <span class=3D"emphasis"><=
em>TestContext framework</em></span> in addition to a
standalone mode in which controllers may be instantiated manually and teste=
d one at a time.</p>
<p><span class=3D"emphasis"><em>Spring MVC Test</em></span> also provides c=
lient-side support for testing code that uses
the <code class=3D"literal">RestTemplate</code>. Client-side tests mock the=
 server responses and also do <span class=3D"emphasis"><em>not</em></span>
use a running server.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Spring Boot provides an option to write full, end-to-end integration tes=
ts that include
a running server. If this is your goal please have a look at the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-boot/docs/current/=
reference/html/boot-features-testing.html#boot-features-testing-spring-boot=
-applications" target=3D"_top">Spring Boot reference page</a>.
For more information on the differences between out-of-container and end-to=
-end
integration tests, see <a class=3D"xref" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-t=
est-vs-end-to-end-integration-tests" title=3D"Differences between Out-of-Co=
ntainer and End-to-End Integration Tests">the section called =93Differences=
 between Out-of-Container and End-to-End Integration Tests=94</a>.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"spring-mvc-test-server" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test=
-server"></a>15.6.1&nbsp;Server-Side Tests</h3></div></div></div>
<p>It=92s easy to write a plain unit test for a Spring MVC controller using=
 JUnit or TestNG:
simply instantiate the controller, inject it with mocked or stubbed depende=
ncies, and call
its methods passing <code class=3D"literal">MockHttpServletRequest</code>, =
<code class=3D"literal">MockHttpServletResponse</code>, etc., as necessary.
However, when writing such a unit test, much remains untested: for example,=
 request
mappings, data binding, type conversion, validation, and much more. Further=
more, other
controller methods such as <code class=3D"literal">@InitBinder</code>, <cod=
e class=3D"literal">@ModelAttribute</code>, and <code class=3D"literal">@Ex=
ceptionHandler</code> may
also be invoked as part of the request processing lifecycle.</p>
<p>The goal of <span class=3D"emphasis"><em>Spring MVC Test</em></span> is =
to provide an effective way for testing controllers
by performing requests and generating responses through the actual <code cl=
ass=3D"literal">DispatcherServlet</code>.</p>
<p><span class=3D"emphasis"><em>Spring MVC Test</em></span> builds on the f=
amiliar <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21=
.RELEASE/spring-framework-reference/htmlsingle/#mock-objects-servlet" title=
=3D"14.1.3&nbsp;Servlet API">"mock" implementations
of the Servlet API</a> available in the <code class=3D"literal">spring-test=
</code> module. This allows performing
requests and generating responses without the need for running in a Servlet=
 container.
For the most part everything should work as it does at runtime with a few n=
otable
exceptions as explained in <a class=3D"xref" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-m=
vc-test-vs-end-to-end-integration-tests" title=3D"Differences between Out-o=
f-Container and End-to-End Integration Tests">the section called =93Differe=
nces between Out-of-Container and End-to-End Integration Tests=94</a>. Here=
 is a
JUnit 4 based example of using Spring MVC Test:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> <spa=
n class=3D"hl-keyword">static</span> org.springframework.test.web.servlet.r=
equest.MockMvcRequestBuilders.*;
<span class=3D"hl-keyword">import</span> <span class=3D"hl-keyword">static<=
/span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

<em><span class=3D"hl-annotation" style=3D"color: gray">@RunWith(SpringRunn=
er.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("test-servlet-context.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExampleTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> WebApplicationContext wac;

    <span class=3D"hl-keyword">private</span> MockMvc mockMvc;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setup() {
        <span class=3D"hl-keyword">this</span>.mockMvc =3D MockMvcBuilders.=
webAppContextSetup(<span class=3D"hl-keyword">this</span>.wac).build();
    }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> getAccount() <span class=3D"hl-keyword">throws</span> Exception {
        <span class=3D"hl-keyword">this</span>.mockMvc.perform(get(<span cl=
ass=3D"hl-string">"/accounts/1"</span>).accept(MediaType.parseMediaType(<sp=
an class=3D"hl-string">"application/json;charset=3DUTF-8"</span>)))
            .andExpect(status().isOk())
            .andExpect(content().contentType(<span class=3D"hl-string">"app=
lication/json"</span>))
            .andExpect(jsonPath(<span class=3D"hl-string">"$.name"</span>).=
value(<span class=3D"hl-string">"Lee"</span>));
    }
}</pre>
<p>The above test relies on the <code class=3D"literal">WebApplicationConte=
xt</code> support of the <span class=3D"emphasis"><em>TestContext framework=
</em></span>
for loading Spring configuration from an XML configuration file located in =
the same package
as the test class, but Java-based and Groovy-based configuration are also s=
upported. See these
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-framew=
ork/tree/master/spring-test/src/test/java/org/springframework/test/web/serv=
let/samples/context" target=3D"_top">sample tests</a>.</p>
<p>The <code class=3D"literal">MockMvc</code> instance is used to perform a=
 <code class=3D"literal">GET</code> request to <code class=3D"literal">"/ac=
counts/1"</code> and verify
that the resulting response has status 200, the content type is <code class=
=3D"literal">"application/json"</code>, and the
response body has a JSON property called "name" with the value "Lee". The <=
code class=3D"literal">jsonPath</code>
syntax is supported through the Jayway <a class=3D"ulink" href=3D"https://g=
ithub.com/jayway/JsonPath" target=3D"_top">JsonPath
project</a>. There are lots of other options for verifying the result of th=
e performed
request that will be discussed below.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-static-imports" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
spring-mvc-test-server-static-imports"></a>Static Imports</h4></div></div><=
/div>
<p>The fluent API in the example above requires a few static imports such a=
s
<code class=3D"literal">MockMvcRequestBuilders.*</code>, <code class=3D"lit=
eral">MockMvcResultMatchers.*</code>,
and <code class=3D"literal">MockMvcBuilders.*</code>. An easy way to find t=
hese classes is to search for
types matching <span class=3D"emphasis"><em>"MockMvc*"</em></span>. If usin=
g Eclipse, be sure to add them as
"favorite static members" in the Eclipse preferences under
<span class=3D"emphasis"><em>Java &#8594; Editor &#8594; Content Assist &#8=
594; Favorites</em></span>. That will allow use of content
assist after typing the first character of the static method name. Other ID=
Es (e.g.
IntelliJ) may not require any additional configuration. Just check the supp=
ort for code
completion on static members.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-setup-options" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#s=
pring-mvc-test-server-setup-options"></a>Setup Choices</h4></div></div></di=
v>
<p>There are two main options for creating an instance of <code class=3D"li=
teral">MockMvc</code>.
The first is to load Spring MVC configuration through the <span class=3D"em=
phasis"><em>TestContext
framework</em></span>, which loads the Spring configuration and injects a <=
code class=3D"literal">WebApplicationContext</code>
into the test to use to build a <code class=3D"literal">MockMvc</code> inst=
ance:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("my-servlet-context.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyWebTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> WebApplicationContext wac;

    <span class=3D"hl-keyword">private</span> MockMvc mockMvc;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setup() {
        <span class=3D"hl-keyword">this</span>.mockMvc =3D MockMvcBuilders.=
webAppContextSetup(<span class=3D"hl-keyword">this</span>.wac).build();
    }

    <span class=3D"hl-comment">// ...</span>

}</pre>
<p>The second is to simply create a controller instance manually without lo=
ading Spring
configuration. Instead basic default configuration, roughly comparable to t=
hat of
the MVC JavaConfig or the MVC namespace, is automatically created and can b=
e customized
to a degree:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MyWebTests {

    <span class=3D"hl-keyword">private</span> MockMvc mockMvc;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setup() {
        <span class=3D"hl-keyword">this</span>.mockMvc =3D MockMvcBuilders.=
standaloneSetup(<span class=3D"hl-keyword">new</span> AccountController()).=
build();
    }

    <span class=3D"hl-comment">// ...</span>

}</pre>
<p>Which setup option should you use?</p>
<p>The <span class=3D"emphasis"><em>"webAppContextSetup"</em></span> loads =
your actual Spring MVC configuration resulting in a
more complete integration test. Since the <span class=3D"emphasis"><em>Test=
Context framework</em></span> caches the loaded
Spring configuration, it helps keep tests running fast, even as you introdu=
ce more tests
in your test suite. Furthermore, you can inject mock services into controll=
ers through
Spring configuration in order to remain focused on testing the web layer. H=
ere is an
example of declaring a mock service with Mockito:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"accountService=
"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-valu=
e">"org.mockito.Mockito"</span> <span class=3D"hl-attribute">factory-method=
</span>=3D<span class=3D"hl-value">"mock"</span><span class=3D"hl-tag">&gt;=
</span>
    <span class=3D"hl-tag">&lt;constructor-arg</span> <span class=3D"hl-att=
ribute">value</span>=3D<span class=3D"hl-value">"org.example.AccountService=
"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>You can then inject the mock service into the test in order set up and v=
erify
expectations:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@RunWith(SpringRunner.class)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@WebAppConfiguratio=
n</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@ContextConfigurati=
on("test-servlet-context.xml")</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> AccountTests {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> WebApplicationContext wac;

    <span class=3D"hl-keyword">private</span> MockMvc mockMvc;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">private</span> AccountService accountService=
;

    <span class=3D"hl-comment">// ...</span>

}</pre>
<p>The <span class=3D"emphasis"><em>"standaloneSetup"</em></span> on the ot=
her hand is a little closer to a unit test. It tests
one controller at a time: the controller can be injected with mock dependen=
cies manually,
and it doesn=92t involve loading Spring configuration. Such tests are more =
focused on style
and make it easier to see which controller is being tested, whether any spe=
cific Spring
MVC configuration is required to work, and so on. The "standaloneSetup" is =
also a very
convenient way to write ad-hoc tests to verify specific behavior or to debu=
g an issue.</p>
<p>Just like with any "integration vs. unit testing" debate, there is no ri=
ght or wrong
answer. However, using the "standaloneSetup" does imply the need for additi=
onal
"webAppContextSetup" tests in order to verify your Spring MVC configuration=
.
Alternatively, you may choose to write all tests with "webAppContextSetup" =
in order to
always test against your actual Spring MVC configuration.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-performing-requests" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#spring-mvc-test-server-performing-requests"></a>Performing Requests</h=
4></div></div></div>
<p>It=92s easy to perform requests using any HTTP method:</p>
<pre class=3D"programlisting">mockMvc.perform(post(<span class=3D"hl-string=
">"/hotels/{id}"</span>, <span class=3D"hl-number">42</span>).accept(MediaT=
ype.APPLICATION_JSON));</pre>
<p>You can also perform file upload requests that internally use
<code class=3D"literal">MockMultipartHttpServletRequest</code> so that ther=
e is no actual parsing of a multipart
request but rather you have to set it up:</p>
<pre class=3D"programlisting">mockMvc.perform(fileUpload(<span class=3D"hl-=
string">"/doc"</span>).file(<span class=3D"hl-string">"a1"</span>, <span cl=
ass=3D"hl-string">"ABC"</span>.getBytes(<span class=3D"hl-string">"UTF-8"</=
span>)));</pre>
<p>You can specify query parameters in URI template style:</p>
<pre class=3D"programlisting">mockMvc.perform(get(<span class=3D"hl-string"=
>"/hotels?foo=3D{foo}"</span>, <span class=3D"hl-string">"bar"</span>));</p=
re>
<p>Or you can add Servlet request parameters representing either query of f=
orm parameters:</p>
<pre class=3D"programlisting">mockMvc.perform(get(<span class=3D"hl-string"=
>"/hotels"</span>).param(<span class=3D"hl-string">"foo"</span>, <span clas=
s=3D"hl-string">"bar"</span>));</pre>
<p>If application code relies on Servlet request parameters and doesn=92t c=
heck the query
string explicitly (as is most often the case) then it doesn=92t matter whic=
h option you use.
Keep in mind however that query params provided with the URI template will =
be decoded while
request parameters provided through the <code class=3D"literal">param(=85&#=
8203;)</code> method are expected to already be decoded.</p>
<p>In most cases it=92s preferable to leave out the context path and the Se=
rvlet path from
the request URI. If you must test with the full request URI, be sure to set=
 the
<code class=3D"literal">contextPath</code> and <code class=3D"literal">serv=
letPath</code> accordingly so that request mappings will work:</p>
<pre class=3D"programlisting">mockMvc.perform(get(<span class=3D"hl-string"=
>"/app/main/hotels/{id}"</span>).contextPath(<span class=3D"hl-string">"/ap=
p"</span>).servletPath(<span class=3D"hl-string">"/main"</span>))</pre>
<p>Looking at the above example, it would be cumbersome to set the contextP=
ath and
servletPath with every performed request. Instead you can set up default re=
quest
properties:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> MyWebTests {

    <span class=3D"hl-keyword">private</span> MockMvc mockMvc;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span><=
/em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setup() {
        mockMvc =3D standaloneSetup(<span class=3D"hl-keyword">new</span> A=
ccountController())
            .defaultRequest(get(<span class=3D"hl-string">"/"</span>)
            .contextPath(<span class=3D"hl-string">"/app"</span>).servletPa=
th(<span class=3D"hl-string">"/main"</span>)
            .accept(MediaType.APPLICATION_JSON).build();
    }</pre>
<p>The above properties will affect every request performed through the <co=
de class=3D"literal">MockMvc</code> instance.
If the same property is also specified on a given request, it overrides the=
 default value.
That is why the HTTP method and URI in the default request don=92t matter s=
ince they must be
specified on every request.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-defining-expectations" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#spring-mvc-test-server-defining-expectations"></a>Defining Expectati=
ons</h4></div></div></div>
<p>Expectations can be defined by appending one or more <code class=3D"lite=
ral">.andExpect(..)</code> calls after
performing a request:</p>
<pre class=3D"programlisting">mockMvc.perform(get(<span class=3D"hl-string"=
>"/accounts/1"</span>)).andExpect(status().isOk());</pre>
<p><code class=3D"literal">MockMvcResultMatchers.*</code> provides a number=
 of expectations, some of which are further
nested with more detailed expectations.</p>
<p>Expectations fall in two general categories. The first category of asser=
tions verifies
properties of the response: for example, the response status, headers, and =
content. These
are the most important results to assert.</p>
<p>The second category of assertions goes beyond the response. These assert=
ions allow
one to inspect Spring MVC specific aspects such as which controller method =
processed
the request, whether an exception was raised and handled, what the content =
of the model
is, what view was selected, what flash attributes were added, and so on. Th=
ey also allow
one to inspect Servlet specific aspects such as request and session attribu=
tes.</p>
<p>The following test asserts that binding or validation failed:</p>
<pre class=3D"programlisting">mockMvc.perform(post(<span class=3D"hl-string=
">"/persons"</span>))
    .andExpect(status().isOk())
    .andExpect(model().attributeHasErrors(<span class=3D"hl-string">"person=
"</span>));</pre>
<p>Many times when writing tests, it=92s useful to <span class=3D"emphasis"=
><em>dump</em></span> the results of the performed request.
This can be done as follows, where <code class=3D"literal">print()</code> i=
s a static import from
<code class=3D"literal">MockMvcResultHandlers</code>:</p>
<pre class=3D"programlisting">mockMvc.perform(post(<span class=3D"hl-string=
">"/persons"</span>))
    .andDo(print())
    .andExpect(status().isOk())
    .andExpect(model().attributeHasErrors(<span class=3D"hl-string">"person=
"</span>));</pre>
<p>As long as request processing does not cause an unhandled exception, the=
 <code class=3D"literal">print()</code> method
will print all the available result data to <code class=3D"literal">System.=
out</code>. Spring Framework 4.2 introduced
a <code class=3D"literal">log()</code> method and two additional variants o=
f the <code class=3D"literal">print()</code> method, one that accepts
an <code class=3D"literal">OutputStream</code> and one that accepts a <code=
 class=3D"literal">Writer</code>. For example, invoking
<code class=3D"literal">print(System.err)</code> will print the result data=
 to <code class=3D"literal">System.err</code>; while invoking
<code class=3D"literal">print(myWriter)</code> will print the result data t=
o a custom writer. If you would like to
have the result data <span class=3D"emphasis"><em>logged</em></span> instea=
d of printed, simply invoke the <code class=3D"literal">log()</code> method=
 which
will log the result data as a single <code class=3D"literal">DEBUG</code> m=
essage under the
<code class=3D"literal">org.springframework.test.web.servlet.result</code> =
logging category.</p>
<p>In some cases, you may want to get direct access to the result and verif=
y something that
cannot be verified otherwise. This can be achieved by appending <code class=
=3D"literal">.andReturn()</code> after all
other expectations:</p>
<pre class=3D"programlisting">MvcResult mvcResult =3D mockMvc.perform(post(=
<span class=3D"hl-string">"/persons"</span>)).andExpect(status().isOk()).an=
dReturn();
<span class=3D"hl-comment">// ...</span></pre>
<p>If all tests repeat the same expectations you can set up common expectat=
ions once
when building the <code class=3D"literal">MockMvc</code> instance:</p>
<pre class=3D"programlisting">standaloneSetup(<span class=3D"hl-keyword">ne=
w</span> SimpleController())
    .alwaysExpect(status().isOk())
    .alwaysExpect(content().contentType(<span class=3D"hl-string">"applicat=
ion/json;charset=3DUTF-8"</span>))
    .build()</pre>
<p>Note that common expectations are <span class=3D"emphasis"><em>always</e=
m></span> applied and cannot be overridden without
creating a separate <code class=3D"literal">MockMvc</code> instance.</p>
<p>When JSON response content contains hypermedia links created with
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-hateoa=
s" target=3D"_top">Spring HATEOAS</a>, the resulting links can
be verified using JsonPath expressions:</p>
<pre class=3D"programlisting">mockMvc.perform(get(<span class=3D"hl-string"=
>"/people"</span>).accept(MediaType.APPLICATION_JSON))
    .andExpect(jsonPath(<span class=3D"hl-string">"$.links[?(@.rel =3D=3D '=
self')].href"</span>).value(<span class=3D"hl-string">"http://localhost:808=
0/people"</span>));</pre>
<p>When XML response content contains hypermedia links created with
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-hateoa=
s" target=3D"_top">Spring HATEOAS</a>, the resulting links can
be verified using XPath expressions:</p>
<pre class=3D"programlisting">Map&lt;String, String&gt; ns =3D Collections.=
singletonMap(<span class=3D"hl-string">"ns"</span>, <span class=3D"hl-strin=
g">"http://www.w3.org/2005/Atom"</span>);
mockMvc.perform(get(<span class=3D"hl-string">"/handle"</span>).accept(Medi=
aType.APPLICATION_XML))
    .andExpect(xpath(<span class=3D"hl-string">"/person/ns:link[@rel=3D'sel=
f']/@href"</span>, ns).string(<span class=3D"hl-string">"http://localhost:8=
080/people"</span>));</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-filters" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-=
mvc-test-server-filters"></a>Filter Registrations</h4></div></div></div>
<p>When setting up a <code class=3D"literal">MockMvc</code> instance, you c=
an register one or more Servlet <code class=3D"literal">Filter</code> insta=
nces:</p>
<pre class=3D"programlisting">mockMvc =3D standaloneSetup(<span class=3D"hl=
-keyword">new</span> PersonController()).addFilters(<span class=3D"hl-keywo=
rd">new</span> CharacterEncodingFilter()).build();</pre>
<p>Registered filters will be invoked through via the <code class=3D"litera=
l">MockFilterChain</code> from <code class=3D"literal">spring-test</code>, =
and the
last filter will delegate to the <code class=3D"literal">DispatcherServlet<=
/code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-vs-end-to-end-integration-tests" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#spring-mvc-test-vs-end-to-end-integration-tests"></a>Differences =
between Out-of-Container and End-to-End Integration Tests</h4></div></div><=
/div>
<p>As mentioned earlier <span class=3D"emphasis"><em>Spring MVC Test</em></=
span> is built on the Servlet API mock objects from
the <code class=3D"literal">spring-test</code> module and does not use a ru=
nning Servlet container. Therefore
there are some important differences compared to full end-to-end integratio=
n tests
with an actual client and server running.</p>
<p>The easiest way to think about this is starting with a blank <code class=
=3D"literal">MockHttpServletRequest</code>.
Whatever you add to it is what the request will be. Things that may catch y=
ou by surprise
are that there is no context path by default, no <code class=3D"literal">js=
essionid</code> cookie, no forwarding, error,
or async dispatches, and therefore no actual JSP rendering. Instead, "forwa=
rded" and
"redirected" URLs are saved in the <code class=3D"literal">MockHttpServletR=
esponse</code> and can be asserted with
expectations.</p>
<p>This means if you are using JSPs you can verify the JSP page to which th=
e request was
forwarded, but there won=92t be any HTML rendered. In other words, the JSP =
will not be
<span class=3D"emphasis"><em>invoked</em></span>. Note however that all oth=
er rendering technologies which don=92t rely on
forwarding such as Thymeleaf, Freemarker, and Velocity will render HTML to =
the response
body as expected. The same is true for rendering JSON, XML, and other forma=
ts via
<code class=3D"literal">@ResponseBody</code> methods.</p>
<p>Alternatively you may consider the full end-to-end integration testing s=
upport from
Spring Boot via <code class=3D"literal">@WebIntegrationTest</code>. See the
<a class=3D"ulink" href=3D"https://docs.spring.io/spring-boot/docs/current/=
reference/html/boot-features-testing.html#boot-features-testing-spring-boot=
-applications" target=3D"_top">Spring Boot reference</a>.</p>
<p>There are pros and cons for each approach. The options provided in <span=
 class=3D"emphasis"><em>Spring MVC Test</em></span>
are different stops on the scale from classic unit testing to full integrat=
ion testing.
To be certain, none of the options in Spring MVC Test fall under the catego=
ry of classic
unit testing, but they <span class=3D"emphasis"><em>are</em></span> a littl=
e closer to it. For example, you can isolate the web
layer by injecting mocked services into controllers, in which case you=92re=
 testing the web
layer only through the <code class=3D"literal">DispatcherServlet</code> but=
 with actual Spring configuration, just
like you might test the data access layer in isolation from the layers abov=
e. Or you
can use the standalone setup focusing on one controller at a time and manua=
lly providing
the configuration required to make it work.</p>
<p>Another important distinction when using <span class=3D"emphasis"><em>Sp=
ring MVC Test</em></span> is that conceptually such
tests are on the <span class=3D"emphasis"><em>inside</em></span> of the ser=
ver-side so you can check what handler was used,
if an exception was handled with a HandlerExceptionResolver, what the conte=
nt of the
model is, what binding errors there were, etc. That means it=92s easier to =
write
expectations since the server is not a black box as it is when testing it t=
hrough
an actual HTTP client. This is generally an advantage of classic unit testi=
ng, that it=92s
easier to write, reason about, and debug but does not replace the need for =
full
integration tests. At the same time it=92s important not to lose sight of t=
he fact that
the response is the most important thing to check. In short, there is room =
here for
multiple styles and strategies of testing even within the same project.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-resources" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sprin=
g-mvc-test-server-resources"></a>Further Server-Side Test Examples</h4></di=
v></div></div>
<p>The framework=92s own tests include
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-framew=
ork/tree/master/spring-test/src/test/java/org/springframework/test/web/serv=
let/samples" target=3D"_top">many
sample tests</a> intended to demonstrate how to use Spring MVC Test. Browse=
 these examples
for further ideas. Also the
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-mvc-sh=
owcase" target=3D"_top">spring-mvc-showcase</a> has full test
coverage based on Spring MVC Test.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring=
-mvc-test-server-htmlunit"></a>15.6.2&nbsp;HtmlUnit Integration</h3></div><=
/div></div>
<p>Spring provides integration between <a class=3D"link" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#spring-mvc-test-server" title=3D"15.6.1&nbsp;Server-Side Tests">MockMvc=
</a> and
<a class=3D"ulink" href=3D"http://htmlunit.sourceforge.net/" target=3D"_top=
">HtmlUnit</a>. This simplifies performing end-to-end testing
when using HTML based views. This integration enables developers to:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Easily test HTML pages using tools such as <a class=3D"ulink" href=3D"http:=
//htmlunit.sourceforge.net/" target=3D"_top">HtmlUnit</a>,
<a class=3D"ulink" href=3D"http://seleniumhq.org/projects/webdriver/" targe=
t=3D"_top">WebDriver</a>, &amp;
<a class=3D"ulink" href=3D"http://www.gebish.org/manual/current/testing.htm=
l#spock_junit__testng" target=3D"_top">Geb</a> without the
need to deploy to a Servlet container
</li><li class=3D"listitem">
Test JavaScript within pages
</li><li class=3D"listitem">
Optionally test using mock services to speed up testing
</li><li class=3D"listitem">
Share logic between in-container end-to-end tests and out-of-container inte=
gration tests
</li></ul></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">MockMvc</code> works with templating technologie=
s that do not rely on a Servlet Container (e.g.,
Thymeleaf, Freemarker, Velocity, etc.), but it does not work with JSPs sinc=
e they rely on
the Servlet Container.</p>
</td></tr></tbody></table></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-why" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sp=
ring-mvc-test-server-htmlunit-why"></a>Why HtmlUnit Integration?</h4></div>=
</div></div>
<p>The most obvious question that comes to mind is, "Why do I need this?". =
The answer is best
found by exploring a very basic sample application. Assume you have a Sprin=
g MVC web
application that supports CRUD operations on a <code class=3D"literal">Mess=
age</code> object. The application also supports
paging through all messages. How would you go about testing it?</p>
<p>With Spring MVC Test, we can easily test if we are able to create a <cod=
e class=3D"literal">Message</code>.</p>
<pre class=3D"programlisting">MockHttpServletRequestBuilder createMessage =
=3D post(<span class=3D"hl-string">"/messages/"</span>)
        .param(<span class=3D"hl-string">"summary"</span>, <span class=3D"h=
l-string">"Spring Rocks"</span>)
        .param(<span class=3D"hl-string">"text"</span>, <span class=3D"hl-s=
tring">"In case you didn't know, Spring Rocks!"</span>);

mockMvc.perform(createMessage)
        .andExpect(status().is3xxRedirection())
        .andExpect(redirectedUrl(<span class=3D"hl-string">"/messages/123"<=
/span>));</pre>
<p>What if we want to test our form view that allows us to create the messa=
ge? For example,
assume our form looks like the following snippet:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;form</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"messageForm"</=
span> <span class=3D"hl-attribute">action</span>=3D<span class=3D"hl-value"=
>"/messages/"</span> <span class=3D"hl-attribute">method</span>=3D<span cla=
ss=3D"hl-value">"post"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;div</span> <span class=3D"hl-attribute">clas=
s</span>=3D<span class=3D"hl-value">"pull-right"</span><span class=3D"hl-ta=
g">&gt;</span><span class=3D"hl-tag">&lt;a</span> <span class=3D"hl-attribu=
te">href</span>=3D<span class=3D"hl-value">"/messages/"</span><span class=
=3D"hl-tag">&gt;</span>Messages<span class=3D"hl-tag">&lt;/a&gt;</span><spa=
n class=3D"hl-tag">&lt;/div&gt;</span>

    <span class=3D"hl-tag">&lt;label</span> <span class=3D"hl-attribute">fo=
r</span>=3D<span class=3D"hl-value">"summary"</span><span class=3D"hl-tag">=
&gt;</span>Summary<span class=3D"hl-tag">&lt;/label&gt;</span>
    <span class=3D"hl-tag">&lt;input</span> <span class=3D"hl-attribute">ty=
pe</span>=3D<span class=3D"hl-value">"text"</span> <span class=3D"hl-attrib=
ute">class</span>=3D<span class=3D"hl-value">"required"</span> <span class=
=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"summary"</span> <sp=
an class=3D"hl-attribute">name</span>=3D<span class=3D"hl-value">"summary"<=
/span> <span class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value"=
>""</span><span class=3D"hl-tag"> /&gt;</span>

    <span class=3D"hl-tag">&lt;label</span> <span class=3D"hl-attribute">fo=
r</span>=3D<span class=3D"hl-value">"text"</span><span class=3D"hl-tag">&gt=
;</span>Message<span class=3D"hl-tag">&lt;/label&gt;</span>
    <span class=3D"hl-tag">&lt;textarea</span> <span class=3D"hl-attribute"=
>id</span>=3D<span class=3D"hl-value">"text"</span> <span class=3D"hl-attri=
bute">name</span>=3D<span class=3D"hl-value">"text"</span><span class=3D"hl=
-tag">&gt;</span><span class=3D"hl-tag">&lt;/textarea&gt;</span>

    <span class=3D"hl-tag">&lt;div</span> <span class=3D"hl-attribute">clas=
s</span>=3D<span class=3D"hl-value">"form-actions"</span><span class=3D"hl-=
tag">&gt;</span>
        <span class=3D"hl-tag">&lt;input</span> <span class=3D"hl-attribute=
">type</span>=3D<span class=3D"hl-value">"submit"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"Create"</span><span cla=
ss=3D"hl-tag"> /&gt;</span>
    <span class=3D"hl-tag">&lt;/div&gt;</span>
<span class=3D"hl-tag">&lt;/form&gt;</span></pre>
<p>How do we ensure that our form will produce the correct request to creat=
e a new message? A
naive attempt would look like this:</p>
<pre class=3D"programlisting">mockMvc.perform(get(<span class=3D"hl-string"=
>"/messages/form"</span>))
        .andExpect(xpath(<span class=3D"hl-string">"//input[@name=3D'summar=
y']"</span>).exists())
        .andExpect(xpath(<span class=3D"hl-string">"//textarea[@name=3D'tex=
t']"</span>).exists());</pre>
<p>This test has some obvious drawbacks. If we update our controller to use=
 the parameter
<code class=3D"literal">message</code> instead of <code class=3D"literal">t=
ext</code>, our form test would continue to pass even though the HTML
form is out of synch with the controller. To resolve this we can combine ou=
r two tests.</p>
<a name=3D"spring-mvc-test-server-htmlunit-mock-mvc-test" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#spring-mvc-test-server-htmlunit-mock-mvc-test"></a><pre class=3D"progr=
amlisting">String summaryParamName =3D <span class=3D"hl-string">"summary"<=
/span>;
String textParamName =3D <span class=3D"hl-string">"text"</span>;
mockMvc.perform(get(<span class=3D"hl-string">"/messages/form"</span>))
        .andExpect(xpath(<span class=3D"hl-string">"//input[@name=3D'"</spa=
n> + summaryParamName + <span class=3D"hl-string">"']"</span>).exists())
        .andExpect(xpath(<span class=3D"hl-string">"//textarea[@name=3D'"</=
span> + textParamName + <span class=3D"hl-string">"']"</span>).exists());

MockHttpServletRequestBuilder createMessage =3D post(<span class=3D"hl-stri=
ng">"/messages/"</span>)
        .param(summaryParamName, <span class=3D"hl-string">"Spring Rocks"</=
span>)
        .param(textParamName, <span class=3D"hl-string">"In case you didn't=
 know, Spring Rocks!"</span>);

mockMvc.perform(createMessage)
        .andExpect(status().is3xxRedirection())
        .andExpect(redirectedUrl(<span class=3D"hl-string">"/messages/123"<=
/span>));</pre>
<p>This would reduce the risk of our test incorrectly passing, but there ar=
e still some
problems.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
What if we have multiple forms on our page? Admittedly we could update our =
xpath
expressions, but they get more complicated the more factors we take into ac=
count (Are the
fields the correct type? Are the fields enabled? etc.).
</li><li class=3D"listitem">
Another issue is that we are doing double the work we would expect.
We must first verify the view, and then we submit the view with the same pa=
rameters we just
verified. Ideally this could be done all at once.
</li><li class=3D"listitem">
Finally, there are some things that we still cannot account for. For exampl=
e, what if the
form has JavaScript validation that we wish to test as well?
</li></ul></div>
<p>The overall problem is that testing a web page does not involve a single=
 interaction.
Instead, it is a combination of how the user interacts with a web page and =
how that web
page interacts with other resources. For example, the result of a form view=
 is used as
the input to a user for creating a message. In addition, our form view may =
potentially
utilize additional resources which impact the behavior of the page, such as=
 JavaScript
validation.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-why-integration" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#spring-mvc-test-server-htmlunit-why-integration"></a>Integration =
testing to the rescue?</h5></div></div></div>
<p>To resolve the issues above we could perform end-to-end integration test=
ing, but this has
some obvious drawbacks. Consider testing the view that allows us to page th=
rough the messages.
We might need the following tests.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Does our page display a notification to the user indicating that no results=
 are available
when the messages are empty?
</li><li class=3D"listitem">
Does our page properly display a single message?
</li><li class=3D"listitem">
Does our page properly support paging?
</li></ul></div>
<p>To set up these tests, we would need to ensure our database contained th=
e proper messages
in it. This leads to a number of additional challenges.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Ensuring the proper messages are in the database can be tedious; consider f=
oreign key
constraints.
</li><li class=3D"listitem">
Testing can become slow since each test would need to ensure that the datab=
ase is in the
correct state.
</li><li class=3D"listitem">
Since our database needs to be in a specific state, we cannot run tests in =
parallel.
</li><li class=3D"listitem">
Performing assertions on things like auto-generated ids, timestamps, etc. c=
an be difficult.
</li></ul></div>
<p>These challenges do not mean that we should abandon end-to-end integrati=
on testing
altogether. Instead, we can reduce the number of end-to-end integration tes=
ts by
refactoring our detailed tests to use mock services which will execute much=
 faster, more
reliably, and without side effects. We can then implement a small number of=
 <span class=3D"emphasis"><em>true</em></span>
end-to-end integration tests that validate simple workflows to ensure that =
everything
works together properly.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-why-mockmvc" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#spring-mvc-test-server-htmlunit-why-mockmvc"></a>Enter HtmlUnit Integ=
ration</h5></div></div></div>
<p>So how can we achieve a balance between testing the interactions of our =
pages and still
retain good performance within our test suite? The answer is: "By integrati=
ng MockMvc
with HtmlUnit."</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-options" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#spring-mvc-test-server-htmlunit-options"></a>HtmlUnit Integration Options=
</h5></div></div></div>
<p>There are a number of ways to integrate <code class=3D"literal">MockMvc<=
/code> with HtmlUnit.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-mah=
" title=3D"MockMvc and HtmlUnit">MockMvc and HtmlUnit</a>: Use this option =
if you
want to use the raw HtmlUnit libraries.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-web=
driver" title=3D"MockMvc and WebDriver">MockMvc and WebDriver</a>: Use this=
 option to
ease development and reuse code between integration and end-to-end testing.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-geb=
" title=3D"MockMvc and Geb">MockMvc and Geb</a>: Use this option if you wou=
ld
like to use Groovy for testing, ease development, and reuse code between in=
tegration and
end-to-end testing.
</li></ul></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-mah" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sp=
ring-mvc-test-server-htmlunit-mah"></a>MockMvc and HtmlUnit</h4></div></div=
></div>
<p>This section describes how to integrate <code class=3D"literal">MockMvc<=
/code> and HtmlUnit. Use this option if you
want to use the raw HtmlUnit libraries.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-mah-setup" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#spring-mvc-test-server-htmlunit-mah-setup"></a>MockMvc and HtmlUnit Set=
up</h5></div></div></div>
<p>First, make sure that you have included a test dependency on <code class=
=3D"literal">net.sourceforge.htmlunit:htmlunit</code>.
In order to use HtmlUnit with Apache HttpComponents 4.5+, you will need to =
use HtmlUnit
2.18 or higher.</p>
<p>We can easily create an HtmlUnit <code class=3D"literal">WebClient</code=
> that integrates with <code class=3D"literal">MockMvc</code> using the
<code class=3D"literal">MockMvcWebClientBuilder</code> as follows.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Autowired</span></em>
WebApplicationContext context;

WebClient webClient;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setup() {
    webClient =3D MockMvcWebClientBuilder
            .webAppContextSetup(context)
            .build();
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This is a simple example of using <code class=3D"literal">MockMvcWebClie=
ntBuilder</code>. For advanced usage see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-mah=
-advanced-builder" title=3D"Advanced MockMvcWebClientBuilder">the section c=
alled =93Advanced MockMvcWebClientBuilder=94</a></p>
</td></tr></tbody></table></div>
<p>This will ensure that any URL referencing <code class=3D"literal">localh=
ost</code> as the server will be directed to
our <code class=3D"literal">MockMvc</code> instance without the need for a =
real HTTP connection. Any other URL will be
requested using a network connection as normal. This allows us to easily te=
st the use of
CDNs.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-mah-usage" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#spring-mvc-test-server-htmlunit-mah-usage"></a>MockMvc and HtmlUnit Usa=
ge</h5></div></div></div>
<p>Now we can use HtmlUnit as we normally would, but without the need to de=
ploy our
application to a Servlet container. For example, we can request the view to=
 create
a message with the following.</p>
<pre class=3D"programlisting">HtmlPage createMsgFormPage =3D webClient.getP=
age(<span class=3D"hl-string">"http://localhost/messages/form"</span>);</pr=
e>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The default context path is <code class=3D"literal">""</code>. Alternati=
vely, we can specify the context path as
illustrated in <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test-serv=
er-htmlunit-mah-advanced-builder" title=3D"Advanced MockMvcWebClientBuilder=
">the section called =93Advanced MockMvcWebClientBuilder=94</a>.</p>
</td></tr></tbody></table></div>
<p>Once we have a reference to the <code class=3D"literal">HtmlPage</code>,=
 we can then fill out the form and submit
it to create a message.</p>
<pre class=3D"programlisting">HtmlForm form =3D createMsgFormPage.getHtmlEl=
ementById(<span class=3D"hl-string">"messageForm"</span>);
HtmlTextInput summaryInput =3D createMsgFormPage.getHtmlElementById(<span c=
lass=3D"hl-string">"summary"</span>);
summaryInput.setValueAttribute(<span class=3D"hl-string">"Spring Rocks"</sp=
an>);
HtmlTextArea textInput =3D createMsgFormPage.getHtmlElementById(<span class=
=3D"hl-string">"text"</span>);
textInput.setText(<span class=3D"hl-string">"In case you didn't know, Sprin=
g Rocks!"</span>);
HtmlSubmitInput submit =3D form.getOneHtmlElementByAttribute(<span class=3D=
"hl-string">"input"</span>, <span class=3D"hl-string">"type"</span>, <span =
class=3D"hl-string">"submit"</span>);
HtmlPage newMessagePage =3D submit.click();</pre>
<p>Finally, we can verify that a new message was created successfully. The =
following
assertions use the <a class=3D"ulink" href=3D"https://joel-costigliola.gith=
ub.io/assertj/" target=3D"_top">AssertJ</a> library.</p>
<pre class=3D"programlisting">assertThat(newMessagePage.getUrl().toString()=
).endsWith(<span class=3D"hl-string">"/messages/123"</span>);
String id =3D newMessagePage.getHtmlElementById(<span class=3D"hl-string">"=
id"</span>).getTextContent();
assertThat(id).isEqualTo(<span class=3D"hl-string">"123"</span>);
String summary =3D newMessagePage.getHtmlElementById(<span class=3D"hl-stri=
ng">"summary"</span>).getTextContent();
assertThat(summary).isEqualTo(<span class=3D"hl-string">"Spring Rocks"</spa=
n>);
String text =3D newMessagePage.getHtmlElementById(<span class=3D"hl-string"=
>"text"</span>).getTextContent();
assertThat(text).isEqualTo(<span class=3D"hl-string">"In case you didn't kn=
ow, Spring Rocks!"</span>);</pre>
<p>This improves on our <a class=3D"link" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-=
test-server-htmlunit-mock-mvc-test">MockMvc test</a> in a
number of ways. First we no longer have to explicitly verify our form and t=
hen create a
request that looks like the form. Instead, we request the form, fill it out=
, and submit
it, thereby significantly reducing the overhead.</p>
<p>Another important factor is that <a class=3D"ulink" href=3D"http://htmlu=
nit.sourceforge.net/javascript.html" target=3D"_top">HtmlUnit
uses the Mozilla Rhino engine</a> to evaluate JavaScript. This means that w=
e can test the
behavior of JavaScript within our pages as well!</p>
<p>Refer to the <a class=3D"ulink" href=3D"http://htmlunit.sourceforge.net/=
gettingStarted.html" target=3D"_top">HtmlUnit documentation</a>
for additional information about using HtmlUnit.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-mah-advanced-builder" href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#spring-mvc-test-server-htmlunit-mah-advanced-builder"></a>Ad=
vanced MockMvcWebClientBuilder</h5></div></div></div>
<p>In the examples so far, we have used <code class=3D"literal">MockMvcWebC=
lientBuilder</code> in the simplest way possible,
by building a <code class=3D"literal">WebClient</code> based on the <code c=
lass=3D"literal">WebApplicationContext</code> loaded for us by the Spring
TestContext Framework. This approach is repeated here.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Autowired</span></em>
WebApplicationContext context;

WebClient webClient;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setup() {
    webClient =3D MockMvcWebClientBuilder
            .webAppContextSetup(context)
            .build();
}</pre>
<p>We can also specify additional configuration options.</p>
<pre class=3D"programlisting">WebClient webClient;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setup() {
    webClient =3D MockMvcWebClientBuilder
            <span class=3D"hl-comment">// demonstrates applying a MockMvcCo=
nfigurer (Spring Security)</span>
            .webAppContextSetup(context, springSecurity())
            <span class=3D"hl-comment">// for illustration only - defaults =
to ""</span>
            .contextPath(<span class=3D"hl-string">""</span>)
            <span class=3D"hl-comment">// By default MockMvc is used for lo=
calhost only;</span>
            <span class=3D"hl-comment">// the following will use MockMvc fo=
r example.com and example.org as well</span>
            .useMockMvcForHosts(<span class=3D"hl-string">"example.com"</sp=
an>,<span class=3D"hl-string">"example.org"</span>)
            .build();
}</pre>
<p>As an alternative, we can perform the exact same setup by configuring th=
e <code class=3D"literal">MockMvc</code>
instance separately and supplying it to the <code class=3D"literal">MockMvc=
WebClientBuilder</code> as follows.</p>
<pre class=3D"programlisting">MockMvc mockMvc =3D MockMvcBuilders
        .webAppContextSetup(context)
        .apply(springSecurity())
        .build();

webClient =3D MockMvcWebClientBuilder
        .mockMvcSetup(mockMvc)
        <span class=3D"hl-comment">// for illustration only - defaults to "=
"</span>
        .contextPath(<span class=3D"hl-string">""</span>)
        <span class=3D"hl-comment">// By default MockMvc is used for localh=
ost only;</span>
        <span class=3D"hl-comment">// the following will use MockMvc for ex=
ample.com and example.org as well</span>
        .useMockMvcForHosts(<span class=3D"hl-string">"example.com"</span>,=
<span class=3D"hl-string">"example.org"</span>)
        .build();</pre>
<p>This is more verbose, but by building the <code class=3D"literal">WebCli=
ent</code> with a <code class=3D"literal">MockMvc</code> instance we have
the full power of <code class=3D"literal">MockMvc</code> at our fingertips.=
</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>For additional information on creating a <code class=3D"literal">MockMvc=
</code> instance refer to
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-setup-option=
s" title=3D"Setup Choices">the section called =93Setup Choices=94</a>.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-webdriver" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#spring-mvc-test-server-htmlunit-webdriver"></a>MockMvc and WebDriver</h=
4></div></div></div>
<p>In the previous sections, we have seen how to use <code class=3D"literal=
">MockMvc</code> in conjunction with the raw
HtmlUnit APIs. In this section, we will leverage additional abstractions wi=
thin the Selenium
<a class=3D"ulink" href=3D"http://docs.seleniumhq.org/projects/webdriver/" =
target=3D"_top">WebDriver</a> to make things even easier.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-webdriver-why" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#spring-mvc-test-server-htmlunit-webdriver-why"></a>Why WebDriver an=
d MockMvc?</h5></div></div></div>
<p>We can already use HtmlUnit and <code class=3D"literal">MockMvc</code>, =
so why would we want to use <code class=3D"literal">WebDriver</code>? The
Selenium <code class=3D"literal">WebDriver</code> provides a very elegant A=
PI that allows us to easily organize our code.
To better understand, let=92s explore an example.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Despite being a part of <a class=3D"ulink" href=3D"http://docs.seleniumh=
q.org/" target=3D"_top">Selenium</a>, WebDriver does not require
a Selenium Server to run your tests.</p>
</td></tr></tbody></table></div>
<p>Suppose we need to ensure that a message is created properly. The tests =
involve finding
the HTML form input elements, filling them out, and making various assertio=
ns.</p>
<p>This approach results in numerous, separate tests because we want to tes=
t error
conditions as well. For example, we want to ensure that we get an error if =
we fill out
only part of the form. If we fill out the entire form, the newly created me=
ssage should
be displayed afterwards.</p>
<p>If one of the fields were named "summary", then we might have something =
like the
following repeated in multiple places within our tests.</p>
<pre class=3D"programlisting">HtmlTextInput summaryInput =3D currentPage.ge=
tHtmlElementById(<span class=3D"hl-string">"summary"</span>);
summaryInput.setValueAttribute(summary);</pre>
<p>So what happens if we change the <code class=3D"literal">id</code> to "s=
mmry"? Doing so would force us to update all
of our tests to incorporate this change! Of course, this violates the <span=
 class=3D"emphasis"><em>DRY Principle</em></span>; so
we should ideally extract this code into its own method as follows.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> Html=
Page createMessage(HtmlPage currentPage, String summary, String text) {
    setSummary(currentPage, summary);
    <span class=3D"hl-comment">// ...</span>
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setSummary(HtmlPage currentPage, String summary) {
    HtmlTextInput summaryInput =3D currentPage.getHtmlElementById(<span cla=
ss=3D"hl-string">"summary"</span>);
    summaryInput.setValueAttribute(summary);
}</pre>
<p>This ensures that we do not have to update all of our tests if we change=
 the UI.</p>
<p>We might even take this a step further and place this logic within an Ob=
ject that
represents the <code class=3D"literal">HtmlPage</code> we are currently on.=
</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CreateMessagePage {

    <span class=3D"hl-keyword">final</span> HtmlPage currentPage;

    <span class=3D"hl-keyword">final</span> HtmlTextInput summaryInput;

    <span class=3D"hl-keyword">final</span> HtmlSubmitInput submit;

    <span class=3D"hl-keyword">public</span> CreateMessagePage(HtmlPage cur=
rentPage) {
        <span class=3D"hl-keyword">this</span>.currentPage =3D currentPage;
        <span class=3D"hl-keyword">this</span>.summaryInput =3D currentPage=
.getHtmlElementById(<span class=3D"hl-string">"summary"</span>);
        <span class=3D"hl-keyword">this</span>.submit =3D currentPage.getHt=
mlElementById(<span class=3D"hl-string">"submit"</span>);
    }

    <span class=3D"hl-keyword">public</span> &lt;T&gt; T createMessage(Stri=
ng summary, String text) <span class=3D"hl-keyword">throws</span> Exception=
 {
        setSummary(summary);

        HtmlPage result =3D submit.click();
        <span class=3D"hl-keyword">boolean</span> error =3D CreateMessagePa=
ge.at(result);

        <span class=3D"hl-keyword">return</span> (T) (error ? <span class=
=3D"hl-keyword">new</span> CreateMessagePage(result) : <span class=3D"hl-ke=
yword">new</span> ViewMessagePage(result));
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setSummary(String summary) <span class=3D"hl-keyword">throws</span=
> Exception {
        summaryInput.setValueAttribute(summary);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">boolean</span> at(HtmlPage page) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-string">=
"Create Message"</span>.equals(page.getTitleText());
    }
}</pre>
<p>Formerly, this pattern is known as the
<a class=3D"ulink" href=3D"https://github.com/SeleniumHQ/selenium/wiki/Page=
Objects" target=3D"_top">Page Object Pattern</a>. While we can
certainly do this with HtmlUnit, WebDriver provides some tools that we will=
 explore in the
following sections to make this pattern much easier to implement.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-webdriver-setup" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#spring-mvc-test-server-htmlunit-webdriver-setup"></a>MockMvc and =
WebDriver Setup</h5></div></div></div>
<p>To use Selenium WebDriver with the Spring MVC Test framework, make sure =
that your project
includes a test dependency on <code class=3D"literal">org.seleniumhq.seleni=
um:selenium-htmlunit-driver</code>.</p>
<p>We can easily create a Selenium <code class=3D"literal">WebDriver</code>=
 that integrates with <code class=3D"literal">MockMvc</code> using the
<code class=3D"literal">MockMvcHtmlUnitDriverBuilder</code> as follows.</p>
<pre class=3D"programlisting">	<em><span class=3D"hl-annotation" style=3D"c=
olor: gray">@Autowired</span></em>
	WebApplicationContext context;

	WebDriver driver;

	<em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span></em=
>
	<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</=
span> setup() {
		driver =3D MockMvcHtmlUnitDriverBuilder
				.webAppContextSetup(context)
				.build();
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This is a simple example of using <code class=3D"literal">MockMvcHtmlUni=
tDriverBuilder</code>.
For more advanced usage, refer to <a class=3D"xref" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#s=
pring-mvc-test-server-htmlunit-webdriver-advanced-builder" title=3D"Advance=
d MockMvcHtmlUnitDriverBuilder">the section called =93Advanced MockMvcHtmlU=
nitDriverBuilder=94</a></p>
</td></tr></tbody></table></div>
<p>This will ensure that any URL referencing <code class=3D"literal">localh=
ost</code> as the server will be directed to
our <code class=3D"literal">MockMvc</code> instance without the need for a =
real HTTP connection. Any other URL will be
requested using a network connection as normal. This allows us to easily te=
st the use of
CDNs.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-webdriver-usage" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#spring-mvc-test-server-htmlunit-webdriver-usage"></a>MockMvc and =
WebDriver Usage</h5></div></div></div>
<p>Now we can use WebDriver as we normally would, but without the need to d=
eploy our
application to a Servlet container. For example, we can request the view to=
 create
a message with the following.</p>
<pre class=3D"programlisting">CreateMessagePage page =3D CreateMessagePage.=
to(driver);</pre>
<p>We can then fill out the form and submit it to create a message.</p>
<pre class=3D"programlisting">ViewMessagePage viewMessagePage =3D
        page.createMessage(ViewMessagePage.<span class=3D"hl-keyword">class=
</span>, expectedSummary, expectedText);</pre>
<p>This improves on the design of our
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-mah=
-usage" title=3D"MockMvc and HtmlUnit Usage">HtmlUnit test</a> by leveragin=
g the <span class=3D"emphasis"><em>Page Object
Pattern</em></span>. As we mentioned in <a class=3D"xref" href=3D"https://d=
ocs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsin=
gle/#spring-mvc-test-server-htmlunit-webdriver-why" title=3D"Why WebDriver =
and MockMvc?">the section called =93Why WebDriver and MockMvc?=94</a>, we c=
an
use the Page Object Pattern with HtmlUnit, but it is much easier with WebDr=
iver. Let=92s
take a look at our new <code class=3D"literal">CreateMessagePage</code> imp=
lementation.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CreateMessagePage
        <span class=3D"hl-keyword">extends</span> AbstractPage { <a name=3D=
"CO1-1" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-fr=
amework-reference/htmlsingle/#CO1-1"></a><span><img src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/callouts/1.png" alt=3D"1" border=3D"0"></span>

    <a name=3D"CO1-2" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#CO1-2"></a><span><img src=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/images/callouts/2.png" alt=3D"2" border=3D"0"></span>
    <span class=3D"hl-keyword">private</span> WebElement summary;
    <span class=3D"hl-keyword">private</span> WebElement text;

    <a name=3D"CO1-3" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#CO1-3"></a><span><img src=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/images/callouts/3.png" alt=3D"3" border=3D"0"></span>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@FindBy(css =3D=
 "input[type=3Dsubmit]")</span></em>
    <span class=3D"hl-keyword">private</span> WebElement submit;

    <span class=3D"hl-keyword">public</span> CreateMessagePage(WebDriver dr=
iver) {
        <span class=3D"hl-keyword">super</span>(driver);
    }

    <span class=3D"hl-keyword">public</span> &lt;T&gt; T createMessage(Clas=
s&lt;T&gt; resultPage, String summary, String details) {
        <span class=3D"hl-keyword">this</span>.summary.sendKeys(summary);
        <span class=3D"hl-keyword">this</span>.text.sendKeys(details);
        <span class=3D"hl-keyword">this</span>.submit.click();
        <span class=3D"hl-keyword">return</span> PageFactory.initElements(d=
river, resultPage);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> CreateMessagePage to(WebDriver driver) {
        driver.get(<span class=3D"hl-string">"http://localhost:9990/mail/me=
ssages/form"</span>);
        <span class=3D"hl-keyword">return</span> PageFactory.initElements(d=
river, CreateMessagePage.<span class=3D"hl-keyword">class</span>);
    }
}</pre>
<div class=3D"calloutlist"><table border=3D"0" summary=3D"Callout list"><tb=
ody><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><a href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#CO1-1"><span><img src=3D"https://docs.spring.io/spring/docs/4.3.21.=
RELEASE/spring-framework-reference/htmlsingle/images/callouts/1.png" alt=3D=
"1" border=3D"0"></span></a> </p></td><td valign=3D"top" align=3D"left">
<p>The first thing you will notice is that <code class=3D"literal">CreateMe=
ssagePage</code> extends the
<code class=3D"literal">AbstractPage</code>. We won=92t go over the details=
 of <code class=3D"literal">AbstractPage</code>, but in summary it
contains common functionality for all of our pages. For example, if our app=
lication has
a navigational bar, global error messages, etc., this logic can be placed i=
n a shared
location.</p>
</td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#CO1-2"><span><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/callouts/2.png" =
alt=3D"2" border=3D"0"></span></a> </p></td><td valign=3D"top" align=3D"lef=
t">
<p>The next thing you will notice is that we have a member variable for eac=
h of the
parts of the HTML page that we are interested in. These are of type <code c=
lass=3D"literal">WebElement</code>.
<code class=3D"literal">WebDriver</code>'s <a class=3D"ulink" href=3D"https=
://github.com/SeleniumHQ/selenium/wiki/PageFactory" target=3D"_top">PageFac=
tory</a> allows
us to remove a lot of code from the HtmlUnit version of <code class=3D"lite=
ral">CreateMessagePage</code> by
automatically resolving each <code class=3D"literal">WebElement</code>. The
<a class=3D"ulink" href=3D"https://seleniumhq.github.io/selenium/docs/api/j=
ava/org/openqa/selenium/support/PageFactory.html#initElements-org.openqa.se=
lenium.WebDriver-java.lang.Class-" target=3D"_top">PageFactory#initElements=
(WebDriver,Class&lt;T&gt;)</a>
method will automatically resolve each <code class=3D"literal">WebElement</=
code> by using the field name and looking it
up by the <code class=3D"literal">id</code> or <code class=3D"literal">name=
</code> of the element within the HTML page.</p>
</td></tr><tr><td width=3D"5%" valign=3D"top" align=3D"left"><p><a href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#CO1-3"><span><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/callouts/3.png" =
alt=3D"3" border=3D"0"></span></a> </p></td><td valign=3D"top" align=3D"lef=
t">
<p>We can use the
<a class=3D"ulink" href=3D"https://github.com/SeleniumHQ/selenium/wiki/Page=
Factory#making-the-example-work-using-annotations" target=3D"_top">@FindBy =
annotation</a>
to override the default lookup behavior. Our example demonstrates how to us=
e the <code class=3D"literal">@FindBy</code>
annotation to look up our submit button using a css selector, <span class=
=3D"strong"><strong>input[type=3Dsubmit]</strong></span>.</p>
</td></tr></tbody></table></div>
<p>Finally, we can verify that a new message was created successfully. The =
following
assertions use the <a class=3D"ulink" href=3D"https://code.google.com/p/fes=
t/" target=3D"_top">FEST assertion library</a>.</p>
<pre class=3D"programlisting">assertThat(viewMessagePage.getMessage()).isEq=
ualTo(expectedMessage);
assertThat(viewMessagePage.getSuccess()).isEqualTo(<span class=3D"hl-string=
">"Successfully created a new message"</span>);</pre>
<p>We can see that our <code class=3D"literal">ViewMessagePage</code> allow=
s us to interact with our custom domain
model. For example, it exposes a method that returns a <code class=3D"liter=
al">Message</code> object.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> Mess=
age getMessage() <span class=3D"hl-keyword">throws</span> ParseException {
    Message message =3D <span class=3D"hl-keyword">new</span> Message();
    message.setId(getId());
    message.setCreated(getCreated());
    message.setSummary(getSummary());
    message.setText(getText());
    <span class=3D"hl-keyword">return</span> message;
}</pre>
<p>We can then leverage the rich domain objects in our assertions.</p>
<p>Lastly, don=92t forget to <span class=3D"emphasis"><em>close</em></span>=
 the <code class=3D"literal">WebDriver</code> instance when the test is com=
plete.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@After</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> destroy() {
    <span class=3D"hl-keyword">if</span> (driver !=3D null) {
        driver.close();
    }
}</pre>
<p>For additional information on using WebDriver, refer to the Selenium
<a class=3D"ulink" href=3D"https://github.com/SeleniumHQ/selenium/wiki/Gett=
ing-Started" target=3D"_top">WebDriver documentation</a>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-webdriver-advanced-builder" h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#spring-mvc-test-server-htmlunit-webdriver-advanced-bui=
lder"></a>Advanced MockMvcHtmlUnitDriverBuilder</h5></div></div></div>
<p>In the examples so far, we have used <code class=3D"literal">MockMvcHtml=
UnitDriverBuilder</code> in the simplest way
possible, by building a <code class=3D"literal">WebDriver</code> based on t=
he <code class=3D"literal">WebApplicationContext</code> loaded for us by
the Spring TestContext Framework. This approach is repeated here.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Autowired</span></em>
WebApplicationContext context;

WebDriver driver;

<em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setup() {
    driver =3D MockMvcHtmlUnitDriverBuilder
            .webAppContextSetup(context)
            .build();
}</pre>
<p>We can also specify additional configuration options.</p>
<pre class=3D"programlisting">	WebDriver driver;

	<em><span class=3D"hl-annotation" style=3D"color: gray">@Before</span></em=
>
	<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</=
span> setup() {
		driver =3D MockMvcHtmlUnitDriverBuilder
				<span class=3D"hl-comment">// demonstrates applying a MockMvcConfigurer=
 (Spring Security)</span>
				.webAppContextSetup(context, springSecurity())
				<span class=3D"hl-comment">// for illustration only - defaults to ""</s=
pan>
				.contextPath(<span class=3D"hl-string">""</span>)
				<span class=3D"hl-comment">// By default MockMvc is used for localhost =
only;</span>
				<span class=3D"hl-comment">// the following will use MockMvc for exampl=
e.com and example.org as well</span>
				.useMockMvcForHosts(<span class=3D"hl-string">"example.com"</span>,<spa=
n class=3D"hl-string">"example.org"</span>)
				.build();
}</pre>
<p>As an alternative, we can perform the exact same setup by configuring th=
e <code class=3D"literal">MockMvc</code>
instance separately and supplying it to the <code class=3D"literal">MockMvc=
HtmlUnitDriverBuilder</code> as follows.</p>
<pre class=3D"programlisting">MockMvc mockMvc =3D MockMvcBuilders
        .webAppContextSetup(context)
        .apply(springSecurity())
        .build();

driver =3D MockMvcHtmlUnitDriverBuilder
        .mockMvcSetup(mockMvc)
        <span class=3D"hl-comment">// for illustration only - defaults to "=
"</span>
        .contextPath(<span class=3D"hl-string">""</span>)
        <span class=3D"hl-comment">// By default MockMvc is used for localh=
ost only;</span>
        <span class=3D"hl-comment">// the following will use MockMvc for ex=
ample.com and example.org as well</span>
        .useMockMvcForHosts(<span class=3D"hl-string">"example.com"</span>,=
<span class=3D"hl-string">"example.org"</span>)
        .build();</pre>
<p>This is more verbose, but by building the <code class=3D"literal">WebDri=
ver</code> with a <code class=3D"literal">MockMvc</code> instance we have
the full power of <code class=3D"literal">MockMvc</code> at our fingertips.=
</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>For additional information on creating a <code class=3D"literal">MockMvc=
</code> instance refer to
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-setup-option=
s" title=3D"Setup Choices">the section called =93Setup Choices=94</a>.</p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-geb" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sp=
ring-mvc-test-server-htmlunit-geb"></a>MockMvc and Geb</h4></div></div></di=
v>
<p>In the previous section, we saw how to use <code class=3D"literal">MockM=
vc</code> with <code class=3D"literal">WebDriver</code>. In this section,
we will use <a class=3D"ulink" href=3D"http://www.gebish.org/" target=3D"_t=
op">Geb</a> to make our tests even Groovy-er.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-geb-why" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#spring-mvc-test-server-htmlunit-geb-why"></a>Why Geb and MockMvc?</h5></d=
iv></div></div>
<p>Geb is backed by WebDriver, so it offers many of the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-web=
driver-why" title=3D"Why WebDriver and MockMvc?">same benefits</a> that we =
get from
WebDriver. However, Geb makes things even easier by taking care of some of =
the
boilerplate code for us.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-geb-setup" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#spring-mvc-test-server-htmlunit-geb-setup"></a>MockMvc and Geb Setup</h=
5></div></div></div>
<p>We can easily initialize a Geb <code class=3D"literal">Browser</code> wi=
th a Selenium <code class=3D"literal">WebDriver</code> that uses <code clas=
s=3D"literal">MockMvc</code>
as follows.</p>
<pre class=3D"programlisting">def setup() {
	browser.driver =3D MockMvcHtmlUnitDriverBuilder
		.webAppContextSetup(context)
		.build()
}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This is a simple example of using <code class=3D"literal">MockMvcHtmlUni=
tDriverBuilder</code>.
For more advanced usage, refer to <a class=3D"xref" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#s=
pring-mvc-test-server-htmlunit-webdriver-advanced-builder" title=3D"Advance=
d MockMvcHtmlUnitDriverBuilder">the section called =93Advanced MockMvcHtmlU=
nitDriverBuilder=94</a></p>
</td></tr></tbody></table></div>
<p>This will ensure that any URL referencing <code class=3D"literal">localh=
ost</code> as the server will be directed to
our <code class=3D"literal">MockMvc</code> instance without the need for a =
real HTTP connection. Any other URL will be
requested using a network connection as normal. This allows us to easily te=
st the use of
CDNs.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"spring-mvc-test-server-htmlunit-geb-usage" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#spring-mvc-test-server-htmlunit-geb-usage"></a>MockMvc and Geb Usage</h=
5></div></div></div>
<p>Now we can use Geb as we normally would, but without the need to deploy =
our
application to a Servlet container. For example, we can request the view to=
 create
a message with the following:</p>
<pre class=3D"programlisting">to CreateMessagePage</pre>
<p>We can then fill out the form and submit it to create a message.</p>
<pre class=3D"programlisting">when:
form.summary =3D expectedSummary
form.text =3D expectedMessage
submit.click(ViewMessagePage)</pre>
<p>Any unrecognized method calls or property accesses/references that are n=
ot found will be
forwarded to the current page object. This removes a lot of the boilerplate=
 code we needed
when using WebDriver directly.</p>
<p>As with direct WebDriver usage, this improves on the design of our
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit-mah=
-usage" title=3D"MockMvc and HtmlUnit Usage">HtmlUnit test</a> by leveragin=
g the <span class=3D"emphasis"><em>Page Object
Pattern</em></span>. As mentioned previously, we can use the Page Object Pa=
ttern with HtmlUnit and
WebDriver, but it is even easier with Geb. Let=92s take a look at our new G=
roovy-based
<code class=3D"literal">CreateMessagePage</code> implementation.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">class</span> Creat=
eMessagePage <span class=3D"hl-keyword">extends</span> Page {
	<span class=3D"hl-keyword">static</span> url =3D <span class=3D"hl-string"=
>'messages/form'</span>
	<span class=3D"hl-keyword">static</span> at =3D { assert title =3D=3D <spa=
n class=3D"hl-string">'Messages : Create'</span>; true }
	<span class=3D"hl-keyword">static</span> content =3D  {
		submit { $(<span class=3D"hl-string">'input[type=3Dsubmit]'</span>) }
		form { $(<span class=3D"hl-string">'form'</span>) }
		errors(required:false) { $(<span class=3D"hl-string">'label.error, .alert=
-error'</span>)?.text() }
	}
}</pre>
<p>The first thing you will notice is that our <code class=3D"literal">Crea=
teMessagePage</code> extends <code class=3D"literal">Page</code>. We won=92=
t
go over the details of <code class=3D"literal">Page</code>, but in summary =
it contains common functionality for all of
our pages. The next thing you will notice is that we define a URL in which =
this page can
be found. This allows us to navigate to the page as follows.</p>
<pre class=3D"programlisting">to CreateMessagePage</pre>
<p>We also have an <code class=3D"literal">at</code> closure that determine=
s if we are at the specified page. It should return
<code class=3D"literal">true</code> if we are on the correct page. This is =
why we can assert that we are on the correct
page as follows.</p>
<pre class=3D"programlisting">then:
at CreateMessagePage
errors.contains(<span class=3D"hl-string">'This field is required.'</span>)=
</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>We use an assertion in the closure, so that we can determine where thing=
s went wrong if
we were at the wrong page.</p>
</td></tr></tbody></table></div>
<p>Next we create a <code class=3D"literal">content</code> closure that spe=
cifies all the areas of interest within the page.
We can use a
<a class=3D"ulink" href=3D"http://www.gebish.org/manual/current/#the-jquery=
-ish-navigator-api" target=3D"_top">jQuery-ish Navigator API</a>
to select the content we are interested in.</p>
<p>Finally, we can verify that a new message was created successfully.</p>
<pre class=3D"programlisting">then:
at ViewMessagePage
success =3D=3D <span class=3D"hl-string">'Successfully created a new messag=
e'</span>
id
date
summary =3D=3D expectedSummary
message =3D=3D expectedMessage</pre>
<p>For further details on how to get the most out of Geb, consult
<a class=3D"ulink" href=3D"http://www.gebish.org/manual/current/" target=3D=
"_top">The Book of Geb</a> user=92s manual.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"spring-mvc-test-client" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#spring-mvc-test=
-client"></a>15.6.3&nbsp;Client-Side REST Tests</h3></div></div></div>
<p>Client-side tests can be used to test code that internally uses the <cod=
e class=3D"literal">RestTemplate</code>.
The idea is to declare expected requests and to provide "stub" responses so=
 that
you can focus on testing the code in isolation, i.e. without running a serv=
er.
Here is an example:</p>
<pre class=3D"programlisting">RestTemplate restTemplate =3D <span class=3D"=
hl-keyword">new</span> RestTemplate();

MockRestServiceServer mockServer =3D MockRestServiceServer.bindTo(restTempl=
ate).build();
mockServer.expect(requestTo(<span class=3D"hl-string">"/greeting"</span>)).=
andRespond(withSuccess());

<span class=3D"hl-comment">// Test code that uses the above RestTemplate ..=
.</span>

mockServer.verify();</pre>
<p>In the above example, <code class=3D"literal">MockRestServiceServer</cod=
e>, the central class for client-side REST
tests, configures the <code class=3D"literal">RestTemplate</code> with a cu=
stom <code class=3D"literal">ClientHttpRequestFactory</code> that
asserts actual requests against expectations and returns "stub" responses. =
In this case
we expect a request to "/greeting" and want to return a 200 response with
"text/plain" content. We could define as additional expected requests and s=
tub responses as
needed. When expected requests and stub responses are defined, the <code cl=
ass=3D"literal">RestTemplate</code> can be
used in client-side code as usual. At the end of testing <code class=3D"lit=
eral">mockServer.verify()</code> can be
used to verify that all expectations have been satisfied.</p>
<p>By default requests are expected in the order in which expectations were=
 declared.
You can set the <code class=3D"literal">ignoreExpectOrder</code> option whe=
n building the server in which case
all expectations are checked (in order) to find a match for a given request=
. That
means requests are allowed to come in any order. Here is an example:</p>
<pre class=3D"programlisting">server =3D MockRestServiceServer.bindTo(restT=
emplate).ignoreExpectOrder(true).build();</pre>
<p>Even with unordered requests by default each request is allowed to execu=
te once only.
The <code class=3D"literal">expect</code> method provides an overloaded var=
iant that accepts an <code class=3D"literal">ExpectedCount</code>
argument that specifies a count range, e.g. <code class=3D"literal">once</c=
ode>, <code class=3D"literal">manyTimes</code>, <code class=3D"literal">max=
</code>, <code class=3D"literal">min</code>,
<code class=3D"literal">between</code>, and so on. Here is an example:</p>
<pre class=3D"programlisting">RestTemplate restTemplate =3D <span class=3D"=
hl-keyword">new</span> RestTemplate();

MockRestServiceServer mockServer =3D MockRestServiceServer.bindTo(restTempl=
ate).build();
mockServer.expect(times(<span class=3D"hl-number">2</span>), requestTo(<spa=
n class=3D"hl-string">"/foo"</span>)).andRespond(withSuccess());
mockServer.expect(times(<span class=3D"hl-number">3</span>), requestTo(<spa=
n class=3D"hl-string">"/bar"</span>)).andRespond(withSuccess());

<span class=3D"hl-comment">// ...</span>

mockServer.verify();</pre>
<p>Note that when <code class=3D"literal">ignoreExpectOrder</code> is not s=
et (the default), and therefore requests
are expected in order of declaration, then that order only applies to the f=
irst of
any expected request. For example if "/foo" is expected 2 times followed by=
 "/bar"
3 times, then there should be a request to "/foo" before there is a request=
 to "/bar"
but aside from that subsequent "/foo" and "/bar" requests can come at any t=
ime.</p>
<p>As an alternative to all of the above the client-side test support also =
provides a
<code class=3D"literal">ClientHttpRequestFactory</code> implementation that=
 can be configured into a <code class=3D"literal">RestTemplate</code>
to bind it to a <code class=3D"literal">MockMvc</code> instance. That allow=
s processing requests using actual
server-side logic but without running a server. Here is an example:</p>
<pre class=3D"programlisting">MockMvc mockMvc =3D MockMvcBuilders.webAppCon=
textSetup(<span class=3D"hl-keyword">this</span>.wac).build();
<span class=3D"hl-keyword">this</span>.restTemplate =3D <span class=3D"hl-k=
eyword">new</span> RestTemplate(<span class=3D"hl-keyword">new</span> MockM=
vcClientHttpRequestFactory(mockMvc));

<span class=3D"hl-comment">// Test code that uses the above RestTemplate ..=
.</span>

mockServer.verify();</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-client-static-imports" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
spring-mvc-test-client-static-imports"></a>Static Imports</h4></div></div><=
/div>
<p>Just like with server-side tests, the fluent API for client-side tests r=
equires a few
static imports. Those are easy to find by searching <span class=3D"emphasis=
"><em>"MockRest*"</em></span>. Eclipse users
should add <code class=3D"literal">"MockRestRequestMatchers.*"</code> and <=
code class=3D"literal">"MockRestResponseCreators.*"</code>
as "favorite static members" in the Eclipse preferences under
<span class=3D"emphasis"><em>Java &#8594; Editor &#8594; Content Assist &#8=
594; Favorites</em></span>.
That allows using content assist after typing the first character of the
static method name. Other IDEs (e.g. IntelliJ) may not require any addition=
al
configuration. Just check the support for code completion on static members=
.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"spring-mvc-test-client-resources" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#sprin=
g-mvc-test-client-resources"></a>Further Examples of Client-side REST Tests=
</h4></div></div></div>
<p>Spring MVC Test=92s own tests include
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-framew=
ork/tree/master/spring-test/src/test/java/org/springframework/test/web/clie=
nt/samples" target=3D"_top">example
tests</a> of client-side REST tests.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"testing-examples-petclinic" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#testing-examples-petclinic"></a>15.7&nbsp;PetClinic Example</h2>=
</div></div></div>
<p>The PetClinic application, available on
<a class=3D"ulink" href=3D"https://github.com/spring-projects/spring-petcli=
nic" target=3D"_top">GitHub</a>, illustrates several features
of the <span class=3D"emphasis"><em>Spring TestContext Framework</em></span=
> in a JUnit 4 environment. Most test functionality
is included in the <code class=3D"literal">AbstractClinicTests</code>, for =
which a partial listing is shown below:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> <spa=
n class=3D"hl-keyword">static</span> org.junit.Assert.assertEquals;
<span class=3D"hl-comment">// import ...</span>

<span class=3D"strong"><strong>@ContextConfiguration</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">abstrac=
t</span> <span class=3D"hl-keyword">class</span> AbstractClinicTests <span =
class=3D"strong"><strong>extends AbstractTransactionalJUnit4SpringContextTe=
sts</strong></span> {

    <span class=3D"strong"><strong>@Autowired</strong></span>
    <span class=3D"hl-keyword">protected</span> Clinic clinic;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Test</span></e=
m>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> getVets() {
        Collection&lt;Vet&gt; vets =3D <span class=3D"hl-keyword">this</spa=
n>.clinic.getVets();
        assertEquals(<span class=3D"hl-string">"JDBC query must show the sa=
me number of vets"</span>,
            <span class=3D"strong"><strong>super.countRowsInTable("VETS")</=
strong></span>, vets.size());
        Vet v1 =3D EntityUtils.getById(vets, Vet.<span class=3D"hl-keyword"=
>class</span>, <span class=3D"hl-number">2</span>);
        assertEquals(<span class=3D"hl-string">"Leary"</span>, v1.getLastNa=
me());
        assertEquals(<span class=3D"hl-number">1</span>, v1.getNrOfSpecialt=
ies());
        assertEquals(<span class=3D"hl-string">"radiology"</span>, (v1.getS=
pecialties().get(<span class=3D"hl-number">0</span>)).getName());
        <span class=3D"hl-comment">// ...</span>
    }

    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Notes:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
This test case extends the <code class=3D"literal">AbstractTransactionalJUn=
it4SpringContextTests</code> class, from
which it inherits configuration for Dependency Injection (through the
<code class=3D"literal">DependencyInjectionTestExecutionListener</code>) an=
d transactional behavior (through the
<code class=3D"literal">TransactionalTestExecutionListener</code>).
</li><li class=3D"listitem">
The <code class=3D"literal">clinic</code> instance variable&#8201;=97&#8201=
;the application object being tested&#8201;=97&#8201;is set by
Dependency Injection through <code class=3D"literal">@Autowired</code> sema=
ntics.
</li><li class=3D"listitem">
The <code class=3D"literal">getVets()</code> method illustrates how you can=
 use the inherited <code class=3D"literal">countRowsInTable()</code>
method to easily verify the number of rows in a given table, thus verifying=
 correct
behavior of the application code being tested. This allows for stronger tes=
ts and
lessens dependency on the exact test data. For example, you can add additio=
nal rows in
the database without breaking tests.
</li><li class=3D"listitem">
Like many integration tests that use a database, most of the tests in
<code class=3D"literal">AbstractClinicTests</code> depend on a minimum amou=
nt of data already in the database before
the test cases run. Alternatively, you might choose to populate the databas=
e within the
test fixture set up of your test cases&#8201;=97&#8201;again, within the sa=
me transaction as the
tests.
</li></ul></div>
<p>The PetClinic application supports three data access technologies: JDBC,=
 Hibernate, and
JPA. By declaring <code class=3D"literal">@ContextConfiguration</code> with=
out any specific resource locations, the
<code class=3D"literal">AbstractClinicTests</code> class will have its appl=
ication context loaded from the default
location, <code class=3D"literal">AbstractClinicTests-context.xml</code>, w=
hich declares a common <code class=3D"literal">DataSource</code>.
Subclasses specify additional context locations that must declare a
<code class=3D"literal">PlatformTransactionManager</code> and a concrete im=
plementation of <code class=3D"literal">Clinic</code>.</p>
<p>For example, the Hibernate implementation of the PetClinic tests contain=
s the following
implementation. For this example, <code class=3D"literal">HibernateClinicTe=
sts</code> does not contain a single line
of code: we only need to declare <code class=3D"literal">@ContextConfigurat=
ion</code>, and the tests are inherited
from <code class=3D"literal">AbstractClinicTests</code>. Because <code clas=
s=3D"literal">@ContextConfiguration</code> is declared without any
specific resource locations, the <span class=3D"emphasis"><em>Spring TestCo=
ntext Framework</em></span> loads an application
context from all the beans defined in <code class=3D"literal">AbstractClini=
cTests-context.xml</code> (i.e., the
inherited locations) and <code class=3D"literal">HibernateClinicTests-conte=
xt.xml</code>, with
<code class=3D"literal">HibernateClinicTests-context.xml</code> possibly ov=
erriding beans defined in
<code class=3D"literal">AbstractClinicTests-context.xml</code>.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@ContextConfig=
uration</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> HibernateClinicTests <span class=3D"hl-keyword">extends</span> Abstra=
ctClinicTests { }</pre>
<p>In a large-scale application, the Spring configuration is often split ac=
ross multiple
files. Consequently, configuration locations are typically specified in a c=
ommon base
class for all application-specific integration tests. Such a base class may=
 also add
useful instance variables&#8201;=97&#8201;populated by Dependency Injection=
, naturally&#8201;=97&#8201;such as a
<code class=3D"literal">SessionFactory</code> in the case of an application=
 using Hibernate.</p>
<p>As far as possible, you should have exactly the same Spring configuratio=
n files in your
integration tests as in the deployed environment. One likely point of diffe=
rence
concerns database connection pooling and transaction infrastructure. If you=
 are
deploying to a full-blown application server, you will probably use its con=
nection pool
(available through JNDI) and JTA implementation. Thus in production you wil=
l use a
<code class=3D"literal">JndiObjectFactoryBean</code> or <code class=3D"lite=
ral">&lt;jee:jndi-lookup&gt;</code> for the <code class=3D"literal">DataSou=
rce</code> and
<code class=3D"literal">JtaTransactionManager</code>. JNDI and JTA will not=
 be available in out-of-container
integration tests, so you should use a combination like the Commons DBCP
<code class=3D"literal">BasicDataSource</code> and <code class=3D"literal">=
DataSourceTransactionManager</code> or <code class=3D"literal">HibernateTra=
nsactionManager</code>
for them. You can factor out this variant behavior into a single XML file, =
having the
choice between application server and a 'local' configuration separated fro=
m all other
configuration, which will not vary between the test and production environm=
ents. In
addition, it is advisable to use properties files for connection settings. =
See the
PetClinic application for an example.</p>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"testing-resources" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#testing-resources"><=
/a>16.&nbsp;Further Resources</h2></div></div></div>
<p>Consult the following resources for more information about testing:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://www.junit.org/" target=3D"_top">JUnit</a>=
: "<span class=3D"emphasis"><em>A programmer-oriented testing framework for=
 Java</em></span>".
Used by the Spring Framework in its test suite.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://testng.org/" target=3D"_top">TestNG</a>: =
A testing framework inspired by JUnit with added support
for annotations, test groups, data-driven testing, distributed testing, etc=
.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"https://joel-costigliola.github.io/assertj/" tar=
get=3D"_top">AssertJ</a>: "<span class=3D"emphasis"><em>Fluent assertions f=
or Java</em></span>"
including support for Java 8 lambdas, streams, etc.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"https://en.wikipedia.org/wiki/Mock_Object" targe=
t=3D"_top">Mock Objects</a>: Article in Wikipedia.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://www.mockobjects.com/" target=3D"_top">Moc=
kObjects.com</a>: Web site dedicated to mock objects, a
technique for improving the design of code within test-driven development.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://mockito.org/" target=3D"_top">Mockito</a>=
: Java mock library based on the
<a class=3D"ulink" href=3D"http://xunitpatterns.com/Test%20Spy.html" target=
=3D"_top">test spy</a> pattern.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://www.easymock.org/" target=3D"_top">EasyMo=
ck</a>: Java library "<span class=3D"emphasis"><em>that provides Mock Objec=
ts for
interfaces (and objects through the class extension) by generating them on =
the fly
using Java=92s proxy mechanism.</em></span>" Used by the Spring Framework i=
n its test suite.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://www.jmock.org/" target=3D"_top">JMock</a>=
: Library that supports test-driven development of Java
code with mock objects.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://dbunit.sourceforge.net/" target=3D"_top">=
DbUnit</a>: JUnit extension (also usable with Ant and
Maven) targeted for database-driven projects that, among other things, puts=
 your
database into a known state between test runs.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://grinder.sourceforge.net/" target=3D"_top"=
>The Grinder</a>: Java load testing framework.
</li></ul></div>
</div>
</div>
<div class=3D"part"><div class=3D"titlepage"><div><div><h1 class=3D"title">=
<a name=3D"spring-data-tier" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#spring-data-tier"></a>Pa=
rt&nbsp;V.&nbsp;Data Access</h1></div></div></div>
<div class=3D"partintro"><div></div>
<p>This part of the reference documentation is concerned with data access a=
nd the
interaction between the data access layer and the business or service layer=
.</p>
<p>Spring=92s comprehensive transaction management support is covered in so=
me detail,
followed by thorough coverage of the various data access frameworks and tec=
hnologies
that the Spring Framework integrates with.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction" title=3D"17.&nbsp;Tran=
saction Management">Chapter&nbsp;17, <i>Transaction Management</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#dao" title=3D"18.&nbsp;DAO support"=
>Chapter&nbsp;18, <i>DAO support</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc" title=3D"19.&nbsp;Data access=
 with JDBC">Chapter&nbsp;19, <i>Data access with JDBC</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#orm" title=3D"20.&nbsp;Object Relat=
ional Mapping (ORM) Data Access">Chapter&nbsp;20, <i>Object Relational Mapp=
ing (ORM) Data Access</i></a>
</li><li class=3D"listitem">
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#oxm" title=3D"21.&nbsp;Marshalling =
XML using O/X Mappers">Chapter&nbsp;21, <i>Marshalling XML using O/X Mapper=
s</i></a>
</li></ul></div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"transaction" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#transaction"></a>17.&nbsp;=
Transaction Management</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-intro" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#transaction-intro"></a>17.1&nbsp;Introduction to Spring Framework transac=
tion management</h2></div></div></div>
<p>Comprehensive transaction support is among the most compelling reasons t=
o use the Spring
Framework. The Spring Framework provides a consistent abstraction for trans=
action
management that delivers the following benefits:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Consistent programming model across different transaction APIs such as Java
Transaction API (JTA), JDBC, Hibernate, Java Persistence API (JPA), and Jav=
a Data
Objects (JDO).
</li><li class=3D"listitem">
Support for <a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-declarative=
" title=3D"17.5&nbsp;Declarative transaction management">declarative transa=
ction management</a>.
</li><li class=3D"listitem">
Simpler API for <a class=3D"link" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-program=
matic" title=3D"17.6&nbsp;Programmatic transaction management">programmatic=
</a> transaction management than
complex transaction APIs such as JTA.
</li><li class=3D"listitem">
Excellent integration with Spring=92s data access abstractions.
</li></ul></div>
<p>The following sections describe the Spring Framework=92s transaction val=
ue-adds and
technologies. (The chapter also includes discussions of best practices, app=
lication
server integration, and solutions to common problems.)</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-motivation" title=3D"17=
.2&nbsp;Advantages of the Spring Framework=92s transaction support model">A=
dvantages of the Spring Framework=92s transaction support
model</a> describes <span class=3D"emphasis"><em>why</em></span> you would =
use the Spring Framework=92s transaction abstraction
instead of EJB Container-Managed Transactions (CMT) or choosing to drive lo=
cal
transactions through a proprietary API such as Hibernate.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-strategies" title=3D"17=
.3&nbsp;Understanding the Spring Framework transaction abstraction">Underst=
anding the Spring Framework transaction abstraction</a>
outlines the core classes and describes how to configure and obtain <code c=
lass=3D"literal">DataSource</code>
instances from a variety of sources.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#tx-resource-synchronization" title=
=3D"17.4&nbsp;Synchronizing resources with transactions">Synchronizing reso=
urces with transactions</a>describes
how the application code ensures that resources are created, reused, and cl=
eaned up
properly.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-declarative" title=3D"1=
7.5&nbsp;Declarative transaction management">Declarative transaction manage=
ment</a> describes support for
declarative transaction management.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-programmatic" title=3D"=
17.6&nbsp;Programmatic transaction management">Programmatic transaction man=
agement</a> covers support for
programmatic (that is, explicitly coded) transaction management.
</li><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-event" title=3D"17.8&nb=
sp;Transaction bound event">Transaction bound event</a> describes how you c=
ould use application
events within a transaction.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-motivation" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#transaction-motivation"></a>17.2&nbsp;Advantages of the Spring Frame=
work=92s transaction support model</h2></div></div></div>
<p>Traditionally, Java EE developers have had two choices for transaction m=
anagement:
<span class=3D"emphasis"><em>global</em></span> or <span class=3D"emphasis"=
><em>local</em></span> transactions, both of which have profound limitation=
s. Global
and local transaction management is reviewed in the next two sections, foll=
owed by a
discussion of how the Spring Framework=92s transaction management support a=
ddresses the
limitations of the global and local transaction models.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-global" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-global"=
></a>17.2.1&nbsp;Global transactions</h3></div></div></div>
<p>Global transactions enable you to work with multiple transactional resou=
rces, typically
relational databases and message queues. The application server manages glo=
bal
transactions through the JTA, which is a cumbersome API to use (partly due =
to its
exception model). Furthermore, a JTA <code class=3D"literal">UserTransactio=
n</code> normally needs to be sourced from
JNDI, meaning that you <span class=3D"emphasis"><em>also</em></span> need t=
o use JNDI in order to use JTA. Obviously the use
of global transactions would limit any potential reuse of application code,=
 as JTA is
normally only available in an application server environment.</p>
<p>Previously, the preferred way to use global transactions was via EJB <sp=
an class=3D"emphasis"><em>CMT</em></span>
(<span class=3D"emphasis"><em>Container Managed Transaction</em></span>): C=
MT is a form of <span class=3D"emphasis"><em>declarative transaction
management</em></span> (as distinguished from <span class=3D"emphasis"><em>=
programmatic transaction management</em></span>). EJB CMT
removes the need for transaction-related JNDI lookups, although of course t=
he use of EJB
itself necessitates the use of JNDI. It removes most but not all of the nee=
d to write
Java code to control transactions. The significant downside is that CMT is =
tied to JTA
and an application server environment. Also, it is only available if one ch=
ooses to
implement business logic in EJBs, or at least behind a transactional EJB fa=
cade. The
negatives of EJB in general are so great that this is not an attractive pro=
position,
especially in the face of compelling alternatives for declarative transacti=
on management.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-local" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transaction-local"><=
/a>17.2.2&nbsp;Local transactions</h3></div></div></div>
<p>Local transactions are resource-specific, such as a transaction associat=
ed with a JDBC
connection. Local transactions may be easier to use, but have significant d=
isadvantages:
they cannot work across multiple transactional resources. For example, code=
 that manages
transactions using a JDBC connection cannot run within a global JTA transac=
tion. Because
the application server is not involved in transaction management, it cannot=
 help ensure
correctness across multiple resources. (It is worth noting that most applic=
ations use a
single transaction resource.) Another downside is that local transactions a=
re invasive
to the programming model.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-programming-model" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transact=
ion-programming-model"></a>17.2.3&nbsp;Spring Framework=92s consistent prog=
ramming model</h3></div></div></div>
<p>Spring resolves the disadvantages of global and local transactions. It e=
nables
application developers to use a <span class=3D"emphasis"><em>consistent</em=
></span> programming model <span class=3D"emphasis"><em>in any environment<=
/em></span>.
You write your code once, and it can benefit from different transaction man=
agement
strategies in different environments. The Spring Framework provides both de=
clarative and
programmatic transaction management. Most users prefer declarative transact=
ion
management, which is recommended in most cases.</p>
<p>With programmatic transaction management, developers work with the Sprin=
g Framework
transaction abstraction, which can run over any underlying transaction infr=
astructure.
With the preferred declarative model, developers typically write little or =
no code
related to transaction management, and hence do not depend on the Spring Fr=
amework
transaction API, or any other transaction API.</p>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Do you need an application server for transaction management?</b></p><=
/div></div></div>
<p>The Spring Framework=92s transaction management support changes traditio=
nal rules as to
when an enterprise Java application requires an application server.</p>
<p>In particular, you do not need an application server simply for declarat=
ive transactions
through EJBs. In fact, even if your application server has powerful JTA cap=
abilities,
you may decide that the Spring Framework=92s declarative transactions offer=
 more power and
a more productive programming model than EJB CMT.</p>
<p>Typically you need an application server=92s JTA capability only if your=
 application needs
to handle transactions across multiple resources, which is not a requiremen=
t for many
applications. Many high-end applications use a single, highly scalable data=
base (such as
Oracle RAC) instead. Standalone transaction managers such as
<a class=3D"ulink" href=3D"http://www.atomikos.com/" target=3D"_top">Atomik=
os Transactions</a> and <a class=3D"ulink" href=3D"http://jotm.objectweb.or=
g/" target=3D"_top">JOTM</a>
are other options. Of course, you may need other application server capabil=
ities such as
Java Message Service (JMS) and Java EE Connector Architecture (JCA).</p>
<p>The Spring Framework <span class=3D"emphasis"><em>gives you the choice o=
f when to scale your application to a fully
loaded application server</em></span>. Gone are the days when the only alte=
rnative to using EJB
CMT or JTA was to write code with local transactions such as those on JDBC =
connections,
and face a hefty rework if you need that code to run within global, contain=
er-managed
transactions. With the Spring Framework, only some of the bean definitions =
in your
configuration file, rather than your code, need to change.</p>
</div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-strategies" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#transaction-strategies"></a>17.3&nbsp;Understanding the Spring Frame=
work transaction abstraction</h2></div></div></div>
<p>The key to the Spring transaction abstraction is the notion of a <span c=
lass=3D"emphasis"><em>transaction
strategy</em></span>. A transaction strategy is defined by the
<code class=3D"literal">org.springframework.transaction.PlatformTransaction=
Manager</code> interface:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> PlatformTransactionManager {

    TransactionStatus getTransaction(TransactionDefinition definition) <spa=
n class=3D"hl-keyword">throws</span> TransactionException;

    <span class=3D"hl-keyword">void</span> commit(TransactionStatus status)=
 <span class=3D"hl-keyword">throws</span> TransactionException;

    <span class=3D"hl-keyword">void</span> rollback(TransactionStatus statu=
s) <span class=3D"hl-keyword">throws</span> TransactionException;
}</pre>
<p>This is primarily a service provider interface (SPI), although it can be=
 used
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-programmatic-ptm" title=
=3D"17.6.2&nbsp;Using the PlatformTransactionManager">programmatically</a> =
from your application code. Because
<code class=3D"literal">PlatformTransactionManager</code> is an <span class=
=3D"emphasis"><em>interface</em></span>, it can be easily mocked or stubbed=
 as
necessary. It is not tied to a lookup strategy such as JNDI.
<code class=3D"literal">PlatformTransactionManager</code> implementations a=
re defined like any other object (or bean)
in the Spring Framework IoC container. This benefit alone makes Spring Fram=
ework
transactions a worthwhile abstraction even when you work with JTA. Transact=
ional code
can be tested much more easily than if it used JTA directly.</p>
<p>Again in keeping with Spring=92s philosophy, the <code class=3D"literal"=
>TransactionException</code> that can be thrown
by any of the <code class=3D"literal">PlatformTransactionManager</code> int=
erface=92s methods is <span class=3D"emphasis"><em>unchecked</em></span> (t=
hat
is, it extends the <code class=3D"literal">java.lang.RuntimeException</code=
> class). Transaction infrastructure
failures are almost invariably fatal. In rare cases where application code =
can actually
recover from a transaction failure, the application developer can still cho=
ose to catch
and handle <code class=3D"literal">TransactionException</code>. The salient=
 point is that developers are not
<span class=3D"emphasis"><em>forced</em></span> to do so.</p>
<p>The <code class=3D"literal">getTransaction(..)</code> method returns a <=
code class=3D"literal">TransactionStatus</code> object, depending on a
<code class=3D"literal">TransactionDefinition</code> parameter. The returne=
d <code class=3D"literal">TransactionStatus</code> might represent a
new transaction, or can represent an existing transaction if a matching tra=
nsaction
exists in the current call stack. The implication in this latter case is th=
at, as with
Java EE transaction contexts, a <code class=3D"literal">TransactionStatus</=
code> is associated with a <span class=3D"emphasis"><em>thread</em></span> =
of
execution.</p>
<p>The <code class=3D"literal">TransactionDefinition</code> interface speci=
fies:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>Propagation</em></span>: Typically, all code e=
xecuted within a transaction scope will run in
that transaction. However, you have the option of specifying the behavior i=
n the event
that a transactional method is executed when a transaction context already =
exists. For
example, code can continue running in the existing transaction (the common =
case); or
the existing transaction can be suspended and a new transaction created. <s=
pan class=3D"emphasis"><em>Spring
offers all of the transaction propagation options familiar from EJB CMT</em=
></span>. To read
about the semantics of transaction propagation in Spring, see <a class=3D"x=
ref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#tx-propagation" title=3D"17.5.7&nbsp;Transaction=
 propagation">Section&nbsp;17.5.7, =93Transaction propagation=94</a>.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Isolation</em></span>: The degree to which thi=
s transaction is isolated from the work of other
transactions. For example, can this transaction see uncommitted writes from=
 other
transactions?
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Timeout</em></span>: How long this transaction=
 runs before timing out and being rolled back
automatically by the underlying transaction infrastructure.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>Read-only status</em></span>: A read-only tran=
saction can be used when your code reads but
does not modify data. Read-only transactions can be a useful optimization i=
n some
cases, such as when you are using Hibernate.
</li></ul></div>
<p>These settings reflect standard transactional concepts. If necessary, re=
fer to resources
that discuss transaction isolation levels and other core transaction concep=
ts.
Understanding these concepts is essential to using the Spring Framework or =
any
transaction management solution.</p>
<p>The <code class=3D"literal">TransactionStatus</code> interface provides =
a simple way for transactional code to
control transaction execution and query transaction status. The concepts sh=
ould be
familiar, as they are common to all transaction APIs:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">interface</span> TransactionStatus <span class=3D"hl=
-keyword">extends</span> SavepointManager {

    <span class=3D"hl-keyword">boolean</span> isNewTransaction();

    <span class=3D"hl-keyword">boolean</span> hasSavepoint();

    <span class=3D"hl-keyword">void</span> setRollbackOnly();

    <span class=3D"hl-keyword">boolean</span> isRollbackOnly();

    <span class=3D"hl-keyword">void</span> flush();

    <span class=3D"hl-keyword">boolean</span> isCompleted();

}</pre>
<p>Regardless of whether you opt for declarative or programmatic transactio=
n management in
Spring, defining the correct <code class=3D"literal">PlatformTransactionMan=
ager</code> implementation is absolutely
essential. You typically define this implementation through dependency inje=
ction.</p>
<p><code class=3D"literal">PlatformTransactionManager</code> implementation=
s normally require knowledge of the
environment in which they work: JDBC, JTA, Hibernate, and so on. The follow=
ing examples
show how you can define a local <code class=3D"literal">PlatformTransaction=
Manager</code> implementation. (This
example works with plain JDBC.)</p>
<p>You define a JDBC <code class=3D"literal">DataSource</code></p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"dataSource"</s=
pan> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"=
org.apache.commons.dbcp.BasicDataSource"</span> <span class=3D"hl-attribute=
">destroy-method</span>=3D<span class=3D"hl-value">"close"</span><span clas=
s=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span clas=
s=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.driverCl=
assName}"</span><span class=3D"hl-tag"> /&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-attr=
ibute">value</span>=3D<span class=3D"hl-value">"${jdbc.url}"</span><span cl=
ass=3D"hl-tag"> /&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"username"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.username}"</spa=
n><span class=3D"hl-tag"> /&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"password"</span> <span class=3D"hl=
-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.password}"</spa=
n><span class=3D"hl-tag"> /&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>The related <code class=3D"literal">PlatformTransactionManager</code> be=
an definition will then have a reference to
the <code class=3D"literal">DataSource</code> definition. It will look like=
 this:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"txManager"</sp=
an> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.jdbc.datasource.DataSourceTransactionManager"</span><spa=
n class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"=
hl-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span><spa=
n class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>If you use JTA in a Java EE container then you use a container <code cla=
ss=3D"literal">DataSource</code>, obtained
through JNDI, in conjunction with Spring=92s <code class=3D"literal">JtaTra=
nsactionManager</code>. This is what the JTA
and JNDI lookup version would look like:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:jee</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/jee"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;jee:jndi-lookup</span> <span class=3D"hl-att=
ribute">id</span>=3D<span class=3D"hl-value">"dataSource"</span> <span clas=
s=3D"hl-attribute">jndi-name</span>=3D<span class=3D"hl-value">"jdbc/jpetst=
ore"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"txManager"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"org.springframework.transac=
tion.jta.JtaTransactionManager"</span><span class=3D"hl-tag"> /&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other &lt;bean/&gt; definitions here=
 --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The <code class=3D"literal">JtaTransactionManager</code> does not need t=
o know about the <code class=3D"literal">DataSource</code>, or any other
specific resources, because it uses the container=92s global transaction ma=
nagement
infrastructure.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The above definition of the <code class=3D"literal">dataSource</code> be=
an uses the <code class=3D"literal">&lt;jndi-lookup/&gt;</code> tag from th=
e
<code class=3D"literal">jee</code> namespace. For more information on schem=
a-based configuration, see <a class=3D"xref" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#xsd-conf=
iguration" title=3D"41.&nbsp;XML Schema-based configuration">Chapter&nbsp;4=
1, <i>XML Schema-based configuration</i></a>,
and for more information on the <code class=3D"literal">&lt;jee/&gt;</code>=
 tags see the section entitled
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee" title=
=3D"41.2.3&nbsp;the jee schema">Section&nbsp;41.2.3, =93the jee schema=94</=
a>.</p>
</td></tr></tbody></table></div>
<p>You can also use Hibernate local transactions easily, as shown in the fo=
llowing
examples. In this case, you need to define a Hibernate <code class=3D"liter=
al">LocalSessionFactoryBean</code>, which
your application code will use to obtain Hibernate <code class=3D"literal">=
Session</code> instances.</p>
<p>The <code class=3D"literal">DataSource</code> bean definition will be si=
milar to the local JDBC example shown
previously and thus is not shown in the following example.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If the <code class=3D"literal">DataSource</code>, used by any non-JTA tr=
ansaction manager, is looked up via JNDI and
managed by a Java EE container, then it should be non-transactional because=
 the Spring
Framework, rather than the Java EE container, will manage the transactions.=
</p>
</td></tr></tbody></table></div>
<p>The <code class=3D"literal">txManager</code> bean in this case is of the=
 <code class=3D"literal">HibernateTransactionManager</code> type. In the
same way as the <code class=3D"literal">DataSourceTransactionManager</code>=
 needs a reference to the <code class=3D"literal">DataSource</code>,
the <code class=3D"literal">HibernateTransactionManager</code> needs a refe=
rence to the <code class=3D"literal">SessionFactory</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"sessionFactory=
"</span> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-valu=
e">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span><span=
 class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"=
hl-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span><spa=
n class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"mappingResources"</span><span clas=
s=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;list&gt;</span>
            <span class=3D"hl-tag">&lt;value&gt;</span>org/springframework/=
samples/petclinic/hibernate/petclinic.hbm.xml<span class=3D"hl-tag">&lt;/va=
lue&gt;</span>
        <span class=3D"hl-tag">&lt;/list&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"hibernateProperties"</span><span c=
lass=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;value&gt;</span>
            hibernate.dialect=3D${hibernate.dialect}
        <span class=3D"hl-tag">&lt;/value&gt;</span>
    <span class=3D"hl-tag">&lt;/property&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id</spa=
n>=3D<span class=3D"hl-value">"txManager"</span> <span class=3D"hl-attribut=
e">class</span>=3D<span class=3D"hl-value">"org.springframework.orm.hiberna=
te5.HibernateTransactionManager"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"sessionFactory"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"sessionFactory"</s=
pan><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>If you are using Hibernate and Java EE container-managed JTA transaction=
s, then you
should simply use the same <code class=3D"literal">JtaTransactionManager</c=
ode> as in the previous JTA example for
JDBC.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"txManager"</sp=
an> <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"o=
rg.springframework.transaction.jta.JtaTransactionManager"</span><span class=
=3D"hl-tag">/&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>If you use JTA , then your transaction manager definition will look the =
same regardless
of what data access technology you use, be it JDBC, Hibernate JPA or any ot=
her supported
technology. This is due to the fact that JTA transactions are global transa=
ctions, which
can enlist any transactional resource.</p>
</td></tr></tbody></table></div>
<p>In all these cases, application code does not need to change. You can ch=
ange how
transactions are managed merely by changing configuration, even if that cha=
nge means
moving from local to global transactions or vice versa.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"tx-resource-synchronization" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#tx-resource-synchronization"></a>17.4&nbsp;Synchronizing resour=
ces with transactions</h2></div></div></div>
<p>It should now be clear how you create different transaction managers, an=
d how they are
linked to related resources that need to be synchronized to transactions (f=
or example
<code class=3D"literal">DataSourceTransactionManager</code> to a JDBC <code=
 class=3D"literal">DataSource</code>, <code class=3D"literal">HibernateTran=
sactionManager</code> to
a Hibernate <code class=3D"literal">SessionFactory</code>, and so forth). T=
his section describes how the application
code, directly or indirectly using a persistence API such as JDBC, Hibernat=
e, or JDO,
ensures that these resources are created, reused, and cleaned up properly. =
The section
also discusses how transaction synchronization is triggered (optionally) th=
rough the
relevant <code class=3D"literal">PlatformTransactionManager</code>.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"tx-resource-synchronization-high" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-re=
source-synchronization-high"></a>17.4.1&nbsp;High-level synchronization app=
roach</h3></div></div></div>
<p>The preferred approach is to use Spring=92s highest level template based=
 persistence
integration APIs or to use native ORM APIs with transaction- aware factory =
beans or
proxies for managing the native resource factories. These transaction-aware=
 solutions
internally handle resource creation and reuse, cleanup, optional transactio=
n
synchronization of the resources, and exception mapping. Thus user data acc=
ess code does
not have to address these tasks, but can be focused purely on non-boilerpla=
te
persistence logic. Generally, you use the native ORM API or take a <span cl=
ass=3D"emphasis"><em>template</em></span> approach
for JDBC access by using the <code class=3D"literal">JdbcTemplate</code>. T=
hese solutions are detailed in subsequent
chapters of this reference documentation.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"tx-resource-synchronization-low" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-res=
ource-synchronization-low"></a>17.4.2&nbsp;Low-level synchronization approa=
ch</h3></div></div></div>
<p>Classes such as <code class=3D"literal">DataSourceUtils</code> (for JDBC=
), <code class=3D"literal">EntityManagerFactoryUtils</code> (for JPA),
<code class=3D"literal">SessionFactoryUtils</code> (for Hibernate), <code c=
lass=3D"literal">PersistenceManagerFactoryUtils</code> (for JDO), and
so on exist at a lower level. When you want the application code to deal di=
rectly with
the resource types of the native persistence APIs, you use these classes to=
 ensure that
proper Spring Framework-managed instances are obtained, transactions are (o=
ptionally)
synchronized, and exceptions that occur in the process are properly mapped =
to a
consistent API.</p>
<p>For example, in the case of JDBC, instead of the traditional JDBC approa=
ch of calling
the <code class=3D"literal">getConnection()</code> method on the <code clas=
s=3D"literal">DataSource</code>, you instead use Spring=92s
<code class=3D"literal">org.springframework.jdbc.datasource.DataSourceUtils=
</code> class as follows:</p>
<pre class=3D"programlisting">Connection conn =3D DataSourceUtils.getConnec=
tion(dataSource);</pre>
<p>If an existing transaction already has a connection synchronized (linked=
) to it, that
instance is returned. Otherwise, the method call triggers the creation of a=
 new
connection, which is (optionally) synchronized to any existing transaction,=
 and made
available for subsequent reuse in that same transaction. As mentioned, any
<code class=3D"literal">SQLException</code> is wrapped in a Spring Framewor=
k <code class=3D"literal">CannotGetJdbcConnectionException</code>, one
of the Spring Framework=92s hierarchy of unchecked DataAccessExceptions. Th=
is approach
gives you more information than can be obtained easily from the <code class=
=3D"literal">SQLException</code>, and
ensures portability across databases, even across different persistence tec=
hnologies.</p>
<p>This approach also works without Spring transaction management (transact=
ion
synchronization is optional), so you can use it whether or not you are usin=
g Spring for
transaction management.</p>
<p>Of course, once you have used Spring=92s JDBC support, JPA support or Hi=
bernate support,
you will generally prefer not to use <code class=3D"literal">DataSourceUtil=
s</code> or the other helper classes,
because you will be much happier working through the Spring abstraction tha=
n directly
with the relevant APIs. For example, if you use the Spring <code class=3D"l=
iteral">JdbcTemplate</code> or
<code class=3D"literal">jdbc.object</code> package to simplify your use of =
JDBC, correct connection retrieval occurs
behind the scenes and you won=92t need to write any special code.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"tx-resource-synchronization-tadsp" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-r=
esource-synchronization-tadsp"></a>17.4.3&nbsp;TransactionAwareDataSourcePr=
oxy</h3></div></div></div>
<p>At the very lowest level exists the <code class=3D"literal">TransactionA=
wareDataSourceProxy</code> class. This is a
proxy for a target <code class=3D"literal">DataSource</code>, which wraps t=
he target <code class=3D"literal">DataSource</code> to add awareness of
Spring-managed transactions. In this respect, it is similar to a transactio=
nal JNDI
<code class=3D"literal">DataSource</code> as provided by a Java EE server.<=
/p>
<p>It should almost never be necessary or desirable to use this class, exce=
pt when existing
code must be called and passed a standard JDBC <code class=3D"literal">Data=
Source</code> interface implementation. In
that case, it is possible that this code is usable, but participating in Sp=
ring managed
transactions. It is preferable to write your new code by using the higher l=
evel
abstractions mentioned above.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-declarative" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#transaction-declarative"></a>17.5&nbsp;Declarative transaction mana=
gement</h2></div></div></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Most Spring Framework users choose declarative transaction management. T=
his option has
the least impact on application code, and hence is most consistent with the=
 ideals of a
<span class=3D"emphasis"><em>non-invasive</em></span> lightweight container=
.</p>
</td></tr></tbody></table></div>
<p>The Spring Framework=92s declarative transaction management is made poss=
ible with Spring
aspect-oriented programming (AOP), although, as the transactional aspects c=
ode comes
with the Spring Framework distribution and may be used in a boilerplate fas=
hion, AOP
concepts do not generally have to be understood to make effective use of th=
is code.</p>
<p>The Spring Framework=92s declarative transaction management is similar t=
o EJB CMT in that
you can specify transaction behavior (or lack of it) down to individual met=
hod level. It
is possible to make a <code class=3D"literal">setRollbackOnly()</code> call=
 within a transaction context if
necessary. The differences between the two types of transaction management =
are:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Unlike EJB CMT, which is tied to JTA, the Spring Framework=92s declarative =
transaction
management works in any environment. It can work with JTA transactions or l=
ocal
transactions using JDBC, JPA, Hibernate or JDO by simply adjusting the conf=
iguration
files.
</li><li class=3D"listitem">
You can apply the Spring Framework declarative transaction management to an=
y class,
not merely special classes such as EJBs.
</li><li class=3D"listitem">
The Spring Framework offers declarative
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-declarative-rolling-bac=
k" title=3D"17.5.3&nbsp;Rolling back a declarative transaction"><span class=
=3D"emphasis"><em>rollback rules</em></span>,</a>a feature with no EJB
equivalent. Both programmatic and declarative support for rollback rules is=
 provided.
</li><li class=3D"listitem">
The Spring Framework enables you to customize transactional behavior, by us=
ing AOP.
For example, you can insert custom behavior in the case of transaction roll=
back. You
can also add arbitrary advice, along with the transactional advice. With EJ=
B CMT, you
cannot influence the container=92s transaction management except with
<code class=3D"literal">setRollbackOnly()</code>.
</li><li class=3D"listitem">
The Spring Framework does not support propagation of transaction contexts a=
cross
remote calls, as do high-end application servers. If you need this feature,=
 we
recommend that you use EJB. However, consider carefully before using such a=
 feature,
because normally, one does not want transactions to span remote calls.
</li></ul></div>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Where is TransactionProxyFactoryBean?</b></p></div></div></div>
<p>Declarative transaction configuration in versions of Spring 2.0 and abov=
e differs
considerably from previous versions of Spring. The main difference is that =
there is no
longer any need to configure <code class=3D"literal">TransactionProxyFactor=
yBean</code> beans.</p>
<p>The pre-Spring 2.0 configuration style is still 100% valid configuration=
; think of the
new <code class=3D"literal">&lt;tx:tags/&gt;</code> as simply defining <cod=
e class=3D"literal">TransactionProxyFactoryBean</code> beans on your behalf=
.</p>
</div>
<p>The concept of rollback rules is important: they enable you to specify w=
hich exceptions
(and throwables) should cause automatic rollback. You specify this declarat=
ively, in
configuration, not in Java code. So, although you can still call <code clas=
s=3D"literal">setRollbackOnly()</code> on
the <code class=3D"literal">TransactionStatus</code> object to roll back th=
e current transaction back, most often you
can specify a rule that <code class=3D"literal">MyApplicationException</cod=
e> must always result in rollback. The
significant advantage to this option is that business objects do not depend=
 on the
transaction infrastructure. For example, they typically do not need to impo=
rt Spring
transaction APIs or other Spring APIs.</p>
<p>Although EJB container default behavior automatically rolls back the tra=
nsaction on a
<span class=3D"emphasis"><em>system exception</em></span> (usually a runtim=
e exception), EJB CMT does not roll back the
transaction automatically on an<span class=3D"emphasis"><em>application exc=
eption</em></span> (that is, a checked exception
other than <code class=3D"literal">java.rmi.RemoteException</code>). While =
the Spring default behavior for
declarative transaction management follows EJB convention (roll back is aut=
omatic only
on unchecked exceptions), it is often useful to customize this behavior.</p=
>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"tx-decl-explained" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-decl-explained"><=
/a>17.5.1&nbsp;Understanding the Spring Framework=92s declarative transacti=
on implementation</h3></div></div></div>
<p>It is not sufficient to tell you simply to annotate your classes with th=
e
<code class=3D"literal">@Transactional</code> annotation, add <code class=
=3D"literal">@EnableTransactionManagement</code> to your configuration,
and then expect you to understand how it all works. This section explains t=
he inner
workings of the Spring Framework=92s declarative transaction infrastructure=
 in the event
of transaction-related issues.</p>
<p>The most important concepts to grasp with regard to the Spring Framework=
=92s declarative
transaction support are that this support is enabled
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-understanding-aop-proxies" titl=
e=3D"11.6.1&nbsp;Understanding AOP proxies"><span class=3D"emphasis"><em>vi=
a AOP proxies</em></span></a>, and that the transactional advice
is driven by <span class=3D"emphasis"><em>metadata</em></span> (currently X=
ML- or annotation-based). The combination of AOP
with transactional metadata yields an AOP proxy that uses a <code class=3D"=
literal">TransactionInterceptor</code> in
conjunction with an appropriate <code class=3D"literal">PlatformTransaction=
Manager</code> implementation to drive
transactions <span class=3D"emphasis"><em>around method invocations</em></s=
pan>.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Spring AOP is covered in <a class=3D"xref" href=3D"https://docs.spring.i=
o/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop" ti=
tle=3D"11.&nbsp;Aspect Oriented Programming with Spring">Chapter&nbsp;11, <=
i>Aspect Oriented Programming with Spring</i></a>.</p>
</td></tr></tbody></table></div>
<p>Conceptually, calling a method on a transactional proxy looks like this=
=85&#8203;</p>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tx.png" alt=3D"t=
x"></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-first-example" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
transaction-declarative-first-example"></a>17.5.2&nbsp;Example of declarati=
ve transaction implementation</h3></div></div></div>
<p>Consider the following interface, and its attendant implementation. This=
 example uses
<code class=3D"literal">Foo</code> and <code class=3D"literal">Bar</code> c=
lasses as placeholders so that you can concentrate on the transaction
usage without focusing on a particular domain model. For the purposes of th=
is example,
the fact that the <code class=3D"literal">DefaultFooService</code> class th=
rows <code class=3D"literal">UnsupportedOperationException</code>
instances in the body of each implemented method is good; it allows you to =
see
transactions created and then rolled back in response to the
<code class=3D"literal">UnsupportedOperationException</code> instance.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// the service int=
erface that we want to make transactional</span>

<span class=3D"hl-keyword">package</span> x.y.service;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">interfa=
ce</span> FooService {

    Foo getFoo(String fooName);

    Foo getFoo(String fooName, String barName);

    <span class=3D"hl-keyword">void</span> insertFoo(Foo foo);

    <span class=3D"hl-keyword">void</span> updateFoo(Foo foo);

}</pre>
<pre class=3D"programlisting"><span class=3D"hl-comment">// an implementati=
on of the above interface</span>

<span class=3D"hl-keyword">package</span> x.y.service;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultFooService <span class=3D"hl-keyword">implements</span> FooSer=
vice {

    <span class=3D"hl-keyword">public</span> Foo getFoo(String fooName) {
        <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keyword">=
new</span> UnsupportedOperationException();
    }

    <span class=3D"hl-keyword">public</span> Foo getFoo(String fooName, Str=
ing barName) {
        <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keyword">=
new</span> UnsupportedOperationException();
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> insertFoo(Foo foo) {
        <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keyword">=
new</span> UnsupportedOperationException();
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> updateFoo(Foo foo) {
        <span class=3D"hl-keyword">throw</span> <span class=3D"hl-keyword">=
new</span> UnsupportedOperationException();
    }

}</pre>
<p>Assume that the first two methods of the <code class=3D"literal">FooServ=
ice</code> interface, <code class=3D"literal">getFoo(String)</code> and
<code class=3D"literal">getFoo(String, String)</code>, must execute in the =
context of a transaction with read-only
semantics, and that the other methods, <code class=3D"literal">insertFoo(Fo=
o)</code> and <code class=3D"literal">updateFoo(Foo)</code>, must
execute in the context of a transaction with read-write semantics. The foll=
owing
configuration is explained in detail in the next few paragraphs.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- from the f=
ile 'context.xml' --&gt;</span>
<span class=3D"hl-directive" style=3D"color: maroon">&lt;?xml version=3D"1.=
0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xmlns:tx</span>=3D<span class=3D"hl-value"=
>"http://www.springframework.org/schema/tx"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this is the service object that we w=
ant to make transactional --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- the transactional advice (what 'happ=
ens'; see the &lt;aop:advisor/&gt; bean below) --&gt;</span>
    <span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute=
">id</span>=3D<span class=3D"hl-value">"txAdvice"</span> <span class=3D"hl-=
attribute">transaction-manager</span>=3D<span class=3D"hl-value">"txManager=
"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- the transactional semantics... -=
-&gt;</span>
        <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
            <span class=3D"hl-comment">&lt;!-- all methods starting with 'g=
et' are read-only --&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"get*"</span> <span class=
=3D"hl-attribute">read-only</span>=3D<span class=3D"hl-value">"true"</span>=
<span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-comment">&lt;!-- other methods use the defaul=
t transaction settings (see below) --&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"h=
l-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:advice&gt;</span>

    <span class=3D"hl-comment">&lt;!-- ensure that the above transactional =
advice runs for any execution
        of an operation defined by the FooService interface --&gt;</span>
    <span class=3D"hl-tag">&lt;aop:config&gt;</span>
        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"fooServiceOperation"</span> =
<span class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-value">"=
execution(* x.y.service.FooService.*(..))"</span><span class=3D"hl-tag">/&g=
t;</span>
        <span class=3D"hl-tag">&lt;aop:advisor</span> <span class=3D"hl-att=
ribute">advice-ref</span>=3D<span class=3D"hl-value">"txAdvice"</span> <spa=
n class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"hl-value">"fo=
oServiceOperation"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/aop:config&gt;</span>

    <span class=3D"hl-comment">&lt;!-- don't forget the DataSource --&gt;</=
span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"org.apache.commons.dbcp.Ba=
sicDataSource"</span> <span class=3D"hl-attribute">destroy-method</span>=3D=
<span class=3D"hl-value">"close"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span =
class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"oracle.jdbc=
.driver.OracleDriver"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"jdbc:oracle:thin:@rj-t4=
2:1521:elvis"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"username"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"scott"</span><sp=
an class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"password"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"tiger"</span><sp=
an class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- similarly, don't forget the Platform=
TransactionManager --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"txManager"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"org.springframework.jdbc.da=
tasource.DataSourceTransactionManager"</span><span class=3D"hl-tag">&gt;</s=
pan>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other &lt;bean/&gt; definitions here=
 --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>Examine the preceding configuration. You want to make a service object, =
the <code class=3D"literal">fooService</code>
bean, transactional. The transaction semantics to apply are encapsulated in=
 the
<code class=3D"literal">&lt;tx:advice/&gt;</code> definition. The <code cla=
ss=3D"literal">&lt;tx:advice/&gt;</code> definition reads as "<span class=
=3D"emphasis"><em>=85&#8203; all methods on
starting with <code class=3D"literal">'get'</code> are to execute in the co=
ntext of a read-only transaction, and all
other methods are to execute with the default transaction semantics</em></s=
pan>". The
<code class=3D"literal">transaction-manager</code> attribute of the <code c=
lass=3D"literal">&lt;tx:advice/&gt;</code> tag is set to the name of the
<code class=3D"literal">PlatformTransactionManager</code> bean that is goin=
g to <span class=3D"emphasis"><em>drive</em></span> the transactions, in th=
is
case, the <code class=3D"literal">txManager</code> bean.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>You can omit the <code class=3D"literal">transaction-manager</code> attr=
ibute in the transactional advice
(<code class=3D"literal">&lt;tx:advice/&gt;</code>) if the bean name of the=
 <code class=3D"literal">PlatformTransactionManager</code> that you want to
wire in has the name <code class=3D"literal">transactionManager</code>. If =
the <code class=3D"literal">PlatformTransactionManager</code> bean that
you want to wire in has any other name, then you must use the <code class=
=3D"literal">transaction-manager</code>
attribute explicitly, as in the preceding example.</p>
</td></tr></tbody></table></div>
<p>The <code class=3D"literal">&lt;aop:config/&gt;</code> definition ensure=
s that the transactional advice defined by the
<code class=3D"literal">txAdvice</code> bean executes at the appropriate po=
ints in the program. First you define a
pointcut that matches the execution of any operation defined in the <code c=
lass=3D"literal">FooService</code>
interface ( <code class=3D"literal">fooServiceOperation</code>). Then you a=
ssociate the pointcut with the <code class=3D"literal">txAdvice</code>
using an advisor. The result indicates that at the execution of a <code cla=
ss=3D"literal">fooServiceOperation</code>,
the advice defined by <code class=3D"literal">txAdvice</code> will be run.<=
/p>
<p>The expression defined within the <code class=3D"literal">&lt;aop:pointc=
ut/&gt;</code> element is an AspectJ pointcut
expression; see <a class=3D"xref" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop" title=3D"11.&n=
bsp;Aspect Oriented Programming with Spring">Chapter&nbsp;11, <i>Aspect Ori=
ented Programming with Spring</i></a> for more details on pointcut expressi=
ons in Spring.</p>
<p>A common requirement is to make an entire service layer transactional. T=
he best way to
do this is simply to change the pointcut expression to match any operation =
in your
service layer. For example:</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;aop:config&gt;</sp=
an>
    <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-attrib=
ute">id</span>=3D<span class=3D"hl-value">"fooServiceMethods"</span> <span =
class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-value">"execut=
ion(* x.y.service.*.*(..))"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;aop:advisor</span> <span class=3D"hl-attribu=
te">advice-ref</span>=3D<span class=3D"hl-value">"txAdvice"</span> <span cl=
ass=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"hl-value">"fooSer=
viceMethods"</span><span class=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/aop:config&gt;</span></pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><span class=3D"emphasis"><em>In this example it is assumed that all your=
 service interfaces are defined in the
<code class=3D"literal">x.y.service</code> package; see <a class=3D"xref" h=
ref=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-r=
eference/htmlsingle/#aop" title=3D"11.&nbsp;Aspect Oriented Programming wit=
h Spring">Chapter&nbsp;11, <i>Aspect Oriented Programming with Spring</i></=
a> for more details.</em></span></p>
</td></tr></tbody></table></div>
<p>Now that we=92ve analyzed the configuration, you may be asking yourself,=
 "<span class=3D"emphasis"><em>Okay=85&#8203; but
what does all this configuration actually do?</em></span>".</p>
<p>The above configuration will be used to create a transactional proxy aro=
und the object
that is created from the <code class=3D"literal">fooService</code> bean def=
inition. The proxy will be configured with
the transactional advice, so that when an appropriate method is invoked <sp=
an class=3D"emphasis"><em>on the
proxy</em></span>, a transaction is started, suspended, marked as read-only=
, and so on, depending
on the transaction configuration associated with that method. Consider the =
following
program that test drives the above configuration:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">class</span>=
 Boot {

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">sta=
tic</span> <span class=3D"hl-keyword">void</span> main(<span class=3D"hl-ke=
yword">final</span> String[] args) <span class=3D"hl-keyword">throws</span>=
 Exception {
        ApplicationContext ctx =3D <span class=3D"hl-keyword">new</span> Cl=
assPathXmlApplicationContext(<span class=3D"hl-string">"context.xml"</span>=
, Boot.<span class=3D"hl-keyword">class</span>);
        FooService fooService =3D (FooService) ctx.getBean(<span class=3D"h=
l-string">"fooService"</span>);
        fooService.insertFoo (<span class=3D"hl-keyword">new</span> Foo());
    }
}</pre>
<p>The output from running the preceding program will resemble the followin=
g. (The Log4J
output and the stack trace from the UnsupportedOperationException thrown by=
 the
insertFoo(..) method of the DefaultFooService class have been truncated for=
 clarity.)</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- the Spring=
 container is starting up... --&gt;</span>
[AspectJInvocationContextExposingAdvisorAutoProxyCreator] - Creating implic=
it proxy for bean 'fooService' with 0 common interceptors and 1 specific in=
terceptors

<span class=3D"hl-comment">&lt;!-- the DefaultFooService is actually proxie=
d --&gt;</span>
[JdkDynamicAopProxy] - Creating JDK dynamic proxy for [x.y.service.DefaultF=
ooService]

<span class=3D"hl-comment">&lt;!-- ... the insertFoo(..) method is now bein=
g invoked on the proxy --&gt;</span>
[TransactionInterceptor] - Getting transaction for x.y.service.FooService.i=
nsertFoo

<span class=3D"hl-comment">&lt;!-- the transactional advice kicks in here..=
. --&gt;</span>
[DataSourceTransactionManager] - Creating new transaction with name [x.y.se=
rvice.FooService.insertFoo]
[DataSourceTransactionManager] - Acquired Connection [<a href=3D"https://do=
cs.spring.io/cdn-cgi/l/email-protection" class=3D"__cf_email__" data-cfemai=
l=3D"5b34293c753a2b3a38333e7538343636343528753f39382b750b3434373a39373e1834=
35353e382f3234351b3a6e683f3e6f">[email&nbsp;protected]</a>] for JDBC transa=
ction

<span class=3D"hl-comment">&lt;!-- the insertFoo(..) method from DefaultFoo=
Service throws an exception... --&gt;</span>
[RuleBasedTransactionAttribute] - Applying rules to determine whether trans=
action should rollback on java.lang.UnsupportedOperationException
[TransactionInterceptor] - Invoking rollback for transaction on x.y.service=
.FooService.insertFoo due to throwable [java.lang.UnsupportedOperationExcep=
tion]

<span class=3D"hl-comment">&lt;!-- and the transaction is rolled back (by d=
efault, RuntimeException instances cause rollback) --&gt;</span>
[DataSourceTransactionManager] - Rolling back JDBC transaction on Connectio=
n [<a href=3D"https://docs.spring.io/cdn-cgi/l/email-protection" class=3D"_=
_cf_email__" data-cfemail=3D"08677a6f266978696b606d266b67656567667b266c6a6b=
782658676764696a646d4b6766666d6b7c61676648693d3b6c6d3c">[email&nbsp;protect=
ed]</a>]
[DataSourceTransactionManager] - Releasing JDBC Connection after transactio=
n
[DataSourceUtils] - Returning JDBC Connection to DataSource

Exception in thread "main" java.lang.UnsupportedOperationException at x.y.s=
ervice.DefaultFooService.insertFoo(DefaultFooService.java:14)
<span class=3D"hl-comment">&lt;!-- AOP infrastructure stack trace elements =
removed for clarity --&gt;</span>
at $Proxy0.insertFoo(Unknown Source)
at Boot.main(Boot.java:11)</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-rolling-back" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#t=
ransaction-declarative-rolling-back"></a>17.5.3&nbsp;Rolling back a declara=
tive transaction</h3></div></div></div>
<p>The previous section outlined the basics of how to specify transactional=
 settings for
classes, typically service layer classes, declaratively in your application=
. This
section describes how you can control the rollback of transactions in a sim=
ple
declarative fashion.</p>
<p>The recommended way to indicate to the Spring Framework=92s transaction =
infrastructure
that a transaction=92s work is to be rolled back is to throw an <code class=
=3D"literal">Exception</code> from code that
is currently executing in the context of a transaction. The Spring Framewor=
k=92s
transaction infrastructure code will catch any unhandled <code class=3D"lit=
eral">Exception</code> as it bubbles up
the call stack, and make a determination whether to mark the transaction fo=
r rollback.</p>
<p>In its default configuration, the Spring Framework=92s transaction infra=
structure code
<span class=3D"emphasis"><em>only</em></span> marks a transaction for rollb=
ack in the case of runtime, unchecked exceptions;
that is, when the thrown exception is an instance or subclass of <code clas=
s=3D"literal">RuntimeException</code>. (
<code class=3D"literal">Error</code>s will also - by default - result in a =
rollback). Checked exceptions that are
thrown from a transactional method do <span class=3D"emphasis"><em>not</em>=
</span> result in rollback in the default
configuration.</p>
<p>You can configure exactly which <code class=3D"literal">Exception</code>=
 types mark a transaction for rollback,
including checked exceptions. The following XML snippet demonstrates how yo=
u configure
rollback for a checked, application-specific <code class=3D"literal">Except=
ion</code> type.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;tx:advice</span> <=
span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"txAdvice"=
</span> <span class=3D"hl-attribute">transaction-manager</span>=3D<span cla=
ss=3D"hl-value">"txManager"</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attribute=
">name</span>=3D<span class=3D"hl-value">"get*"</span> <span class=3D"hl-at=
tribute">read-only</span>=3D<span class=3D"hl-value">"true"</span> <span cl=
ass=3D"hl-attribute">rollback-for</span>=3D<span class=3D"hl-value">"NoProd=
uctInStockException"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attribute=
">name</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"hl-tag">/=
&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
<span class=3D"hl-tag">&lt;/tx:advice&gt;</span></pre>
<p>You can also specify 'no rollback rules', if you do <span class=3D"empha=
sis"><em>not</em></span> want a transaction rolled
back when an exception is thrown. The following example tells the Spring Fr=
amework=92s
transaction infrastructure to commit the attendant transaction even in the =
face of an
unhandled <code class=3D"literal">InstrumentNotFoundException</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;tx:advice</span> <=
span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"txAdvice"=
</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attribute=
">name</span>=3D<span class=3D"hl-value">"updateStock"</span> <span class=
=3D"hl-attribute">no-rollback-for</span>=3D<span class=3D"hl-value">"Instru=
mentNotFoundException"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attribute=
">name</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"hl-tag">/=
&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
<span class=3D"hl-tag">&lt;/tx:advice&gt;</span></pre>
<p>When the Spring Framework=92s transaction infrastructure catches an exce=
ption and it
consults configured rollback rules to determine whether to mark the transac=
tion for
rollback, the <span class=3D"emphasis"><em>strongest</em></span> matching r=
ule wins. So in the case of the following
configuration, any exception other than an <code class=3D"literal">Instrume=
ntNotFoundException</code> results in a
rollback of the attendant transaction.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;tx:advice</span> <=
span class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"txAdvice"=
</span><span class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-attribute=
">name</span>=3D<span class=3D"hl-value">"*"</span> <span class=3D"hl-attri=
bute">rollback-for</span>=3D<span class=3D"hl-value">"Throwable"</span> <sp=
an class=3D"hl-attribute">no-rollback-for</span>=3D<span class=3D"hl-value"=
>"InstrumentNotFoundException"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
<span class=3D"hl-tag">&lt;/tx:advice&gt;</span></pre>
<p>You can also indicate a required rollback <span class=3D"emphasis"><em>p=
rogrammatically</em></span>. Although very simple,
this process is quite invasive, and tightly couples your code to the Spring=
 Framework=92s
transaction infrastructure:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">void</span> resolvePosition() {
    <span class=3D"hl-keyword">try</span> {
        <span class=3D"hl-comment">// some business logic...</span>
    } <span class=3D"hl-keyword">catch</span> (NoProductInStockException ex=
) {
        <span class=3D"hl-comment">// trigger rollback programmatically</sp=
an>
        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly=
();
    }
}</pre>
<p>You are strongly encouraged to use the declarative approach to rollback =
if at all
possible. Programmatic rollback is available should you absolutely need it,=
 but its
usage flies in the face of achieving a clean POJO-based architecture.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-diff-tx" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transa=
ction-declarative-diff-tx"></a>17.5.4&nbsp;Configuring different transactio=
nal semantics for different beans</h3></div></div></div>
<p>Consider the scenario where you have a number of service layer objects, =
and you want to
apply a <span class=3D"emphasis"><em>totally different</em></span> transact=
ional configuration to each of them. You do this
by defining distinct <code class=3D"literal">&lt;aop:advisor/&gt;</code> el=
ements with differing <code class=3D"literal">pointcut</code> and
<code class=3D"literal">advice-ref</code> attribute values.</p>
<p>As a point of comparison, first assume that all of your service layer cl=
asses are
defined in a root <code class=3D"literal">x.y.service</code> package. To ma=
ke all beans that are instances of classes
defined in that package (or in subpackages) and that have names ending in <=
code class=3D"literal">Service</code> have
the default transactional configuration, you would write the following:</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xmlns:tx</span>=3D<span class=3D"hl-value"=
>"http://www.springframework.org/schema/tx"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:config&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"serviceOperation"</span>
                <span class=3D"hl-attribute">expression</span>=3D<span clas=
s=3D"hl-value">"execution(* x.y.service..*Service.*(..))"</span><span class=
=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;aop:advisor</span> <span class=3D"hl-att=
ribute">pointcut-ref</span>=3D<span class=3D"hl-value">"serviceOperation"</=
span> <span class=3D"hl-attribute">advice-ref</span>=3D<span class=3D"hl-va=
lue">"txAdvice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;/aop:config&gt;</span>

    <span class=3D"hl-comment">&lt;!-- these two beans will be transactiona=
l... --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"barService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.extras.SimpleB=
arService"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- ... and these two beans won't --&gt;=
</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"anotherService"</span> <span class=3D"hl=
-attribute">class</span>=3D<span class=3D"hl-value">"org.xyz.SomeService"</=
span><span class=3D"hl-tag">/&gt;</span> <span class=3D"hl-comment">&lt;!--=
 (not in the right package) --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"barManager"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.SimpleBarManag=
er"</span><span class=3D"hl-tag">/&gt;</span> <span class=3D"hl-comment">&l=
t;!-- (doesn't end in 'Service') --&gt;</span>

    <span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute=
">id</span>=3D<span class=3D"hl-value">"txAdvice"</span><span class=3D"hl-t=
ag">&gt;</span>
        <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"get*"</span> <span class=
=3D"hl-attribute">read-only</span>=3D<span class=3D"hl-value">"true"</span>=
<span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"h=
l-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:advice&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other transaction infrastructure bea=
ns such as a PlatformTransactionManager omitted... --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The following example shows how to configure two distinct beans with tot=
ally different
transactional settings.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xmlns:tx</span>=3D<span class=3D"hl-value"=
>"http://www.springframework.org/schema/tx"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;aop:config&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"defaultServiceOperation"</sp=
an>
                <span class=3D"hl-attribute">expression</span>=3D<span clas=
s=3D"hl-value">"execution(* x.y.service.*Service.*(..))"</span><span class=
=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"noTxServiceOperation"</span>
                <span class=3D"hl-attribute">expression</span>=3D<span clas=
s=3D"hl-value">"execution(* x.y.service.ddl.DefaultDdlManager.*(..))"</span=
><span class=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;aop:advisor</span> <span class=3D"hl-att=
ribute">pointcut-ref</span>=3D<span class=3D"hl-value">"defaultServiceOpera=
tion"</span> <span class=3D"hl-attribute">advice-ref</span>=3D<span class=
=3D"hl-value">"defaultTxAdvice"</span><span class=3D"hl-tag">/&gt;</span>

        <span class=3D"hl-tag">&lt;aop:advisor</span> <span class=3D"hl-att=
ribute">pointcut-ref</span>=3D<span class=3D"hl-value">"noTxServiceOperatio=
n"</span> <span class=3D"hl-attribute">advice-ref</span>=3D<span class=3D"h=
l-value">"noTxAdvice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;/aop:config&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this bean will be transactional (see=
 the 'defaultServiceOperation' pointcut) --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this bean will also be transactional=
, but with totally different transactional settings --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"anotherFooService"</span> <span class=3D=
"hl-attribute">class</span>=3D<span class=3D"hl-value">"x.y.service.ddl.Def=
aultDdlManager"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute=
">id</span>=3D<span class=3D"hl-value">"defaultTxAdvice"</span><span class=
=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"get*"</span> <span class=
=3D"hl-attribute">read-only</span>=3D<span class=3D"hl-value">"true"</span>=
<span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"h=
l-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:advice&gt;</span>

    <span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute=
">id</span>=3D<span class=3D"hl-value">"noTxAdvice"</span><span class=3D"hl=
-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"*"</span> <span class=3D"=
hl-attribute">propagation</span>=3D<span class=3D"hl-value">"NEVER"</span><=
span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:advice&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other transaction infrastructure bea=
ns such as a PlatformTransactionManager omitted... --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-txadvice-settings" href=3D"https://do=
cs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsing=
le/#transaction-declarative-txadvice-settings"></a>17.5.5&nbsp;&lt;tx:advic=
e/&gt; settings</h3></div></div></div>
<p>This section summarizes the various transactional settings that can be s=
pecified using
the <code class=3D"literal">&lt;tx:advice/&gt;</code> tag. The default <cod=
e class=3D"literal">&lt;tx:advice/&gt;</code> settings are:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#tx-propagation" title=3D"17.5.7&nbs=
p;Transaction propagation">Propagation setting</a> is <code class=3D"litera=
l">REQUIRED.</code>
</li><li class=3D"listitem">
Isolation level is <code class=3D"literal">DEFAULT.</code>
</li><li class=3D"listitem">
Transaction is read/write.
</li><li class=3D"listitem">
Transaction timeout defaults to the default timeout of the underlying trans=
action
system, or none if timeouts are not supported.
</li><li class=3D"listitem">
Any <code class=3D"literal">RuntimeException</code> triggers rollback, and =
any checked <code class=3D"literal">Exception</code> does not.
</li></ul></div>
<p>You can change these default settings; the various attributes of the <co=
de class=3D"literal">&lt;tx:method/&gt;</code> tags
that are nested within <code class=3D"literal">&lt;tx:advice/&gt;</code> an=
d <code class=3D"literal">&lt;tx:attributes/&gt;</code> tags are summarized=
 below:</p>
<div class=3D"table"><a name=3D"tx-method-settings" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#t=
x-method-settings"></a><p class=3D"title"><b>Table&nbsp;17.1.&nbsp;&lt;tx:m=
ethod/&gt; settings</b></p><div class=3D"table-contents">
<table summary=3D"<tx:method/> settings" style=3D"border-collapse: collapse=
;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt =
solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col c=
lass=3D"col_2"><col class=3D"col_3"><col class=3D"col_4"></colgroup><thead>=
<tr><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "=
 align=3D"left" valign=3D"top">Attribute</th><th style=3D"border-right: 0.5=
pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Req=
uired?</th><th style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt so=
lid ; " align=3D"left" valign=3D"top">Default</th><th style=3D"border-botto=
m: 0.5pt solid ; " align=3D"left" valign=3D"top">Description</th></tr></the=
ad><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal">name</c=
ode></p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt =
solid ; " align=3D"left" valign=3D"top"><p>Yes</p></td><td style=3D"border-=
right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top">&nbsp;</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p>Method name(s) with which the transaction attributes =
are to be associated. The
wildcard (*) character can be used to associate the same transaction attrib=
ute
settings with a number of methods; for example, <code class=3D"literal">get=
*</code>, <code class=3D"literal">handle*</code>, <code class=3D"literal">o=
n*Event</code>, and so
forth.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bot=
tom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"litera=
l">propagation</code></p></td><td style=3D"border-right: 0.5pt solid ; bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>No</p></td><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>REQUIRED</p></td><td style=3D"border-bottom: 0.=
5pt solid ; " align=3D"left" valign=3D"top"><p>Transaction propagation beha=
vior.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal=
">isolation</code></p></td><td style=3D"border-right: 0.5pt solid ; border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>No</p></td><td sty=
le=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"l=
eft" valign=3D"top"><p>DEFAULT</p></td><td style=3D"border-bottom: 0.5pt so=
lid ; " align=3D"left" valign=3D"top"><p>Transaction isolation level. Only =
applicable to propagation REQUIRED or REQUIRES_NEW.</p></td></tr><tr><td st=
yle=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"=
left" valign=3D"top"><p><code class=3D"literal">timeout</code></p></td><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>No</p></td><td style=3D"border-right: 0.5pt sol=
id ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>-1</p>=
</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>Transaction timeout (seconds). Only applicable to propagation REQUIR=
ED or REQUIRES_NEW.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid=
 ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code cl=
ass=3D"literal">read-only</code></p></td><td style=3D"border-right: 0.5pt s=
olid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>No</=
p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid =
; " align=3D"left" valign=3D"top"><p>false</p></td><td style=3D"border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Read/write vs. read-on=
ly transaction. Only applicable to REQUIRED or REQUIRES_NEW.</p></td></tr><=
tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " =
align=3D"left" valign=3D"top"><p><code class=3D"literal">rollback-for</code=
></p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt sol=
id ; " align=3D"left" valign=3D"top"><p>No</p></td><td style=3D"border-righ=
t: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"to=
p">&nbsp;</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" va=
lign=3D"top"><p><code class=3D"literal">Exception(s)</code> that trigger ro=
llback; comma-delimited. For example,
<code class=3D"literal">com.foo.MyBusinessException,ServletException.</code=
></p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; " align=3D"left=
" valign=3D"top"><p><code class=3D"literal">no-rollback-for</code></p></td>=
<td style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
>No</p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"left" valig=
n=3D"top">&nbsp;</td><td style=3D"" align=3D"left" valign=3D"top"><p><code =
class=3D"literal">Exception(s)</code> that do <span class=3D"emphasis"><em>=
not</em></span> trigger rollback; comma-delimited. For example,
<code class=3D"literal">com.foo.MyBusinessException,ServletException.</code=
></p></td></tr></tbody></table>
</div></div><br class=3D"table-break">
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-annotations" href=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tr=
ansaction-declarative-annotations"></a>17.5.6&nbsp;Using @Transactional</h3=
></div></div></div>
<p>In addition to the XML-based declarative approach to transaction configu=
ration, you can
use an annotation-based approach. Declaring transaction semantics directly =
in the Java
source code puts the declarations much closer to the affected code. There i=
s not much
danger of undue coupling, because code that is meant to be used transaction=
ally is
almost always deployed that way anyway.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The standard <code class=3D"literal">javax.transaction.Transactional</co=
de> annotation is also supported as a drop-in
replacement to Spring=92s own annotation. Please refer to JTA 1.2 documenta=
tion for more
details.</p>
</td></tr></tbody></table></div>
<p>The ease-of-use afforded by the use of the <code class=3D"literal">@Tran=
sactional</code> annotation is best
illustrated with an example, which is explained in the text that follows. C=
onsider the
following class definition:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// the service cla=
ss that we want to make transactional</span>
<span class=3D"strong"><strong>@Transactional</strong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultFooService <span class=3D"hl-keyword">implements</span> FooSer=
vice {

    Foo getFoo(String fooName);

    Foo getFoo(String fooName, String barName);

    <span class=3D"hl-keyword">void</span> insertFoo(Foo foo);

    <span class=3D"hl-keyword">void</span> updateFoo(Foo foo);
}</pre>
<p>Used at the class level as above, the annotation indicates a default for=
 all methods
of the declaring class (as well as its subclasses). Alternatively, each met=
hod can
get annotated individually. Note that a class-level annotation does not app=
ly to
ancestor classes up the class hierarchy; in such a scenario, methods need t=
o be
locally redeclared in order to participate in a subclass-level annotation.<=
/p>
<p>When the above POJO is defined as a bean in a Spring IoC container, the =
bean instance
can be made transactional by adding merely <span class=3D"emphasis"><em>one=
</em></span> line of XML configuration:</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">&lt;!-- from the f=
ile 'context.xml' --&gt;</span>
<span class=3D"hl-directive" style=3D"color: maroon">&lt;?xml version=3D"1.=
0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xmlns:tx</span>=3D<span class=3D"hl-value"=
>"http://www.springframework.org/schema/tx"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this is the service object that we w=
ant to make transactional --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- enable the configuration of transact=
ional behavior based on annotations --&gt;</span>
    <span class=3D"emphasis"><em>&lt;tx:annotation-driven transaction-manag=
er=3D"txManager"/&gt;</em></span><span class=3D"hl-comment">&lt;!-- a Platf=
ormTransactionManager is still required --&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"txManager"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"org.springframework.jdbc.da=
tasource.DataSourceTransactionManager"</span><span class=3D"hl-tag">&gt;</s=
pan>
        <span class=3D"hl-comment">&lt;!-- (this dependency is defined some=
where else) --&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other &lt;bean/&gt; definitions here=
 --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>You can omit the <code class=3D"literal">transaction-manager</code> attr=
ibute in the <code class=3D"literal">&lt;tx:annotation-driven/&gt;</code> t=
ag if
the bean name of the <code class=3D"literal">PlatformTransactionManager</co=
de> that you want to wire in has the name
<code class=3D"literal">transactionManager</code>. If the <code class=3D"li=
teral">PlatformTransactionManager</code> bean that you want to
dependency-inject has any other name, then you have to use the <code class=
=3D"literal">transaction-manager</code>
attribute explicitly, as in the preceding example.</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">@EnableTransactionManagement</code> annotati=
on provides equivalent support if you are
using Java based configuration. Simply add the annotation to a <code class=
=3D"literal">@Configuration</code> class.
See the javadocs for full details.</p>
</td></tr></tbody></table></div>
<div class=3D"sidebar"><div class=3D"titlepage"><div><div><p class=3D"title=
"><b>Method visibility and @Transactional</b></p></div></div></div>
<p>When using proxies, you should apply the <code class=3D"literal">@Transa=
ctional</code> annotation only to methods
with <span class=3D"emphasis"><em>public</em></span> visibility. If you do =
annotate protected, private or package-visible
methods with the <code class=3D"literal">@Transactional</code> annotation, =
no error is raised, but the annotated
method does not exhibit the configured transactional settings. Consider the=
 use of
AspectJ (see below) if you need to annotate non-public methods.</p>
</div>
<p>You can place the <code class=3D"literal">@Transactional</code> annotati=
on before an interface definition, a method
on an interface, a class definition, or a <span class=3D"emphasis"><em>publ=
ic</em></span> method on a class. However, the
mere presence of the <code class=3D"literal">@Transactional</code> annotati=
on is not enough to activate the
transactional behavior. The <code class=3D"literal">@Transactional</code> a=
nnotation is simply metadata that can be
consumed by some runtime infrastructure that is <code class=3D"literal">@Tr=
ansactional</code>-aware and that can use
the metadata to configure the appropriate beans with transactional behavior=
. In the
preceding example, the <code class=3D"literal">&lt;tx:annotation-driven/&gt=
;</code> element <span class=3D"emphasis"><em>switches on</em></span> the
transactional behavior.</p>
<div class=3D"tip" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tabl=
e border=3D"0" summary=3D"Tip"><tbody><tr><td rowspan=3D"2" align=3D"center=
" valign=3D"top" width=3D"25"><img alt=3D"[Tip]" src=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images=
/tip.png"></td><th align=3D"left">Tip</th></tr><tr><td align=3D"left" valig=
n=3D"top">
<p>Spring recommends that you only annotate concrete classes (and methods o=
f concrete
classes) with the <code class=3D"literal">@Transactional</code> annotation,=
 as opposed to annotating interfaces. You
certainly can place the <code class=3D"literal">@Transactional</code> annot=
ation on an interface (or an interface
method), but this works only as you would expect it to if you are using int=
erface-based
proxies. The fact that Java annotations are <span class=3D"emphasis"><em>no=
t inherited from interfaces</em></span> means that
if you are using class-based proxies ( <code class=3D"literal">proxy-target=
-class=3D"true"</code>) or the weaving-based
aspect ( <code class=3D"literal">mode=3D"aspectj"</code>), then the transac=
tion settings are not recognized by the
proxying and weaving infrastructure, and the object will not be wrapped in =
a
transactional proxy, which would be decidedly <span class=3D"emphasis"><em>=
bad</em></span>.</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>In proxy mode (which is the default), only external method calls coming =
in through the
proxy are intercepted. This means that self-invocation, in effect, a method=
 within the
target object calling another method of the target object, will not lead to=
 an actual
transaction at runtime even if the invoked method is marked with <code clas=
s=3D"literal">@Transactional</code>. Also,
the proxy must be fully initialized to provide the expected behaviour so yo=
u should not
rely on this feature in your initialization code, i.e. <code class=3D"liter=
al">@PostConstruct</code>.</p>
</td></tr></tbody></table></div>
<p>Consider the use of AspectJ mode (see mode attribute in table below) if =
you expect
self-invocations to be wrapped with transactions as well. In this case, the=
re will not
be a proxy in the first place; instead, the target class will be weaved (th=
at is, its
byte code will be modified) in order to turn <code class=3D"literal">@Trans=
actional</code> into runtime behavior on
any kind of method.</p>
<div class=3D"table"><a name=3D"tx-annotation-driven-settings" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#tx-annotation-driven-settings"></a><p class=3D"title"><b>Table&nb=
sp;17.2.&nbsp;Annotation driven transaction settings</b></p><div class=3D"t=
able-contents">
<table summary=3D"Annotation driven transaction settings" style=3D"border-c=
ollapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; bo=
rder-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class=
=3D"col_1"><col class=3D"col_2"><col class=3D"col_3"><col class=3D"col_4"><=
/colgroup><thead><tr><th style=3D"border-right: 0.5pt solid ; border-bottom=
: 0.5pt solid ; " align=3D"left" valign=3D"top">XML Attribute</th><th style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top">Annotation Attribute</th><th style=3D"border-right: 0.5pt=
 solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Defau=
lt</th><th style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D=
"top">Description</th></tr></thead><tbody><tr><td style=3D"border-right: 0.=
5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
><code class=3D"literal">transaction-manager</code></p></td><td style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top"><p>N/A (See <code class=3D"literal">TransactionManagementConfig=
urer</code> javadocs)</p></td><td style=3D"border-right: 0.5pt solid ; bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>transactionMana=
ger</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p>Name of transaction manager to use. Only required if the name=
 of the transaction
manager is not <code class=3D"literal">transactionManager</code>, as in the=
 example above.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">mode</code></p></td><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">mode</code></p></td><td style=3D"border-right: 0.5pt solid ; b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>proxy</p></t=
d><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"=
><p>The default mode "proxy" processes annotated beans to be proxied using =
Spring=92s AOP
framework (following proxy semantics, as discussed above, applying to metho=
d calls
coming in through the proxy only). The alternative mode "aspectj" instead w=
eaves the
affected classes with Spring=92s AspectJ transaction aspect, modifying the =
target class
byte code to apply to any kind of method call. AspectJ weaving requires
spring-aspects.jar in the classpath as well as load-time weaving (or compil=
e-time
weaving) enabled. (See <a class=3D"xref" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-aj-ltw-s=
pring" title=3D"Spring configuration">the section called =93Spring configur=
ation=94</a> for details on how to set up load-time
weaving.)</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-=
bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"lit=
eral">proxy-target-class</code></p></td><td style=3D"border-right: 0.5pt so=
lid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code=
 class=3D"literal">proxyTargetClass</code></p></td><td style=3D"border-righ=
t: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"to=
p"><p>false</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p>Applies to proxy mode only. Controls what type of tra=
nsactional proxies are created
for classes annotated with the <code class=3D"literal">@Transactional</code=
> annotation. If the
<code class=3D"literal">proxy-target-class</code> attribute is set to <code=
 class=3D"literal">true</code>, then class-based proxies are created.
If <code class=3D"literal">proxy-target-class</code> is <code class=3D"lite=
ral">false</code> or if the attribute is omitted, then standard JDK
interface-based proxies are created. (See <a class=3D"xref" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#aop-proxying" title=3D"11.6&nbsp;Proxying mechanisms">Section&nbsp;1=
1.6, =93Proxying mechanisms=94</a> for a detailed examination
of the different proxy types.)</p></td></tr><tr><td style=3D"border-right: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"literal">or=
der</code></p></td><td style=3D"border-right: 0.5pt solid ; " align=3D"left=
" valign=3D"top"><p><code class=3D"literal">order</code></p></td><td style=
=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Ordered.=
LOWEST_PRECEDENCE</p></td><td style=3D"" align=3D"left" valign=3D"top"><p>D=
efines the order of the transaction advice that is applied to beans annotat=
ed with
<code class=3D"literal">@Transactional</code>. (For more information about =
the rules related to ordering of AOP
advice, see <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#aop-ataspectj-advice-or=
dering" title=3D"Advice ordering">the section called =93Advice ordering=94<=
/a>.) No specified ordering means that the
AOP subsystem determines the order of the advice.</p></td></tr></tbody></ta=
ble>
</div></div><br class=3D"table-break">
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The default advice mode for processing <code class=3D"literal">@Transact=
ional</code> annotations is "proxy" which
allows for interception of calls through the proxy only; local calls within=
 the same
class cannot get intercepted that way. For a more advanced mode of intercep=
tion,
consider switching to "aspectj" mode in combination with compile/load-time =
weaving.</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">proxy-target-class</code> attribute controls=
 what type of transactional proxies are
created for classes annotated with the <code class=3D"literal">@Transaction=
al</code> annotation. If
<code class=3D"literal">proxy-target-class</code> is set to <code class=3D"=
literal">true</code>, class-based proxies are created. If
<code class=3D"literal">proxy-target-class</code> is <code class=3D"literal=
">false</code> or if the attribute is omitted, standard JDK
interface-based proxies are created. (See <a class=3D"xref" href=3D"https:/=
/docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmls=
ingle/#aop-proxying" title=3D"11.6&nbsp;Proxying mechanisms">Section&nbsp;1=
1.6, =93Proxying mechanisms=94</a> for a discussion of the
different proxy types.)</p>
</td></tr></tbody></table></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p><code class=3D"literal">@EnableTransactionManagement</code> and <code cl=
ass=3D"literal">&lt;tx:annotation-driven/&gt;</code> only looks for
<code class=3D"literal">@Transactional</code> on beans in the same applicat=
ion context they are defined in. This
means that, if you put annotation driven configuration in a <code class=3D"=
literal">WebApplicationContext</code> for
a <code class=3D"literal">DispatcherServlet</code>, it only checks for <cod=
e class=3D"literal">@Transactional</code> beans in your controllers,
and not your services. See <a class=3D"xref" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#mvc-serv=
let" title=3D"22.2&nbsp;The DispatcherServlet">Section&nbsp;22.2, =93The Di=
spatcherServlet=94</a> for more information.</p>
</td></tr></tbody></table></div>
<p>The most derived location takes precedence when evaluating the transacti=
onal settings
for a method. In the case of the following example, the <code class=3D"lite=
ral">DefaultFooService</code> class is
annotated at the class level with the settings for a read-only transaction,=
 but the
<code class=3D"literal">@Transactional</code> annotation on the <code class=
=3D"literal">updateFoo(Foo)</code> method in the same class takes
precedence over the transactional settings defined at the class level.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Transactional(readOnly =3D true)</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> DefaultFooService <span class=3D"hl-keyword">implements</span> FooSer=
vice {

    <span class=3D"hl-keyword">public</span> Foo getFoo(String fooName) {
        <span class=3D"hl-comment">// do something</span>
    }

    <span class=3D"hl-comment">// these settings have precedence for this m=
ethod</span>
    <em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional(=
readOnly =3D false, propagation =3D Propagation.REQUIRES_NEW)</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> updateFoo(Foo foo) {
        <span class=3D"hl-comment">// do something</span>
    }
}</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"transaction-declarative-attransactional-settings" href=3D"htt=
ps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/h=
tmlsingle/#transaction-declarative-attransactional-settings"></a>@Transacti=
onal settings</h4></div></div></div>
<p>The <code class=3D"literal">@Transactional</code> annotation is metadata=
 that specifies that an interface, class, or
method must have transactional semantics; for example, "<span class=3D"emph=
asis"><em>start a brand new read-only
transaction when this method is invoked, suspending any existing transactio=
n</em></span>". The
default <code class=3D"literal">@Transactional</code> settings are as follo=
ws:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Propagation setting is <code class=3D"literal">PROPAGATION_REQUIRED.</code>
</li><li class=3D"listitem">
Isolation level is <code class=3D"literal">ISOLATION_DEFAULT.</code>
</li><li class=3D"listitem">
Transaction is read/write.
</li><li class=3D"listitem">
Transaction timeout defaults to the default timeout of the underlying trans=
action
system, or to none if timeouts are not supported.
</li><li class=3D"listitem">
Any <code class=3D"literal">RuntimeException</code> triggers rollback, and =
any checked <code class=3D"literal">Exception</code> does not.
</li></ul></div>
<p>These default settings can be changed; the various properties of the <co=
de class=3D"literal">@Transactional</code>
annotation are summarized in the following table:</p>
<div class=3D"table"><a name=3D"tx-attransactional-properties" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#tx-attransactional-properties"></a><p class=3D"title"><b>Table&nb=
sp;17.3.&nbsp;@Transactional Settings</b></p><div class=3D"table-contents">
<table summary=3D"@Transactional Settings" style=3D"border-collapse: collap=
se;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5p=
t solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"><col=
 class=3D"col_2"><col class=3D"col_3"></colgroup><thead><tr><th style=3D"bo=
rder-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" val=
ign=3D"top">Property</th><th style=3D"border-right: 0.5pt solid ; border-bo=
ttom: 0.5pt solid ; " align=3D"left" valign=3D"top">Type</th><th style=3D"b=
order-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Description</th=
></tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bo=
ttom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><a class=3D"link" hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#tx-multiple-tx-mgrs-with-attransactional" title=3D"Mult=
iple Transaction Managers with @Transactional">value</a></p></td><td style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top"><p>String</p></td><td style=3D"border-bottom: 0.5pt solid=
 ; " align=3D"left" valign=3D"top"><p>Optional qualifier specifying the tra=
nsaction manager to be used.</p></td></tr><tr><td style=3D"border-right: 0.=
5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p=
><a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#tx-propagation" title=3D"17.5.7&nb=
sp;Transaction propagation">propagation</a></p></td><td style=3D"border-rig=
ht: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>enum: <code class=3D"literal">Propagation</code></p></td><td style=
=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Optiona=
l propagation setting.</p></td></tr><tr><td style=3D"border-right: 0.5pt so=
lid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code=
 class=3D"literal">isolation</code></p></td><td style=3D"border-right: 0.5p=
t solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>e=
num: <code class=3D"literal">Isolation</code></p></td><td style=3D"border-b=
ottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Optional isolation =
level. Only applicable to propagation REQUIRED or REQUIRES_NEW.</p></td></t=
r><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ;=
 " align=3D"left" valign=3D"top"><p><code class=3D"literal">timeout</code><=
/p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid=
 ; " align=3D"left" valign=3D"top"><p>int (in seconds granularity)</p></td>=
<td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><=
p>Optional transaction timeout. Only applicable to propagation REQUIRED or =
REQUIRES_NEW.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; bor=
der-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D=
"literal">readOnly</code></p></td><td style=3D"border-right: 0.5pt solid ; =
border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>boolean</p>=
</td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"t=
op"><p>Read/write vs. read-only transaction. Only applicable to REQUIRED or=
 REQUIRES_NEW.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; bo=
rder-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=
=3D"literal">rollbackFor</code></p></td><td style=3D"border-right: 0.5pt so=
lid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Array=
 of <code class=3D"literal">Class</code> objects, which must be derived fro=
m <code class=3D"literal">Throwable.</code></p></td><td style=3D"border-bot=
tom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Optional array of exc=
eption classes that <span class=3D"emphasis"><em>must</em></span> cause rol=
lback.</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bot=
tom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><code class=3D"litera=
l">rollbackForClassName</code></p></td><td style=3D"border-right: 0.5pt sol=
id ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Array =
of class names. Classes must be derived from <code class=3D"literal">Throwa=
ble.</code></p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"le=
ft" valign=3D"top"><p>Optional array of names of exception classes that <sp=
an class=3D"emphasis"><em>must</em></span> cause rollback.</p></td></tr><tr=
><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " al=
ign=3D"left" valign=3D"top"><p><code class=3D"literal">noRollbackFor</code>=
</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt soli=
d ; " align=3D"left" valign=3D"top"><p>Array of <code class=3D"literal">Cla=
ss</code> objects, which must be derived from <code class=3D"literal">Throw=
able.</code></p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"l=
eft" valign=3D"top"><p>Optional array of exception classes that <span class=
=3D"emphasis"><em>must not</em></span> cause rollback.</p></td></tr><tr><td=
 style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p><c=
ode class=3D"literal">noRollbackForClassName</code></p></td><td style=3D"bo=
rder-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Array of <code=
 class=3D"literal">String</code> class names, which must be derived from <c=
ode class=3D"literal">Throwable.</code></p></td><td style=3D"" align=3D"lef=
t" valign=3D"top"><p>Optional array of names of exception classes that <spa=
n class=3D"emphasis"><em>must not</em></span> cause rollback.</p></td></tr>=
</tbody></table>
</div></div><br class=3D"table-break">
<p>Currently you cannot have explicit control over the name of a transactio=
n, where 'name'
means the transaction name that will be shown in a transaction monitor, if =
applicable
(for example, WebLogic=92s transaction monitor), and in logging output. For=
 declarative
transactions, the transaction name is always the fully-qualified class name=
 + "."
+ method name of the transactionally-advised class. For example, if the
<code class=3D"literal">handlePayment(..)</code> method of the <code class=
=3D"literal">BusinessService</code> class started a transaction, the
name of the transaction would be: <code class=3D"literal">com.foo.BusinessS=
ervice.handlePayment</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"tx-multiple-tx-mgrs-with-attransactional" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#tx-multiple-tx-mgrs-with-attransactional"></a>Multiple Transaction Manag=
ers with @Transactional</h4></div></div></div>
<p>Most Spring applications only need a single transaction manager, but the=
re may be
situations where you want multiple independent transaction managers in a si=
ngle
application. The value attribute of the <code class=3D"literal">@Transactio=
nal</code> annotation can be used to
optionally specify the identity of the <code class=3D"literal">PlatformTran=
sactionManager</code> to be used. This can
either be the bean name or the qualifier value of the transaction manager b=
ean. For
example, using the qualifier notation, the following Java code</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> TransactionalService {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional(=
"order")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setSomething(String name) { ... }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional(=
"account")</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doSomething() { ... }
}</pre>
<p>could be combined with the following transaction manager bean declaratio=
ns in the
application context.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;tx:annotation-driv=
en/&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"transactionManager1"</span> <span class=
=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springframew=
ork.jdbc.datasource.DataSourceTransactionManager"</span><span class=3D"hl-t=
ag">&gt;</span>
        ...
        <span class=3D"hl-tag">&lt;qualifier</span> <span class=3D"hl-attri=
bute">value</span>=3D<span class=3D"hl-value">"order"</span><span class=3D"=
hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"transactionManager2"</span> <span class=
=3D"hl-attribute">class</span>=3D<span class=3D"hl-value">"org.springframew=
ork.jdbc.datasource.DataSourceTransactionManager"</span><span class=3D"hl-t=
ag">&gt;</span>
        ...
        <span class=3D"hl-tag">&lt;qualifier</span> <span class=3D"hl-attri=
bute">value</span>=3D<span class=3D"hl-value">"account"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span></pre>
<p>In this case, the two methods on <code class=3D"literal">TransactionalSe=
rvice</code> will run under separate
transaction managers, differentiated by the "order" and "account" qualifier=
s. The
default <code class=3D"literal">&lt;tx:annotation-driven&gt;</code> target =
bean name <code class=3D"literal">transactionManager</code> will still be
used if no specifically qualified PlatformTransactionManager bean is found.=
</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"tx-custom-attributes" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-custom-attribu=
tes"></a>Custom shortcut annotations</h4></div></div></div>
<p>If you find you are repeatedly using the same attributes with <code clas=
s=3D"literal">@Transactional</code> on many
different methods, then <a class=3D"link" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#beans-meta-=
annotations" title=3D"7.10.2&nbsp;Meta-annotations">Spring=92s meta-annotat=
ion support</a> allows
you to define custom shortcut annotations for your specific use cases. For =
example,
defining the following annotations</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Target({ElementType.METHOD, ElementType.TYPE})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional("ord=
er")</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> OrderTx {
}

<em><span class=3D"hl-annotation" style=3D"color: gray">@Target({ElementTyp=
e.METHOD, ElementType.TYPE})</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Retention(Retentio=
nPolicy.RUNTIME)</span></em>
<em><span class=3D"hl-annotation" style=3D"color: gray">@Transactional("acc=
ount")</span></em>
<span class=3D"hl-keyword">public</span> <em><span class=3D"hl-annotation" =
style=3D"color: gray">@interface</span></em> AccountTx {
}</pre>
<p>allows us to write the example from the previous section as</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> TransactionalService {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@OrderTx</span>=
</em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setSomething(String name) { ... }

    <em><span class=3D"hl-annotation" style=3D"color: gray">@AccountTx</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doSomething() { ... }
}</pre>
<p>Here we have used the syntax to define the transaction manager qualifier=
, but could also
have included propagation behavior, rollback rules, timeouts etc.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"tx-propagation" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation"></a>17.=
5.7&nbsp;Transaction propagation</h3></div></div></div>
<p>This section describes some semantics of transaction propagation in Spri=
ng. Please note
that this section is not an introduction to transaction propagation proper;=
 rather it
details some of the semantics regarding transaction propagation in Spring.<=
/p>
<p>In Spring-managed transactions, be aware of the difference between <span=
 class=3D"emphasis"><em>physical</em></span> and
<span class=3D"emphasis"><em>logical</em></span> transactions, and how the =
propagation setting applies to this difference.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"tx-propagation-required" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation=
-required"></a>Required</h4></div></div></div>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tx_prop_required=
.png" alt=3D"tx prop required"></div>
</div>
<p>PROPAGATION_REQUIRED</p>
<p>When the propagation setting is <code class=3D"literal">PROPAGATION_REQU=
IRED</code>, a <span class=3D"emphasis"><em>logical</em></span> transaction=
 scope
is created for each method upon which the setting is applied. Each such log=
ical
transaction scope can determine rollback-only status individually, with an =
outer
transaction scope being logically independent from the inner transaction sc=
ope.
Of course, in case of standard <code class=3D"literal">PROPAGATION_REQUIRED=
</code> behavior, all these scopes will be
mapped to the same physical transaction. So a rollback-only marker set in t=
he inner
transaction scope does affect the outer transaction=92s chance to actually =
commit (as you
would expect it to).</p>
<p>However, in the case where an inner transaction scope sets the rollback-=
only marker, the
outer transaction has not decided on the rollback itself, and so the rollba=
ck (silently
triggered by the inner transaction scope) is unexpected. A corresponding
<code class=3D"literal">UnexpectedRollbackException</code> is thrown at tha=
t point. This is <span class=3D"emphasis"><em>expected behavior</em></span>=
 so
that the caller of a transaction can never be misled to assume that a commi=
t was
performed when it really was not. So if an inner transaction (of which the =
outer caller
is not aware) silently marks a transaction as rollback-only, the outer call=
er still
calls commit. The outer caller needs to receive an <code class=3D"literal">=
UnexpectedRollbackException</code> to
indicate clearly that a rollback was performed instead.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"tx-propagation-requires_new" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-propaga=
tion-requires_new"></a>RequiresNew</h4></div></div></div>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tx_prop_requires=
_new.png" alt=3D"tx prop requires new"></div>
</div>
<p>PROPAGATION_REQUIRES_NEW</p>
<p><code class=3D"literal">PROPAGATION_REQUIRES_NEW</code>, in contrast to =
<code class=3D"literal">PROPAGATION_REQUIRED</code>, always uses an
<span class=3D"emphasis"><em>independent</em></span> physical transaction f=
or each affected transaction scope, never
participating in an existing transaction for an outer scope. In such an arr=
angement,
the underlying resource transactions are different and hence can commit or =
roll back
independently, with an outer transaction not affected by an inner transacti=
on=92s rollback
status, and with an inner transaction=92s locks released immediately after =
its completion.
Such an independent inner transaction may also declare its own isolation le=
vel, timeout
and read-only settings, never inheriting an outer transaction=92s character=
istics.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"tx-propagation-nested" href=3D"https://docs.spring.io/spring/=
docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-propagation-n=
ested"></a>Nested</h4></div></div></div>
<p><code class=3D"literal">PROPAGATION_NESTED</code> uses a <span class=3D"=
emphasis"><em>single</em></span> physical transaction with multiple savepoi=
nts
that it can roll back to. Such partial rollbacks allow an inner transaction=
 scope to
trigger a rollback <span class=3D"emphasis"><em>for its scope</em></span>, =
with the outer transaction being able to continue
the physical transaction despite some operations having been rolled back. T=
his setting
is typically mapped onto JDBC savepoints, so will only work with JDBC resou=
rce
transactions. See Spring=92s <code class=3D"literal">DataSourceTransactionM=
anager</code>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-applying-more-than-just-tx-advice" hr=
ef=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-re=
ference/htmlsingle/#transaction-declarative-applying-more-than-just-tx-advi=
ce"></a>17.5.8&nbsp;Advising transactional operations</h3></div></div></div=
>
<p>Suppose you want to execute <span class=3D"emphasis"><em>both</em></span=
> transactional <span class=3D"emphasis"><em>and</em></span> some basic pro=
filing advice.
How do you effect this in the context of <code class=3D"literal">&lt;tx:ann=
otation-driven/&gt;</code>?</p>
<p>When you invoke the <code class=3D"literal">updateFoo(Foo)</code> method=
, you want to see the following actions:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Configured profiling aspect starts up.
</li><li class=3D"listitem">
Transactional advice executes.
</li><li class=3D"listitem">
Method on the advised object executes.
</li><li class=3D"listitem">
Transaction commits.
</li><li class=3D"listitem">
Profiling aspect reports exact duration of the whole transactional method i=
nvocation.
</li></ul></div>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>This chapter is not concerned with explaining AOP in any great detail (e=
xcept as it
applies to transactions). See <a class=3D"xref" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#aop" =
title=3D"11.&nbsp;Aspect Oriented Programming with Spring">Chapter&nbsp;11,=
 <i>Aspect Oriented Programming with Spring</i></a> for detailed coverage o=
f the following AOP
configuration and AOP in general.</p>
</td></tr></tbody></table></div>
<p>Here is the code for a simple profiling aspect discussed above. The orde=
ring of advice
is controlled through the <code class=3D"literal">Ordered</code> interface.=
 For full details on advice ordering, see
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop-ataspectj-advice-ordering" titl=
e=3D"Advice ordering">the section called =93Advice ordering=94</a>.
.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">package</span> x.y=
;

<span class=3D"hl-keyword">import</span> org.aspectj.lang.ProceedingJoinPoi=
nt;
<span class=3D"hl-keyword">import</span> org.springframework.util.StopWatch=
;
<span class=3D"hl-keyword">import</span> org.springframework.core.Ordered;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SimpleProfiler <span class=3D"hl-keyword">implements</span> Ordered {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">in=
t</span> order;

    <span class=3D"hl-comment">// allows us to control the ordering of advi=
ce</span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span> getOrder() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.order;
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setOrder(<span class=3D"hl-keyword">int</span> order) {
        <span class=3D"hl-keyword">this</span>.order =3D order;
    }

    <span class=3D"hl-comment">// this method </span><span class=3D"strong"=
><strong>is</strong></span> the around advice
    <span class=3D"hl-keyword">public</span> Object profile(ProceedingJoinP=
oint call) <span class=3D"hl-keyword">throws</span> Throwable {
        Object returnValue;
        StopWatch clock =3D <span class=3D"hl-keyword">new</span> StopWatch=
(getClass().getName());
        <span class=3D"hl-keyword">try</span> {
            clock.start(call.toShortString());
            returnValue =3D call.proceed();
        } <span class=3D"hl-keyword">finally</span> {
            clock.stop();
            System.out.println(clock.prettyPrint());
        }
        <span class=3D"hl-keyword">return</span> returnValue;
    }
}</pre>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xmlns:tx</span>=3D<span class=3D"hl-value"=
>"http://www.springframework.org/schema/tx"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- this is the aspect --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"profiler"</span> <span class=3D"hl-attri=
bute">class</span>=3D<span class=3D"hl-value">"x.y.SimpleProfiler"</span><s=
pan class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- execute before the transactional=
 advice (hence the lower order number) --&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"order"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"1"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;tx:annotation-driven</span> <span class=3D"h=
l-attribute">transaction-manager</span>=3D<span class=3D"hl-value">"txManag=
er"</span> <span class=3D"hl-attribute">order</span>=3D<span class=3D"hl-va=
lue">"200"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-tag">&lt;aop:config&gt;</span>
            <span class=3D"hl-comment">&lt;!-- this advice will execute aro=
und the transactional advice --&gt;</span>
            <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-=
attribute">id</span>=3D<span class=3D"hl-value">"profilingAspect"</span> <s=
pan class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"profiler"=
</span><span class=3D"hl-tag">&gt;</span>
                <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=
=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"serviceMethodWithRe=
turnValue"</span>
                        <span class=3D"hl-attribute">expression</span>=3D<s=
pan class=3D"hl-value">"execution(!void x.y..*Service.*(..))"</span><span c=
lass=3D"hl-tag">/&gt;</span>
                <span class=3D"hl-tag">&lt;aop:around</span> <span class=3D=
"hl-attribute">method</span>=3D<span class=3D"hl-value">"profile"</span> <s=
pan class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"hl-value">"=
serviceMethodWithReturnValue"</span><span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>
    <span class=3D"hl-tag">&lt;/aop:config&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"org.apache.commons.dbcp.Ba=
sicDataSource"</span> <span class=3D"hl-attribute">destroy-method</span>=3D=
<span class=3D"hl-value">"close"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span =
class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"oracle.jdbc=
.driver.OracleDriver"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"jdbc:oracle:thin:@rj-t4=
2:1521:elvis"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"username"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"scott"</span><sp=
an class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"password"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"tiger"</span><sp=
an class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"txManager"</span> <span class=3D"hl-attr=
ibute">class</span>=3D<span class=3D"hl-value">"org.springframework.jdbc.da=
tasource.DataSourceTransactionManager"</span><span class=3D"hl-tag">&gt;</s=
pan>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The result of the above configuration is a <code class=3D"literal">fooSe=
rvice</code> bean that has profiling and
transactional aspects applied to it <span class=3D"emphasis"><em>in the des=
ired order</em></span>. You configure any number
of additional aspects in similar fashion.</p>
<p>The following example effects the same setup as above, but uses the pure=
ly XML
declarative approach.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:aop</span>=3D<span class=3D"hl-value=
">"http://www.springframework.org/schema/aop"</span>
    <span class=3D"hl-attribute">xmlns:tx</span>=3D<span class=3D"hl-value"=
>"http://www.springframework.org/schema/tx"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"</span><sp=
an class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"fooService"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"x.y.service.DefaultFooServ=
ice"</span><span class=3D"hl-tag">/&gt;</span>

    <span class=3D"hl-comment">&lt;!-- the profiling advice --&gt;</span>
    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"profiler"</span> <span class=3D"hl-attri=
bute">class</span>=3D<span class=3D"hl-value">"x.y.SimpleProfiler"</span><s=
pan class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-comment">&lt;!-- execute before the transactional=
 advice (hence the lower order number) --&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"order"</span> <span class=3D"h=
l-attribute">value</span>=3D<span class=3D"hl-value">"1"</span><span class=
=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;aop:config&gt;</span>
        <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"hl-at=
tribute">id</span>=3D<span class=3D"hl-value">"entryPointMethod"</span> <sp=
an class=3D"hl-attribute">expression</span>=3D<span class=3D"hl-value">"exe=
cution(* x.y..*Service.*(..))"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-comment">&lt;!-- will execute after the profiling=
 advice (c.f. the order attribute) --&gt;</span>

        <span class=3D"hl-tag">&lt;aop:advisor</span> <span class=3D"hl-att=
ribute">advice-ref</span>=3D<span class=3D"hl-value">"txAdvice"</span> <spa=
n class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"hl-value">"en=
tryPointMethod"</span> <span class=3D"hl-attribute">order</span>=3D<span cl=
ass=3D"hl-value">"2"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-comment">&lt;!-- order value is higher than the p=
rofiling aspect --&gt;</span>

        <span class=3D"hl-tag">&lt;aop:aspect</span> <span class=3D"hl-attr=
ibute">id</span>=3D<span class=3D"hl-value">"profilingAspect"</span> <span =
class=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"profiler"</sp=
an><span class=3D"hl-tag">&gt;</span>
            <span class=3D"hl-tag">&lt;aop:pointcut</span> <span class=3D"h=
l-attribute">id</span>=3D<span class=3D"hl-value">"serviceMethodWithReturnV=
alue"</span>
                    <span class=3D"hl-attribute">expression</span>=3D<span =
class=3D"hl-value">"execution(!void x.y..*Service.*(..))"</span><span class=
=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;aop:around</span> <span class=3D"hl-=
attribute">method</span>=3D<span class=3D"hl-value">"profile"</span> <span =
class=3D"hl-attribute">pointcut-ref</span>=3D<span class=3D"hl-value">"serv=
iceMethodWithReturnValue"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/aop:aspect&gt;</span>

    <span class=3D"hl-tag">&lt;/aop:config&gt;</span>

    <span class=3D"hl-tag">&lt;tx:advice</span> <span class=3D"hl-attribute=
">id</span>=3D<span class=3D"hl-value">"txAdvice"</span> <span class=3D"hl-=
attribute">transaction-manager</span>=3D<span class=3D"hl-value">"txManager=
"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;tx:attributes&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"get*"</span> <span class=
=3D"hl-attribute">read-only</span>=3D<span class=3D"hl-value">"true"</span>=
<span class=3D"hl-tag">/&gt;</span>
            <span class=3D"hl-tag">&lt;tx:method</span> <span class=3D"hl-a=
ttribute">name</span>=3D<span class=3D"hl-value">"*"</span><span class=3D"h=
l-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;/tx:attributes&gt;</span>
    <span class=3D"hl-tag">&lt;/tx:advice&gt;</span>

    <span class=3D"hl-comment">&lt;!-- other &lt;bean/&gt; definitions such=
 as a DataSource and a PlatformTransactionManager here --&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>The result of the above configuration will be a <code class=3D"literal">=
fooService</code> bean that has profiling and
transactional aspects applied to it <span class=3D"emphasis"><em>in that or=
der</em></span>. If you want the profiling advice
to execute <span class=3D"emphasis"><em>after</em></span> the transactional=
 advice on the way in, and <span class=3D"emphasis"><em>before</em></span> =
the
transactional advice on the way out, then you simply swap the value of the =
profiling
aspect bean=92s <code class=3D"literal">order</code> property so that it is=
 higher than the transactional advice=92s
order value.</p>
<p>You configure additional aspects in similar fashion.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-declarative-aspectj" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transa=
ction-declarative-aspectj"></a>17.5.9&nbsp;Using @Transactional with Aspect=
J</h3></div></div></div>
<p>It is also possible to use the Spring Framework=92s <code class=3D"liter=
al">@Transactional</code> support outside of a
Spring container by means of an AspectJ aspect. To do so, you first annotat=
e your
classes (and optionally your classes' methods) with the <code class=3D"lite=
ral">@Transactional</code> annotation, and
then you link (weave) your application with the
<code class=3D"literal">org.springframework.transaction.aspectj.AnnotationT=
ransactionAspect</code> defined in the
<code class=3D"literal">spring-aspects.jar</code> file. The aspect must als=
o be configured with a transaction
manager. You can of course use the Spring Framework=92s IoC container to ta=
ke care of
dependency-injecting the aspect. The simplest way to configure the transact=
ion
management aspect is to use the <code class=3D"literal">&lt;tx:annotation-d=
riven/&gt;</code> element and specify the <code class=3D"literal">mode</cod=
e>
attribute to <code class=3D"literal">aspectj</code> as described in <a clas=
s=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring=
-framework-reference/htmlsingle/#transaction-declarative-annotations" title=
=3D"17.5.6&nbsp;Using @Transactional">Section&nbsp;17.5.6, =93Using @Transa=
ctional=94</a>. Because
we=92re focusing here on applications running outside of a Spring container=
, we=92ll show
you how to do it programmatically.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Prior to continuing, you may want to read <a class=3D"xref" href=3D"http=
s://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/ht=
mlsingle/#transaction-declarative-annotations" title=3D"17.5.6&nbsp;Using @=
Transactional">Section&nbsp;17.5.6, =93Using @Transactional=94</a> and
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#aop" title=3D"11.&nbsp;Aspect Orien=
ted Programming with Spring">Chapter&nbsp;11, <i>Aspect Oriented Programmin=
g with Spring</i></a> respectively.</p>
</td></tr></tbody></table></div>
<pre class=3D"programlisting"><span class=3D"hl-comment">// construct an ap=
propriate transaction manager</span>
DataSourceTransactionManager txManager =3D <span class=3D"hl-keyword">new</=
span> DataSourceTransactionManager(getDataSource());

<span class=3D"hl-comment">// configure the AnnotationTransactionAspect to =
use it; this must be done before executing any transactional methods</span>
AnnotationTransactionAspect.aspectOf().setTransactionManager(txManager);</p=
re>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>When using this aspect, you must annotate the <span class=3D"emphasis"><=
em>implementation</em></span> class (and/or methods
within that class), <span class=3D"emphasis"><em>not</em></span> the interf=
ace (if any) that the class implements. AspectJ
follows Java=92s rule that annotations on interfaces are <span class=3D"emp=
hasis"><em>not inherited</em></span>.</p>
</td></tr></tbody></table></div>
<p>The <code class=3D"literal">@Transactional</code> annotation on a class =
specifies the default transaction semantics
for the execution of any public method in the class.</p>
<p>The <code class=3D"literal">@Transactional</code> annotation on a method=
 within the class overrides the default
transaction semantics given by the class annotation (if present). Any metho=
d may be
annotated, regardless of visibility.</p>
<p>To weave your applications with the <code class=3D"literal">AnnotationTr=
ansactionAspect</code> you must either build
your application with AspectJ (see the
<a class=3D"ulink" href=3D"https://www.eclipse.org/aspectj/doc/released/dev=
guide/index.html" target=3D"_top">AspectJ Development
Guide</a>) or use load-time weaving. See <a class=3D"xref" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#aop-aj-ltw" title=3D"11.8.4&nbsp;Load-time weaving with AspectJ in th=
e Spring Framework">Section&nbsp;11.8.4, =93Load-time weaving with AspectJ =
in the Spring Framework=94</a> for a discussion of load-time
weaving with AspectJ.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-programmatic" href=3D"https=
://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htm=
lsingle/#transaction-programmatic"></a>17.6&nbsp;Programmatic transaction m=
anagement</h2></div></div></div>
<p>The Spring Framework provides two means of programmatic transaction mana=
gement:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Using the <code class=3D"literal">TransactionTemplate</code>.
</li><li class=3D"listitem">
Using a <code class=3D"literal">PlatformTransactionManager</code> implement=
ation directly.
</li></ul></div>
<p>The Spring team generally recommends the <code class=3D"literal">Transac=
tionTemplate</code> for programmatic
transaction management. The second approach is similar to using the JTA
<code class=3D"literal">UserTransaction</code> API, although exception hand=
ling is less cumbersome.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"tx-prog-template" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-prog-template"></a=
>17.6.1&nbsp;Using the TransactionTemplate</h3></div></div></div>
<p>The <code class=3D"literal">TransactionTemplate</code> adopts the same a=
pproach as other Spring <span class=3D"emphasis"><em>templates</em></span> =
such as
the <code class=3D"literal">JdbcTemplate</code>. It uses a callback approac=
h, to free application code from having to
do the boilerplate acquisition and release of transactional resources, and =
results in
code that is intention driven, in that the code that is written focuses sol=
ely on what
the developer wants to do.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>As you will see in the examples that follow, using the <code class=3D"li=
teral">TransactionTemplate</code> absolutely
couples you to Spring=92s transaction infrastructure and APIs. Whether or n=
ot programmatic
transaction management is suitable for your development needs is a decision=
 that you
will have to make yourself.</p>
</td></tr></tbody></table></div>
<p>Application code that must execute in a transactional context, and that =
will use the
<code class=3D"literal">TransactionTemplate</code> explicitly, looks like t=
he following. You, as an application
developer, write a <code class=3D"literal">TransactionCallback</code> imple=
mentation (typically expressed as an
anonymous inner class) that contains the code that you need to execute in t=
he context of
a transaction. You then pass an instance of your custom <code class=3D"lite=
ral">TransactionCallback</code> to the
<code class=3D"literal">execute(..)</code> method exposed on the <code clas=
s=3D"literal">TransactionTemplate</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleService <span class=3D"hl-keyword=
">implements</span> Service {

    <span class=3D"hl-comment">// single TransactionTemplate shared amongst=
 all methods in this instance</span>
    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> TransactionTemplate transactionTemplate;

    <span class=3D"hl-comment">// use constructor-injection to supply the P=
latformTransactionManager</span>
    <span class=3D"hl-keyword">public</span> SimpleService(PlatformTransact=
ionManager transactionManager) {
        <span class=3D"hl-keyword">this</span>.transactionTemplate =3D <spa=
n class=3D"hl-keyword">new</span> TransactionTemplate(transactionManager);
    }

    <span class=3D"hl-keyword">public</span> Object someServiceMethod() {
        <span class=3D"hl-keyword">return</span> transactionTemplate.execut=
e(<span class=3D"hl-keyword">new</span> TransactionCallback() {
            <span class=3D"hl-comment">// the code in this method executes =
in a transactional context</span>
            <span class=3D"hl-keyword">public</span> Object doInTransaction=
(TransactionStatus status) {
                updateOperation1();
                <span class=3D"hl-keyword">return</span> resultOfUpdateOper=
ation2();
            }
        });
    }
}</pre>
<p>If there is no return value, use the convenient <code class=3D"literal">=
TransactionCallbackWithoutResult</code> class
with an anonymous class as follows:</p>
<pre class=3D"programlisting">transactionTemplate.execute(<span class=3D"hl=
-keyword">new</span> <span class=3D"strong"><strong>TransactionCallbackWith=
outResult</strong></span>() {
    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
void</span> doInTransactionWithoutResult(TransactionStatus status) {
        updateOperation1();
        updateOperation2();
    }
});</pre>
<p>Code within the callback can roll the transaction back by calling the
<code class=3D"literal">setRollbackOnly()</code> method on the supplied <co=
de class=3D"literal">TransactionStatus</code> object:</p>
<pre class=3D"programlisting">transactionTemplate.execute(<span class=3D"hl=
-keyword">new</span> TransactionCallbackWithoutResult() {

    <span class=3D"hl-keyword">protected</span> <span class=3D"hl-keyword">=
void</span> doInTransactionWithoutResult(TransactionStatus status) {
        <span class=3D"hl-keyword">try</span> {
            updateOperation1();
            updateOperation2();
        } <span class=3D"hl-keyword">catch</span> (SomeBusinessExeption ex)=
 {
            <span class=3D"strong"><strong>status.setRollbackOnly();</stron=
g></span>
        }
    }
});</pre>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"tx-prog-template-settings" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#tx-prog-temp=
late-settings"></a>Specifying transaction settings</h4></div></div></div>
<p>You can specify transaction settings such as the propagation mode, the i=
solation level,
the timeout, and so forth on the <code class=3D"literal">TransactionTemplat=
e</code> either programmatically or in
configuration. <code class=3D"literal">TransactionTemplate</code> instances=
 by default have the
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-declarative-txadvice-se=
ttings" title=3D"17.5.5&nbsp;<tx:advice/> settings">default transactional s=
ettings</a>. The
following example shows the programmatic customization of the transactional=
 settings for
a specific <code class=3D"literal">TransactionTemplate:</code></p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> SimpleService <span class=3D"hl-keyword=
">implements</span> Service {

    <span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">fi=
nal</span> TransactionTemplate transactionTemplate;

    <span class=3D"hl-keyword">public</span> SimpleService(PlatformTransact=
ionManager transactionManager) {
        <span class=3D"hl-keyword">this</span>.transactionTemplate =3D <spa=
n class=3D"hl-keyword">new</span> TransactionTemplate(transactionManager);

        <span class=3D"hl-comment">// the transaction settings can be set h=
ere explicitly if so desired</span>
        <span class=3D"hl-keyword">this</span>.transactionTemplate.setIsola=
tionLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);
        <span class=3D"hl-keyword">this</span>.transactionTemplate.setTimeo=
ut(<span class=3D"hl-number">30</span>); <span class=3D"hl-comment">// 30 s=
econds</span>
        <span class=3D"hl-comment">// and so forth...</span>
    }
}</pre>
<p>The following example defines a <code class=3D"literal">TransactionTempl=
ate</code> with some custom transactional
settings, using Spring XML configuration. The <code class=3D"literal">share=
dTransactionTemplate</code> can then be
injected into as many services as are required.</p>
<pre class=3D"programlisting"><span class=3D"hl-tag">&lt;bean</span> <span =
class=3D"hl-attribute">id</span>=3D<span class=3D"hl-value">"sharedTransact=
ionTemplate"</span>
        <span class=3D"hl-attribute">class</span>=3D<span class=3D"hl-value=
">"org.springframework.transaction.support.TransactionTemplate"</span><span=
 class=3D"hl-tag">&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"isolationLevelName"</span> <span c=
lass=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"ISOLATION_RE=
AD_UNCOMMITTED"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attribute"=
>name</span>=3D<span class=3D"hl-value">"timeout"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"30"</span><span class=
=3D"hl-tag">/&gt;</span>
<span class=3D"hl-tag">&lt;/bean&gt;</span>"</pre>
<p>Finally, instances of the <code class=3D"literal">TransactionTemplate</c=
ode> class are threadsafe, in that instances
do not maintain any conversational state. <code class=3D"literal">Transacti=
onTemplate</code> instances <span class=3D"emphasis"><em>do</em></span> how=
ever
maintain configuration state, so while a number of classes may share a sing=
le instance
of a <code class=3D"literal">TransactionTemplate</code>, if a class needs t=
o use a <code class=3D"literal">TransactionTemplate</code> with
different settings (for example, a different isolation level), then you nee=
d to create
two distinct <code class=3D"literal">TransactionTemplate</code> instances.<=
/p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-programmatic-ptm" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#transacti=
on-programmatic-ptm"></a>17.6.2&nbsp;Using the PlatformTransactionManager</=
h3></div></div></div>
<p>You can also use the <code class=3D"literal">org.springframework.transac=
tion.PlatformTransactionManager</code>
directly to manage your transaction. Simply pass the implementation of the
<code class=3D"literal">PlatformTransactionManager</code> you are using to =
your bean through a bean reference. Then,
using the <code class=3D"literal">TransactionDefinition</code> and <code cl=
ass=3D"literal">TransactionStatus</code> objects you can initiate
transactions, roll back, and commit.</p>
<pre class=3D"programlisting">DefaultTransactionDefinition def =3D <span cl=
ass=3D"hl-keyword">new</span> DefaultTransactionDefinition();
<span class=3D"hl-comment">// explicitly setting the transaction name is so=
mething that can only be done programmatically</span>
def.setName(<span class=3D"hl-string">"SomeTxName"</span>);
def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

TransactionStatus status =3D txManager.getTransaction(def);
<span class=3D"hl-keyword">try</span> {
    <span class=3D"hl-comment">// execute your business logic here</span>
}
<span class=3D"hl-keyword">catch</span> (MyException ex) {
    txManager.rollback(status);
    <span class=3D"hl-keyword">throw</span> ex;
}
txManager.commit(status);</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"tx-decl-vs-prog" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
tx-decl-vs-prog"></a>17.7&nbsp;Choosing between programmatic and declarativ=
e transaction management</h2></div></div></div>
<p>Programmatic transaction management is usually a good idea only if you h=
ave a small
number of transactional operations. For example, if you have a web applicat=
ion that
require transactions only for certain update operations, you may not want t=
o set up
transactional proxies using Spring or any other technology. In this case, u=
sing the
<code class=3D"literal">TransactionTemplate</code> <span class=3D"emphasis"=
><em>may</em></span> be a good approach. Being able to set the transaction =
name
explicitly is also something that can only be done using the programmatic a=
pproach to
transaction management.</p>
<p>On the other hand, if your application has numerous transactional operat=
ions,
declarative transaction management is usually worthwhile. It keeps transact=
ion
management out of business logic, and is not difficult to configure. When u=
sing the
Spring Framework, rather than EJB CMT, the configuration cost of declarativ=
e transaction
management is greatly reduced.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-event" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#transaction-event"></a>17.8&nbsp;Transaction bound event</h2></div></div>=
</div>
<p>As of Spring 4.2, the listener of an event can be bound to a phase of th=
e transaction. The
typical example is to handle the event when the transaction has completed s=
uccessfully: this
allows events to be used with more flexibility when the outcome of the curr=
ent transaction
actually matters to the listener.</p>
<p>Registering a regular event listener is done via the <code class=3D"lite=
ral">@EventListener</code> annotation. If you need
to bind it to the transaction use <code class=3D"literal">@TransactionalEve=
ntListener</code>. When you do so, the listener
will be bound to the commit phase of the transaction by default.</p>
<p>Let=92s take an example to illustrate this concept. Assume that a compon=
ent publishes an order
created event and we want to define a listener that should only handle that=
 event once the
transaction in which it has been published has committed successfully:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Component</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> MyComponent {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@TransactionalE=
ventListener</span></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> handleOrderCreatedEvent(CreationEvent&lt;Order&gt; creationEvent) =
{
        ...
    }
}</pre>
<p>The <code class=3D"literal">TransactionalEventListener</code> annotation=
 exposes a <code class=3D"literal">phase</code> attribute that allows us to=
 customize
which phase of the transaction the listener should be bound to. The valid p=
hases are <code class=3D"literal">BEFORE_COMMIT</code>,
<code class=3D"literal">AFTER_COMMIT</code> (default), <code class=3D"liter=
al">AFTER_ROLLBACK</code> and <code class=3D"literal">AFTER_COMPLETION</cod=
e> that aggregates the transaction
completion (be it a commit or a rollback).</p>
<p>If no transaction is running, the listener is not invoked at all since w=
e can=92t honor the required
semantics. It is however possible to override that behaviour by setting the=
 <code class=3D"literal">fallbackExecution</code> attribute
of the annotation to <code class=3D"literal">true</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-application-server-integrat=
ion" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-frame=
work-reference/htmlsingle/#transaction-application-server-integration"></a>=
17.9&nbsp;Application server-specific integration</h2></div></div></div>
<p>Spring=92s transaction abstraction generally is application server agnos=
tic. Additionally,
Spring=92s <code class=3D"literal">JtaTransactionManager</code> class, whic=
h can optionally perform a JNDI lookup for
the JTA <code class=3D"literal">UserTransaction</code> and <code class=3D"l=
iteral">TransactionManager</code> objects, autodetects the location for
the latter object, which varies by application server. Having access to the=
 JTA
<code class=3D"literal">TransactionManager</code> allows for enhanced trans=
action semantics, in particular supporting
transaction suspension. See the <code class=3D"literal">JtaTransactionManag=
er</code> javadocs for details.</p>
<p>Spring=92s <code class=3D"literal">JtaTransactionManager</code> is the s=
tandard choice to run on Java EE application
servers, and is known to work on all common servers. Advanced functionality=
 such as
transaction suspension works on many servers as well&#8201;=97&#8201;includ=
ing GlassFish, JBoss and
Geronimo&#8201;=97&#8201;without any special configuration required. Howeve=
r, for fully supported
transaction suspension and further advanced integration, Spring ships speci=
al adapters
for WebLogic Server and WebSphere. These adapters are discussed in the foll=
owing
sections.</p>
<p><span class=3D"emphasis"><em>For standard scenarios, including WebLogic =
Server and WebSphere, consider using the
convenient <code class=3D"literal">&lt;tx:jta-transaction-manager/&gt;</cod=
e> configuration element.</em></span> When configured,
this element automatically detects the underlying server and chooses the be=
st
transaction manager available for the platform. This means that you won=92t=
 have to
configure server-specific adapter classes (as discussed in the following se=
ctions)
explicitly; rather, they are chosen automatically, with the standard
<code class=3D"literal">JtaTransactionManager</code> as default fallback.</=
p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-application-server-integration-websphere" href=3D=
"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referen=
ce/htmlsingle/#transaction-application-server-integration-websphere"></a>17=
.9.1&nbsp;IBM WebSphere</h3></div></div></div>
<p>On WebSphere 6.1.0.9 and above, the recommended Spring JTA transaction m=
anager to use is
<code class=3D"literal">WebSphereUowTransactionManager</code>. This special=
 adapter leverages IBM=92s <code class=3D"literal">UOWManager</code> API,
which is available in WebSphere Application Server 6.1.0.9 and later. With =
this adapter,
Spring-driven transaction suspension (suspend/resume as initiated by
<code class=3D"literal">PROPAGATION_REQUIRES_NEW</code>) is officially supp=
orted by IBM.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-application-server-integration-weblogic" href=3D"=
https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-referenc=
e/htmlsingle/#transaction-application-server-integration-weblogic"></a>17.9=
.2&nbsp;Oracle WebLogic Server</h3></div></div></div>
<p>On WebLogic Server 9.0 or above, you typically would use the
<code class=3D"literal">WebLogicJtaTransactionManager</code> instead of the=
 stock <code class=3D"literal">JtaTransactionManager</code> class. This
special WebLogic-specific subclass of the normal <code class=3D"literal">Jt=
aTransactionManager</code> supports the
full power of Spring=92s transaction definitions in a WebLogic-managed tran=
saction
environment, beyond standard JTA semantics: Features include transaction na=
mes,
per-transaction isolation levels, and proper resuming of transactions in al=
l cases.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-solutions-to-common-problem=
s" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framewo=
rk-reference/htmlsingle/#transaction-solutions-to-common-problems"></a>17.1=
0&nbsp;Solutions to common problems</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"transaction-solutions-to-common-problems-wrong-ptm" href=3D"h=
ttps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference=
/htmlsingle/#transaction-solutions-to-common-problems-wrong-ptm"></a>17.10.=
1&nbsp;Use of the wrong transaction manager for a specific DataSource</h3><=
/div></div></div>
<p>Use the <span class=3D"emphasis"><em>correct</em></span> <code class=3D"=
literal">PlatformTransactionManager</code> implementation based on your cho=
ice of
transactional technologies and requirements. Used properly, the Spring Fram=
ework merely
provides a straightforward and portable abstraction. If you are using globa=
l
transactions, you <span class=3D"emphasis"><em>must</em></span> use the
<code class=3D"literal">org.springframework.transaction.jta.JtaTransactionM=
anager</code> class (or an
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#transaction-application-server-inte=
gration" title=3D"17.9&nbsp;Application server-specific integration">applic=
ation server-specific subclass</a> of
it) for all your transactional operations. Otherwise the transaction infras=
tructure
attempts to perform local transactions on resources such as container <code=
 class=3D"literal">DataSource</code>
instances. Such local transactions do not make sense, and a good applicatio=
n server
treats them as errors.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"transaction-resources" href=3D"https://=
docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsi=
ngle/#transaction-resources"></a>17.11&nbsp;Further resources</h2></div></d=
iv></div>
<p>For more information about the Spring Framework=92s transaction support:=
</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://www.javaworld.com/javaworld/jw-01-2009/jw=
-01-spring-transactions.html" target=3D"_top">Distributed
transactions in Spring, with and without XA</a> is a JavaWorld presentation=
 in which
Spring=92s David Syer guides you through seven patterns for distributed
transactions in Spring applications, three of them with XA and four without=
.
</li><li class=3D"listitem">
<a class=3D"ulink" href=3D"http://www.infoq.com/minibooks/JTDS" target=3D"_=
top">Java Transaction Design Strategies</a> is a book
available from <a class=3D"ulink" href=3D"http://www.infoq.com/" target=3D"=
_top">InfoQ</a> that provides a well-paced introduction
to transactions in Java. It also includes side-by-side examples of how to c=
onfigure
and use transactions with both the Spring Framework and EJB3.
</li></ul></div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"dao" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEAS=
E/spring-framework-reference/htmlsingle/#dao"></a>18.&nbsp;DAO support</h2>=
</div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"dao-introduction" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#dao-introduction"></a>18.1&nbsp;Introduction</h2></div></div></div>
<p>The Data Access Object (DAO) support in Spring is aimed at making it eas=
y to work with
data access technologies like JDBC, Hibernate, JPA or JDO in a consistent w=
ay. This
allows one to switch between the aforementioned persistence technologies fa=
irly easily
and it also allows one to code without worrying about catching exceptions t=
hat are
specific to each technology.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"dao-exceptions" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#d=
ao-exceptions"></a>18.2&nbsp;Consistent exception hierarchy</h2></div></div=
></div>
<p>Spring provides a convenient translation from technology-specific except=
ions like
<code class=3D"literal">SQLException</code> to its own exception class hier=
archy with the <code class=3D"literal">DataAccessException</code> as
the root exception. These exceptions wrap the original exception so there i=
s never any
risk that one might lose any information as to what might have gone wrong.<=
/p>
<p>In addition to JDBC exceptions, Spring can also wrap Hibernate-specific =
exceptions,
converting them to a set of focused runtime exceptions (the same is true fo=
r JDO and
JPA exceptions). This allows one to handle most persistence exceptions, whi=
ch are
non-recoverable, only in the appropriate layers, without having annoying bo=
ilerplate
catch-and-throw blocks and exception declarations in one=92s DAOs. (One can=
 still trap
and handle exceptions anywhere one needs to though.) As mentioned above, JD=
BC
exceptions (including database-specific dialects) are also converted to the=
 same
hierarchy, meaning that one can perform some operations with JDBC within a =
consistent
programming model.</p>
<p>The above holds true for the various template classes in Springs support=
 for various ORM
frameworks. If one uses the interceptor-based classes then the application =
must care
about handling <code class=3D"literal">HibernateExceptions</code> and <code=
 class=3D"literal">JDOExceptions</code> itself, preferably via
delegating to <code class=3D"literal">SessionFactoryUtils=92 `convertHibern=
ateAccessException(..)</code> or
<code class=3D"literal">convertJdoAccessException()</code> methods respecti=
vely. These methods convert the exceptions
to ones that are compatible with the exceptions in the <code class=3D"liter=
al">org.springframework.dao</code>
exception hierarchy. As <code class=3D"literal">JDOExceptions</code> are un=
checked, they can simply get thrown too,
sacrificing generic DAO abstraction in terms of exceptions though.</p>
<p>The exception hierarchy that Spring provides can be seen below. (Please =
note that the
class hierarchy detailed in the image shows only a subset of the entire
<code class=3D"literal">DataAccessException</code> hierarchy.)</p>
<div class=3D"informalfigure">
<div class=3D"mediaobject"><img src=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/images/DataAccessExcept=
ion.gif" alt=3D"DataAccessException"></div>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"dao-annotations" href=3D"https://docs.s=
pring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#=
dao-annotations"></a>18.3&nbsp;Annotations used for configuring DAO or Repo=
sitory classes</h2></div></div></div>
<p>The best way to guarantee that your Data Access Objects (DAOs) or reposi=
tories provide
exception translation is to use the <code class=3D"literal">@Repository</co=
de> annotation. This annotation also
allows the component scanning support to find and configure your DAOs and r=
epositories
without having to provide XML configuration entries for them.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@Repository</s=
trong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> SomeMovieFinder <span class=3D"hl-keyword">implements</span> MovieFin=
der {
    <span class=3D"hl-comment">// ...</span>
}</pre>
<p>Any DAO or repository implementation will need to access to a persistenc=
e resource,
depending on the persistence technology used; for example, a JDBC-based rep=
ository will
need access to a JDBC <code class=3D"literal">DataSource</code>; a JPA-base=
d repository will need access to an
<code class=3D"literal">EntityManager</code>. The easiest way to accomplish=
 this is to have this resource dependency
injected using one of the <code class=3D"literal">@Autowired,</code>, <code=
 class=3D"literal">@Inject</code>, <code class=3D"literal">@Resource</code>=
 or <code class=3D"literal">@PersistenceContext</code>
annotations. Here is an example for a JPA repository:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Repository</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> JpaMovieFinder <span class=3D"hl-keyword">implements</span> MovieFind=
er {

    <em><span class=3D"hl-annotation" style=3D"color: gray">@PersistenceCon=
text</span></em>
    <span class=3D"hl-keyword">private</span> EntityManager entityManager;

    <span class=3D"hl-comment">// ...</span>

}</pre>
<p>If you are using the classic Hibernate APIs than you can inject the Sess=
ionFactory:</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Repository</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> HibernateMovieFinder <span class=3D"hl-keyword">implements</span> Mov=
ieFinder {

    <span class=3D"hl-keyword">private</span> SessionFactory sessionFactory=
;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setSessionFactory(SessionFactory sessionFactory) {
        <span class=3D"hl-keyword">this</span>.sessionFactory =3D sessionFa=
ctory;
    }

    <span class=3D"hl-comment">// ...</span>

}</pre>
<p>Last example we will show here is for typical JDBC support. You would ha=
ve the
<code class=3D"literal">DataSource</code> injected into an initialization m=
ethod where you would create a
<code class=3D"literal">JdbcTemplate</code> and other data access support c=
lasses like <code class=3D"literal">SimpleJdbcCall</code> etc using
this <code class=3D"literal">DataSource</code>.</p>
<pre class=3D"programlisting"><em><span class=3D"hl-annotation" style=3D"co=
lor: gray">@Repository</span></em>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> JdbcMovieFinder <span class=3D"hl-keyword">implements</span> MovieFin=
der {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <em><span class=3D"hl-annotation" style=3D"color: gray">@Autowired</spa=
n></em>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> init(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-comment">// ...</span>

}</pre>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Please see the specific coverage of each persistence technology for deta=
ils on how to
configure the application context to take advantage of these annotations.</=
p>
</td></tr></tbody></table></div>
</div>
</div>
<div class=3D"chapter"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e"><a name=3D"jdbc" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEA=
SE/spring-framework-reference/htmlsingle/#jdbc"></a>19.&nbsp;Data access wi=
th JDBC</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"jdbc-introduction" href=3D"https://docs=
.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle=
/#jdbc-introduction"></a>19.1&nbsp;Introduction to Spring Framework JDBC</h=
2></div></div></div>
<p>The value-add provided by the Spring Framework JDBC abstraction is perha=
ps best shown by
the sequence of actions outlined in the table below. The table shows what a=
ctions Spring
will take care of and which actions are the responsibility of you, the appl=
ication
developer.</p>
<div class=3D"table"><a name=3D"jdbc-who-does-what" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#j=
dbc-who-does-what"></a><p class=3D"title"><b>Table&nbsp;19.1.&nbsp;Spring J=
DBC - who does what?</b></p><div class=3D"table-contents">
<table summary=3D"Spring JDBC - who does what?" style=3D"border-collapse: c=
ollapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left:=
 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class=3D"col_1"=
><col class=3D"col_2"><col class=3D"col_3"></colgroup><thead><tr><th style=
=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"lef=
t" valign=3D"top">Action</th><th style=3D"border-right: 0.5pt solid ; borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">Spring</th><th styl=
e=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">You</th><=
/tr></thead><tbody><tr><td style=3D"border-right: 0.5pt solid ; border-bott=
om: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Define connection para=
meters.</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5=
pt solid ; " align=3D"left" valign=3D"top">&nbsp;</td><td style=3D"border-b=
ottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>X</p></td></tr><tr>=
<td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " ali=
gn=3D"left" valign=3D"top"><p>Open the connection.</p></td><td style=3D"bor=
der-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" vali=
gn=3D"top"><p>X</p></td><td style=3D"border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top">&nbsp;</td></tr><tr><td style=3D"border-right: 0.5=
pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
Specify the SQL statement.</p></td><td style=3D"border-right: 0.5pt solid ;=
 border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">&nbsp;</td><t=
d style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>=
X</p></td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: =
0.5pt solid ; " align=3D"left" valign=3D"top"><p>Declare parameters and pro=
vide parameter values</p></td><td style=3D"border-right: 0.5pt solid ; bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">&nbsp;</td><td sty=
le=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>X</p>=
</td></tr><tr><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt=
 solid ; " align=3D"left" valign=3D"top"><p>Prepare and execute the stateme=
nt.</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt s=
olid ; " align=3D"left" valign=3D"top"><p>X</p></td><td style=3D"border-bot=
tom: 0.5pt solid ; " align=3D"left" valign=3D"top">&nbsp;</td></tr><tr><td =
style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top"><p>Set up the loop to iterate through the results =
(if any).</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0=
.5pt solid ; " align=3D"left" valign=3D"top"><p>X</p></td><td style=3D"bord=
er-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top">&nbsp;</td></tr><t=
r><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " a=
lign=3D"left" valign=3D"top"><p>Do the work for each iteration.</p></td><td=
 style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=
=3D"left" valign=3D"top">&nbsp;</td><td style=3D"border-bottom: 0.5pt solid=
 ; " align=3D"left" valign=3D"top"><p>X</p></td></tr><tr><td style=3D"borde=
r-right: 0.5pt solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top"><p>Process any exception.</p></td><td style=3D"border-right: 0.5pt=
 solid ; border-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>X<=
/p></td><td style=3D"border-bottom: 0.5pt solid ; " align=3D"left" valign=
=3D"top">&nbsp;</td></tr><tr><td style=3D"border-right: 0.5pt solid ; borde=
r-bottom: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Handle transacti=
ons.</p></td><td style=3D"border-right: 0.5pt solid ; border-bottom: 0.5pt =
solid ; " align=3D"left" valign=3D"top"><p>X</p></td><td style=3D"border-bo=
ttom: 0.5pt solid ; " align=3D"left" valign=3D"top">&nbsp;</td></tr><tr><td=
 style=3D"border-right: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>Cl=
ose the connection, statement and resultset.</p></td><td style=3D"border-ri=
ght: 0.5pt solid ; " align=3D"left" valign=3D"top"><p>X</p></td><td style=
=3D"" align=3D"left" valign=3D"top">&nbsp;</td></tr></tbody></table>
</div></div><br class=3D"table-break">
<p>The Spring Framework takes care of all the low-level details that can ma=
ke JDBC such a
tedious API to develop with.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-choose-style" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-choose-style"><=
/a>19.1.1&nbsp;Choosing an approach for JDBC database access</h3></div></di=
v></div>
<p>You can choose among several approaches to form the basis for your JDBC =
database access.
In addition to three flavors of the JdbcTemplate, a new SimpleJdbcInsert an=
d
SimplejdbcCall approach optimizes database metadata, and the RDBMS Object s=
tyle takes a
more object-oriented approach similar to that of JDO Query design. Once you=
 start using
one of these approaches, you can still mix and match to include a feature f=
rom a
different approach. All approaches require a JDBC 2.0-compliant driver, and=
 some
advanced features require a JDBC 3.0 driver.</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
<span class=3D"emphasis"><em>JdbcTemplate</em></span> is the classic Spring=
 JDBC approach and the most popular. This
"lowest level" approach and all others use a JdbcTemplate under the covers.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>NamedParameterJdbcTemplate</em></span> wraps a=
 <code class=3D"literal">JdbcTemplate</code> to provide named parameters
instead of the traditional JDBC "?" placeholders. This approach provides be=
tter
documentation and ease of use when you have multiple parameters for an SQL =
statement.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>SimpleJdbcInsert and SimpleJdbcCall</em></span=
> optimize database metadata to limit the amount
of necessary configuration. This approach simplifies coding so that you onl=
y need to
provide the name of the table or procedure and provide a map of parameters =
matching
the column names. This only works if the database provides adequate metadat=
a. If the
database doesn=92t provide this metadata, you will have to provide explicit
configuration of the parameters.
</li><li class=3D"listitem">
<span class=3D"emphasis"><em>RDBMS Objects including MappingSqlQuery, SqlUp=
date and StoredProcedure</em></span> requires
you to create reusable and thread-safe objects during initialization of you=
r data
access layer. This approach is modeled after JDO Query wherein you define y=
our query
string, declare parameters, and compile the query. Once you do that, execut=
e methods
can be called multiple times with various parameter values passed in.
</li></ul></div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-packages" href=3D"https://docs.spring.io/spring/docs/4.3=
.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-packages"></a>19.1.=
2&nbsp;Package hierarchy</h3></div></div></div>
<p>The Spring Framework=92s JDBC abstraction framework consists of four dif=
ferent packages,
namely <code class=3D"literal">core</code>, <code class=3D"literal">datasou=
rce</code>, <code class=3D"literal">object</code>, and <code class=3D"liter=
al">support</code>.</p>
<p>The <code class=3D"literal">org.springframework.jdbc.core</code> package=
 contains the <code class=3D"literal">JdbcTemplate</code> class and its
various callback interfaces, plus a variety of related classes. A subpackag=
e named
<code class=3D"literal">org.springframework.jdbc.core.simple</code> contain=
s the <code class=3D"literal">SimpleJdbcInsert</code> and
<code class=3D"literal">SimpleJdbcCall</code> classes. Another subpackage n=
amed
<code class=3D"literal">org.springframework.jdbc.core.namedparam</code> con=
tains the <code class=3D"literal">NamedParameterJdbcTemplate</code>
class and the related support classes. See <a class=3D"xref" href=3D"https:=
//docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/html=
single/#jdbc-core" title=3D"19.2&nbsp;Using the JDBC core classes to contro=
l basic JDBC processing and error handling">Section&nbsp;19.2, =93Using the=
 JDBC core classes to control basic JDBC processing and error handling=94</=
a>, <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.REL=
EASE/spring-framework-reference/htmlsingle/#jdbc-advanced-jdbc" title=3D"19=
.4&nbsp;JDBC batch operations">Section&nbsp;19.4, =93JDBC batch operations=
=94</a>, and
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc-simple-jdbc" title=3D"19.5&nbs=
p;Simplifying JDBC operations with the SimpleJdbc classes">Section&nbsp;19.=
5, =93Simplifying JDBC operations with the SimpleJdbc classes=94</a>.</p>
<p>The <code class=3D"literal">org.springframework.jdbc.datasource</code> p=
ackage contains a utility class for easy
<code class=3D"literal">DataSource</code> access, and various simple <code =
class=3D"literal">DataSource</code> implementations that can be used for
testing and running unmodified JDBC code outside of a Java EE container. A =
subpackage
named <code class=3D"literal">org.springfamework.jdbc.datasource.embedded</=
code> provides support for creating
embedded databases using Java database engines such as HSQL, H2, and Derby.=
 See
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc-connections" title=3D"19.3&nbs=
p;Controlling database connections">Section&nbsp;19.3, =93Controlling datab=
ase connections=94</a> and <a class=3D"xref" href=3D"https://docs.spring.io=
/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-emb=
edded-database-support" title=3D"19.8&nbsp;Embedded database support">Secti=
on&nbsp;19.8, =93Embedded database support=94</a>.</p>
<p>The <code class=3D"literal">org.springframework.jdbc.object</code> packa=
ge contains classes that represent RDBMS
queries, updates, and stored procedures as thread-safe, reusable objects. S=
ee
<a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc-object" title=3D"19.6&nbsp;Mod=
eling JDBC operations as Java objects">Section&nbsp;19.6, =93Modeling JDBC =
operations as Java objects=94</a>. This approach is modeled by JDO, althoug=
h objects returned by queries
are naturally <span class=3D"emphasis"><em>disconnected</em></span> from th=
e database. This higher level of JDBC abstraction
depends on the lower-level abstraction in the <code class=3D"literal">org.s=
pringframework.jdbc.core</code> package.</p>
<p>The <code class=3D"literal">org.springframework.jdbc.support</code> pack=
age provides <code class=3D"literal">SQLException</code> translation
functionality and some utility classes. Exceptions thrown during JDBC proce=
ssing are
translated to exceptions defined in the <code class=3D"literal">org.springf=
ramework.dao</code> package. This means
that code using the Spring JDBC abstraction layer does not need to implemen=
t JDBC or
RDBMS-specific error handling. All translated exceptions are unchecked, whi=
ch gives you
the option of catching the exceptions from which you can recover while allo=
wing other
exceptions to be propagated to the caller. See <a class=3D"xref" href=3D"ht=
tps://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/=
htmlsingle/#jdbc-SQLExceptionTranslator" title=3D"19.2.3&nbsp;SQLExceptionT=
ranslator">Section&nbsp;19.2.3, =93SQLExceptionTranslator=94</a>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"jdbc-core" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-c=
ore"></a>19.2&nbsp;Using the JDBC core classes to control basic JDBC proces=
sing and error handling</h2></div></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-JdbcTemplate" href=3D"https://docs.spring.io/spring/docs=
/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplate"><=
/a>19.2.1&nbsp;JdbcTemplate</h3></div></div></div>
<p>The <code class=3D"literal">JdbcTemplate</code> class is the central cla=
ss in the JDBC core package. It handles the
creation and release of resources, which helps you avoid common errors such=
 as
forgetting to close the connection. It performs the basic tasks of the core=
 JDBC
workflow such as statement creation and execution, leaving application code=
 to provide
SQL and extract results. The <code class=3D"literal">JdbcTemplate</code> cl=
ass executes SQL queries, update
statements and stored procedure calls, performs iteration over <code class=
=3D"literal">ResultSet</code>s and
extraction of returned parameter values. It also catches JDBC exceptions an=
d translates
them to the generic, more informative, exception hierarchy defined in the
<code class=3D"literal">org.springframework.dao</code> package.</p>
<p>When you use the <code class=3D"literal">JdbcTemplate</code> for your co=
de, you only need to implement callback
interfaces, giving them a clearly defined contract. The <code class=3D"lite=
ral">PreparedStatementCreator</code>
callback interface creates a prepared statement given a <code class=3D"lite=
ral">Connection</code> provided by this
class, providing SQL and any necessary parameters. The same is true for the
<code class=3D"literal">CallableStatementCreator</code> interface, which cr=
eates callable statements. The
<code class=3D"literal">RowCallbackHandler</code> interface extracts values=
 from each row of a <code class=3D"literal">ResultSet</code>.</p>
<p>The <code class=3D"literal">JdbcTemplate</code> can be used within a DAO=
 implementation through direct instantiation
with a <code class=3D"literal">DataSource</code> reference, or be configure=
d in a Spring IoC container and given to
DAOs as a bean reference.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">DataSource</code> should always be configure=
d as a bean in the Spring IoC container. In
the first case the bean is given to the service directly; in the second cas=
e it is given
to the prepared template.</p>
</td></tr></tbody></table></div>
<p>All SQL issued by this class is logged at the <code class=3D"literal">DE=
BUG</code> level under the category
corresponding to the fully qualified class name of the template instance (t=
ypically
<code class=3D"literal">JdbcTemplate</code>, but it may be different if you=
 are using a custom subclass of the
<code class=3D"literal">JdbcTemplate</code> class).</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"jdbc-JdbcTemplate-examples" href=3D"https://docs.spring.io/sp=
ring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTe=
mplate-examples"></a>Examples of JdbcTemplate class usage</h4></div></div><=
/div>
<p>This section provides some examples of <code class=3D"literal">JdbcTempl=
ate</code> class usage. These examples are
not an exhaustive list of all of the functionality exposed by the <code cla=
ss=3D"literal">JdbcTemplate</code>; see
the attendant javadocs for that.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"jdbc-JdbcTemplate-examples-query" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-=
JdbcTemplate-examples-query"></a>Querying (SELECT)</h5></div></div></div>
<p>Here is a simple query for getting the number of rows in a relation:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">int</span> rowCoun=
t =3D <span class=3D"hl-keyword">this</span>.jdbcTemplate.queryForObject(<s=
pan class=3D"hl-string">"select count(*) from t_actor"</span>, Integer.<spa=
n class=3D"hl-keyword">class</span>);</pre>
<p>A simple query using a bind variable:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">int</span> countOf=
ActorsNamedJoe =3D <span class=3D"hl-keyword">this</span>.jdbcTemplate.quer=
yForObject(
        <span class=3D"hl-string">"select count(*) from t_actor where first=
_name =3D ?"</span>, Integer.<span class=3D"hl-keyword">class</span>, <span=
 class=3D"hl-string">"Joe"</span>);</pre>
<p>Querying for a <code class=3D"literal">String</code>:</p>
<pre class=3D"programlisting">String lastName =3D <span class=3D"hl-keyword=
">this</span>.jdbcTemplate.queryForObject(
        <span class=3D"hl-string">"select last_name from t_actor where id =
=3D ?"</span>,
        <span class=3D"hl-keyword">new</span> Object[]{<span class=3D"hl-nu=
mber">1212L</span>}, String.<span class=3D"hl-keyword">class</span>);</pre>
<p>Querying and populating a <span class=3D"emphasis"><em>single</em></span=
> domain object:</p>
<pre class=3D"programlisting">Actor actor =3D <span class=3D"hl-keyword">th=
is</span>.jdbcTemplate.queryForObject(
        <span class=3D"hl-string">"select first_name, last_name from t_acto=
r where id =3D ?"</span>,
        <span class=3D"hl-keyword">new</span> Object[]{<span class=3D"hl-nu=
mber">1212L</span>},
        <span class=3D"hl-keyword">new</span> RowMapper&lt;Actor&gt;() {
            <span class=3D"hl-keyword">public</span> Actor mapRow(ResultSet=
 rs, <span class=3D"hl-keyword">int</span> rowNum) <span class=3D"hl-keywor=
d">throws</span> SQLException {
                Actor actor =3D <span class=3D"hl-keyword">new</span> Actor=
();
                actor.setFirstName(rs.getString(<span class=3D"hl-string">"=
first_name"</span>));
                actor.setLastName(rs.getString(<span class=3D"hl-string">"l=
ast_name"</span>));
                <span class=3D"hl-keyword">return</span> actor;
            }
        });</pre>
<p>Querying and populating a number of domain objects:</p>
<pre class=3D"programlisting">List&lt;Actor&gt; actors =3D <span class=3D"h=
l-keyword">this</span>.jdbcTemplate.query(
        <span class=3D"hl-string">"select first_name, last_name from t_acto=
r"</span>,
        <span class=3D"hl-keyword">new</span> RowMapper&lt;Actor&gt;() {
            <span class=3D"hl-keyword">public</span> Actor mapRow(ResultSet=
 rs, <span class=3D"hl-keyword">int</span> rowNum) <span class=3D"hl-keywor=
d">throws</span> SQLException {
                Actor actor =3D <span class=3D"hl-keyword">new</span> Actor=
();
                actor.setFirstName(rs.getString(<span class=3D"hl-string">"=
first_name"</span>));
                actor.setLastName(rs.getString(<span class=3D"hl-string">"l=
ast_name"</span>));
                <span class=3D"hl-keyword">return</span> actor;
            }
        });</pre>
<p>If the last two snippets of code actually existed in the same applicatio=
n, it would make
sense to remove the duplication present in the two <code class=3D"literal">=
RowMapper</code> anonymous inner classes,
and extract them out into a single class (typically a <code class=3D"litera=
l">static</code> nested class) that can
then be referenced by DAO methods as needed. For example, it may be better =
to write the
last code snippet as follows:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> List=
&lt;Actor&gt; findAllActors() {
    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">thi=
s</span>.jdbcTemplate.query( <span class=3D"hl-string">"select first_name, =
last_name from t_actor"</span>, <span class=3D"hl-keyword">new</span> Actor=
Mapper());
}

<span class=3D"hl-keyword">private</span> <span class=3D"hl-keyword">static=
</span> <span class=3D"hl-keyword">final</span> <span class=3D"hl-keyword">=
class</span> ActorMapper <span class=3D"hl-keyword">implements</span> RowMa=
pper&lt;Actor&gt; {

    <span class=3D"hl-keyword">public</span> Actor mapRow(ResultSet rs, <sp=
an class=3D"hl-keyword">int</span> rowNum) <span class=3D"hl-keyword">throw=
s</span> SQLException {
        Actor actor =3D <span class=3D"hl-keyword">new</span> Actor();
        actor.setFirstName(rs.getString(<span class=3D"hl-string">"first_na=
me"</span>));
        actor.setLastName(rs.getString(<span class=3D"hl-string">"last_name=
"</span>));
        <span class=3D"hl-keyword">return</span> actor;
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"jdbc-JdbcTemplate-examples-update" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc=
-JdbcTemplate-examples-update"></a>Updating (INSERT/UPDATE/DELETE) with Jdb=
cTemplate</h5></div></div></div>
<p>You use the <code class=3D"literal">update(..)</code> method to perform =
insert, update and delete operations.
Parameter values are usually provided as var args or alternatively as an ob=
ject array.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">this</span>.jdbcTe=
mplate.update(
        <span class=3D"hl-string">"insert into t_actor (first_name, last_na=
me) values (?, ?)"</span>,
        <span class=3D"hl-string">"Leonor"</span>, <span class=3D"hl-string=
">"Watling"</span>);</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">this</span>.jdbcTe=
mplate.update(
        <span class=3D"hl-string">"update t_actor set last_name =3D ? where=
 id =3D ?"</span>,
        <span class=3D"hl-string">"Banjo"</span>, <span class=3D"hl-number"=
>5276L</span>);</pre>
<pre class=3D"programlisting"><span class=3D"hl-keyword">this</span>.jdbcTe=
mplate.update(
        <span class=3D"hl-string">"delete from actor where id =3D ?"</span>=
,
        Long.valueOf(actorId));</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h5 class=3D"titl=
e"><a name=3D"jdbc-JdbcTemplate-examples-other" href=3D"https://docs.spring=
.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-=
JdbcTemplate-examples-other"></a>Other JdbcTemplate operations</h5></div></=
div></div>
<p>You can use the <code class=3D"literal">execute(..)</code> method to exe=
cute any arbitrary SQL, and as such the
method is often used for DDL statements. It is heavily overloaded with vari=
ants taking
callback interfaces, binding variable arrays, and so on.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">this</span>.jdbcTe=
mplate.execute(<span class=3D"hl-string">"create table mytable (id integer,=
 name varchar(100))"</span>);</pre>
<p>The following example invokes a simple stored procedure. More sophistica=
ted stored
procedure support is <a class=3D"link" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-StoredPro=
cedure" title=3D"19.6.4&nbsp;StoredProcedure">covered later</a>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">this</span>.jdbcTe=
mplate.update(
        <span class=3D"hl-string">"call SUPPORT.REFRESH_ACTORS_SUMMARY(?)"<=
/span>,
        Long.valueOf(unionId));</pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h4 class=3D"titl=
e"><a name=3D"jdbc-JdbcTemplate-idioms" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemp=
late-idioms"></a>JdbcTemplate best practices</h4></div></div></div>
<p>Instances of the <code class=3D"literal">JdbcTemplate</code> class are <=
span class=3D"emphasis"><em>threadsafe once configured</em></span>. This is
important because it means that you can configure a single instance of a <c=
ode class=3D"literal">JdbcTemplate</code>
and then safely inject this <span class=3D"emphasis"><em>shared</em></span>=
 reference into multiple DAOs (or repositories).
The <code class=3D"literal">JdbcTemplate</code> is stateful, in that it mai=
ntains a reference to a <code class=3D"literal">DataSource</code>, but
this state is <span class=3D"emphasis"><em>not</em></span> conversational s=
tate.</p>
<p>A common practice when using the <code class=3D"literal">JdbcTemplate</c=
ode> class (and the associated
<a class=3D"link" href=3D"https://docs.spring.io/spring/docs/4.3.21.RELEASE=
/spring-framework-reference/htmlsingle/#jdbc-NamedParameterJdbcTemplate" ti=
tle=3D"19.2.2&nbsp;NamedParameterJdbcTemplate"><code class=3D"literal">Name=
dParameterJdbcTemplate</code></a> classes) is to
configure a <code class=3D"literal">DataSource</code> in your Spring config=
uration file, and then dependency-inject
that shared <code class=3D"literal">DataSource</code> bean into your DAO cl=
asses; the <code class=3D"literal">JdbcTemplate</code> is created in
the setter for the <code class=3D"literal">DataSource</code>. This leads to=
 DAOs that look in part like the following:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcCorporateEventDao <span class=3D"hl=
-keyword">implements</span> CorporateEventDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"strong"><strong>this.jdbcTemplate =3D new JdbcTempla=
te(dataSource);</strong></span>
    }

    <span class=3D"hl-comment">// JDBC-backed implementations of the method=
s on the CorporateEventDao follow...</span>
}</pre>
<p>The corresponding configuration might look like this.</p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"corporateEventDao"</span> <span class=3D=
"hl-attribute">class</span>=3D<span class=3D"hl-value">"com.example.JdbcCor=
porateEventDao"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=
=3D"hl-attribute">ref</span>=3D<span class=3D"hl-value">"dataSource"</span>=
<span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"org.apache.commons.dbcp.Ba=
sicDataSource"</span> <span class=3D"hl-attribute">destroy-method</span>=3D=
<span class=3D"hl-value">"close"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span =
class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.driv=
erClassName}"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.url}"</span><spa=
n class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"username"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.username}=
"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"password"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.password}=
"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;context:property-placeholder</span> <span cl=
ass=3D"hl-attribute">location</span>=3D<span class=3D"hl-value">"jdbc.prope=
rties"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>An alternative to explicit configuration is to use component-scanning an=
d annotation
support for dependency injection. In this case you annotate the class with =
<code class=3D"literal">@Repository</code>
(which makes it a candidate for component-scanning) and annotate the <code =
class=3D"literal">DataSource</code> setter
method with <code class=3D"literal">@Autowired</code>.</p>
<pre class=3D"programlisting"><span class=3D"strong"><strong>@Repository</s=
trong></span>
<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> JdbcCorporateEventDao <span class=3D"hl-keyword">implements</span> Co=
rporateEventDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"strong"><strong>@Autowired</strong></span>
    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"strong"><strong>this.jdbcTemplate =3D new JdbcTempla=
te(dataSource);</strong></span>
    }

    <span class=3D"hl-comment">// JDBC-backed implementations of the method=
s on the CorporateEventDao follow...</span>
}</pre>
<p>The corresponding XML configuration file would look like the following:<=
/p>
<pre class=3D"programlisting"><span class=3D"hl-directive" style=3D"color: =
maroon">&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;</span>
<span class=3D"hl-tag">&lt;beans</span> <span class=3D"hl-attribute">xmlns<=
/span>=3D<span class=3D"hl-value">"http://www.springframework.org/schema/be=
ans"</span>
    <span class=3D"hl-attribute">xmlns:xsi</span>=3D<span class=3D"hl-value=
">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class=3D"hl-attribute">xmlns:context</span>=3D<span class=3D"hl-v=
alue">"http://www.springframework.org/schema/context"</span>
    <span class=3D"hl-attribute">xsi:schemaLocation</span>=3D<span class=3D=
"hl-value">"
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"</=
span><span class=3D"hl-tag">&gt;</span>

    <span class=3D"hl-comment">&lt;!-- Scans within the base package of the=
 application for @Component classes to configure as beans --&gt;</span>
    <span class=3D"hl-tag">&lt;context:component-scan</span> <span class=3D=
"hl-attribute">base-package</span>=3D<span class=3D"hl-value">"org.springfr=
amework.docs.test"</span><span class=3D"hl-tag"> /&gt;</span>

    <span class=3D"hl-tag">&lt;bean</span> <span class=3D"hl-attribute">id<=
/span>=3D<span class=3D"hl-value">"dataSource"</span> <span class=3D"hl-att=
ribute">class</span>=3D<span class=3D"hl-value">"org.apache.commons.dbcp.Ba=
sicDataSource"</span> <span class=3D"hl-attribute">destroy-method</span>=3D=
<span class=3D"hl-value">"close"</span><span class=3D"hl-tag">&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"driverClassName"</span> <span =
class=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.driv=
erClassName}"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"url"</span> <span class=3D"hl-=
attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.url}"</span><spa=
n class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"username"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.username}=
"</span><span class=3D"hl-tag">/&gt;</span>
        <span class=3D"hl-tag">&lt;property</span> <span class=3D"hl-attrib=
ute">name</span>=3D<span class=3D"hl-value">"password"</span> <span class=
=3D"hl-attribute">value</span>=3D<span class=3D"hl-value">"${jdbc.password}=
"</span><span class=3D"hl-tag">/&gt;</span>
    <span class=3D"hl-tag">&lt;/bean&gt;</span>

    <span class=3D"hl-tag">&lt;context:property-placeholder</span> <span cl=
ass=3D"hl-attribute">location</span>=3D<span class=3D"hl-value">"jdbc.prope=
rties"</span><span class=3D"hl-tag">/&gt;</span>

<span class=3D"hl-tag">&lt;/beans&gt;</span></pre>
<p>If you are using Spring=92s <code class=3D"literal">JdbcDaoSupport</code=
> class, and your various JDBC-backed DAO classes
extend from it, then your sub-class inherits a <code class=3D"literal">setD=
ataSource(..)</code> method from the
<code class=3D"literal">JdbcDaoSupport</code> class. You can choose whether=
 to inherit from this class. The
<code class=3D"literal">JdbcDaoSupport</code> class is provided as a conven=
ience only.</p>
<p>Regardless of which of the above template initialization styles you choo=
se to use (or
not), it is seldom necessary to create a new instance of a <code class=3D"l=
iteral">JdbcTemplate</code> class each
time you want to execute SQL. Once configured, a <code class=3D"literal">Jd=
bcTemplate</code> instance is threadsafe.
You may want multiple <code class=3D"literal">JdbcTemplate</code> instances=
 if your application accesses multiple
databases, which requires multiple <code class=3D"literal">DataSources</cod=
e>, and subsequently multiple differently
configured <code class=3D"literal">JdbcTemplates</code>.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-NamedParameterJdbcTemplate" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-N=
amedParameterJdbcTemplate"></a>19.2.2&nbsp;NamedParameterJdbcTemplate</h3><=
/div></div></div>
<p>The <code class=3D"literal">NamedParameterJdbcTemplate</code> class adds=
 support for programming JDBC statements
using named parameters, as opposed to programming JDBC statements using onl=
y classic
placeholder ( <code class=3D"literal">'?'</code>) arguments. The <code clas=
s=3D"literal">NamedParameterJdbcTemplate</code> class wraps a
<code class=3D"literal">JdbcTemplate</code>, and delegates to the wrapped <=
code class=3D"literal">JdbcTemplate</code> to do much of its work. This
section describes only those areas of the <code class=3D"literal">NamedPara=
meterJdbcTemplate</code> class that differ
from the <code class=3D"literal">JdbcTemplate</code> itself; namely, progra=
mming JDBC statements using named
parameters.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// some JDBC-backe=
d DAO class...</span>
<span class=3D"hl-keyword">private</span> NamedParameterJdbcTemplate namedP=
arameterJdbcTemplate;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setDataSource(DataSource dataSource) {
    <span class=3D"hl-keyword">this</span>.namedParameterJdbcTemplate =3D <=
span class=3D"hl-keyword">new</span> NamedParameterJdbcTemplate(dataSource)=
;
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int</sp=
an> countOfActorsByFirstName(String firstName) {

    String sql =3D <span class=3D"hl-string">"select count(*) from T_ACTOR =
where first_name =3D :first_name"</span>;

    SqlParameterSource namedParameters =3D <span class=3D"hl-keyword">new</=
span> MapSqlParameterSource(<span class=3D"hl-string">"first_name"</span>, =
firstName);

    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">thi=
s</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, In=
teger.<span class=3D"hl-keyword">class</span>);
}</pre>
<p>Notice the use of the named parameter notation in the value assigned to =
the <code class=3D"literal">sql</code>
variable, and the corresponding value that is plugged into the <code class=
=3D"literal">namedParameters</code>
variable (of type <code class=3D"literal">MapSqlParameterSource</code>).</p=
>
<p>Alternatively, you can pass along named parameters and their correspondi=
ng values to a
<code class=3D"literal">NamedParameterJdbcTemplate</code> instance by using=
 the <code class=3D"literal">Map</code>-based style.The remaining
methods exposed by the <code class=3D"literal">NamedParameterJdbcOperations=
</code> and implemented by the
<code class=3D"literal">NamedParameterJdbcTemplate</code> class follow a si=
milar pattern and are not covered here.</p>
<p>The following example shows the use of the <code class=3D"literal">Map</=
code>-based style.</p>
<pre class=3D"programlisting"><span class=3D"hl-comment">// some JDBC-backe=
d DAO class...</span>
<span class=3D"hl-keyword">private</span> NamedParameterJdbcTemplate namedP=
arameterJdbcTemplate;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setDataSource(DataSource dataSource) {
    <span class=3D"hl-keyword">this</span>.namedParameterJdbcTemplate =3D <=
span class=3D"hl-keyword">new</span> NamedParameterJdbcTemplate(dataSource)=
;
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int</sp=
an> countOfActorsByFirstName(String firstName) {

    String sql =3D <span class=3D"hl-string">"select count(*) from T_ACTOR =
where first_name =3D :first_name"</span>;

    Map&lt;String, String&gt; namedParameters =3D Collections.singletonMap(=
<span class=3D"hl-string">"first_name"</span>, firstName);

    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">thi=
s</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters,  I=
nteger.<span class=3D"hl-keyword">class</span>);
}</pre>
<p>One nice feature related to the <code class=3D"literal">NamedParameterJd=
bcTemplate</code> (and existing in the same
Java package) is the <code class=3D"literal">SqlParameterSource</code> inte=
rface. You have already seen an example of
an implementation of this interface in one of the previous code snippet (th=
e
<code class=3D"literal">MapSqlParameterSource</code> class). An <code class=
=3D"literal">SqlParameterSource</code> is a source of named parameter
values to a <code class=3D"literal">NamedParameterJdbcTemplate</code>. The =
<code class=3D"literal">MapSqlParameterSource</code> class is a very
simple implementation that is simply an adapter around a <code class=3D"lit=
eral">java.util.Map</code>, where the keys
are the parameter names and the values are the parameter values.</p>
<p>Another <code class=3D"literal">SqlParameterSource</code> implementation=
 is the <code class=3D"literal">BeanPropertySqlParameterSource</code>
class. This class wraps an arbitrary JavaBean (that is, an instance of a cl=
ass that
adheres to <a class=3D"ulink" href=3D"http://www.oracle.com/technetwork/jav=
a/javase/documentation/spec-136004.html" target=3D"_top">the
JavaBean conventions</a>), and uses the properties of the wrapped JavaBean =
as the source
of named parameter values.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> Actor {

    <span class=3D"hl-keyword">private</span> Long id;
    <span class=3D"hl-keyword">private</span> String firstName;
    <span class=3D"hl-keyword">private</span> String lastName;

    <span class=3D"hl-keyword">public</span> String getFirstName() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.firstName;
    }

    <span class=3D"hl-keyword">public</span> String getLastName() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.lastName;
    }

    <span class=3D"hl-keyword">public</span> Long getId() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.id;
    }

    <span class=3D"hl-comment">// setters omitted...</span>

}</pre>
<pre class=3D"programlisting"><span class=3D"hl-comment">// some JDBC-backe=
d DAO class...</span>
<span class=3D"hl-keyword">private</span> NamedParameterJdbcTemplate namedP=
arameterJdbcTemplate;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setDataSource(DataSource dataSource) {
    <span class=3D"hl-keyword">this</span>.namedParameterJdbcTemplate =3D <=
span class=3D"hl-keyword">new</span> NamedParameterJdbcTemplate(dataSource)=
;
}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int</sp=
an> countOfActors(Actor exampleActor) {

    <span class=3D"hl-comment">// notice how the named parameters match the=
 properties of the above 'Actor' class</span>
    String sql =3D <span class=3D"hl-string">"select count(*) from T_ACTOR =
where first_name =3D :firstName and last_name =3D :lastName"</span>;

    SqlParameterSource namedParameters =3D <span class=3D"hl-keyword">new</=
span> BeanPropertySqlParameterSource(exampleActor);

    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">thi=
s</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, In=
teger.<span class=3D"hl-keyword">class</span>);
}</pre>
<p>Remember that the <code class=3D"literal">NamedParameterJdbcTemplate</co=
de> class <span class=3D"emphasis"><em>wraps</em></span> a classic <code cl=
ass=3D"literal">JdbcTemplate</code>
template; if you need access to the wrapped <code class=3D"literal">JdbcTem=
plate</code> instance to access
functionality only present in the <code class=3D"literal">JdbcTemplate</cod=
e> class, you can use the
<code class=3D"literal">getJdbcOperations()</code> method to access the wra=
pped <code class=3D"literal">JdbcTemplate</code> through the
<code class=3D"literal">JdbcOperations</code> interface.</p>
<p>See also <a class=3D"xref" href=3D"https://docs.spring.io/spring/docs/4.=
3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplate-idiom=
s" title=3D"JdbcTemplate best practices">the section called =93JdbcTemplate=
 best practices=94</a> for guidelines on using the
<code class=3D"literal">NamedParameterJdbcTemplate</code> class in the cont=
ext of an application.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-SQLExceptionTranslator" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SQLEx=
ceptionTranslator"></a>19.2.3&nbsp;SQLExceptionTranslator</h3></div></div><=
/div>
<p><code class=3D"literal">SQLExceptionTranslator</code> is an interface to=
 be implemented by classes that can translate
between <code class=3D"literal">SQLExceptions</code> and Spring=92s own <co=
de class=3D"literal">org.springframework.dao.DataAccessException</code>,
which is agnostic in regard to data access strategy. Implementations can be=
 generic (for
example, using SQLState codes for JDBC) or proprietary (for example, using =
Oracle error
codes) for greater precision.</p>
<p><code class=3D"literal">SQLErrorCodeSQLExceptionTranslator</code> is the=
 implementation of <code class=3D"literal">SQLExceptionTranslator</code>
that is used by default. This implementation uses specific vendor codes. It=
 is more
precise than the <code class=3D"literal">SQLState</code> implementation. Th=
e error code translations are based on
codes held in a JavaBean type class called <code class=3D"literal">SQLError=
Codes</code>. This class is created and
populated by an <code class=3D"literal">SQLErrorCodesFactory</code> which a=
s the name suggests is a factory for
creating <code class=3D"literal">SQLErrorCodes</code> based on the contents=
 of a configuration file named
<code class=3D"literal">sql-error-codes.xml</code>. This file is populated =
with vendor codes and based on the
<code class=3D"literal">DatabaseProductName</code> taken from the <code cla=
ss=3D"literal">DatabaseMetaData</code>. The codes for the actual
database you are using are used.</p>
<p>The <code class=3D"literal">SQLErrorCodeSQLExceptionTranslator</code> ap=
plies matching rules in the following sequence:</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>The <code class=3D"literal">SQLErrorCodesFactory</code> is used by defau=
lt to define Error codes and custom exception
translations. They are looked up in a file named <code class=3D"literal">sq=
l-error-codes.xml</code> from the
classpath and the matching <code class=3D"literal">SQLErrorCodes</code> ins=
tance is located based on the database
name from the database metadata of the database in use.</p>
</td></tr></tbody></table></div>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
Any custom translation implemented by a subclass. Normally the provided con=
crete
<code class=3D"literal">SQLErrorCodeSQLExceptionTranslator</code> is used s=
o this rule does not apply. It only
applies if you have actually provided a subclass implementation.
</li><li class=3D"listitem">
Any custom implementation of the <code class=3D"literal">SQLExceptionTransl=
ator</code> interface that is provided
as the <code class=3D"literal">customSqlExceptionTranslator</code> property=
 of the <code class=3D"literal">SQLErrorCodes</code> class.
</li><li class=3D"listitem">
The list of instances of the <code class=3D"literal">CustomSQLErrorCodesTra=
nslation</code> class, provided for the
<code class=3D"literal">customTranslations</code> property of the <code cla=
ss=3D"literal">SQLErrorCodes</code> class, are searched for a match.
</li><li class=3D"listitem">
Error code matching is applied.
</li><li class=3D"listitem">
Use the fallback translator. <code class=3D"literal">SQLExceptionSubclassTr=
anslator</code> is the default fallback
translator. If this translation is not available then the next fallback tra=
nslator is
the <code class=3D"literal">SQLStateSQLExceptionTranslator</code>.
</li></ul></div>
<p>You can extend <code class=3D"literal">SQLErrorCodeSQLExceptionTranslato=
r:</code></p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> CustomSQLErrorCodesTranslator <span cla=
ss=3D"hl-keyword">extends</span> SQLErrorCodeSQLExceptionTranslator {

    <span class=3D"hl-keyword">protected</span> DataAccessException customT=
ranslate(String task, String sql, SQLException sqlex) {
        <span class=3D"hl-keyword">if</span> (sqlex.getErrorCode() =3D=3D -=
<span class=3D"hl-number">12345</span>) {
            <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyw=
ord">new</span> DeadlockLoserDataAccessException(task, sqlex);
        }
        <span class=3D"hl-keyword">return</span> null;
    }
}</pre>
<p>In this example, the specific error code <code class=3D"literal">-12345<=
/code> is translated and other errors are
left to be translated by the default translator implementation. To use this=
 custom
translator, it is necessary to pass it to the <code class=3D"literal">JdbcT=
emplate</code> through the method
<code class=3D"literal">setExceptionTranslator</code> and to use this <code=
 class=3D"literal">JdbcTemplate</code> for all of the data access
processing where this translator is needed. Here is an example of how this =
custom
translator can be used:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">private</span> Jdb=
cTemplate jdbcTemplate;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setDataSource(DataSource dataSource) {

    <span class=3D"hl-comment">// create a JdbcTemplate and set data source=
</span>
    <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=3D"=
hl-keyword">new</span> JdbcTemplate();
    <span class=3D"hl-keyword">this</span>.jdbcTemplate.setDataSource(dataS=
ource);

    <span class=3D"hl-comment">// create a custom translator and set the Da=
taSource for the default translation lookup</span>
    CustomSQLErrorCodesTranslator tr =3D <span class=3D"hl-keyword">new</sp=
an> CustomSQLErrorCodesTranslator();
    tr.setDataSource(dataSource);
    <span class=3D"hl-keyword">this</span>.jdbcTemplate.setExceptionTransla=
tor(tr);

}

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> updateShippingCharge(<span class=3D"hl-keyword">long</span> orderId, <=
span class=3D"hl-keyword">long</span> pct) {
    <span class=3D"hl-comment">// use the prepared JdbcTemplate for this up=
date</span>
    <span class=3D"hl-keyword">this</span>.jdbcTemplate.update(<span class=
=3D"hl-string">"update orders"</span> +
        <span class=3D"hl-string">" set shipping_charge =3D shipping_charge=
 * ? / 100"</span> +
        <span class=3D"hl-string">" where id =3D ?"</span>, pct, orderId);
}</pre>
<p>The custom translator is passed a data source in order to look up the er=
ror codes in
<code class=3D"literal">sql-error-codes.xml</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-statements-executing" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-stateme=
nts-executing"></a>19.2.4&nbsp;Executing statements</h3></div></div></div>
<p>Executing an SQL statement requires very little code. You need a <code c=
lass=3D"literal">DataSource</code> and a
<code class=3D"literal">JdbcTemplate</code>, including the convenience meth=
ods that are provided with the
<code class=3D"literal">JdbcTemplate</code>. The following example shows wh=
at you need to include for a minimal but
fully functional class that creates a new table:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.sql.DataSource;
<span class=3D"hl-keyword">import</span> org.springframework.jdbc.core.Jdbc=
Template;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExecuteAStatement {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> doExecute() {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate.execute(<span c=
lass=3D"hl-string">"create table mytable (id integer, name varchar(100))"</=
span>);
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-statements-querying" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-statemen=
ts-querying"></a>19.2.5&nbsp;Running queries</h3></div></div></div>
<p>Some query methods return a single value. To retrieve a count or a speci=
fic value from
one row, use <code class=3D"literal">queryForObject(..)</code>. The latter =
converts the returned JDBC <code class=3D"literal">Type</code> to the
Java class that is passed in as an argument. If the type conversion is inva=
lid, then an
<code class=3D"literal">InvalidDataAccessApiUsageException</code> is thrown=
. Here is an example that contains two
query methods, one for an <code class=3D"literal">int</code> and one that q=
ueries for a <code class=3D"literal">String</code>.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.sql.DataSource;
<span class=3D"hl-keyword">import</span> org.springframework.jdbc.core.Jdbc=
Template;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> RunAQuery {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span> getCount() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.jdbcTemplate.queryForObject(<span class=3D"hl-string">"select =
count(*) from mytable"</span>, Integer.<span class=3D"hl-keyword">class</sp=
an>);
    }

    <span class=3D"hl-keyword">public</span> String getName() {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.jdbcTemplate.queryForObject(<span class=3D"hl-string">"select =
name from mytable"</span>, String.<span class=3D"hl-keyword">class</span>);
    }
}</pre>
<p>In addition to the single result query methods, several methods return a=
 list with an
entry for each row that the query returned. The most generic method is
<code class=3D"literal">queryForList(..)</code> which returns a <code class=
=3D"literal">List</code> where each entry is a <code class=3D"literal">Map<=
/code> with each entry in
the map representing the column value for that row. If you add a method to =
the above
example to retrieve a list of all the rows, it would look like this:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">private</span> Jdb=
cTemplate jdbcTemplate;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">void</s=
pan> setDataSource(DataSource dataSource) {
    <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=3D"=
hl-keyword">new</span> JdbcTemplate(dataSource);
}

<span class=3D"hl-keyword">public</span> List&lt;Map&lt;String, Object&gt;&=
gt; getList() {
    <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword">thi=
s</span>.jdbcTemplate.queryForList(<span class=3D"hl-string">"select * from=
 mytable"</span>);
}</pre>
<p>The list returned would look something like this:</p>
<pre class=3D"literallayout">[{name=3DBob, id=3D1}, {name=3DMary, id=3D2}]<=
/pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-updates" href=3D"https://docs.spring.io/spring/docs/4.3.=
21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-updates"></a>19.2.6&=
nbsp;Updating the database</h3></div></div></div>
<p>The following example shows a column updated for a certain primary key. =
In this example,
an SQL statement has placeholders for row parameters. The parameter values =
can be passed
in as varargs or alternatively as an array of objects. Thus primitives shou=
ld be wrapped
in the primitive wrapper classes explicitly or using auto-boxing.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">import</span> java=
x.sql.DataSource;
<span class=3D"hl-keyword">import</span> org.springframework.jdbc.core.Jdbc=
Template;

<span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">class</=
span> ExecuteAnUpdate {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setName(<span class=3D"hl-keyword">int</span> id, String name) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate.update(<span cl=
ass=3D"hl-string">"update mytable set name =3D ? where id =3D ?"</span>, na=
me, id);
    }
}</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-auto-genereted-keys" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-auto-gen=
ereted-keys"></a>19.2.7&nbsp;Retrieving auto-generated keys</h3></div></div=
></div>
<p>An <code class=3D"literal">update()</code> convenience method supports t=
he retrieval of primary keys generated by the
database. This support is part of the JDBC 3.0 standard; see Chapter 13.6 o=
f the
specification for details. The method takes a <code class=3D"literal">Prepa=
redStatementCreator</code> as its first
argument, and this is the way the required insert statement is specified. T=
he other
argument is a <code class=3D"literal">KeyHolder</code>, which contains the =
generated key on successful return from the
update. There is not a standard single way to create an appropriate <code c=
lass=3D"literal">PreparedStatement</code>
(which explains why the method signature is the way it is). The following e=
xample works
on Oracle but may not work on other platforms:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">final</span> Strin=
g INSERT_SQL =3D <span class=3D"hl-string">"insert into my_test (name) valu=
es(?)"</span>;
<span class=3D"hl-keyword">final</span> String name =3D <span class=3D"hl-s=
tring">"Rob"</span>;

KeyHolder keyHolder =3D <span class=3D"hl-keyword">new</span> GeneratedKeyH=
older();
jdbcTemplate.update(
    <span class=3D"hl-keyword">new</span> PreparedStatementCreator() {
        <span class=3D"hl-keyword">public</span> PreparedStatement createPr=
eparedStatement(Connection connection) <span class=3D"hl-keyword">throws</s=
pan> SQLException {
            PreparedStatement ps =3D connection.prepareStatement(INSERT_SQL=
, <span class=3D"hl-keyword">new</span> String[] {<span class=3D"hl-string"=
>"id"</span>});
            ps.setString(<span class=3D"hl-number">1</span>, name);
            <span class=3D"hl-keyword">return</span> ps;
        }
    },
    keyHolder);

<span class=3D"hl-comment">// keyHolder.getKey() now contains the generated=
 key</span></pre>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"jdbc-connections" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#jdbc-connections"></a>19.3&nbsp;Controlling database connections</h2></div=
></div></div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-datasource" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-datasource"></a>1=
9.3.1&nbsp;DataSource</h3></div></div></div>
<p>Spring obtains a connection to the database through a <code class=3D"lit=
eral">DataSource</code>. A <code class=3D"literal">DataSource</code> is
part of the JDBC specification and is a generalized connection factory. It =
allows a
container or a framework to hide connection pooling and transaction managem=
ent issues
from the application code. As a developer, you need not know details about =
how to
connect to the database; that is the responsibility of the administrator th=
at sets up
the datasource. You most likely fill both roles as you develop and test cod=
e, but you do
not necessarily have to know how the production data source is configured.<=
/p>
<p>When using Spring=92s JDBC layer, you obtain a data source from JNDI or =
you configure your
own with a connection pool implementation provided by a third party. Popula=
r
implementations are Apache Jakarta Commons DBCP and C3P0. Implementations i=
n the Spring
distribution are meant only for testing purposes and do not provide pooling=
.</p>
<p>This section uses Spring=92s <code class=3D"literal">DriverManagerDataSo=
urce</code> implementation, and several
additional implementations are covered later.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Only use the <code class=3D"literal">DriverManagerDataSource</code> clas=
s should only be used for testing purposes
since it does not provide pooling and will perform poorly when multiple req=
uests for a
connection are made.</p>
</td></tr></tbody></table></div>
<p>You obtain a connection with <code class=3D"literal">DriverManagerDataSo=
urce</code> as you typically obtain a JDBC
connection. Specify the fully qualified classname of the JDBC driver so tha=
t the
<code class=3D"literal">DriverManager</code> can load the driver class. Nex=
t, provide a URL that varies between JDBC
drivers. (Consult the documentation for your driver for the correct value.)=
 Then provide
a username and a password to connect to the database. Here is an example of=
 how to
configure a <code class=3D"literal">DriverManagerDataSource</code> in Java =
code:</p>
<pre class=3D"programlisting">DriverManagerDataSource dataSource =3D <span =
class=3D"hl-keyword">new</span> DriverManagerDataSource();
dataSource.setDriverClassName(<span class=3D"hl-string">"org.hsqldb.jdbcDri=
ver"</span>);
dataSource.setUrl(<span class=3D"hl-string">"jdbc:hsqldb:hsql://localhost:"=
</span>);
dataSource.setUsername(<span class=3D"hl-string">"sa"</span>);
dataSource.setPassword(<span class=3D"hl-string">""</span>);</pre>
<p>Here is the corresponding XML configuration:</p>
<pre class=3D"programlisting">&lt;bean id=3D<span class=3D"hl-string">"data=
Source"</span> <span class=3D"hl-keyword">class</span>=3D<span class=3D"hl-=
string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span=
>&gt;
    &lt;property name=3D<span class=3D"hl-string">"driverClassName"</span> =
value=3D<span class=3D"hl-string">"${jdbc.driverClassName}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"url"</span> value=3D<spa=
n class=3D"hl-string">"${jdbc.url}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"username"</span> value=
=3D<span class=3D"hl-string">"${jdbc.username}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"password"</span> value=
=3D<span class=3D"hl-string">"${jdbc.password}"</span>/&gt;
&lt;/bean&gt;

&lt;context:property-placeholder location=3D<span class=3D"hl-string">"jdbc=
.properties"</span>/&gt;</pre>
<p>The following examples show the basic connectivity and configuration for=
 DBCP and C3P0.
To learn about more options that help control the pooling features, see the=
 product
documentation for the respective connection pooling implementations.</p>
<p>DBCP configuration:</p>
<pre class=3D"programlisting">&lt;bean id=3D<span class=3D"hl-string">"data=
Source"</span> <span class=3D"hl-keyword">class</span>=3D<span class=3D"hl-=
string">"org.apache.commons.dbcp.BasicDataSource"</span> destroy-method=3D<=
span class=3D"hl-string">"close"</span>&gt;
    &lt;property name=3D<span class=3D"hl-string">"driverClassName"</span> =
value=3D<span class=3D"hl-string">"${jdbc.driverClassName}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"url"</span> value=3D<spa=
n class=3D"hl-string">"${jdbc.url}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"username"</span> value=
=3D<span class=3D"hl-string">"${jdbc.username}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"password"</span> value=
=3D<span class=3D"hl-string">"${jdbc.password}"</span>/&gt;
&lt;/bean&gt;

&lt;context:property-placeholder location=3D<span class=3D"hl-string">"jdbc=
.properties"</span>/&gt;</pre>
<p>C3P0 configuration:</p>
<pre class=3D"programlisting">&lt;bean id=3D<span class=3D"hl-string">"data=
Source"</span> <span class=3D"hl-keyword">class</span>=3D<span class=3D"hl-=
string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> destroy-method=
=3D<span class=3D"hl-string">"close"</span>&gt;
    &lt;property name=3D<span class=3D"hl-string">"driverClass"</span> valu=
e=3D<span class=3D"hl-string">"${jdbc.driverClassName}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"jdbcUrl"</span> value=3D=
<span class=3D"hl-string">"${jdbc.url}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"user"</span> value=3D<sp=
an class=3D"hl-string">"${jdbc.username}"</span>/&gt;
    &lt;property name=3D<span class=3D"hl-string">"password"</span> value=
=3D<span class=3D"hl-string">"${jdbc.password}"</span>/&gt;
&lt;/bean&gt;

&lt;context:property-placeholder location=3D<span class=3D"hl-string">"jdbc=
.properties"</span>/&gt;</pre>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-DataSourceUtils" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-DataSourceUt=
ils"></a>19.3.2&nbsp;DataSourceUtils</h3></div></div></div>
<p>The <code class=3D"literal">DataSourceUtils</code> class is a convenient=
 and powerful helper class that provides
<code class=3D"literal">static</code> methods to obtain connections from JN=
DI and close connections if necessary. It
supports thread-bound connections with, for example, <code class=3D"literal=
">DataSourceTransactionManager</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-SmartDataSource" href=3D"https://docs.spring.io/spring/d=
ocs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SmartDataSou=
rce"></a>19.3.3&nbsp;SmartDataSource</h3></div></div></div>
<p>The <code class=3D"literal">SmartDataSource</code> interface should be i=
mplemented by classes that can provide a
connection to a relational database. It extends the <code class=3D"literal"=
>DataSource</code> interface to allow
classes using it to query whether the connection should be closed after a g=
iven
operation. This usage is efficient when you know that you will reuse a conn=
ection.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-AbstractDataSource" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-AbstractD=
ataSource"></a>19.3.4&nbsp;AbstractDataSource</h3></div></div></div>
<p><code class=3D"literal">AbstractDataSource</code> is an <code class=3D"l=
iteral">abstract</code> base class for Spring=92s <code class=3D"literal">D=
ataSource</code>
implementations that implements code that is common to all <code class=3D"l=
iteral">DataSource</code> implementations.
You extend the <code class=3D"literal">AbstractDataSource</code> class if y=
ou are writing your own <code class=3D"literal">DataSource</code>
implementation.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-SingleConnectionDataSource" href=3D"https://docs.spring.=
io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-S=
ingleConnectionDataSource"></a>19.3.5&nbsp;SingleConnectionDataSource</h3><=
/div></div></div>
<p>The <code class=3D"literal">SingleConnectionDataSource</code> class is a=
n implementation of the <code class=3D"literal">SmartDataSource</code>
interface that wraps a <span class=3D"emphasis"><em>single</em></span> <cod=
e class=3D"literal">Connection</code> that is <span class=3D"emphasis"><em>=
not</em></span> closed after each use.
Obviously, this is not multi-threading capable.</p>
<p>If any client code calls <code class=3D"literal">close</code> in the ass=
umption of a pooled connection, as when using
persistence tools, set the <code class=3D"literal">suppressClose</code> pro=
perty to <code class=3D"literal">true</code>. This setting returns a
close-suppressing proxy wrapping the physical connection. Be aware that you=
 will not be
able to cast this to a native Oracle <code class=3D"literal">Connection</co=
de> or the like anymore.</p>
<p>This is primarily a test class. For example, it enables easy testing of =
code outside an
application server, in conjunction with a simple JNDI environment. In contr=
ast to
<code class=3D"literal">DriverManagerDataSource</code>, it reuses the same =
connection all the time, avoiding
excessive creation of physical connections.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-DriverManagerDataSource" href=3D"https://docs.spring.io/=
spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-Driv=
erManagerDataSource"></a>19.3.6&nbsp;DriverManagerDataSource</h3></div></di=
v></div>
<p>The <code class=3D"literal">DriverManagerDataSource</code> class is an i=
mplementation of the standard <code class=3D"literal">DataSource</code>
interface that configures a plain JDBC driver through bean properties, and =
returns a new
<code class=3D"literal">Connection</code> every time.</p>
<p>This implementation is useful for test and stand-alone environments outs=
ide of a Java EE
container, either as a <code class=3D"literal">DataSource</code> bean in a =
Spring IoC container, or in conjunction
with a simple JNDI environment. Pool-assuming <code class=3D"literal">Conne=
ction.close()</code> calls will simply
close the connection, so any <code class=3D"literal">DataSource</code>-awar=
e persistence code should work. However,
using JavaBean-style connection pools such as <code class=3D"literal">commo=
ns-dbcp</code> is so easy, even in a test
environment, that it is almost always preferable to use such a connection p=
ool over
<code class=3D"literal">DriverManagerDataSource</code>.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-TransactionAwareDataSourceProxy" href=3D"https://docs.sp=
ring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#j=
dbc-TransactionAwareDataSourceProxy"></a>19.3.7&nbsp;TransactionAwareDataSo=
urceProxy</h3></div></div></div>
<p><code class=3D"literal">TransactionAwareDataSourceProxy</code> is a prox=
y for a target <code class=3D"literal">DataSource</code>, which wraps that
target <code class=3D"literal">DataSource</code> to add awareness of Spring=
-managed transactions. In this respect, it
is similar to a transactional JNDI <code class=3D"literal">DataSource</code=
> as provided by a Java EE server.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>It is rarely desirable to use this class, except when already existing c=
ode that must be
called and passed a standard JDBC <code class=3D"literal">DataSource</code>=
 interface implementation. In this case,
it=92s possible to still have this code be usable, and at the same time hav=
e this code
participating in Spring managed transactions. It is generally preferable to=
 write your
own new code using the higher level abstractions for resource management, s=
uch as
<code class=3D"literal">JdbcTemplate</code> or <code class=3D"literal">Data=
SourceUtils</code>.</p>
</td></tr></tbody></table></div>
<p><span class=3D"emphasis"><em>(See the <code class=3D"literal">Transactio=
nAwareDataSourceProxy</code> javadocs for more details.)</em></span></p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-DataSourceTransactionManager" href=3D"https://docs.sprin=
g.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc=
-DataSourceTransactionManager"></a>19.3.8&nbsp;DataSourceTransactionManager=
</h3></div></div></div>
<p>The <code class=3D"literal">DataSourceTransactionManager</code> class is=
 a <code class=3D"literal">PlatformTransactionManager</code>
implementation for single JDBC datasources. It binds a JDBC connection from=
 the
specified data source to the currently executing thread, potentially allowi=
ng for one
thread connection per data source.</p>
<p>Application code is required to retrieve the JDBC connection through
<code class=3D"literal">DataSourceUtils.getConnection(DataSource)</code> in=
stead of Java EE=92s standard
<code class=3D"literal">DataSource.getConnection</code>. It throws unchecke=
d <code class=3D"literal">org.springframework.dao</code> exceptions
instead of checked <code class=3D"literal">SQLExceptions</code>. All framew=
ork classes like <code class=3D"literal">JdbcTemplate</code> use this
strategy implicitly. If not used with this transaction manager, the lookup =
strategy
behaves exactly like the common one - it can thus be used in any case.</p>
<p>The <code class=3D"literal">DataSourceTransactionManager</code> class su=
pports custom isolation levels, and timeouts
that get applied as appropriate JDBC statement query timeouts. To support t=
he latter,
application code must either use <code class=3D"literal">JdbcTemplate</code=
> or call the
<code class=3D"literal">DataSourceUtils.applyTransactionTimeout(..)</code> =
method for each created statement.</p>
<p>This implementation can be used instead of <code class=3D"literal">JtaTr=
ansactionManager</code> in the single
resource case, as it does not require the container to support JTA. Switchi=
ng between
both is just a matter of configuration, if you stick to the required connec=
tion lookup
pattern. JTA does not support custom isolation levels!</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-NativeJdbcExtractor" href=3D"https://docs.spring.io/spri=
ng/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-NativeJd=
bcExtractor"></a>19.3.9&nbsp;NativeJdbcExtractor</h3></div></div></div>
<p>Sometimes you need to access vendor specific JDBC methods that differ fr=
om the standard
JDBC API. This can be problematic if you are running in an application serv=
er or with a
<code class=3D"literal">DataSource</code> that wraps the <code class=3D"lit=
eral">Connection</code>, <code class=3D"literal">Statement</code> and <code=
 class=3D"literal">ResultSet</code> objects with its
own wrapper objects. To gain access to the native objects you can configure=
 your
<code class=3D"literal">JdbcTemplate</code> or <code class=3D"literal">Orac=
leLobHandler</code> with a <code class=3D"literal">NativeJdbcExtractor</cod=
e>.</p>
<p>The <code class=3D"literal">NativeJdbcExtractor</code> comes in a variet=
y of flavors to match your execution
environment:</p>
<div class=3D"itemizedlist"><ul class=3D"itemizedlist" style=3D"list-style-=
type: disc; "><li class=3D"listitem">
SimpleNativeJdbcExtractor
</li><li class=3D"listitem">
C3P0NativeJdbcExtractor
</li><li class=3D"listitem">
CommonsDbcpNativeJdbcExtractor
</li><li class=3D"listitem">
JBossNativeJdbcExtractor
</li><li class=3D"listitem">
WebLogicNativeJdbcExtractor
</li><li class=3D"listitem">
WebSphereNativeJdbcExtractor
</li><li class=3D"listitem">
XAPoolNativeJdbcExtractor
</li></ul></div>
<p>Usually the <code class=3D"literal">SimpleNativeJdbcExtractor</code> is =
sufficient for unwrapping a <code class=3D"literal">Connection</code>
object in most environments. See the javadocs for more details.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"jdbc-advanced-jdbc" href=3D"https://doc=
s.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingl=
e/#jdbc-advanced-jdbc"></a>19.4&nbsp;JDBC batch operations</h2></div></div>=
</div>
<p>Most JDBC drivers provide improved performance if you batch multiple cal=
ls to the same
prepared statement. By grouping updates into batches you limit the number o=
f round trips
to the database.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-batch-classic" href=3D"https://docs.spring.io/spring/doc=
s/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-batch-classic"=
></a>19.4.1&nbsp;Basic batch operations with the JdbcTemplate</h3></div></d=
iv></div>
<p>You accomplish <code class=3D"literal">JdbcTemplate</code> batch process=
ing by implementing two methods of a special
interface, <code class=3D"literal">BatchPreparedStatementSetter</code>, and=
 passing that in as the second parameter
in your <code class=3D"literal">batchUpdate</code> method call. Use the <co=
de class=3D"literal">getBatchSize</code> method to provide the size of
the current batch. Use the <code class=3D"literal">setValues</code> method =
to set the values for the parameters of
the prepared statement. This method will be called the number of times that=
 you
specified in the <code class=3D"literal">getBatchSize</code> call. The foll=
owing example updates the actor table
based on entries in a list. The entire list is used as the batch in this ex=
ample:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span>[] batchUpdate(<span class=3D"hl-keyword">final</span> List&lt;Actor=
&gt; actors) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.jdbcTemplate.batchUpdate(
                <span class=3D"hl-string">"update t_actor set first_name =
=3D ?, last_name =3D ? where id =3D ?"</span>,
                <span class=3D"hl-keyword">new</span> BatchPreparedStatemen=
tSetter() {
                    <span class=3D"hl-keyword">public</span> <span class=3D=
"hl-keyword">void</span> setValues(PreparedStatement ps, <span class=3D"hl-=
keyword">int</span> i) <span class=3D"hl-keyword">throws</span> SQLExceptio=
n {
                        ps.setString(<span class=3D"hl-number">1</span>, ac=
tors.get(i).getFirstName());
                        ps.setString(<span class=3D"hl-number">2</span>, ac=
tors.get(i).getLastName());
                        ps.setLong(<span class=3D"hl-number">3</span>, acto=
rs.get(i).getId().longValue());
                    }
                    <span class=3D"hl-keyword">public</span> <span class=3D=
"hl-keyword">int</span> getBatchSize() {
                        <span class=3D"hl-keyword">return</span> actors.siz=
e();
                    }
                });
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>If you are processing a stream of updates or reading from a file, then y=
ou might have a
preferred batch size, but the last batch might not have that number of entr=
ies. In this
case you can use the <code class=3D"literal">InterruptibleBatchPreparedStat=
ementSetter</code> interface, which allows
you to interrupt a batch once the input source is exhausted. The <code clas=
s=3D"literal">isBatchExhausted</code> method
allows you to signal the end of the batch.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-batch-list" href=3D"https://docs.spring.io/spring/docs/4=
.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-batch-list"></a>1=
9.4.2&nbsp;Batch operations with a List of objects</h3></div></div></div>
<p>Both the <code class=3D"literal">JdbcTemplate</code> and the <code class=
=3D"literal">NamedParameterJdbcTemplate</code> provides an alternate way
of providing the batch update. Instead of implementing a special batch inte=
rface, you
provide all parameter values in the call as a list. The framework loops ove=
r these
values and uses an internal prepared statement setter. The API varies depen=
ding on
whether you use named parameters. For the named parameters you provide an a=
rray of
<code class=3D"literal">SqlParameterSource</code>, one entry for each membe=
r of the batch. You can use the
<code class=3D"literal">SqlParameterSourceUtils.createBatch</code> convenie=
nce methods to create this array, passing
in an array of bean-style objects (with getter methods corresponding to par=
ameters)
and/or String-keyed Maps (containing the corresponding parameters as values=
).</p>
<p>This example shows a batch update using named parameters:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> NamedParameterTemplate namedP=
arameterJdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.namedParameterJdbcTemplate =
=3D <span class=3D"hl-keyword">new</span> NamedParameterJdbcTemplate(dataSo=
urce);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span>[] batchUpdate(List&lt;Actor&gt; actors) {
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.namedParameterJdbcTemplate.batchUpdate(
                <span class=3D"hl-string">"update t_actor set first_name =
=3D :firstName, last_name =3D :lastName where id =3D :id"</span>,
                SqlParameterSourceUtils.createBatch(actors.toArray()));
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>For an SQL statement using the classic "?" placeholders, you pass in a l=
ist containing an
object array with the update values. This object array must have one entry =
for each
placeholder in the SQL statement, and they must be in the same order as the=
y are defined
in the SQL statement.</p>
<p>The same example using classic JDBC "?" placeholders:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span>[] batchUpdate(<span class=3D"hl-keyword">final</span> List&lt;Actor=
&gt; actors) {
        List&lt;Object[]&gt; batch =3D <span class=3D"hl-keyword">new</span=
> ArrayList&lt;Object[]&gt;();
        <span class=3D"hl-keyword">for</span> (Actor actor : actors) {
            Object[] values =3D <span class=3D"hl-keyword">new</span> Objec=
t[] {
                    actor.getFirstName(), actor.getLastName(), actor.getId(=
)};
            batch.add(values);
        }
        <span class=3D"hl-keyword">return</span> <span class=3D"hl-keyword"=
>this</span>.jdbcTemplate.batchUpdate(
                <span class=3D"hl-string">"update t_actor set first_name =
=3D ?, last_name =3D ? where id =3D ?"</span>,
                batch);
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>All of the above batch update methods return an int array containing the=
 number of
affected rows for each batch entry. This count is reported by the JDBC driv=
er. If the
count is not available, the JDBC driver returns a -2 value.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-batch-multi" href=3D"https://docs.spring.io/spring/docs/=
4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-batch-multi"></a=
>19.4.3&nbsp;Batch operations with multiple batches</h3></div></div></div>
<p>The last example of a batch update deals with batches that are so large =
that you want to
break them up into several smaller batches. You can of course do this with =
the methods
mentioned above by making multiple calls to the <code class=3D"literal">bat=
chUpdate</code> method, but there is now a
more convenient method. This method takes, in addition to the SQL statement=
, a
Collection of objects containing the parameters, the number of updates to m=
ake for each
batch and a <code class=3D"literal">ParameterizedPreparedStatementSetter</c=
ode> to set the values for the parameters
of the prepared statement. The framework loops over the provided values and=
 breaks the
update calls into batches of the size specified.</p>
<p>This example shows a batch update using a batch size of 100:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">int=
</span>[][] batchUpdate(<span class=3D"hl-keyword">final</span> Collection&=
lt;Actor&gt; actors) {
        <span class=3D"hl-keyword">int</span>[][] updateCounts =3D jdbcTemp=
late.batchUpdate(
                <span class=3D"hl-string">"update t_actor set first_name =
=3D ?, last_name =3D ? where id =3D ?"</span>,
                actors,
                <span class=3D"hl-number">100</span>,
                <span class=3D"hl-keyword">new</span> ParameterizedPrepared=
StatementSetter&lt;Actor&gt;() {
                    <span class=3D"hl-keyword">public</span> <span class=3D=
"hl-keyword">void</span> setValues(PreparedStatement ps, Actor argument) <s=
pan class=3D"hl-keyword">throws</span> SQLException {
                        ps.setString(<span class=3D"hl-number">1</span>, ar=
gument.getFirstName());
                        ps.setString(<span class=3D"hl-number">2</span>, ar=
gument.getLastName());
                        ps.setLong(<span class=3D"hl-number">3</span>, argu=
ment.getId().longValue());
                    }
                });
        <span class=3D"hl-keyword">return</span> updateCounts;
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>The batch update methods for this call returns an array of int arrays co=
ntaining an array
entry for each batch with an array of the number of affected rows for each =
update. The top
level array=92s length indicates the number of batches executed and the sec=
ond level array=92s
length indicates the number of updates in that batch. The number of updates=
 in each batch
should be the batch size provided for all batches except for the last one t=
hat might
be less, depending on the total number of update objects provided. The upda=
te count for
each update statement is the one reported by the JDBC driver. If the count =
is not
available, the JDBC driver returns a -2 value.</p>
</div>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h2 class=3D"titl=
e" style=3D"clear: both"><a name=3D"jdbc-simple-jdbc" href=3D"https://docs.=
spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/=
#jdbc-simple-jdbc"></a>19.5&nbsp;Simplifying JDBC operations with the Simpl=
eJdbc classes</h2></div></div></div>
<p>The <code class=3D"literal">SimpleJdbcInsert</code> and <code class=3D"l=
iteral">SimpleJdbcCall</code> classes provide a simplified configuration
by taking advantage of database metadata that can be retrieved through the =
JDBC driver.
This means there is less to configure up front, although you can override o=
r turn off
the metadata processing if you prefer to provide all the details in your co=
de.</p>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-insert-1" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-=
jdbc-insert-1"></a>19.5.1&nbsp;Inserting data using SimpleJdbcInsert</h3></=
div></div></div>
<p>Let=92s start by looking at the <code class=3D"literal">SimpleJdbcInsert=
</code> class with the minimal amount of
configuration options. You should instantiate the <code class=3D"literal">S=
impleJdbcInsert</code> in the data access
layer=92s initialization method. For this example, the initializing method =
is the
<code class=3D"literal">setDataSource</code> method. You do not need to sub=
class the <code class=3D"literal">SimpleJdbcInsert</code> class; simply
create a new instance and set the table name using the <code class=3D"liter=
al">withTableName</code> method.
Configuration methods for this class follow the "fluid" style that returns =
the instance
of the <code class=3D"literal">SimpleJdbcInsert</code>, which allows you to=
 chain all configuration methods. This
example uses only one configuration method; you will see examples of multip=
le ones later.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcInsert insertActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
        <span class=3D"hl-keyword">this</span>.insertActor =3D <span class=
=3D"hl-keyword">new</span> SimpleJdbcInsert(dataSource).withTableName(<span=
 class=3D"hl-string">"t_actor"</span>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> add(Actor actor) {
        Map&lt;String, Object&gt; parameters =3D <span class=3D"hl-keyword"=
>new</span> HashMap&lt;String, Object&gt;(<span class=3D"hl-number">3</span=
>);
        parameters.put(<span class=3D"hl-string">"id"</span>, actor.getId()=
);
        parameters.put(<span class=3D"hl-string">"first_name"</span>, actor=
.getFirstName());
        parameters.put(<span class=3D"hl-string">"last_name"</span>, actor.=
getLastName());
        insertActor.execute(parameters);
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>The execute method used here takes a plain <code class=3D"literal">java.=
utils.Map</code> as its only parameter. The
important thing to note here is that the keys used for the Map must match t=
he column
names of the table as defined in the database. This is because we read the =
metadata in
order to construct the actual insert statement.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-insert-2" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-=
jdbc-insert-2"></a>19.5.2&nbsp;Retrieving auto-generated keys using SimpleJ=
dbcInsert</h3></div></div></div>
<p>This example uses the same insert as the preceding, but instead of passi=
ng in the id it
retrieves the auto-generated key and sets it on the new Actor object. When =
you create
the <code class=3D"literal">SimpleJdbcInsert</code>, in addition to specify=
ing the table name, you specify the name
of the generated key column with the <code class=3D"literal">usingGenerated=
KeyColumns</code> method.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcInsert insertActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
        <span class=3D"hl-keyword">this</span>.insertActor =3D <span class=
=3D"hl-keyword">new</span> SimpleJdbcInsert(dataSource)
                .withTableName(<span class=3D"hl-string">"t_actor"</span>)
                .usingGeneratedKeyColumns(<span class=3D"hl-string">"id"</s=
pan>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> add(Actor actor) {
        Map&lt;String, Object&gt; parameters =3D <span class=3D"hl-keyword"=
>new</span> HashMap&lt;String, Object&gt;(<span class=3D"hl-number">2</span=
>);
        parameters.put(<span class=3D"hl-string">"first_name"</span>, actor=
.getFirstName());
        parameters.put(<span class=3D"hl-string">"last_name"</span>, actor.=
getLastName());
        Number newId =3D insertActor.executeAndReturnKey(parameters);
        actor.setId(newId.longValue());
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>The main difference when executing the insert by this second approach is=
 that you do not
add the id to the Map and you call the <code class=3D"literal">executeAndRe=
turnKey</code> method. This returns a
<code class=3D"literal">java.lang.Number</code> object with which you can c=
reate an instance of the numerical type that
is used in our domain class. You cannot rely on all databases to return a s=
pecific Java
class here; <code class=3D"literal">java.lang.Number</code> is the base cla=
ss that you can rely on. If you have
multiple auto-generated columns, or the generated values are non-numeric, t=
hen you can
use a <code class=3D"literal">KeyHolder</code> that is returned from the <c=
ode class=3D"literal">executeAndReturnKeyHolder</code> method.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-insert-3" href=3D"https://docs.spring.io/spr=
ing/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-=
jdbc-insert-3"></a>19.5.3&nbsp;Specifying columns for a SimpleJdbcInsert</h=
3></div></div></div>
<p>You can limit the columns for an insert by specifying a list of column n=
ames with the
<code class=3D"literal">usingColumns</code> method:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcInsert insertActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
        <span class=3D"hl-keyword">this</span>.insertActor =3D <span class=
=3D"hl-keyword">new</span> SimpleJdbcInsert(dataSource)
                .withTableName(<span class=3D"hl-string">"t_actor"</span>)
                .usingColumns(<span class=3D"hl-string">"first_name"</span>=
, <span class=3D"hl-string">"last_name"</span>)
                .usingGeneratedKeyColumns(<span class=3D"hl-string">"id"</s=
pan>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> add(Actor actor) {
        Map&lt;String, Object&gt; parameters =3D <span class=3D"hl-keyword"=
>new</span> HashMap&lt;String, Object&gt;(<span class=3D"hl-number">2</span=
>);
        parameters.put(<span class=3D"hl-string">"first_name"</span>, actor=
.getFirstName());
        parameters.put(<span class=3D"hl-string">"last_name"</span>, actor.=
getLastName());
        Number newId =3D insertActor.executeAndReturnKey(parameters);
        actor.setId(newId.longValue());
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>The execution of the insert is the same as if you had relied on the meta=
data to determine
which columns to use.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-parameters" href=3D"https://docs.spring.io/s=
pring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simpl=
e-jdbc-parameters"></a>19.5.4&nbsp;Using SqlParameterSource to provide para=
meter values</h3></div></div></div>
<p>Using a <code class=3D"literal">Map</code> to provide parameter values w=
orks fine, but it=92s not the most convenient
class to use. Spring provides a couple of implementations of the <code clas=
s=3D"literal">SqlParameterSource</code>
interface that can be used instead.The first one is <code class=3D"literal"=
>BeanPropertySqlParameterSource</code>,
which is a very convenient class if you have a JavaBean-compliant class tha=
t contains
your values. It will use the corresponding getter method to extract the par=
ameter
values. Here is an example:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcInsert insertActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
        <span class=3D"hl-keyword">this</span>.insertActor =3D <span class=
=3D"hl-keyword">new</span> SimpleJdbcInsert(dataSource)
                .withTableName(<span class=3D"hl-string">"t_actor"</span>)
                .usingGeneratedKeyColumns(<span class=3D"hl-string">"id"</s=
pan>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> add(Actor actor) {
        SqlParameterSource parameters =3D <span class=3D"hl-keyword">new</s=
pan> BeanPropertySqlParameterSource(actor);
        Number newId =3D insertActor.executeAndReturnKey(parameters);
        actor.setId(newId.longValue());
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>Another option is the <code class=3D"literal">MapSqlParameterSource</cod=
e> that resembles a Map but provides a more
convenient <code class=3D"literal">addValue</code> method that can be chain=
ed.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcInsert insertActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
        <span class=3D"hl-keyword">this</span>.insertActor =3D <span class=
=3D"hl-keyword">new</span> SimpleJdbcInsert(dataSource)
                .withTableName(<span class=3D"hl-string">"t_actor"</span>)
                .usingGeneratedKeyColumns(<span class=3D"hl-string">"id"</s=
pan>);
    }

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> add(Actor actor) {
        SqlParameterSource parameters =3D <span class=3D"hl-keyword">new</s=
pan> MapSqlParameterSource()
                .addValue(<span class=3D"hl-string">"first_name"</span>, ac=
tor.getFirstName())
                .addValue(<span class=3D"hl-string">"last_name"</span>, act=
or.getLastName());
        Number newId =3D insertActor.executeAndReturnKey(parameters);
        actor.setId(newId.longValue());
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>As you can see, the configuration is the same; only the executing code h=
as to change to
use these alternative input classes.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-call-1" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jd=
bc-call-1"></a>19.5.5&nbsp;Calling a stored procedure with SimpleJdbcCall</=
h3></div></div></div>
<p>The <code class=3D"literal">SimpleJdbcCall</code> class leverages metada=
ta in the database to look up names of <code class=3D"literal">in</code>
and <code class=3D"literal">out</code> parameters, so that you do not have =
to declare them explicitly. You can
declare parameters if you prefer to do that, or if you have parameters such=
 as <code class=3D"literal">ARRAY</code>
or <code class=3D"literal">STRUCT</code> that do not have an automatic mapp=
ing to a Java class. The first example
shows a simple procedure that returns only scalar values in <code class=3D"=
literal">VARCHAR</code> and <code class=3D"literal">DATE</code> format
from a MySQL database. The example procedure reads a specified actor entry =
and returns
<code class=3D"literal">first_name</code>, <code class=3D"literal">last_nam=
e</code>, and <code class=3D"literal">birth_date</code> columns in the form=
 of <code class=3D"literal">out</code> parameters.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">CREATE</span> <spa=
n class=3D"hl-keyword">PROCEDURE</span> read_actor (
    <span class=3D"hl-keyword">IN</span> in_id <span class=3D"hl-keyword">I=
NTEGER</span>,
    <span class=3D"hl-keyword">OUT</span> out_first_name <span class=3D"hl-=
keyword">VARCHAR</span>(<span class=3D"hl-number">100</span>),
    <span class=3D"hl-keyword">OUT</span> out_last_name <span class=3D"hl-k=
eyword">VARCHAR</span>(<span class=3D"hl-number">100</span>),
    <span class=3D"hl-keyword">OUT</span> out_birth_date <span class=3D"hl-=
keyword">DATE</span>)
<span class=3D"hl-keyword">BEGIN</span>
    <span class=3D"hl-keyword">SELECT</span> first_name, last_name, birth_d=
ate
    <span class=3D"hl-keyword">INTO</span> out_first_name, out_last_name, o=
ut_birth_date
    <span class=3D"hl-keyword">FROM</span> t_actor <span class=3D"hl-keywor=
d">where</span> id =3D in_id;
<span class=3D"hl-keyword">END</span>;</pre>
<p>The <code class=3D"literal">in_id</code> parameter contains the <code cl=
ass=3D"literal">id</code> of the actor you are looking up. The <code class=
=3D"literal">out</code>
parameters return the data read from the table.</p>
<p>The <code class=3D"literal">SimpleJdbcCall</code> is declared in a simil=
ar manner to the <code class=3D"literal">SimpleJdbcInsert</code>. You
should instantiate and configure the class in the initialization method of =
your data
access layer. Compared to the StoredProcedure class, you don=92t have to cr=
eate a subclass
and you don=92t have to declare parameters that can be looked up in the dat=
abase metadata.
Following is an example of a SimpleJdbcCall configuration using the above s=
tored
procedure. The only configuration option, in addition to the <code class=3D=
"literal">DataSource</code>, is the name
of the stored procedure.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcCall procReadActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        <span class=3D"hl-keyword">this</span>.jdbcTemplate =3D <span class=
=3D"hl-keyword">new</span> JdbcTemplate(dataSource);
        <span class=3D"hl-keyword">this</span>.procReadActor =3D <span clas=
s=3D"hl-keyword">new</span> SimpleJdbcCall(dataSource)
                .withProcedureName(<span class=3D"hl-string">"read_actor"</=
span>);
    }

    <span class=3D"hl-keyword">public</span> Actor readActor(Long id) {
        SqlParameterSource in =3D <span class=3D"hl-keyword">new</span> Map=
SqlParameterSource()
                .addValue(<span class=3D"hl-string">"in_id"</span>, id);
        Map out =3D procReadActor.execute(in);
        Actor actor =3D <span class=3D"hl-keyword">new</span> Actor();
        actor.setId(id);
        actor.setFirstName((String) out.get(<span class=3D"hl-string">"out_=
first_name"</span>));
        actor.setLastName((String) out.get(<span class=3D"hl-string">"out_l=
ast_name"</span>));
        actor.setBirthDate((Date) out.get(<span class=3D"hl-string">"out_bi=
rth_date"</span>));
        <span class=3D"hl-keyword">return</span> actor;
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>The code you write for the execution of the call involves creating an <c=
ode class=3D"literal">SqlParameterSource</code>
containing the IN parameter. It=92s important to match the name provided fo=
r the input value
with that of the parameter name declared in the stored procedure. The case =
does not have
to match because you use metadata to determine how database objects should =
be referred to
in a stored procedure. What is specified in the source for the stored proce=
dure is not
necessarily the way it is stored in the database. Some databases transform =
names to all
upper case while others use lower case or use the case as specified.</p>
<p>The <code class=3D"literal">execute</code> method takes the IN parameter=
s and returns a Map containing any <code class=3D"literal">out</code>
parameters keyed by the name as specified in the stored procedure. In this =
case they are
<code class=3D"literal">out_first_name, out_last_name</code> and <code clas=
s=3D"literal">out_birth_date</code>.</p>
<p>The last part of the <code class=3D"literal">execute</code> method creat=
es an Actor instance to use to return the
data retrieved. Again, it is important to use the names of the <code class=
=3D"literal">out</code> parameters as they
are declared in the stored procedure. Also, the case in the names of the <c=
ode class=3D"literal">out</code>
parameters stored in the results map matches that of the <code class=3D"lit=
eral">out</code> parameter names in the
database, which could vary between databases. To make your code more portab=
le you should
do a case-insensitive lookup or instruct Spring to use a <code class=3D"lit=
eral">LinkedCaseInsensitiveMap</code>.
To do the latter, you create your own <code class=3D"literal">JdbcTemplate<=
/code> and set the <code class=3D"literal">setResultsMapCaseInsensitive</co=
de>
property to <code class=3D"literal">true</code>. Then you pass this customi=
zed <code class=3D"literal">JdbcTemplate</code> instance into
the constructor of your <code class=3D"literal">SimpleJdbcCall</code>. Here=
 is an example of this configuration:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> SimpleJdbcCall procReadActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        JdbcTemplate jdbcTemplate =3D <span class=3D"hl-keyword">new</span>=
 JdbcTemplate(dataSource);
        jdbcTemplate.setResultsMapCaseInsensitive(true);
        <span class=3D"hl-keyword">this</span>.procReadActor =3D <span clas=
s=3D"hl-keyword">new</span> SimpleJdbcCall(jdbcTemplate)
                .withProcedureName(<span class=3D"hl-string">"read_actor"</=
span>);
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>By taking this action, you avoid conflicts in the case used for the name=
s of your
returned <code class=3D"literal">out</code> parameters.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-call-2" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jd=
bc-call-2"></a>19.5.6&nbsp;Explicitly declaring parameters to use for a Sim=
pleJdbcCall</h3></div></div></div>
<p>You have seen how the parameters are deduced based on metadata, but you =
can declare then
explicitly if you wish. You do this by creating and configuring <code class=
=3D"literal">SimpleJdbcCall</code> with
the <code class=3D"literal">declareParameters</code> method, which takes a =
variable number of <code class=3D"literal">SqlParameter</code> objects
as input. See the next section for details on how to define an <code class=
=3D"literal">SqlParameter</code>.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Explicit declarations are necessary if the database you use is not a Spr=
ing-supported
database. Currently Spring supports metadata lookup of stored procedure cal=
ls for the
following databases: Apache Derby, DB2, MySQL, Microsoft SQL Server, Oracle=
, and Sybase.
We also support metadata lookup of stored functions for MySQL, Microsoft SQ=
L Server,
and Oracle.</p>
</td></tr></tbody></table></div>
<p>You can opt to declare one, some, or all the parameters explicitly. The =
parameter
metadata is still used where you do not declare parameters explicitly. To b=
ypass all
processing of metadata lookups for potential parameters and only use the de=
clared
parameters, you call the method <code class=3D"literal">withoutProcedureCol=
umnMetaDataAccess</code> as part of the
declaration. Suppose that you have two or more different call signatures de=
clared for a
database function. In this case you call the <code class=3D"literal">useInP=
arameterNames</code> to specify the list
of IN parameter names to include for a given signature.</p>
<p>The following example shows a fully declared procedure call, using the i=
nformation from
the preceding example.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> SimpleJdbcCall procReadActor;

    <span class=3D"hl-keyword">public</span> <span class=3D"hl-keyword">voi=
d</span> setDataSource(DataSource dataSource) {
        JdbcTemplate jdbcTemplate =3D <span class=3D"hl-keyword">new</span>=
 JdbcTemplate(dataSource);
        jdbcTemplate.setResultsMapCaseInsensitive(true);
        <span class=3D"hl-keyword">this</span>.procReadActor =3D <span clas=
s=3D"hl-keyword">new</span> SimpleJdbcCall(jdbcTemplate)
                .withProcedureName(<span class=3D"hl-string">"read_actor"</=
span>)
                .withoutProcedureColumnMetaDataAccess()
                .useInParameterNames(<span class=3D"hl-string">"in_id"</spa=
n>)
                .declareParameters(
                        <span class=3D"hl-keyword">new</span> SqlParameter(=
<span class=3D"hl-string">"in_id"</span>, Types.NUMERIC),
                        <span class=3D"hl-keyword">new</span> SqlOutParamet=
er(<span class=3D"hl-string">"out_first_name"</span>, Types.VARCHAR),
                        <span class=3D"hl-keyword">new</span> SqlOutParamet=
er(<span class=3D"hl-string">"out_last_name"</span>, Types.VARCHAR),
                        <span class=3D"hl-keyword">new</span> SqlOutParamet=
er(<span class=3D"hl-string">"out_birth_date"</span>, Types.DATE)
                );
    }

    <span class=3D"hl-comment">// ... additional methods</span>
}</pre>
<p>The execution and end results of the two examples are the same; this one=
 specifies all
details explicitly rather than relying on metadata.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-params" href=3D"https://docs.spring.io/spring/docs/4.3.2=
1.RELEASE/spring-framework-reference/htmlsingle/#jdbc-params"></a>19.5.7&nb=
sp;How to define SqlParameters</h3></div></div></div>
<p>To define a parameter for the SimpleJdbc classes and also for the RDBMS =
operations
classes, covered in <a class=3D"xref" href=3D"https://docs.spring.io/spring=
/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-object" ti=
tle=3D"19.6&nbsp;Modeling JDBC operations as Java objects">Section&nbsp;19.=
6, =93Modeling JDBC operations as Java objects=94</a>, you use an <code cla=
ss=3D"literal">SqlParameter</code> or one of its subclasses.
You typically specify the parameter name and SQL type in the constructor. T=
he SQL type
is specified using the <code class=3D"literal">java.sql.Types</code> consta=
nts. We have already seen declarations
like:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">new</span> SqlPara=
meter(<span class=3D"hl-string">"in_id"</span>, Types.NUMERIC),
    <span class=3D"hl-keyword">new</span> SqlOutParameter(<span class=3D"hl=
-string">"out_first_name"</span>, Types.VARCHAR),</pre>
<p>The first line with the <code class=3D"literal">SqlParameter</code> decl=
ares an IN parameter. IN parameters can be
used for both stored procedure calls and for queries using the <code class=
=3D"literal">SqlQuery</code> and its
subclasses covered in the following section.</p>
<p>The second line with the <code class=3D"literal">SqlOutParameter</code> =
declares an <code class=3D"literal">out</code> parameter to be used in a
stored procedure call. There is also an <code class=3D"literal">SqlInOutPar=
ameter</code> for <code class=3D"literal">InOut</code> parameters,
parameters that provide an <code class=3D"literal">IN</code> value to the p=
rocedure and that also return a value.</p>
<div class=3D"note" style=3D"margin-left: 0.5in; margin-right: 0.5in;"><tab=
le border=3D"0" summary=3D"Note"><tbody><tr><td rowspan=3D"2" align=3D"cent=
er" valign=3D"top" width=3D"25"><img alt=3D"[Note]" src=3D"https://docs.spr=
ing.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/ima=
ges/note.png"></td><th align=3D"left">Note</th></tr><tr><td align=3D"left" =
valign=3D"top">
<p>Only parameters declared as <code class=3D"literal">SqlParameter</code> =
and <code class=3D"literal">SqlInOutParameter</code> will be used to
provide input values. This is different from the <code class=3D"literal">St=
oredProcedure</code> class, which for
backwards compatibility reasons allows input values to be provided for para=
meters
declared as <code class=3D"literal">SqlOutParameter</code>.</p>
</td></tr></tbody></table></div>
<p>For IN parameters, in addition to the name and the SQL type, you can spe=
cify a scale for
numeric data or a type name for custom database types. For <code class=3D"l=
iteral">out</code> parameters, you can
provide a <code class=3D"literal">RowMapper</code> to handle mapping of row=
s returned from a <code class=3D"literal">REF</code> cursor. Another
option is to specify an <code class=3D"literal">SqlReturnType</code> that p=
rovides an opportunity to define
customized handling of the return values.</p>
</div>
<div class=3D"section"><div class=3D"titlepage"><div><div><h3 class=3D"titl=
e"><a name=3D"jdbc-simple-jdbc-call-3" href=3D"https://docs.spring.io/sprin=
g/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/#jdbc-simple-jd=
bc-call-3"></a>19.5.8&nbsp;Calling a stored function using SimpleJdbcCall</=
h3></div></div></div>
<p>You call a stored function in almost the same way as you call a stored p=
rocedure, except
that you provide a function name rather than a procedure name. You use the
<code class=3D"literal">withFunctionName</code> method as part of the confi=
guration to indicate that we want to make
a call to a function, and the corresponding string for a function call is g=
enerated. A
specialized execute call, <code class=3D"literal">executeFunction,</code> i=
s used to execute the function and it
returns the function return value as an object of a specified type, which m=
eans you do
not have to retrieve the return value from the results map. A similar conve=
nience method
named <code class=3D"literal">executeObject</code> is also available for st=
ored procedures that only have one <code class=3D"literal">out</code>
parameter. The following example is based on a stored function named <code =
class=3D"literal">get_actor_name</code>
that returns an actor=92s full name. Here is the MySQL source for this func=
tion:</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">CREATE</span> <spa=
n class=3D"hl-keyword">FUNCTION</span> get_actor_name (in_id <span class=3D=
"hl-keyword">INTEGER</span>)
<span class=3D"hl-keyword">RETURNS</span> <span class=3D"hl-keyword">VARCHA=
R</span>(<span class=3D"hl-number">200</span>) <span class=3D"hl-keyword">R=
EADS</span> <span class=3D"hl-keyword">SQL</span> <span class=3D"hl-keyword=
">DATA</span>
<span class=3D"hl-keyword">BEGIN</span>
    <span class=3D"hl-keyword">DECLARE</span> out_name <span class=3D"hl-ke=
yword">VARCHAR</span>(<span class=3D"hl-number">200</span>);
    <span class=3D"hl-keyword">SELECT</span> concat(first_name, <span class=
=3D"hl-string">' '</span>, last_name)
        <span class=3D"hl-keyword">INTO</span> out_name
        <span class=3D"hl-keyword">FROM</span> t_actor <span class=3D"hl-ke=
yword">where</span> id =3D in_id;
    <span class=3D"hl-keyword">RETURN</span> out_name;
<span class=3D"hl-keyword">END</span>;</pre>
<p>To call this function we again create a <code class=3D"literal">SimpleJd=
bcCall</code> in the initialization method.</p>
<pre class=3D"programlisting"><span class=3D"hl-keyword">public</span> <spa=
n class=3D"hl-keyword">class</span> JdbcActorDao <span class=3D"hl-keyword"=
>implements</span> ActorDao {

    <span class=3D"hl-keyword">private</span> JdbcTemplate jdbcTemplate;
    <span class=3D"hl-keyword">private</span> SimpleJdbcCall funcGetActorNa=
me;

    <span class=3D"hl-keyword">public</span> </pre></div></div></div></div>=
</div></body></html>
------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/css/manual-singlepage.css

@charset "windows-1252";

@import url("manual.css");

body { background: url("../images/background.png") center top no-repeat; }
------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/css/manual.css

@charset "windows-1252";

@import url("highlight.css");

html { padding: 0px; margin: 0px; }

body { color: rgb(51, 51, 51); margin: 15px 30px; font-family: Helvetica, A=
rial, Freesans, Clean, sans-serif; line-height: 1.6; -webkit-font-smoothing=
: antialiased; }

code { font-size: 16px; font-family: Consolas, "liberation mono", Courier, =
monospace; color: rgb(109, 24, 11); }

:not(pre) > code { background-color: rgb(242, 242, 242); border: 1px solid =
rgb(204, 204, 204); border-radius: 4px; padding: 1px 3px 0px; text-shadow: =
none; white-space: nowrap; }

body > :first-child { margin-top: 0px !important; }

div { margin: 0px; }

hr { border: 1px solid rgb(204, 204, 204); background: rgb(204, 204, 204); =
}

h1, h2, h3, h4, h5, h6 { color: rgb(0, 0, 0); cursor: text; font-weight: 70=
0; margin: 30px 0px 10px; padding: 0px; }

h1, h2, h3 { margin: 40px 0px 10px; }

h1 { margin: 70px 0px 30px; padding-top: 20px; }

div.part h1 { border-top: 1px dotted rgb(204, 204, 204); }

h1, h1 code { font-size: 32px; }

h2, h2 code { font-size: 24px; }

h3, h3 code { font-size: 20px; }

h4, h1 code, h5, h5 code, h6, h6 code { font-size: 18px; }

div.book, div.chapter, div.appendix, div.part, div.preface { min-width: 300=
px; max-width: 1200px; margin: 0px auto; }

p.releaseinfo { font-weight: 700; margin-bottom: 40px; margin-top: 40px; }

div.authorgroup { line-height: 1; }

p.copyright { line-height: 1; margin-bottom: -5px; }

.legalnotice p { font-style: italic; font-size: 14px; line-height: 1; }

div.titlepage + p, div.titlepage + p { margin-top: 0px; }

pre { line-height: 1; color: rgb(0, 0, 0); }

a { color: rgb(65, 131, 196); text-decoration: none; }

p { margin: 15px 0px; text-align: left; }

ul, ol { padding-left: 30px; }

li p { margin: 0px; }

div.table { margin: 1em; padding: 0.5em; text-align: center; }

div.table table, div.informaltable table { display: table; width: 100%; }

div.table td { padding-left: 7px; padding-right: 7px; }

.sidebar { line-height: 1.4; padding: 0px 20px; background-color: rgb(248, =
248, 248); border: 1px solid rgb(204, 204, 204); border-radius: 3px; }

.sidebar p.title { color: rgb(109, 24, 11); }

pre.programlisting, pre.screen { font-size: 15px; padding: 6px 10px; backgr=
ound-color: rgb(248, 248, 248); border: 1px solid rgb(204, 204, 204); borde=
r-radius: 3px; clear: both; overflow: auto; line-height: 1.4; font-family: =
Consolas, "liberation mono", Courier, monospace; }

table { border-spacing: 0px; line-height: 1.6; border: 1px solid rgb(221, 2=
21, 221) !important; border-radius: 4px !important; border-collapse: separa=
te !important; }

table thead { background: rgb(245, 245, 245); }

table tr { border: none; }

table th { font-weight: 700; }

table th, table td { padding: 6px 13px; border: none !important; }

table tr:nth-child(2n) { background-color: rgb(248, 248, 248); }

td p { margin: 0px 0px 15px; }

div.table-contents td p { margin: 0px; }

div.important *, div.note *, div.tip *, div.warning *, div.navheader *, div=
.navfooter *, div.calloutlist * { margin: 0px; border: none !important; bac=
kground: 0px 0px !important; }

div.important p, div.note p, div.tip p, div.warning p { color: rgb(111, 111=
, 111); line-height: 1.6; }

div.important code, div.note code, div.tip code, div.warning code { backgro=
und-color: rgb(242, 242, 242) !important; border: 1px solid rgb(204, 204, 2=
04) !important; border-radius: 4px !important; padding: 1px 3px 0px !import=
ant; text-shadow: none !important; white-space: nowrap !important; }

.note th, .tip th, .warning th { display: none; }

.note tr:first-child td, .tip tr:first-child td, .warning tr:first-child td=
 { padding-top: 10px; border-right: 1px solid rgb(204, 204, 204) !important=
; }

div.calloutlist p, div.calloutlist td { padding: 0px; margin: 0px; }

div.calloutlist > table > tbody > tr > td:first-child { padding-left: 10px;=
 width: 30px !important; }

div.important, div.note, div.tip, div.warning { margin-top: 20px; margin-bo=
ttom: 20px; padding-top: 10px; padding-bottom: 10px; margin-left: 0px !impo=
rtant; margin-right: 20px !important; }

div.toc { line-height: 1.2; }

dl, dt { margin-top: 1px; margin-bottom: 0px; }

div.toc > dl > dt { font-size: 32px; font-weight: 700; margin: 30px 0px 10p=
x; display: block; }

div.toc > dl > dd > dl > dt { font-size: 24px; font-weight: 700; margin: 20=
px 0px 10px; display: block; }

div.toc > dl > dd > dl > dd > dl > dt { font-weight: 700; font-size: 20px; =
margin: 10px 0px 0px; }

tbody.footnotes * { border: none !important; }

div.footnote p { margin: 0px; line-height: 1; }

div.footnote p sup { margin-right: 6px; vertical-align: middle; }

div.navheader { border-bottom: 1px solid rgb(204, 204, 204); }

div.navfooter { border-top: 1px solid rgb(204, 204, 204); }

.title { margin-left: -1em; padding-left: 1em; }

.title > a { position: absolute; visibility: hidden; display: block; font-s=
ize: 0.85em; margin-top: 0.05em; margin-left: -1em; vertical-align: text-to=
p; color: rgb(0, 0, 0); }

.title > a::before { content: "=A7"; }

.title:hover > a, .title > a:hover, .title:hover > a:hover { visibility: vi=
sible; }

.title:focus > a, .title > a:focus, .title:focus > a:focus { outline: 0px; }
------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/css/highlight.css

@charset "windows-1252";

.hl-keyword { color: rgb(127, 0, 85); font-weight: 700; }

.hl-comment { color: rgb(63, 95, 95); font-style: italic; }

.hl-multiline-comment { color: rgb(63, 95, 191); font-style: italic; }

.hl-tag { color: rgb(63, 127, 127); }

.hl-attribute { color: rgb(127, 0, 127); }

.hl-value { color: rgb(42, 0, 255); }

.hl-string { color: rgb(42, 0, 255); }
------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/background.png

iVBORw0KGgoAAAANSUhEUgAAAzEAAAOPCAMAAADMiL+3AAABgFBMVEX////5+u/t8Or4+e/5+vDu
8Or///7+/v3////+/vz6+/L6+/Hy9Oz7/PXx8+z3+O729+79/fn8/Pb7/PT9/fr8/fj6+/P7+/Pz
9Oz3+e/9/vv+/vvz9e38/ff8/Pf9/vr7+/Tw8uv+//7x8uvu8ev09u36+vH+/v7t7+r19+76+vD+
//35+vjy9PDs7+nv8u3w8u3w8+7z9fH7/Pb9/fj7/Prv8uz6+/n8/Pv8/fz9/fzv8uvv8erv8ez2
9/T7/Pv19/T9/v3y9O/09vL4+ff7+/r9/f32+PXt8Ovx8+7u8ez19vPx8+/19/P6+/ru8Ov3+PX3
+Pb3+fbx9O/y9fD19u709vP4+fb4+vf5+vfr7ejs7ujz9e719u36+vnv8evz9fL09vD3+PP4+fX5
+vT5+vb5+vn9/fvx8uzx8+3z9O709fL09vH39/L3+PL3+PT4+fP5+fT4+vT5+vL5+vP6+vX6+vj6
+/T6+/b7+/f7/Pf8/Pj8/Pr8/fn8/fv9/vwywz/6AAAAAXRSTlMAQObYZgAAJIxJREFUaN7s2+1S
o06bx3EaCRASkhDI84NRS2tGq+bN+G7vI7m39vxPY0l0HHWigQT68ft5tbX7L4dA/7b76r7a8wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAgFrxhHcAVJcFT7wEoKqnRBS8BaCqrRBj3gJQUTcQYhfzHoBqZf9MCNGL
eBFAJc9i75oXAVQR9Q6JYX8ZqCQ9BEbkFDJABdlLYMRDyLsAqq7JSiteBlB1TUYhA9RZk5V2vA2g
8pqsPJGhkAG+F+d/AyOCJS8E+NazeI9CBvjWvp/snZQ3Any3Jpt+CIxIKGSAb2w/BkYEnMgAX7sW
n2W8FOArUfJPYrhVBnxZxOT/BIZCBvjSRBzBrTLguGVwLDEFLwY4WsT0jgWGQgY4XsTsjgZGJLwa
4Ijt8cCIRwoZ4F9F8EViKGSAf3W/DIzY8naAT26TLwMj8pj3A3wQpl8HRiQUMsBHG/EdmjGBD7Jv
A0MzJvDBKvg+MdwqA9754qyfZkzgaNU/FadQ+gN/HOvw5wwT+Mr4dGBoxgT+2FQIjJjynoCDrEpg
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
tfyTf/4fv9Tr2m23eHs16Na68GmNXSc5dB0O5oV118Rk7fLseD3cUMKZVd97pGX7RcKBebLVyRZz
7Jd1v8UH+tal0u7M9e7I9Ww4cz0yUqtN7mWpnaa3xkf3/mTv7YeJyclabWRkbHZmvDXlPRVOeDui
dFSXJXyNeS9yVl+fYv7+z3/1Q3TaRhi81Jq73nuN4V3tv7s03371wXeWgHuJBuZu/HrwJ/9S8SuQ
o39R3U0wMI+jXsUEW6/2tp//xm9Avo4ydxILzMbVyE/dm9D5bt0PQN48WEkoMAvPIz/zL+3pgF+o
rMnj6T+ZyCwsRX5iafeJa1d99+TS9sahtsmC8u9aAfvaBkNuI7Pc/Q7zbfTH/Sr87zdtMOS5MFvt
9uYyekkW/O9C38JDN/zk+/jf3eT/8v3ojyr9Q9+qFhl51/iqi8A0t6I/aP5nfV81fN/k370nnQbm
dpwE/DxGTw0yfZjp7C5zJVYCfnVnyzdNQZRfxG8zP3q6E+cR//2Led8zBdpm4k6ZNTfjPeCa75hi
ud+MMf//+FtNYnre5lrEzDTvyQuEtm99+DyzcHdTjxj2NL5fW/nsgAvL5r0dXxK8EZrNW2v7DTVv
NJ8tOb/DPsoPtpce3m2ubiy0bKze+emtb9a3FGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwNH6P7Rs
lEkWP8SYAAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png

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
RK5CYII=

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-full.png

iVBORw0KGgoAAAANSUhEUgAAAsIAAAH+CAIAAAAZIP/FAAAWK2lDQ1BJQ0MgUHJvZmlsZQAAWIW1
eHk01t/b7v58nvnhMT3meZ7necg8zzITmef58RijMqRCiZCpFDKGBiGJECqSKRSKSoiKkDK+S99z
fr9zzjrvete71jnXP/ta99rr2sO1177vdQPA9NsjPDwYpgEgJJRMsjbU4XZ0cubGvANYQA0oAA5w
eHhFhmtbWZmB/xS/JgB0NI5JHGn95/P+r6D19on0AgCyAgCEeUd6hQAAPQUA6HmFk8gAwEgAwHAM
OfyIjwMA6EmOTs4AwEtH3O8fvnfEPf9yBM3fObbWugAg+AHAUnp4kPwAoJAGAHBHe/mRAaCwAgBN
F+odEHq0PABoDS9/D28AmCoAAOIhIWFHfBgAIOz5v+j4/W+anv/S9PDw+xf/5yx/waAbFhxG4jbT
1ePW9QgO8CR5kH28/5t3818iJDjqf6535AClT6idzdG+AQDsQBeEgWAQBkiAG5gBXaAHuIEu8ADB
IAB4AhLwAGTgA7zJPrHkIwHdsPA4UoCfP5lbOzw82Eec2zjUS1KcW1ZaRvr/9bb/v+Lo/f7DNqz/
3grE+PrfsZAUAFRyAYBP/DvmNQdAyzoAuC//jglEAkCVAEDfilcUKfqf2NFTBCiAB9SAHrAATsAH
hIEEkAWKQA1oAX1gAiyBLXACJ4EX8AchgARiQAJIAmkgA1wBeaAIlIJyUA3qwX3QAtpBF+gDA2AY
vAHTYA4sgBWwBn6BXQiCMBABIkIsEBckAIlBspAypAHpQ2aQNeQEuUN+UCgUBSVAKVAGlAMVQbeg
Guge9Ajqgl5AI9BbaB5ahn5COzACpoTpYQ5YEJaClWFt2BS2hV1hPzgCjodT4ctwAVwG34Gb4S54
AH4Dz8Er8BYCICgQjAgehARCGaGLsEQ4I3wRJMRpRDoiH1GGaEC0IfoRY4g5xCriDxKNJCK5kRJI
NaQR0g7phYxAnkZmIouQ1chm5DPkGHIeuYY8QBFQ7CgxlCrKGOWI8kPFoNJQ+ahK1ENUL+oNagH1
C41GM6KF0EpoI7QTOhB9Cp2Jvo5uRD9Fj6A/obcwGAwLRgyjjrHEeGDImDRMIeYOphMzilnA/MZS
YLmwslgDrDM2FJuMzcfWYjuwo9hF7C6OBieAU8VZ4rxxcbgsXAWuDfcat4DbxdPihfDqeFt8ID4J
X4BvwPfiZ/AbFBQUvBQqFMcpAijOUhRQ3KV4TjFP8YeSjlKUUpfShTKK8jJlFeVTyreUGwQCQZCg
RXAmkAmXCTWEHsJ7wm8qIpUklTGVN9UZqmKqZqpRqu/UOGoBam3qk9Tx1PnUD6hfU6/S4GgEaXRp
PGhO0xTTPKKZpNmiJdLK0FrShtBm0tbSvqBdosPQCdLp03nTpdKV0/XQfSIiiHxEXaIXMYVYQewl
LtCj6YXojekD6TPo6+mH6NcY6BjkGewZYhmKGZ4wzDEiGAUZjRmDGbMY7zNOMO4wcTBpM/kwXWRq
YBpl2mZmY9Zi9mFOZ25kfsO8w8LNos8SxJLN0sIyy4pkFWU9zhrDeoO1l3WVjZ5Njc2LLZ3tPts7
dphdlN2a/RR7Ofsg+xYHJ4chRzhHIUcPxyonI6cWZyBnLmcH5zIXkUuDK4Arl6uT6ys3A7c2dzB3
Afcz7jUedh4jniieWzxDPLu8Qrx2vMm8jbyzfHg+ZT5fvly+br41fi5+c/4E/jr+dwI4AWUBf4Fr
Av0C24JCgg6C5wVbBJeEmIWMheKF6oRmhAnCmsIRwmXC4yJoEWWRIJHrIsOisKiCqL9osehrMVhM
USxA7LrYiDhKXEU8VLxMfFKCUkJbIlqiTmJeklHSTDJZskXyuxS/lLNUtlS/1IG0gnSwdIX0tAyd
jIlMskybzE9ZUVkv2WLZcTmCnIHcGblWuXV5MXkf+RvyUwpEBXOF8wrdCvuKSookxQbFZSV+JXel
EqVJZXplK+VM5ecqKBUdlTMq7Sp/VBVVyar3VX+oSagFqdWqLR0TOuZzrOLYJ3VedQ/1W+pzGtwa
7ho3NeY0eTQ9NMs0P2rxaXlrVWotaotoB2rf0f6uI61D0nmos62rqpuo+1QPoWeol643pE+nb6df
pP/egNfAz6DOYM1QwfCU4VMjlJGpUbbRpDGHsZdxjfGaiZJJoskzU0pTG9Mi049momYkszZz2NzE
/Kr5jIWARahFiyWwNLa8ajlrJWQVYfX4OPq41fHi41+sZawTrPttiDZuNrU2v2x1bLNsp+2E7aLs
uu2p7V3sa+y3HfQcchzmHKUcEx0HnFidApxanTHO9s6Vzlsn9E/knVhwUXBJc5lwFXKNdX1xkvVk
8MknbtRuHm4P3FHuDu617nselh5lHluexp4lnmteul7XvFa8tbxzvZd91H1yfBZ91X1zfJf81P2u
+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
vxFqsMMAAAAASUVORK5CYII=

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-thirdparty-web.png

iVBORw0KGgoAAAANSUhEUgAAApUAAAICCAIAAAARUKELAAAWK2lDQ1BJQ0MgUHJvZmlsZQAAWIW1
eHk01t/b7v58nvnhMT3meZ7necg8zzITmef58RijMqRCiZCpFDKGBiGJECqSKRSKSoiKkDK+S99z
fr9zzjrvete71jnXP/ta99rr2sO1177vdQPA9NsjPDwYpgEgJJRMsjbU4XZ0cubGvANYQA0oAA5w
eHhFhmtbWZmB/xS/JgB0NI5JHGn95/P+r6D19on0AgCyAgCEeUd6hQAAPQUA6HmFk8gAwEgAwHAM
OfyIjwMA6EmOTs4AwEtH3O8fvnfEPf9yBM3fObbWugAg+AHAUnp4kPwAoJAGAHBHe/mRAaCwAgBN
F+odEHq0PABoDS9/D28AmCoAAOIhIWFHfBgAIOz5v+j4/W+anv/S9PDw+xf/5yx/waAbFhxG4jbT
1ePW9QgO8CR5kH28/5t3818iJDjqf6535AClT6idzdG+AQDsQBeEgWAQBkiAG5gBXaAHuIEu8ADB
IAB4AhLwAGTgA7zJPrHkIwHdsPA4UoCfP5lbOzw82Eec2zjUS1KcW1ZaRvr/9bb/v+Lo/f7DNqz/
3grE+PrfsZAUAFRyAYBP/DvmNQdAyzoAuC//jglEAkCVAEDfilcUKfqf2NFTBCiAB9SAHrAATsAH
hIEEkAWKQA1oAX1gAiyBLXACJ4EX8AchgARiQAJIAmkgA1wBeaAIlIJyUA3qwX3QAtpBF+gDA2AY
vAHTYA4sgBWwBn6BXQiCMBABIkIsEBckAIlBspAypAHpQ2aQNeQEuUN+UCgUBSVAKVAGlAMVQbeg
Guge9Ajqgl5AI9BbaB5ahn5COzACpoTpYQ5YEJaClWFt2BS2hV1hPzgCjodT4ctwAVwG34Gb4S54
AH4Dz8Er8BYCICgQjAgehARCGaGLsEQ4I3wRJMRpRDoiH1GGaEC0IfoRY4g5xCriDxKNJCK5kRJI
NaQR0g7phYxAnkZmIouQ1chm5DPkGHIeuYY8QBFQ7CgxlCrKGOWI8kPFoNJQ+ahK1ENUL+oNagH1
C41GM6KF0EpoI7QTOhB9Cp2Jvo5uRD9Fj6A/obcwGAwLRgyjjrHEeGDImDRMIeYOphMzilnA/MZS
YLmwslgDrDM2FJuMzcfWYjuwo9hF7C6OBieAU8VZ4rxxcbgsXAWuDfcat4DbxdPihfDqeFt8ID4J
X4BvwPfiZ/AbFBQUvBQqFMcpAijOUhRQ3KV4TjFP8YeSjlKUUpfShTKK8jJlFeVTyreUGwQCQZCg
RXAmkAmXCTWEHsJ7wm8qIpUklTGVN9UZqmKqZqpRqu/UOGoBam3qk9Tx1PnUD6hfU6/S4GgEaXRp
PGhO0xTTPKKZpNmiJdLK0FrShtBm0tbSvqBdosPQCdLp03nTpdKV0/XQfSIiiHxEXaIXMYVYQewl
LtCj6YXojekD6TPo6+mH6NcY6BjkGewZYhmKGZ4wzDEiGAUZjRmDGbMY7zNOMO4wcTBpM/kwXWRq
YBpl2mZmY9Zi9mFOZ25kfsO8w8LNos8SxJLN0sIyy4pkFWU9zhrDeoO1l3WVjZ5Njc2LLZ3tPts7
dphdlN2a/RR7Ofsg+xYHJ4chRzhHIUcPxyonI6cWZyBnLmcH5zIXkUuDK4Arl6uT6ys3A7c2dzB3
Afcz7jUedh4jniieWzxDPLu8Qrx2vMm8jbyzfHg+ZT5fvly+br41fi5+c/4E/jr+dwI4AWUBf4Fr
Av0C24JCgg6C5wVbBJeEmIWMheKF6oRmhAnCmsIRwmXC4yJoEWWRIJHrIsOisKiCqL9osehrMVhM
USxA7LrYiDhKXEU8VLxMfFKCUkJbIlqiTmJeklHSTDJZskXyuxS/lLNUtlS/1IG0gnSwdIX0tAyd
jIlMskybzE9ZUVkv2WLZcTmCnIHcGblWuXV5MXkf+RvyUwpEBXOF8wrdCvuKSookxQbFZSV+JXel
EqVJZXplK+VM5ecqKBUdlTMq7Sp/VBVVyar3VX+oSagFqdWqLR0TOuZzrOLYJ3VedQ/1W+pzGtwa
7ho3NeY0eTQ9NMs0P2rxaXlrVWotaotoB2rf0f6uI61D0nmos62rqpuo+1QPoWeol643pE+nb6df
pP/egNfAz6DOYM1QwfCU4VMjlJGpUbbRpDGHsZdxjfGaiZJJoskzU0pTG9Mi049momYkszZz2NzE
/Kr5jIWARahFiyWwNLa8ajlrJWQVYfX4OPq41fHi41+sZawTrPttiDZuNrU2v2x1bLNsp+2E7aLs
uu2p7V3sa+y3HfQcchzmHKUcEx0HnFidApxanTHO9s6Vzlsn9E/knVhwUXBJc5lwFXKNdX1xkvVk
8MknbtRuHm4P3FHuDu617nselh5lHluexp4lnmteul7XvFa8tbxzvZd91H1yfBZ91X1zfJf81P2u
+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
1oFiO9WABU5X1AXFg75ir+dgsbKoRZ2mwp9+dDzMLxy/u7q6RkdHZ2dnP5Xfa2tr8/Pzb9++HRwc
bG5uxk8OQReN39Dni6TOcclrWL8E+rHu7traWqVSOTY2Njs763A4PpXfCwsLk5OTWq22ra0NPzkE
gd9XRsWl6TEk3Q/8hn7cu7u+vl6lUun1+nfv3q2srHi93p2dnZP47ff719fXFxcXp6endTpdV1cX
DwaDnVcDcaFT8Rt2gaypqam/v99gMMzNza2srGxubp7E71Ao5Pf7PR7P0tKS2Wx+/fp1b29vQ0ND
aWmpSCT6x3/8x3v37v32t7+9ffv2rVu3hELhTRgM9vXtl7/85S9+8Yv/8l/+S3p6+n/4D//h3/27
f/dv/+2/TUpKAr+h0/L73/ybf/MXf/EX165d+4//8T8KBIIbN2781V/91S9/+UvcZT+iCYXCv/mb
v8nMzPzd736Xm5v76NGjoqKi6urq9vb2oaGhyclJm83mcrk+wu/3798HAoGNjY3l5WWLxTIxMaHR
aFpbW2tqap49e/b48eM//OEPubm5OTk5v/vd7+7CYLBvYr/97W8zMzNv377913/913/1V3/1n/7T
f/r3//7f/8Vf/AX4DZ2W36mpqdevX//P//k/37x581e/+tVvfvObrKys3/72t7jLfkT7u7/7u+zs
7P/6X//rP/zDPzx69KiwsLC8vPzVq1c9PT2jo6Mmk2lxcdHtdm9tbQWDwZP4vbOz4/P5VldXFxYW
pqenR0dHe3t75XL5ixcvSkpKCgsL//mf//mPf/zjA9r+AQaDfX37/vvvf//739+7d+93v/tdZmbm
rVu3bty4cf36dfAbOi2///Iv//Kv/uqv/uZv/uZv//ZvCTNyc3Pz8vJwl/2I9uDBgz/84Q9/+tOf
/vznPxcVFZWXl8tkMoVCodFoDAbDu3fvlpeXPR7P9vZ2MBjc398/nt97e3vBYHB7e3t9fd3hcFgs
FqPRqNVqlUplS0uLTCarqqoqLS2VSCRFRUWFMBjsm9iTJ0/+/Oc//7f/9t/y8/Nzc3Ozs7N/85vf
/PKXvwS/odPyWygUZmVl3bt37x/+4R8ePnz4z//8zz/88ANusR/XioqKxGKxVCp9/vz5y5cvGxsb
Ozo6+vv7X79+PTMzs7Cw4HK5vF5vIBAIhUJR+U2mcPH7/V6vd21tbWlp6d27dxMTEyMjI/39/d3d
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
RU5ErkJggg==

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-remoting.png

iVBORw0KGgoAAAANSUhEUgAAAocAAAH0CAIAAADAKBBHAAAWK2lDQ1BJQ0MgUHJvZmlsZQAAWIW1
eHk01t/b7v58nvnhMT3meZ7necg8zzITmef58RijMqRCiZCpFDKGBiGJECqSKRSKSoiKkDK+S99z
fr9zzjrvete71jnXP/ta99rr2sO1177vdQPA9NsjPDwYpgEgJJRMsjbU4XZ0cubGvANYQA0oAA5w
eHhFhmtbWZmB/xS/JgB0NI5JHGn95/P+r6D19on0AgCyAgCEeUd6hQAAPQUA6HmFk8gAwEgAwHAM
OfyIjwMA6EmOTs4AwEtH3O8fvnfEPf9yBM3fObbWugAg+AHAUnp4kPwAoJAGAHBHe/mRAaCwAgBN
F+odEHq0PABoDS9/D28AmCoAAOIhIWFHfBgAIOz5v+j4/W+anv/S9PDw+xf/5yx/waAbFhxG4jbT
1ePW9QgO8CR5kH28/5t3818iJDjqf6535AClT6idzdG+AQDsQBeEgWAQBkiAG5gBXaAHuIEu8ADB
IAB4AhLwAGTgA7zJPrHkIwHdsPA4UoCfP5lbOzw82Eec2zjUS1KcW1ZaRvr/9bb/v+Lo/f7DNqz/
3grE+PrfsZAUAFRyAYBP/DvmNQdAyzoAuC//jglEAkCVAEDfilcUKfqf2NFTBCiAB9SAHrAATsAH
hIEEkAWKQA1oAX1gAiyBLXACJ4EX8AchgARiQAJIAmkgA1wBeaAIlIJyUA3qwX3QAtpBF+gDA2AY
vAHTYA4sgBWwBn6BXQiCMBABIkIsEBckAIlBspAypAHpQ2aQNeQEuUN+UCgUBSVAKVAGlAMVQbeg
Guge9Ajqgl5AI9BbaB5ahn5COzACpoTpYQ5YEJaClWFt2BS2hV1hPzgCjodT4ctwAVwG34Gb4S54
AH4Dz8Er8BYCICgQjAgehARCGaGLsEQ4I3wRJMRpRDoiH1GGaEC0IfoRY4g5xCriDxKNJCK5kRJI
NaQR0g7phYxAnkZmIouQ1chm5DPkGHIeuYY8QBFQ7CgxlCrKGOWI8kPFoNJQ+ahK1ENUL+oNagH1
C41GM6KF0EpoI7QTOhB9Cp2Jvo5uRD9Fj6A/obcwGAwLRgyjjrHEeGDImDRMIeYOphMzilnA/MZS
YLmwslgDrDM2FJuMzcfWYjuwo9hF7C6OBieAU8VZ4rxxcbgsXAWuDfcat4DbxdPihfDqeFt8ID4J
X4BvwPfiZ/AbFBQUvBQqFMcpAijOUhRQ3KV4TjFP8YeSjlKUUpfShTKK8jJlFeVTyreUGwQCQZCg
RXAmkAmXCTWEHsJ7wm8qIpUklTGVN9UZqmKqZqpRqu/UOGoBam3qk9Tx1PnUD6hfU6/S4GgEaXRp
PGhO0xTTPKKZpNmiJdLK0FrShtBm0tbSvqBdosPQCdLp03nTpdKV0/XQfSIiiHxEXaIXMYVYQewl
LtCj6YXojekD6TPo6+mH6NcY6BjkGewZYhmKGZ4wzDEiGAUZjRmDGbMY7zNOMO4wcTBpM/kwXWRq
YBpl2mZmY9Zi9mFOZ25kfsO8w8LNos8SxJLN0sIyy4pkFWU9zhrDeoO1l3WVjZ5Njc2LLZ3tPts7
dphdlN2a/RR7Ofsg+xYHJ4chRzhHIUcPxyonI6cWZyBnLmcH5zIXkUuDK4Arl6uT6ys3A7c2dzB3
Afcz7jUedh4jniieWzxDPLu8Qrx2vMm8jbyzfHg+ZT5fvly+br41fi5+c/4E/jr+dwI4AWUBf4Fr
Av0C24JCgg6C5wVbBJeEmIWMheKF6oRmhAnCmsIRwmXC4yJoEWWRIJHrIsOisKiCqL9osehrMVhM
USxA7LrYiDhKXEU8VLxMfFKCUkJbIlqiTmJeklHSTDJZskXyuxS/lLNUtlS/1IG0gnSwdIX0tAyd
jIlMskybzE9ZUVkv2WLZcTmCnIHcGblWuXV5MXkf+RvyUwpEBXOF8wrdCvuKSookxQbFZSV+JXel
EqVJZXplK+VM5ecqKBUdlTMq7Sp/VBVVyar3VX+oSagFqdWqLR0TOuZzrOLYJ3VedQ/1W+pzGtwa
7ho3NeY0eTQ9NMs0P2rxaXlrVWotaotoB2rf0f6uI61D0nmos62rqpuo+1QPoWeol643pE+nb6df
pP/egNfAz6DOYM1QwfCU4VMjlJGpUbbRpDGHsZdxjfGaiZJJoskzU0pTG9Mi049momYkszZz2NzE
/Kr5jIWARahFiyWwNLa8ajlrJWQVYfX4OPq41fHi41+sZawTrPttiDZuNrU2v2x1bLNsp+2E7aLs
uu2p7V3sa+y3HfQcchzmHKUcEx0HnFidApxanTHO9s6Vzlsn9E/knVhwUXBJc5lwFXKNdX1xkvVk
8MknbtRuHm4P3FHuDu617nselh5lHluexp4lnmteul7XvFa8tbxzvZd91H1yfBZ91X1zfJf81P2u
+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
AFYGsDKsDCvDyrAyrAwrw8oAVgawMoCVAawMK8PKsDKsDCvDyrAygJUBrAxgZQArw8qwMqwMK8PK
sDKsjNaElQGsDGBlACvDyrAyrAwrw8qwMqwMK8PKAFbG5QIrA1gZwMqwMqwMK8PKsDKsDCsDWBlW
hpUBrAxgZVgZVgawMqwMK8PKAFbeeblMT08PDw/LZLK6ujpcLqdyuVRWVnZ0dPT395tMptnZWb/f
v7q6eqR+fG1tbWlpyeVyEStLJJKamhq05qm0Zk1NDenKzWazy+UKBAJra2tbW1tHbU3Oyp2dnbDy
KTbl0NBQeFMe/sZ8//79xsbGysrK/Pz8zMzMyMiIQqFobGxEU55Ka5aXl7e1tanV6vHxcYfDcdTg
56Nb+f379xFWlsvlsPJpXS5VVVVisRhWPh+tWVtbexIrb21tRVgZmY9TbMru7u5wK6+vrx++KWHl
M9Wab968+TysPD8/T1IrCoUCqZVTTJR1dnYODg6SRNlJrDw1NaXT6bq7u9++fYvWPJXWFAqFUql0
aGjIYrGcxMoul8tsNg8NDUkkktraWrTmqTSlTCbT6XRTU1Nut/vYVvZ6vTMzMwaDQalUNjc3oylP
MSWp0WjGx8ePMVH4iazMXS6jo6O4XE7xcnn79i2XKDueldfX15eWltxut8ViIZmP+vp6tOaptGZD
Q0NPT8/w8LDFYiFd+TGsHAgESGuSNR/IY51iU+r1eovF4vF4lpeXj2HlYDC4sLBgt9vHxsb6+vpE
IhGa8rTmI7q6ugYHB7mU5JmzMhnEcZeLWq1ua2vjoZxGaWxslMvlXD9+jPVB6+vrgUCALCohY6yW
lhZU7KmUlpaW3t7e0dHRmZmZ+fn55eXlo1o5fHaJpD3JiBnl0zelUqkcHR21Wq0ntLLD4RgfH9do
NGKxGBV7KqWuro4ksY4X/HwiKweDQZ/P53A4JiYmyPRVbW1tUVFRTk5ORkbGw4cP/+mf/unOnTt/
+MMfkpOTb6GcrCQnJ//hD3/405/+lJqa+uDBgx9++OHvf/97bm5uRUWFSCTq6+sj/bjH4yGJsmMs
9Zyfn7fZbEajUaPRdHR0VFdX5+fn//LLL//yL/+Slpb2H//jf0RrRqspk5OTb9++/c033/zTP/1T
WlraX//616dPnxYUFAgEApIlMxqNdrvd6/UuLy9vbGwcw8pkMnJsbEylUrW3t1dVVfH5/J9//jk9
Pf27775LTU3905/+9Ic//AHNEcUb87vvvktPT8/Ozs7Pz6+uruaa0mazeb3elZWVo1r53bt3oVBo
cXGR2x8hlUrr6upKSkp+/fXXH3/88T/9p/90//79//Af/sPt27dTUlLQHNFqzXv37v35z3/+/vvv
s7KyXrx4UV5e3tLSolAoSOaDS2KdLSuTy4VswDCbzcPDwz09Pc3NzRUVFXl5eTk5OX/729++//77
tLS0P//5z/fv3/8nlJOV+/fv//M///N33333l7/85a9//evf//73Fy9evHr1SigUSiSSgYGB8fFx
rh8/0s1P+vGVlRWfz+d0Ok0m09DQkFQqra+vLysr4/P5v/zyy48//vj9999/9913f/7zn9EWJ29K
0pppaWnff//9jz/++PTpUz6fX15e3tDQIJPJyF4ap9Pp8/mCweAxrEzyWA6Hw2QyDQ4Odnd319XV
lZaWvnjxIjs7OyMj49GjR999990///M/ozlO3pp//vOfv/vuu0ePHmVkZGRnZ+fm5paVlZGmHBoa
OnZThnezLpfLYrHo9fre3t7W1tbKysqCgoKcnJzMzMwffvjh4cOH6Gaj2M0+ePDgL3/5y7/8y79k
ZWX94x//KCkpqa2tFYvFGo1mbGyMS2IdKfj5RFZeXV1dWlryeDxkSK7RaLq6uurr69+8eVNQUPCP
f/wjOzv7yZMnP/74Y0ZGxl9RTlwyMjIyMzN//vnnX3/9lc/nv3r1qqampq2trbe3V6/XT01Nzc3N
kZv/qFYmmQ9y809PT4+Ojvb19YnFYqFQWFZWlpeX9+zZM7RmdMvf/va3n376KTs7+x//+Ed+fn5Z
WVldXV1HR4dKpTIYDNPT0y6Xi8xdvXv37qhpT27EbLFYRkZG+vr62tvba2trS0tL8/Lyfv31159/
/jkzMxNNGd0b89mzZ3l5eWVlZW/fvu3o6CAZrIimPFI3S1ZiBgIBkscaHx8fGBiQSCSNjY0VFRVF
RUXPnz9/+vTpkydP/va3v6E1o9iaf//733NycnJzc1+9eiUQCFpbWxUKhU6nI2OshYUFkvk4W1Ym
k5HLy8sLCwtOp9NsNuv1etKVNzY2CgSCsrKy4uLivLy83NzcFyjRKC9fvuTz+YWFha9fv66srKyr
q2tra5PL5Vqtdnx83GazeTyepaWlUCh01OhqY2NjdXU1EAh4vV673W4ymXQ6nUKh6OjoaGhoqK6u
LisrKyoqys/Pf/nyJRoiKiU3NzcvL6+4uLisrKy6urqhoaGjo6O3t1en05lMJofD4fV6A4HA6urq
Ua1MRsykK7fb7RMTE0NDQwqFor29va6urqqq6vXr14WFhXw+H60ZxRuzqKiotLS0urq6vr6+o6ND
oVCQQNnhcMzPz5OE5zGszOWxyBhrdHRUpVJ1dXU1NTXV1NSUl5cXFxfn5+ejm41uaxYUFLx69aqi
okIoFIpEIplMNjg4aDQaZ2Zm3G43GWMdNfPxiaxMhuQej8dut09OTur1erVaLZPJxGJxS0tLQ0PD
27dva2pqqlGiUQQCQW1tbV1dXVNTU1tbm0QiUSqVRMlWq5UEymRx0JFGcFtbW2RIvrKysri46PF4
bDbbxMTE8PCwSqWSSqUdHR0tLS319fVCoRCtGa2mrKmpefv2bUNDQ3Nzc0dHh0wmU6lURMk2m43c
+STtcdTxONeVLy4uulyumZmZ8fHxoaGhvr6+7u7u9vb25ubmurq62tpagUCAtojijdnc3Nze3i6V
Svv6+oaGhiYmJkgnvri4eOymJJmPpaWl+fl5h8NB4h+NRiOXy8VicWtra2NjI7kx0ZrRbc3GxkbS
zfb29g4ODo6NjU1PT8/NzS0sLJBu9qjD5Y9u5a2trXfv3q2trS0vLy8uLrrdbiJmg8EwNDSk0Wh6
e3vlcnl3d7dEIulEiUbp6uqSSCQymUyhUKhUqsHBQb1ezyl5YWEhEAiEQqFj3PxcuEySHy6Xy2az
mUym0dFRrVarVqu51uyiC9ri5EUikXR3d8tkst7eXo1Go9VqR0dHJycnZ2ZmXC6Xz+c7XqAc3pWT
1pybm5uZmZmYmBgZGRkcHFSr1QqFQiaTSSQSNGW0bkzSlAqFQq1WDw4OjoyMmEwmrimXl5dXV1c3
NjaOcWOSbnZlZYXEP0TMXDerVCrlcrlUKkVrfoxutq+vb2BggHSz09PTs7OzXq+X5CNPkr7+WFYO
D5eJmMkVMz09PTk5aTQaR0ZGhoeHh4aGBlGiV4aGhnQ6nV6vNxgMExMTU1NTNpuNKHlpaYmMx4/R
j5Obn7RmIBBYWFggw6zp6WmTyTQ2NjY6OqrT6dCaUSxaugwPD4+MjBiNRpPJZLFYHA6Hx+MhSiZ3
/vFak7s3SWu6XC673W6xWCYmJsbGxvR6PVrzY9yYIyMjY2NjpCntdrvb7Q5vys3NzWOEVqQpyYiZ
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
0ah5AACIBnJz27/5N/8GVj4Cd/703ZU/XtptZZ25vYJsC68tZ/7Br1TaD9sSuolmPp8vmlCepDl1
pua99qkL1J+DlRUyPp/foD3g25lb9tyGLz5OpakVSuFbSYcuSjUPAABRoc/e+Skddx6s/M0fH1z5
Y8IuKytFFXx+RV2fjYRu6j5NLdXXG5WHj9jUph7dyfSp1gj4/HK5RamzK7U2lpNHk58CJTWokUkO
eI9GW8vnv5JalPrZPp2zTzfbpxmlhFrR032Mj2vl80vJL0aj5gEAAFY+Q1bWmUW0g/vCstmyOv6r
TlOf3i5rbaltH2hrbnjF5/NLGxr67GoSW79tqevWid7y+XUaqUJV16js0rk1WlMbeb2u9hWf/0rQ
1qyZJcdUKQcaBbWvSisqRQPtYlmdJDK8U3W3UeHmwB5RZvhnyfQupVzVIKAj+tLa2s7RHvqEe1pb
BGJdZ3tbOaW6tmaVRSoWV1JvqqhVWJkEr84qbWderBRppdQrlo63DQ1q+iS1E21vawXdZroenLLm
hsr2MQX1uqmzkf76fP6r1gEpnaZWK1XCup62blUdny/os0kFfH6jnnqz3i4VtQkELY2aHaZUS8V8
Pl+440WnpILPF6ik+ll5a4NAYmIqRDshEtCntHdl2qXNDeUkzm7VyXbUfINQohW9pWrmVbNGoplo
p3+RXyFu44J4zVgb82KDUG5GhA0AgJXPoJVNIlpUArFWorHu6Km1Riar3KgUdfbU0ilukc6tUVFx
LVGeoNssb+Xz+ZIuqkmUleT1ZmVLawvV+zePKvRuZSedvn0raRRJmF/cFYgrqE9qaO4PC5R1tCx3
fpZSLiHn0ybVttAGEqhmNTpzG5PvljSLxMw58Fvq2mVCLh7VGkkOWSDWtjU30FYbU9Jp8/I+ahJd
Kaa/X/tEHxe4K+waja6OerWhQTra2Ur/VjNlX2V7LfmMV4KWRhVdgXIb5Xh6tFCrsEaE+IrWCj6/
pT083pXLKLl2W1RkVEQ+V+/WKHte8fl1/ftVpq27mfroV3WSBqlpj5pvVTXXsZMQdbLmVnqY0k6N
gVQ9MjJkaeweaCbnqUaQDQCAlc9gBrtTXB421/nqrUSkpmNilYrq60V0yKh3a3okr/j8WtWsSkIJ
rlJKwkq7pJRxVV8n5a3KHhKbOrsraPNpR6lXW/XMQRQ95UR4O87B1lWxa861TqfQu3d+1qysseJV
+xhj9D5lOQlA+3XC7fO0dlDukXVxyfkKpVTv7mnk8/ltbcyCrNnuUj6/QtmtM1FHF5vVegvj9dZR
pd7dU0f/VO+kgmC+uF0XFt1SR3N2C8gYwsVlpwWSAeoT+G0tA7tVZ5dUMAOLcppXzFhHRwX6moFa
ahafWV5HDw7aOvarTPr9Amq6fY+ar6WHF2RIwc5Y01+w3agkYy+uFXRG6mypdAi6EgAArHzGrEx3
0zZF31inuEfI/OkocSdjxAYRt7SYlnTDgIsyXGmPJHypV7dFpXfJ35KUbFgILjb1UgepbYk8SMQa
ZloSzZquvolupZFmrFtjV+t3fhZZ7dytam4W11YQ0bW169xqerhQNxB2KGmYzOoG5EzQX1Er6mlo
lTW00iF7hVJK4tROs0LexueLW9pb+BUqWf9oHZ9frnQyspdbtxP7AvJbtOo6zcw0vFzyih1I7B19
kioStNWJehpbZY0iWZ2AFjOdMKCT2xWN2rCPeDsg36cy+8IbJaLm6cGHJuKAA/oGPv9Vj405SYGk
QSRraJU1NlMx9Cu5FYu3AQCw8lmysnaivVkm6g93iauHym9WNGtdcmrWVCXbXtNUS6VhddbO8BQ0
bVkBNTU73c4mS+mIjQ4ByZwrZxcmqqOUv7MtqQRsZd/srmbe+VlKJclmlzdKGjtVlDLfamTMajV2
sRUXQNMyayERIX388kZJXaNY2CgWNlNqbKDi71nq9EQDLaWU3hSSBr6gR9RcQQfKlG7peuBOxtJO
B9MKOhilMufb2Wl+eV1LORtqR34LuorKlbORnq4bkFO/zufzmciemeOn7LtnZTo1ZJhCBLyr5vuY
8+HzS9naUMhIPpw+yVpBs0RI10BdKzU+aNHMoh8BAMDKZ8nKtMNe9YTnk21UIFnRI9FPd4RrhgiD
ykiPkfCLWaXFhW4D+rqw1DSJ2Jq1dBJYoJGHx3x12p6dbUmrOtx/3KAh/LNog1ZwMTod/lICowPi
Rp1i+1AtTKaa1iclM1pgjVy8rtY1N/e0a+ljviVRboNI71bReWA+m0+mk8lhUT4dbgpUs/TCNO51
Oo1M5ZZddLq7tmXXt6CrqKJxYNdcPuVRp7SCyUKTSntFPn3vynRrSKOQeeK9a347rc0OpNradaQV
VHJugNUtq2tns9kAAAArn5lYmc738mvrFBaFdrqnb6y9kV7E22PTkPlgfkWdclqhHhPRCWNqFZKS
mhim/kEH1nIudKPDMi41zUZsdHKVz6+Vm3r69MzasU7zzunMWdlb6s1du9t4x2fRoepbZdeATaHU
kUOVSy19JCCWWFTcodj4ntYnLTMyQd440K21K3roIFugpHcWkZljJtDsE5NvrOwO+3S+SCfTORVy
OkynQnMXtTCtlN3RREe9zLiBZIkjvx1dRRHpATr2pT1KDylKxSKNtadbRmfCa6kT3rsy2SC7WSvV
7VPzWi6tzX47kk6gN6QLpCaFdlraTq97k5gxqQwAgJXP3LyyUtojCF9jVdoglNKJU+KkUu4HDXVK
amkxHYy2sQug7JRU6AxzHxVZSlj30D6gF2BTW33YlVzkESVc7nc7TR0W3u2KobnPcitEtdzZ1IqV
QnqhdbuKMhx7TDrjzSZ+qcw2Myc92yNq2P6OjRpul7CSMnEtCdPVPZJyytfcc81s3Y1hi9Ba6c1U
5KuJ2BVn9BLxOjIFQJaCV/RIdi/1ikgPqFQCdrGVUtLG1bCA/fV9K1PHrEp7pbDsXfP0kWvJXi9y
PvRsNLXvK+yrVHabsC0KAAArn9XVXjq7QmPu0VgUWqdqW1e1JMJTa6cVA7ZjxlVaU5fUSOvWpWG2
SDW06Y7f6qoB6mTYpLpdeZQHaFBfpN/KbLg6NH39lh7NtEL7EadgVVqrQms/dA3P9ulmj7VKa1bZ
H1Z7AAAAK5/dNdi7enApsxj4hI1E7b7li/VSjbkbiVMAAICVYeVjWXmayiqffD+rztLJPdSCX1Er
h5IBAABWhpWPbOWooptV6ZwqXLIAAAArw8qnb2UAAACwMqwMKwMAAICVYWUAAACwMqwMKwMAAICV
YWVwduGhoJxqwT0IK8PKsDLYYeWtjRIATgVYGVaGlWFlACsDWBnAyrAygJUBgJVhZVgZVgawMoCV
AawMKwNYGQBYGcDKsDKAlQGsDGBlWBnAygDAygBWhpUBrAxgZQArw8oAVgYAVgawMqwMYGUAKwNY
GVYGsDIAsDKAlWFlACsDWBnAyrAygJUBgJUBrAwrA1gZwMoAVoaVAawMAKwMYGVYGcDKAFYGsDKs
DCvDygDAygBWhpUBrAxgZQArw8qwMoCVAawMYGVYGcDKAMDKsDKsDCsDWBnAygBWhpUBrAwArAwr
w8qwMoCVAawMYGVYGcDKAMDKAFaGlQGsDGBlACvDygBWBgBWBrAyrAw+jZVDz2TCe61N9yOoF943
uAvPvT/WnZmtkV//ocGceybPttAguV/fdK++6ZEXVgawMqwMzqWV/dok3j5FYMw/J/YNZaYlXIiL
jRc7I8cZLsm1Pb97jvr5xzufoP72JR7vUvIt/5EGEMY77NnFKH2wMoCVYWVwPq18J+VGQurdBK7H
T7l7OfVuQlJykil0XmJi5/046qvFG3Z9I+XTi9RPYi+mPbiS9uBKavJFphqu3gp+tPMxFcTzeLy4
B98e5bdyX17lxgwXBOZ8WBnAyrAyOM/zyrLHMVSHf+P2OrG1nrJ12tM79QVX4ngxVNwcetb64sql
2AtxsRfiEuKflD6ivBXKyrmbkHL3ukB4OyXhQhzvwqXkJAMTyRWa2m+lJFwgIkl5fNtOSTFf/PRy
UvLloqb7OXcvUoe6ekVpZRwTtD7KuRsfR39E4o0r9eqcvc/EnVn0OCEuljpsYvL1fhIB73Mm9p47
aTdiiM1SM++59lJd4osM9pX8l2R8coMOZPf/oNS718qqblIfFHshteCh3fht2g3q6yTevWlh3W+S
3Epivj7vUvJNS4A6vqzgOvvihZft2VS8rr3HnGFsTOrT+3sG0C7J9Z2h/HaOPbzSkh7cZCt/v9dz
lVXXE+kTiEuIL5JkcxMZdONSB4+LvZgjzGQOYn705O7FOPIVblwRHy63DyvDyrAyrAxOaOWcJ7E7
/NT/9GKYBWKUvmc5CZFp3jJj/rr53u7076Wn6VsbJYZS5hdoq9GvUwfPTtsjYXzFslGy16Gu2Xed
SffgvbiId8Ved+3969SZ9GdeCH/njhnZQAZJ3+f0PGdN9pC8kiLMDhr3/qCg8TbvwJJUmrm1kd/6
OCbyB1dv+UOZKWEvJL7I6C+IrNaU0qxdrcNUWtKLey+T6X8UZLC23jUBceN2cN/Xc3KuRr5cby7c
2uAa90Jc2OvbVRrL1mFskhdWBrAyrAw+upXdjxJ3zKfmFjHd94UnpfdlPZlu7U06urrc7y5Zt96/
RP/spTbX3n6NCfskOVuh7PRY1sqsflIK0tc3SnSlVJCdUpCx5fyW/G7i43t233Px03j6fxeVvhJZ
5kXyun+jxCS8wlow4kx+4NP/vfTgnnejxKu+yf36vmeykfOEVk5aU6Ttwv1Kx5Tsv5Nve9nP3f1B
lqrL9L/jxeZck/Ayo9KCR0FfZloscWeGn3k/70lT5vpGIavei/2+kqCZTA9flDnzt5zfEgs+oYLm
wvq7tPyu3owIl9nxTYIplF9Ggnt63LMVykolg48Hd7yh3NYHxJ3Xvfu8riNnHntZ6SzcCmSRs81R
Pw9qbzKJcW3uVig7J/nipdgLL9XPxUz6hIr+g8b7KVdj4hKuGAKwMoCVYWXwka3sZ/rlGJmbWR5F
nJre/ozLcCqFt9LuJiRd5ULA+P5AiSwzJmyKlAm50tpztnyPLoUHhclXWrXUobw9dCY2lgqCqRVM
+luc7YLOTMGLa6nJCYmsHXnJd4I7z2TdysavsfEpyfEpNy6GSX2fM2EC4gt0ULjjW1tYp+5a6pW7
/wcVEsldynwUVm9UrM9V2kv1i/q7vPCZ42DY1/SSXHQCFXRy6YRLNxJSkuPjuJA6/Dx9zIDpUubD
YOh5/YMYztxMZfISmPnywHOTMctkfuba+/XMX9iAOCU5ISk5/hI7DvOrwwLr2JjUx7dMVLo7v+zG
9stxV+OfVD0KYl4ZwMqwMvgEVjbQ64+2ZcnEc5R3yWyrIJnz62UiCV7CTe/GcyK/dMkzEnBfCvOf
ved2Umy47C6InUw6mgn1NkrsTEx8zc4G65Qz7sazudzMiDNhp1cvJF69mHj1YlJyAi2Ym/b9zySo
JwHx5V2L1wrFtOHi7t7xhgqDgUK/+VvWf4/2/yAm1U8+SPcinowe1rcr7aLSzSScudlfVv/XLGxC
/tLjh1xC4tLVePpT4lOSL6fcuJhWmhl+nuLdmXCq8qlcOpPbT77DyDJUuB4q3NrvdV868+3IN7pB
f6Or8QJ97tZGrvjFlR3p+gQ6XndnPEmO2ZWch5UBrAwrg49rZUa6cXfvk6Ve9qYrrHfD9+RcpCPp
wrJkNlhkOvoL9VZKBmza9rIhlFv/OCEl+Uq9MXcrlKssvUL69CL9M8ZDj+kg0p2eyk6v6siwIJma
E93yPSKxW5E2N+JMGAvyrtHRZL6y6nZZwS2x/vn+Z1JiIvFo8p1d3/oZyWxvz+OGmGnmJz3P9/0g
90Pi+1bqg5hoMqkgc7vSYq+7AhkkaE5ryiZfk/yXngxm1pfRUn9OVpalCsnbMgWlt4sK7tnDRg+s
6amZ3TgGHpcMJycZR48JtqzM1ECRPnfv11UPE0k6hF725VLfLyu9XSZMD1q/Tb2RkPrgliVUsu7O
zCHxcUJSv/B6UnLCk1JqAsKuvU9qhhtOwcoAVoaVwUezciiLxHYpVVnh67EvZT5k8ttMhvNC2tOk
VHZx0hPJMzYxy4ShjFmpVUW5Oaw80p8msQuMt3VFZ0QvssEZlddlwruEyzlPr8WFZ8gjzoTdXX3p
RkJSArcuKX//M+EWi8WklWZs7ZUZLtLm7twQHNNqLdzvg9iquEJ9UCgzlZ1f5yqNzlrns3PhvCQu
L827TM3IBpiAlRcbX2/MFzMzvheSkhMuscupwlaJs3PqCdsvsjlzKg2ge3GRTWCwv55820+NXfZ6
nV3axou9mMJuAKMGClZmSVfcjSs5T6+R6YPEggwmfcLjJT24nvM4IW57aRisDGBlWBl8VCuzuc0i
fX74fqH09hxuLRhn08QH10heOqUgw0RWD9HyowJuerESWcVtl9wMz4jG3bimtBZyz8Hg1lXxqG1R
VEdvaed2/lxIYpd3CYzPIs9k43lrZnxYovWKjN65e8CZMAvH2JXhYVPptxj3+yKER4Wb+32QriBh
OznsJtEnOQJTaSQ+Xrc+DF9rfenuTRPzKduroKkV7M709LAl2EmP77hC4Q8bucXbOW4IX6FGrcsL
ZO789XvMAul9XrfsaJSYnCaSjs7d8U15vJRM+v3u9LQdy8MvvmzPwn5lACvDyuBsPAc7lGu35rjc
+Uf7FXO2xZzN/ZaFCPIq5U6vNcfl3LH5dd33zG7N8R9iiW/Q/cxizrY7D/tczPVArt+Xv36Mh3Ad
8YMinvthMWbvWWlBX24wwAWdhV5rjsWc4/Id7/mm+XZqJVf2rk/Z53XSKNZnwdAe39RizvHurH+v
lWpBi/XZOp4iAmBlWBmcIStHA7Jw6ZBzkwB/nQLAyrAygJU/HrlFNy7QG4eew1uwMoCVYWVcQLAy
ALAygJVhZQArA1gZwMqwMqwMKwMAKwNYGVYGsDKAlQGsDCvDygBWBrAygJVhZQArAwArw8qwMqwM
YGUAKwNYGVYGsDIAsDKsDCvDygBWBrAygJVhZQArAwArA1gZVgawMoCVAawMKwNYGQBYGcDKsDKA
lQGsDGBlWBnAygDAygBWhpUBrAxgZQArw8oAVgYAVgaw8mdu5f5phainsaLmTfGrYj7KGSuwMjhd
K+Me/FxKYVFhaUVpg1ioGO3Su9Sw8mdpZd2sqr5DWFRc3C6VjtkctqXA/ObW/OZ7cHaAlcHpWhn3
4OeCMxgye7zy/v7yyjfVdZUaixxW/sysrHP2lVeViyRdjpUgLmhYGQBY+XzgebepHBri8/lHEjOs
fMpW1s2q+Hx+p0KBKxhWBgBWPn/ozFP5+fmaKTms/HlYWdhaK5bLceHCygDAyueVfsNYeVX58JwK
Vj7rVtZMyYuKi2dDq7hqYWUAYOXzy1aFoFqmE8PKZ93KLdLG7r4+XLKwMgCw8vlmwDgubBXCymfd
yuVV5ROzLlyvn4uVUVBOseAe/KyxLQWKX5XAymfdykUlxVh3DQAA5x7X+kZ+fj6sfNatzOfzsS8Z
AAC+BPh8Pqz8WVgZFysAAMDKsDKsDAAAAFaGlWFlAACAlWFlWBkAAACsDCvDygAAACvDyrAyAAAA
WBlWhpUBAADAyrAyAAAAWBlWhpUBAADAyrAyAKfN+tKYxaK3zJhXNqn/vgsaqf9ajF7mgbIOj1Nv
sYzO+vc7gsNLvWHCi7+fBmBlWBlWBuCEhJxv+VRptyzR/7VX0v/lSy0e6g1rmgb6v4qZ/Y4wOdzI
5/MrtfhjLQBWhpVhZQBOytpAJ6XdShXl3TmXnkiZL9DaqUja207/r3d231DYPEr9fuOoF5UJYGVY
GVYG4KRYJ6S0hgccm+8tY1LGynzRxOr7eZ+J/HtylX6nzdjaIKAU3tDZZ/F4wqz8VqHX9HdWCgSV
DVKdC39ODcDKsDKsDMCx8PjNtHobJ1Y3RhUCPr+xvZNKSmu8G3aLgpaycW7z/Qz5d1hpHfNyVo4o
Wu8aKhbAyrAyrAzAMVjqplXa5/D0NfD5DQNjlgE+n9856Rntp/TcPuGbf+cj7m0f88xvvrdMqpjJ
53eclRt13tU5v72VmZY2u1CxAFaGlWFlAI7BGG3fRoWqkVbtbGCGSlN3qtrppV4638b8qqeRtm2l
qLO9U9oqauSy3My88rAnfJqZ3zA6i4oFsDKsDCsDcAxmHdqwvLRvftPfvp2NVs1Qy748JAiubBA1
ikSNnZ3tCmlr54BlPXK1l2UMVgawMqwMKwNwElZdjayE+1xr1MJsEfPfSpWd3tbMxMr0T9/Pr3i0
YybtxIydy2A3aGfeUSu6tVJqORi/04QMNoCVYWVYGYDj7o9iNNxoDJFdyMz/5Q6yoHpzVCUgW6Za
pdK37KIuR/hqL4GosYH5Z+8slmEDWBlWhpUBOC4Wsj+qgd6mvPl+dlbPzByH2Pe8C2pVou3EtmjA
HAqbSOYLKtmftI+6PKhSACvDyrAyAB8b12rQ7l+yr+z1UJF3a46VZcfqBmoJwMqwMqwMAAAAVoaV
AQAAwMqwMqwMAAAAVoaVYWUAAICVYWVYGQAAAKwMK8PKAAAAK8PKsDIAAABYGVaGlQEAAMDKn4WV
tXYlrAwAAF8GW7DymY+VXer8/Hz3xiau188RHgrKpy246T5rXOsbBYUFsPJZz2BXCN4YZmy4Xj9T
K29tlADwaYCVP3cm5lzlVW9g5bNu5RZpQ4dMhusVVgYAVj7fKLTaho56WPmsW1lrVxYWF037FnHJ
wsoAwMrnlbm19aKSYrVZDiufdSvr3Zo2RVP121rXOv5CDqwMAKx8PiktLxe21h5SCrDyKVtZ79a8
bRZU1dZi2ResDACsfP4Qy+V8Pn94TgUrfzZW1rs1dW21b6orJ2ZduIJhZQBg5fOBYyXY2iV+Iygf
cvQdXgew8pmwst6t6dS0lrwurql/OzA+ZvH65je3cE3DygDAyp8dtqXAiNXa1CEqLC5skdbrZlVH
cgGsfFasrHdrdLOqbm27oKHyVVlJXh4f5SwXWBl8YivjpvtcSlFJYUVtebuyeWBGcQwRwMpnyMrg
MwJWBp/YyrjpvhBgZVgZwMoAVgawMqwMYGUAYGUAK8PKAFYGsDKAlWFlACsDACsDWBlWBrAygJUB
rAwrA1gZAFgZwMqwMoCVAawMYGVYGcDKAMDKAFaGlQGsDGBlACvDygBWBgBWBrAyrAxgZQArA1gZ
VoaVAawMYGUAK8PKAFYGsDKAlWFlWBnAygBWBrAyrAxgZQBgZVgZVoaVAawMYGUAK8PKAFYGAFaG
lWFlWBnAygBWBrAyrAxgZQBgZQArw8oAVgawMoCVYWUAKwMAKwNYGVYGsDKAlQGsDCsDWBkAWBnA
yrAyOA9WDuTIhLeeZF5Lz7z+supbi7vwjFvEpX9YL7wn0z/7WB8RetZaequo9J49dMhfKTRI7tcL
7/Wbc4/1iYW6pttFBbfF+uewMoCVYWXwRVvZ1JQUx4soMa3WY4k5lJmWcCEuNl7s/Khez32ZQJ1l
YkHGR/qIoP4WqQel75C/8iyd/oU0yfEGCjlp5Nfbc2BlACvDyuDLtbK9/Rpr4os5Bbdz7sYw/7t7
b/0YB3TepwUfbwh91NPOSqHPsUib+5E+Yt368Mnja09efOs/5K/4HiXSFhc7jxea55RlXk9/nKR0
FsLKAFaGlcEXa+VsEqLxEq5bGI/mC26Ql657A1lPkhOSkq/p6HgxaLyXeiM+5fE9WlSFpvZbKQkX
6HdeSHl82x4qsffcSbvBSD01856L5IGfXrnEeP5CWmk6Mb1ffyc1OSHt8c2yp1cuxVKxtUCdrRMm
JVJxdgz3tp3ayyp6nBAXeyEuISHn6RXa/Rf76RMzSW4lMWfCu5R80xIgnsvKuZuQevdaWdXNFOqw
F1ILHtqN36bduBgXeyHx7k3m+4aetb4g53AhLiH+SemjIP1xuqrraQ8uv2zKIsdJuXtdILxNHYd3
4VJykmFXAO3X3qQ//4plY/9TIt/iQTz5rJelt9LvJqQ8uGUPlQSN99PuXk5/+i35dKpur8ZQb4u9
mM6eEqwMYGVYGZxzK3t7kogvW61hgrFmKtWP+rXZS0wWl5GfoSCe+t/VW/6NEkNpAlFOXCyj3Esv
MvozL2ynwGOve30ZqZGJcV5KVdbWRkn/04u8g8quvLHzYdLudyUkeTfyWx/HRL5On2HQePvAj+Al
lWZubTzLSYh8vcyYv7XxnLyeKsxeN9/b/buXnqZH1CRTOcl3gvuf0pb70T7fIrxu81sfRP56WlMO
rAxgZVgZnHsrF9bfvbDtjN3zzUS9V2/6SQydTE/lvsjYCmWSBHJKARXU6kqpWDOFmuLNeZJALEKp
V/aYPnjsZaU1dyuQ/ZIOweOoxHhu0VX638m37IHnrIRiBPrn9vbrZByw08qFreQ8eQli83OX9jYJ
vi89fuhXkwiV96Qpc32jsL8ggRtGWKou0/+OF5tzTcLLzJig4FHQl5lGjySSXmSQADcu4XK/u2Td
ep8c9qU2d8uXTqejLwjM+WyG/8JLSc5WKDs9dk8rM5WTVJC5/ykVtj4I+xb6O4nkW2Q+Cq9bNubm
PWnKWg9kkkxG3ONHsDKAlWFlcO6tnPvyKpFB+gHOprVBTeUSQ+Son2/5Hl0Ki+QSk6+0auklToEM
Oha8UG8uZMXGe6nO3RFNXr3lD2Qws8L6fFreMbR4HoblgRMMgd1TtrQvaQUSqac1/VJ/l5bWg293
LtG6qGQVSE5+R3qZHVJQJxZ6phTeSrubkHSVC0/j+wMlQe0t5jRCJbLMmLCPYGLryDVZIaZyXmpf
7HtKtvQ9v0W65Bn36znqZ+S04+7eZ37dnWMyZlmc+bAygJVhZXDerczKgAp/uR1HPTcTr8Yn3rhm
CjBx4ROyqNhKlnHFyNz0GrGe20mx4UnWC2JnSVBPksaXTaESNmTkctFMfJz4ImPdeIfz39bGMxJe
p9OfontBm/vG7fCZVPZQCTqi6kA6yQMLjD+xMmPEb2Fi4muWjZwnsbsOm3xnfaNk3XyH0aSbiVDp
gcXlRCaffNPL5eepFAKTyibH2XKT4Qg97AivSaZyLip92fud0gjzLeKZb+F7eImZOygMq1vmtJ/0
MPuj1kOF6yGs9gKwMqwMvqRYmRd7pZ9e+uvS3rnEpEwfcsHuk57crY38epJnjr1u38itf5yQknyl
3pi7FcpVll7hsYEvk/FOvhOm0gv19Iy1XcLMqNabCy3CK9x8KhsH03LayC+7ETlKCIt0L9IDgkLZ
03gmkPUwMXdaUzatzHTy36SCjC13mPPYwyYVZFJn0nSFfBEHMzhgDluWzMXW+SRJkPg0nUtl19P7
xNgvdTlihblXcp0c0xXY95S4zDa9bvyZgMnbXzGFSlzsr9vZrACZSDYxSXhmBRmsDGBlWBmc89Ve
yrBVV9y6LV7sNWp9MmsIXmxMIrskKu7B/fWN3BzmnRfTnyYxi65jr7u213DFpJVSXmT3QMeksAuz
4x58u75RKKZT1pcyw1PWVHi9FcpM5ZLke2wd5vFiLyYlhK+fYpLAlPaS49mPu2wIlPjVSZzzuMOS
1DGTMH/wLfueC2lPk1LZw9KJgew0NmBlP5o+vY0SXcEeoTy3eI3OWu97SuvWPVaN0avDmFag6/Y5
W7cxKckXeeGCh5UBrAwrgy9gZ1Rua2b8jjXSmfdcTCCYK2DWWPHirjKCSaVXUNslN8OfOhJ345qS
DiVNwivhS5RNTdd3LCRmdvgwAXo6PTVrYMPrIL3Q+hKTW46c4ZZlXuTEfIm3PRe+bn2YEr40+u5N
k4/oM+yw7oeJJGHu2/50SnXuR9zvJj64RhLy1Jo1Jj6mYmgmWmU0nE8qJCKUp5LzdCyeJsw+4JRI
vV1iE+ZxXFjP5vZJ3brUt8LqNianPQv7lQGsDCuDL+vZXkFntkGfZTLneAO7fuR+7vXttdQolGs3
Z1vM2S73jp+uB3L9vnxut/G6L8dkzrabc/wnnhz1O3Ps1md77dzNtRiz7daciDM53Mx67jF/8UNj
nchTCmSXvbhZVHCLPFAzaLyfuL0La/fTT59RK7yiUWmwMoCVYWXweT4HG3zkp7WwW7cvJN5g4/4b
t/1n5gxhZVgZVoaVAaz8BWGX3Oae9sXjxaSXPvKfpdODlWFlWBlWBrDyF8d6qDAYyF8/eycGK8PK
sDKsDGBlACsDWBlWBrAyALAyrAwrw8oAVgawMoCVYWUAKwMAKwNYGVYGsDKAlQGsDCsDWBkAWBnA
yrAygJUBrAxgZVgZwMoAwMoAVoaVAawMYGUAK8PKAFYGAFYGsDKsDGBlACsDWBlWBrAyALAygJVh
ZQArA1gZwMqwMoCVAYCVAawMKwNYGcDKAFaGlWFlACsDWBnAyrAygJUBrAxgZVgZVgawMoCVAawM
KwNYGQBYGVaGlWFlACsDWBnAyrAygJUBgJVhZVgZVgawMoCVAawMKwNYGQBYGcDKsDKAlQGsDGBl
WBnAygDAygBWhpUBrAxgZQArw8oAVgYAVgawMqwMYGUAKwNYGVY+NFq7UtTTWFFTXvyqiI/y+RQe
CsqnLbjpPpdSUFjwquxVnahWOtShd6lh5c/Jym2KpsLiwpbuVu3MsClgsW3OAgAA+KyxhGzjvkn5
sKLybVV5dVnfhBRW/jys/LZVUPW2asxrwkUMAADnkr5xDZ/PV453w8pn3cp1bbXlVeXWDQeuWgAA
OMcMO0fz8/MPHzHDyqdg5a5+0evy11AyAAB8CQxYtK/KX+lmVbDyWbSyblZVUlqsc4zgSgUAgC+E
6nqBZKANVj6LVpYOdVTVVeEaBQCALwfVuKa2uQZWPotWFjRWKcdUuEYBAODLwbxiLSwuhJXPopVf
lZeMeSdwjQIAwJeDdcORl58HK59FK/Pz+LhAwcfBafabRl3G0VnDqGdq+ss9BwDOInw+H1Y+k1bm
w8og+ozblHWRjxiq17is5+cc3jmmVw+5bWFGIaI+Wr+KCwPAyrAyrAw+NVaVopaRoKC+TdUlVjRz
VlR5HefiHByqTupQSq/tw29eNbyh3isyvsO1AWBlWBlWBp8UG9EVn9+smZ2aYV+fWTG0CahX64aN
5+IczK1EtIfLok/6zEafFZcHgJVhZVgZfNrE9aSI1mGHcT3yRxaHlI5cFRYmgjRrhrvqGireCCre
COolEwYr+06TVdEqlQ55TYPDHTWCCvGkmeSB9ZOK1s76mobaOpFIPjE6/bHPQSGnzmFU2iiiPrRR
Kh3y2egfKdsUzXT4y69TyEdD1Pun/UaltquOOrf6moZ68fDA+KqTOZRNLVbJh/yOgw/Lpbv3+5r7
VAsAsDKsDMDeU60mOoLkS2yWPSdiLaEZS4iSk3lW/YZJJ9fWNDD/etOvp+Na54CiInwqWO6xWf36
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
/wJe8kOgeegChAAAAABJRU5ErkJggg==

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/overview-ejb.png

iVBORw0KGgoAAAANSUhEUgAAAocAAAF+CAIAAAB/Ayf5AAAWK2lDQ1BJQ0MgUHJvZmlsZQAAWIW1
eHk01t/b7v58nvnhMT3meZ7necg8zzITmef58RijMqRCiZCpFDKGBiGJECqSKRSKSoiKkDK+S99z
fr9zzjrvete71jnXP/ta99rr2sO1177vdQPA9NsjPDwYpgEgJJRMsjbU4XZ0cubGvANYQA0oAA5w
eHhFhmtbWZmB/xS/JgB0NI5JHGn95/P+r6D19on0AgCyAgCEeUd6hQAAPQUA6HmFk8gAwEgAwHAM
OfyIjwMA6EmOTs4AwEtH3O8fvnfEPf9yBM3fObbWugAg+AHAUnp4kPwAoJAGAHBHe/mRAaCwAgBN
F+odEHq0PABoDS9/D28AmCoAAOIhIWFHfBgAIOz5v+j4/W+anv/S9PDw+xf/5yx/waAbFhxG4jbT
1ePW9QgO8CR5kH28/5t3818iJDjqf6535AClT6idzdG+AQDsQBeEgWAQBkiAG5gBXaAHuIEu8ADB
IAB4AhLwAGTgA7zJPrHkIwHdsPA4UoCfP5lbOzw82Eec2zjUS1KcW1ZaRvr/9bb/v+Lo/f7DNqz/
3grE+PrfsZAUAFRyAYBP/DvmNQdAyzoAuC//jglEAkCVAEDfilcUKfqf2NFTBCiAB9SAHrAATsAH
hIEEkAWKQA1oAX1gAiyBLXACJ4EX8AchgARiQAJIAmkgA1wBeaAIlIJyUA3qwX3QAtpBF+gDA2AY
vAHTYA4sgBWwBn6BXQiCMBABIkIsEBckAIlBspAypAHpQ2aQNeQEuUN+UCgUBSVAKVAGlAMVQbeg
Guge9Ajqgl5AI9BbaB5ahn5COzACpoTpYQ5YEJaClWFt2BS2hV1hPzgCjodT4ctwAVwG34Gb4S54
AH4Dz8Er8BYCICgQjAgehARCGaGLsEQ4I3wRJMRpRDoiH1GGaEC0IfoRY4g5xCriDxKNJCK5kRJI
NaQR0g7phYxAnkZmIouQ1chm5DPkGHIeuYY8QBFQ7CgxlCrKGOWI8kPFoNJQ+ahK1ENUL+oNagH1
C41GM6KF0EpoI7QTOhB9Cp2Jvo5uRD9Fj6A/obcwGAwLRgyjjrHEeGDImDRMIeYOphMzilnA/MZS
YLmwslgDrDM2FJuMzcfWYjuwo9hF7C6OBieAU8VZ4rxxcbgsXAWuDfcat4DbxdPihfDqeFt8ID4J
X4BvwPfiZ/AbFBQUvBQqFMcpAijOUhRQ3KV4TjFP8YeSjlKUUpfShTKK8jJlFeVTyreUGwQCQZCg
RXAmkAmXCTWEHsJ7wm8qIpUklTGVN9UZqmKqZqpRqu/UOGoBam3qk9Tx1PnUD6hfU6/S4GgEaXRp
PGhO0xTTPKKZpNmiJdLK0FrShtBm0tbSvqBdosPQCdLp03nTpdKV0/XQfSIiiHxEXaIXMYVYQewl
LtCj6YXojekD6TPo6+mH6NcY6BjkGewZYhmKGZ4wzDEiGAUZjRmDGbMY7zNOMO4wcTBpM/kwXWRq
YBpl2mZmY9Zi9mFOZ25kfsO8w8LNos8SxJLN0sIyy4pkFWU9zhrDeoO1l3WVjZ5Njc2LLZ3tPts7
dphdlN2a/RR7Ofsg+xYHJ4chRzhHIUcPxyonI6cWZyBnLmcH5zIXkUuDK4Arl6uT6ys3A7c2dzB3
Afcz7jUedh4jniieWzxDPLu8Qrx2vMm8jbyzfHg+ZT5fvly+br41fi5+c/4E/jr+dwI4AWUBf4Fr
Av0C24JCgg6C5wVbBJeEmIWMheKF6oRmhAnCmsIRwmXC4yJoEWWRIJHrIsOisKiCqL9osehrMVhM
USxA7LrYiDhKXEU8VLxMfFKCUkJbIlqiTmJeklHSTDJZskXyuxS/lLNUtlS/1IG0gnSwdIX0tAyd
jIlMskybzE9ZUVkv2WLZcTmCnIHcGblWuXV5MXkf+RvyUwpEBXOF8wrdCvuKSookxQbFZSV+JXel
EqVJZXplK+VM5ecqKBUdlTMq7Sp/VBVVyar3VX+oSagFqdWqLR0TOuZzrOLYJ3VedQ/1W+pzGtwa
7ho3NeY0eTQ9NMs0P2rxaXlrVWotaotoB2rf0f6uI61D0nmos62rqpuo+1QPoWeol643pE+nb6df
pP/egNfAz6DOYM1QwfCU4VMjlJGpUbbRpDGHsZdxjfGaiZJJoskzU0pTG9Mi049momYkszZz2NzE
/Kr5jIWARahFiyWwNLa8ajlrJWQVYfX4OPq41fHi41+sZawTrPttiDZuNrU2v2x1bLNsp+2E7aLs
uu2p7V3sa+y3HfQcchzmHKUcEx0HnFidApxanTHO9s6Vzlsn9E/knVhwUXBJc5lwFXKNdX1xkvVk
8MknbtRuHm4P3FHuDu617nselh5lHluexp4lnmteul7XvFa8tbxzvZd91H1yfBZ91X1zfJf81P2u
+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
5s0bp9Pp9Xr9fv/a2tonrOz3+71e7/v379++fWs0Gpubm6uqqh4+fPhP//RPOTk5v/zyS1ZW1l/+
8pfMzMz/hIKCgoKCgrKjZGZmXr9+/a9//Wt2dvbdu3fv379fUlLy/Pnz9vb2/v5+m802MTExNzcX
CATW19djWnlra2t9fZ0MWXa73aOjo69evXr58mVDQ0NlZeWjR48ePHiQl5d39+7dv/3tb3fu3PkH
FBQUFBQUlB3lzp07f/vb3+7duyeTyQoKCkpLS6urq9VqtV6vf/369bt370hXrw8fPmxsbOxm5Y2N
jZWVFZ/PNzMz43Q6h4aG+vv7tVptU1NTTU3NkydPSkpKiouLCwsLH6CgoKCgoKDEKHK5/OHDh2Vl
ZZWVlS9evFCr1TqdbmBgYHh42OVykfR1MBjc2NjY3t6OaeXNzc3V1dXl5eWFhYWpqSmHw/H27VuT
ydTd3a3RaJqbmxsaGmpra58/f16NgoKCgoKCEq0olcqampq6urqGhoaWlpbOzk6DwTA4OGiz2ZxO
5/T0NAmU19bWPn78GNPK29vbHz9+XF9fX1lZ8fv9c3NzU1NT4+Pjw8PDr1+/NplMRqNRr9frdDqt
VtvZ2dmBgoKCgoKCsqN0dnZqtVqdTmcwGHp7ewcHB9+8eTMyMuJ0Oj0ez/z8/PLyMgmUhenrSCvz
4fLa2tqHDx+ImD0ej8vlevfu3ejo6NDQkNVqff36tdlsfoWCgoKCgoISo5jN5tevX1utVpvNNjo6
6nA4JiYmZmZmFhYW/H7/ysrK+vr65ubmJ6y8vb1NWpfX1tZIxLy4uDg7Ozs9Pe12u10ul9PpHB8f
f4eCgoKCgoISuzgcjvHxcafTOTExMTU1NT09PTc3t7i4SKLktbU1EigL09dRrEzC5Y8fP25sbKyv
r6+urpKg2efzLSwszM3Nzc7Oer3eGRQUFBQUFJRdi9frnWPL4uKiz+fz+/0fPnxYXV3lo+QIJUe3
MhEzSWXzbg4Ggx/YEggElpeX/SgoKCgoKCi7luXl5UAgQOwZDAaJjzc2Nj5+/BhVyTGtzKeySdxM
9EzKOlfWUFBQUFBQUGIUXpfEnpubm0TGxMdRlbyblSMMTcoWCgoKCgoKyj4Lr9FPCndPVkZBQUFB
QUH5AwqsjIKCgoKCcljK/w8pzN69e+itlQAAAABJRU5ErkJggg==

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/note.png

iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAADAFBMVEX////BzDAbRRYmUiBDdzZb
hUUYQhRCdDRMfDpqjlQhSxslUR8oVCF4mGMZQxUdRhceSBklVSM+bzFAcjPCzTAaRBUdRxgfSRkg
SxsjTh0lUB4jUSArUh4oViIqVyMsXikzYSo1ZSuMpnjS2HAYQhMZQxQeSRofTh4jTRwlTx4hUSAm
UR8nWCUsWSQtWyUuXCcwXic8YTI3aC45aS46azA8bTA8bjFJZj88cDM9cTRFeDdFejhGezhHfDlJ
fTpYeEpaekx0jS6Io3SZqzGVq4GntjCvvTC6xzG9yTHAyzDG0C3N1F3d4dbz8/P9/f0ZRxolTBkh
Tx8oTRogUiEkUSAjUiEkUiEqUSUsUiYmViQpVSIqVyQoWSYtWCMwVig0Vx8wWCk1VSw0VygzWiIx
YCgvYSs0XykzYCgwYis1YS00YyozZSw0ZSw4aC08ZTI5ai45azA7bDBHZTlEailEaDhIZzpDbTRD
czNBdDRBdjZDdjVDdjZCdzZIdjdCejlGezpJejhKejZKeTxWdixIfDlIfjpKfjpKfj1PfzxSfUJW
gDVgfSxQgj5YgjZWgEZlfypYgkdThzxXhkNZhEljgERhflRjhjNbijtkgFdnflxihE5ciEppf15h
iFBfik1nhVpjkDxkjE5kjFJrh11zhGlpjlNojlZwkjpskVZukVh1lUJ2mzt1lV17kG19mjZ5nDt2
l193lWh4lWd4l2F+knJ9nzt5mWV6mmOInTaEmnaGmXmPpDGOpTWPpzaFonGHonSRp0SHo3OVqjOP
oIKOooGZrDGVqFKLpniVrjiOpX6ZrjSQpoCYsDiRqX6jtDCjtjOdqZKcq5CgrJaqvDWuvDWtvzSp
uV+vwDSitZKktZWzwjO2wzCmuJe3xTCuuaW/yjC8yEevvaLAyy/DzS/Ezi/Ezy/Fzy62v6y4vrK3
wK7Fz0a8x7DL0lzAx7e/ybPBybfDy7zP1nDH0LzM08TN08bP1sbW3M7Y3NPf4OHk6ODo6ufr7Ozt
7+r3+Pb6+/v8/PuD+5XzAAAB6klEQVR42mNggIJ3pzdN6Nt48vV/BhRwZ17Phn1KSge3T5p9A0nY
Z1nrChcXJSen42evrbFb9A0m/rXdbuH+bbwgsFn52Cwb208Q8Z/1LW0rOcFg6QHlK1Nqbet8wBJz
rW06WCFglTKj544yduvJIPGHlVZWDRxgsPwjI6OnR1phVc1NoERnNQsYNPbufcPI6OHO2KwgzNLE
wPDZkh0Eutad9/ZmZGR8cJXxqJ5JheV7hiMWwsLC5XsYIeCp1H1Gt9gsIYudDIvNhISETkHFGV+V
PmF0S9YzNpvP4GBiajoNJi5SdEaEkVEySrHAgcHeKN/4EEziOtcjRkZXTWYFI3uGGdm5ineh4reS
TgA1OEpwp+RMZdiVqpi+G2yM12WBBY8ZGc9piHMbZKxl+CCvoN8NknDfKjYRSDnLiInzGMg/Z2DI
k9eVcfViXM3EtP7Zbcd4JiZ+Ljn9TKDPL8ZEa8gU8/FNd+4P4ufjE2US19bVOQwKrBJBWTVVNrYA
NiBQZRLg4paLNASH7ndBHQl+JiZRFRVRfgEuKR45QcEvkAh5qR6sJikpISbApanNIysbFnoPGoP/
XiT6q4dwS3Ez8/AwS2sZvoVFrZ/vjyVxgdLMQCCtlbDlLyIx+Pn+/nVpjnlEuPnMC3+gYgASQI+q
WBZeAQAAAABJRU5ErkJggg==

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/container-magic.png

iVBORw0KGgoAAAANSUhEUgAAAfIAAAEoCAIAAAAsVuTOAAAABGdBTUEAALGPC/xhBQAAAAFzUkdC
AK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAFtZJREFU
eNrt3X9oHOedx/Fn1yFyjpxlp4e8R4gsRBG2aesfkKCmmAQ5iSmXrf64pFgGF+Na6lTgf5wNGGSl
/lFDIGv1j4CjrnOQYJD1h+8Py5jgRFZSDMqGu1pe52JvdUWsNxwn6fBJyoVWDpfVEX+bp3PzS7M/
tTN6vxBiNTvzzDOzu5/97jOjnUihUFAAgLCIsgsAgFgHABDrAABiHQBArAMAsQ4AINYBAMQ6AIBY
BwAQ6wiZgwcPshOAZUX48gAEpgaJRnm6AlTrCLN8Ph+NRnt7e80Te3t7o9FoPp+v3ruLRWdn5/Dw
cJkNruBuTKfT/f390o3+/v5MJuOze7XvuTziAwMD9odgbGysqO3y2BD/C2rSpeo964pTAALC8ema
SqWUUqOjo/Ln6OioUiqVSlW1G46SyWQ5Da7UXh0aGrJvy9DQkJ/uldPzXC5Xwh5LJpNKqVwu5/gQ
6KeBn+1y25CiFjRvTjnPgQo/RQkLBDrW5+bmlFLxeFz+jMfjSqm5ublqx7r9JR3EImliYkL23sTE
hJ4i+1BPqdKmldDs9PS0UsowDPvi8naunwZ+tsuxM8UuaGYYRrWfe8Q6VkWsFwqFkZERqdTktW0p
rLLZrLzeDMPIZrNusWL+U27LK1xCxE+sS6Xm0ez09HRfX58u7aenp91Wrfvc19enZ5uYmHDcELdm
3abbi19LYMmG68JT7434A+Pj445b59Y9czLqh8Y+ZuCnt/qBdnwUzFP8bJfjsn4WdOuqPP3M+4dY
B0qMdSnSNUumWxJEJ86ysS7s4zluIzBSpnk0K6mn9fX1ea/aPJt9Q3K5nHezbtP9lMzeXbIX8h7d
s9xlDmVzrPvprR6BcavW9Xuwn+1ynO5nQbeu1s84DLGOMMS6vKoto6uFQkGqKikSZczUMUwdg0yW
sn+mdhtbd6wi7c26NWhftQ5EvSGSaBIf+v3Gu1nvMQH/sT4yMqLrZfs+9Oievss8hOK2o7x7KyW/
x6OgH/2qxrpHV80DQcQ6UFasu70glw3ZYl+3jisyD+x6NCuZKLFofvvx0yt7hOn4cGvWbXppsS57
Q45k2Hvr0T2fCVtsby2rMwzDbZdWPNY9ulonh1g4wRFw1tjY6HPOjo4OpdTly5e9Z3vxxRdHR0eT
yeS9e/eee+65gYGBcrqnV+fWrJ/VybBGOp22nBeo7yphb1i651NpO0cH2dmzZ+VR8Lldbqdm+tkh
lX0cOcERVOvFVevLDsLIULs+p81PzWW/d3x83FKtOzbrXXh6V+vmUY4yB1XsBwPNB0LdzoSRstTP
IIzjQ5DNZmUQZtkq3uMu+yCM235YdrtkfFyeGLJRMjrkZ4d4fxy0H2NnEAaoZKx7HMrTJzPYqxw/
sW4no88ezVruspxq4h3r9g3Ri7s16zbdwud5696HnT26Z7lLtyxZqUfh/fTW45BpsdulD8bYx+WX
3SFuXeWQKVCLWPc4wVGfpmYYhtRoJce6eWDXo9m5uTn556llT3B03Kjx8XHZkHg8bk4Zt2bdpjvW
tjqq+vr6LGWp5QRH871+uud4gqN5ouSgn95KFrud4Fjsdo2OjuonhmWI3HtBt65K1V8PJzjynTAI
DL4Tpq4sLCxs2LDB7ZBpNczOzsZiMcMwzp49W4c7pLe3d3BwcG5urtjjEJV/pfDsBFCs4eFhyXTL
SdxV1dTUlEwmBwcH6+WrV0zy+fzg4GAymVzxTCfWAZTis88+k0w/evRoLdf70ksvKaUuXrxYbztE
uiTdW3EMwiAwGIQBqNYBgFgHABDrAABiHQBArAMAiHUAINYBAMQ6AIBYBwAQ6wAAYh0AiHUAALEO
ACDWAQDEOgCAWAcAYh0AQKwDAIh1AACxDgAg1gGAWAcAEOsAAGIdAECsAwDUQ+wC1Ll0On316lW5
feLECaXUnj172tvb2TOAo0ihUGAvoJ5NT0+3trYuLi7Kn2vXrp2amorFYuwZwBGDMKh3sVjMMAz9
p2EYZDpAtY6QFOyU6gDVOkJVsFOqA1TrCE/BvnXr1tu3bxPrALG+uuzcufPmzZvsh+Davn37jRs3
2A8g1vEX0Wj0g9zn7Ifger7lCV6VKCsE2AUAQKwDAIh1AACxDgAg1gGAWAcAEOsAAGIdAECsAwCI
dQAg1gEAxDoAgFgHABDrAABiHQCIdQAAsQ4AINYBAMQ6AIBYBwBiHQBArAMAiHUAALEOACDWAYBY
BwAQ6wAAYh0AQKwDAIh1ACDWAQDEOgCAWAcAlOohdgEq4vmWJ9zu+iD3+fMtT3yQ+7xS7ZfQVPkd
AIh11EIul2tpaamHnphDs+IZammwhPbJdKweDMIE27vvvtva2vrOO++E+3OAJZSl/OfRB4j10Bbs
Bw8eDES4P9/yhPw4TiwqqXXQy1L2FszTzWM4bvNbJvK2geAqbhCmo6Pjo48+Yq/VbbifPHkyEEW3
vu1zdEWHrNu99pa9W/PuCZmOVRTrY2Nj7LK6cuIBuX3gwIHXXnuttbW1Prta8ui2JfftE91aLna6
eQaSHasl1lGfJNDr5NhpCVV8CRHPmS0AsR5OzzzzzNTUVEADvcwqHgCxHkLPPvts6LdxFRbmkUiE
5zbE0tJSsYtwJgzqK8H9TLcfaK1NNwCqdWAZloOTjlW5PlPFbTZzI+UcmDU3QrIjwJ/2CoVC7dc6
Njb24Ycfnj59WimVSqVeeOGF5ubmchqcnJw8f/68NJhMJhOJhFKq9psWjUZXZL2WPqyqIYsqDdGs
4MjP8y1PlPC5G2FVwpNhBar14eHhffv26T97enqUUtlstq2treQ2X3311cuXL8vtdevW1Wxb8vn8
xYsXjxw5wpOPtwdglVbrmUxmx44d8Xj8zTffbG5uXlhYSCaTp0+fNgzj7NmzgSuT66E8p1qv1PaW
+W1iVOuok2q91odMr127ppR64403ZNSlsbExkUgkk8mjR4/qeSYnJ3t7e6PRaG9v7+TkpDmwotGo
vre/v392dlZnq57BfEOk0+nOzs7e3t7Z2VnzXZbZLItnMhnpg1JqdnZ2YGBApvtfb7EbghJUMH8/
yH2uf9ixoFqvWHk7OTm5efNm8xQ9PmNOTNHX13fq1CnL9EKhYF6LucF4PC5jNXKXpTP6T3ODqVTq
0KFD/f39MnAv5LOF//X63BCqdVCtI3jV+rLOnz+vlBoaGioUCkNDQ3qKJndls1mllEStzuXCA44N
joyMFAqFrq4u/z2RFb388stKqVOnTknj09PTSqnBwUGf6y1qQwAghNW6WwVd5l1zc3ONjY0LCwsb
NmzwWa3LIrpj+Xz+1q1bn3zyifm9pOK9DV+1XssB63Ac9qRaR8Cq9WQyKQMUesrCwsLAwEA+n6/B
2s0xXdTMmUxG/kH/8OHDPM/8x5PkrP4p52RwP8sy+gSsQKzv3r1bzkeUHJczYRKJxLlz52SGvr4+
OQlS/5YpJZPFr1+/rhu0kPcYx7u0HTt2KKWeeuqp+fn5otZbwQ0JIi5/AYR/EMZ+3rrI5XJyboz9
SKO+q7RhjXQ6/fTTT8t0wzDMw+KWA6HCcuRT9Pb2yoL6uKvc29nZKcdg5ciq9yFTPxsSmkEYP+Mh
juMzsqDlv0btc3os69aIz5Wu+N5jEAYBG4RRSu3du3d0dNQwDPkzlUrpvFNKtbW1ZbNZudcwjGw2
W+Y/oLa3t2ez2Xg8bhjG8ePHzXcdPnxYKmjDMCYmJjwaOX78uHQpmUzKBwspwE+ePBmPx5VSX3zx
hWWRim9I+IZo3MZnzHeZo1afeuhnbMfeiM+V8tCAar3uh5ke1MLT09NNTU1SQcfj8UuXLoV4ewNR
rbtdF8nndMemim3ET+NU6whctR7+r/qSsftYLKanFHWaI+q53q/ZUkCAhD/Wjxw5sm7dOvnmmXg8
3tXVtXfvXh74EGR6aZceZZgFobcqvm/90KFD8h9Dly5dItNrw2PIu7KZDmA1xjpWsKaudhxX+1x4
IHC4jAaqWLB7/JepnwtoOKaw5SSWos6FL2GlQODU+5kw+luxLP10m17BlQb0HCG+6isEH3E4EwZa
mK9lmslkHG97y+fzAwMD1ehP9VoGgLJqu0D0Mh6Pyxe1i2vXrsk/AS2rpaVFLoBXcdVrGQDCH+td
XV2JRGJhYUG+RiaRSFjOPc9kMvYLVtgvc+F4NQwhl9ro7Oy0fBTweQENj5YBoJaCMbaezWY3b948
Pj7e3t4u3/EiU2QE3O3bV+yXuXC8Goa+FJ9l1Y7fG+N2AQ23lldkjzG2HmiMrcMstGPrclGhK1eu
6N/m61nL5SlyuVyhUMjlckqp999/3/EyF45Xw1BKXbx4UV9qY2RkxLxqnxfQcGsZAGosMCc4plKp
np6e7u7u06dPp1Ip811SJsv3oYvLly8fOnTIsR19NQx7C7t27dK/l13EZ8sAUOuP7EHp6JNPPqmU
ev311/VtD/JluXbeV8NwvMiGzwtocJ0NAMR6cbZt26YHN+S2Jl+uK4MwmmMjblfDMF/y4r333vOz
iM+WAYBYdyUXzJPfZvv375dBmOi39Bnlch5kNBp9++235UimUioWi8nX81pa2LdvXzQatVziw20R
ny0DALHuSi5ypC91pLW1tY2Pj0uwxuPxoaGhI0eOyF2Wy1y4XQ2jra1tYmIi/oDleho+L6DhNhsA
1Fj4L6Ox6t6oOcEx4DjBEWZh/vIAAACxDgDEOgCAWAcAEOsAAGIdAECsAwCxDgAg1gEAxDoAgFgH
ABDrAECsAwCIdQAAsQ4AINYBAMQ6ABDrAABiHQBArAMAiHUAALEOAKEUKRQK7IUweeyxx+bn59kP
wbV+/fq5uTn2A8TS0hKxjlXzSTMaDeuzNxKJ8Pii5FhnEAYAwlXxsAsAgFgHANSph9gFAFC3SjjQ
QrUOAKFCrAMAsQ4AINYBAMQ6AIBYBwBiHQBArAMAiHUAALEOACDWgQq9SKK8TECsAwCIdQBA+fgG
R4SuVHlw1SQ9cqKvoGSeLhPNoyvmCy2Zl9XXYLJcjMn857Lt+JwOEOuAV7L7v23+0y2v/azLrR0/
04GKPf/ZBQgft6B0y/Ri2yk266uxCoBqHauuTq/B4vb5l630HQeIAGIdqGncV/ATQwkfGoDinu3s
ApDmyy5eqQFxToEHsQ7UIjodY9qtHY/2S1gEqDgGYRDC2nzZwWvzALd5NsvAd1G33drxMx2ooAhP
LAQ9xL2L7kC+LIu/2Dzw1xcCuwAAiHUAALEOVBkjigCxDgDEOgCAWAcAEOsAAGIdAFY3/ssUqDtL
S0t10hP+MYpYB6ounU5fvXpVbp84cUIptWfPnvb2dvYM8Jc3Y071RbBMT0+3trYuLi7Kn2vXrp2a
morFYuwZqnUIxtYRMLFYzDAM/adhGGQ6QLWOkBTslOpU66BaR6gKdkp1gGod4SnYt27devv2bWKd
ah3Eegjt3Lnz5s2b7IdQ2r59+40bN4h1EOuryzcX3PktuyGkfrGS30xJrAcyENgFAECsAwCIdQAA
sQ4AINYBgFgHABDrAABiHQBArAMAiHUAINYBAMQ6AIBYBwAQ6wAAYh0AiHUAALEOACDWAQDEOgCA
WAcAYh0AQKwDAIh1AACxDgAg1gGAWAcAEOsAAGIdAFCmh9gF4bPUs2SfGElFvBeRGfSN2nc4korU
eO0rsrEAsY5SBCitzNkampDlDQMriEEYAKBaR1iqSLei0j7dcU7zaI+lWft0aUHfpcd83AZhzHO6
jRFZput2/PTNo5q2L+uxQxxnNm+UR4OOeyNMn1pArCMM7xAe7xz2227j6Y757r8/fvrm1qzPdz6P
me3vTz4747YIwCAMvskF80+xi5sLSZ8p4yeGSosqn0sV23hRzfrcIUX1wTIzOQ6qdVQ+QEP2xlby
rrPUzuXPXHJnAGIdlXxj0OO/QXyTKKfP5pFu81k6jjvEcWbeZbGCGIQBXMPdMvZSqZkBYh1VUdkM
ql6ieRzbLKeF8pstbauJflQbgzCrrgK1nDi47MweAwuOJxG6Ta9IP33230/f3Bb36L/jCIz3mZT2
Kp4BGVT9ZV4oFNgLgf/MFY2q31arUq6HGKqf8f0V6Mkv1Aq+SCMR3oQCGAjsAtQhRiqAkjEIA69g
XakauQ4HLlZ2hwBFvHwYhAnDZ66qDcJg5TEIg2IDgV0AAMQ6AIBYBwBUH4dMsTz7eSkLXy38/r9+
v/vK7gq27/NoZGpXqrOls+mRJqVU/sv8pqFNFVwpx0Wte2mJU5Ko1rE6ND7c2PF4x7V/uFb7Vf+s
7WeS6Uqpxf9d5LEAqNZRInMNO7JnJL4p/qPYj2rfjYY1DRTUANU6KuwnV3+iE1Zc6Lgwf2B+qWdp
/sB8aldKTz+249jdfXfla99n9s8c23FMvzEs/nxx8eeLFzou6JmlBWOLoZQythjS2v8bE/h2OMj8
PfKpXSnHVcs8Fzou2Nvx49iOYzP7Z6SRu/vu6p67bSlArCPARvaMyAi7Dta9393b+HCjjM90b+lO
tiflrsPfO9z8aLPcbnqkKbEtIckY3xRvWNPQsKZh73f36mZz/5NTSj3z98/o3zLFQ2pXqntLt3nV
lqiV9mf+NFPsNia2JfRoT/OjzYe/d9h7SwFiHQFjvtxSfFNcKfVe/j25q7OlUyl15taZSCpy5tYZ
pVS8OS53bTy/Ub7uqv9f+iUKlVIdj3copdIz6Ugqkp5J61XcmbujlNr5dzv1b5mimb+0S27LqjP3
MpFUJHMvo6doctdvPv1NsdsrXf3l9V/Kujae3+i9pQCxjgBb+Grh3J1zXWNdugxXSr3yg1eWepZe
+cErSqlNf/vXE1SS7cmPOz+Watc8/7uT7+rf4nf/+Tu9rPzWq3AjTW3/5+36ty6xxeDtwW9+3xks
dhvl/eatXW/N7J/RB4e9txQg1hEkUrQO/3H4/tf3Gx9u/P5j3/eYWQ+7X+i4IPH35r+9aZnHHrWD
dwZn/zzbsKbhQseFhjUNs3+eLb/bJQS6+OGlH479x1j+y3zDmoaOxzvu7rvrvaUAsY5A6hrrWvtP
axe+Wmjf2P5x58cyUfJXhib0j9wlQ9tX8lf0CLue/+Y/3vzm0OhWw9z+1BdTSqkfN/9Y3/Zmbkp+
+3wzyH+ZV0r94ad/kCO0enGZLnZf2b1paNP6d9bL8Lr3lgLEOgLs7ezbSqn2je1yfsil3CU9NKFP
HdHDNUqpU0+e6t7Sff/r+zJR5t/2nW1LPUvbvrPN3PKn//2pHteW297sTZ3/9/N+NuHq51eVUm3r
297a9Zb0WRaX6d8cZf32NBg55Ubi3mNLAWIdAZZIJ2TouXtLt1Kq53rP5buXJcHvf30/cy+j//kz
mUnK9PyX+V/f+LUUxT3Xe2Qw5/7X94f/OGxuued6j+NtNz3Xe87dOSerkBH/RDrhZxN6rvecuXVm
cn7SXL+fu3NOr/RX//orfa/c5b2lQJ3gi3lD8eYcri/mndk/0/RIUzlfDBAqK/rFvKBaBypmfHqc
nQCUgC8PQH1Z6lmSwY1lT20EQKwjADixBCgTgzAAQLUOAKjxB1nf15Ul1gEg8FFOrANACAOdWAeA
8KQ5sQ4AYQt0Yh0AQhXoghMcASA8mU61DgDhCXSqdQAIW6YT6wAQqkwn1gEgVJlOrANAqDKdWAeA
UGU6sQ4Aocp0Yh0AQpXpxDoAhCrTiXUACFWmE+sAEDbEOgCEp1Qn1gEgVJlOrANA2BDrABCeUp1Y
B4DQvakUCgX2QuA/cz0aVX9iN4TU36jCl7xIKdWJdQBYrbHOIAwAhOvjO7sAAEJTqhPrAEC1DgCo
11KdWAcAqnUAALEOACDWASAw6mRgnVgHgLD5P3CvHh2pg3ERAAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tip.png

iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAABgFBMVEX///+/zDEyYSkmUiAZQxUp
VSNDdjYcRhcgShosWSQ9cDJFezlbhUUXQhQhTBwkTx4uXCZGeDcdSxwkUB81ZSxZeUpqjlSuvjK0
wzEiUSAtXik0Yys3aC5CZSVIfTpMfDpKfjttkVd3l2GNpnq5xzLP1ogkVCMtUh0yVyo+YjRjfyxk
ilF3lTR5mWSEl3eGonOVrIKktpXF0Ei8xrHK017N1MX7+/slSxkhTh0mViQoWSYwYis9YSM1ZCs5
aS48aTBJZj9KezlZdypSfEFQfzxVfzVTgjxZg0hjf1Zof11eiUxviS1pjDZ7ki+PoYKgqzaRqH+V
rGaesjSitDOdqpGtuaK2vq3K0W/Cyrrd4dY1YS0zZSw8ZShBZyhBaSpEaDhIbDVLbytPbiZMdjFK
eTxWgEZlglhkjE5wjDJrh11ti1l1j0Bzkl96jW57kG13lWh4lWeBnTeFoEmEn2+Jo3aesWqqsVeh
rZbH0LzJz8HW3M7Y3NPk6ODt7+rv8O7y8/BQn9+1AAABp0lEQVR42lWSVXMbMRRGBatFe3nXzMwO
cxyww8xpUkjKDacQKP31al3vJD4PmtF3NCPdewVAh76N6/n3V6m+QdBFz9JcspZK1SqepZ5n8aEd
TdTrqc3Nbxv1ZLz06OYD8ejHWqWSzGS+nCe/JuLS/f/8lxSNJ2zbvs3AM6tkJ5pR6bAtSpLU9FAy
EPrezHo8c5I07+S7rKZNx2Kx75DyqaHFpjWNdV4wy7Ks1lq52XeEv7zSonv2Hb1ZZMtbaejSC2F6
qyyKB2BNFN/6YBe+V6FwFXwWxdDLLuMbN0joA7AmGyES8T/l/oiiEGQBKzxpqvjJrEdkGaumBRaO
wmEkGNuu2OZlQ0DmAqiOmeYEEvpdkeZlgibGLsFBEFGO22LdWXKKgFBwD4CCY06oSK+u/qBljMsC
Cr6gle+Mqqo60+tfzjFMbnkfnvJEHV1zmvV6RBCKxSGmzVBxhsMjhXZ3f2azROG8XobjeY7xejk9
MNAZdzYgczRWMFZ4ekLfdUf4UNB1fhgTQrChc/m9Zx+imh82MCUQyF/86foof+8WpwieWtz53Qn+
AVE4OsMepx4GAAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/singleton.png

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
o0aNqnTlwzOQL9/hhx9ecJzvsz9Om2/tfrW90bx584KyvvbaawXHp0yZYvs649Bnn31WJfsg7err
RntvDklJSVYWjJOvv/56tdQZlIBUAgKyZs0a+fLLL+Xee++VAw44wH7gaBRYaHZ2dsF1zEwdccQR
Urt2bcugs7Ky5Ntvv5Vzzz1Xjj32WPn6668jfshRGrp06WKZ9J133ikLFiyQwYMHl4mATJ06VQ45
5BDZY489Cq7ff//95cgjj5RrrrkmoqLI83lxuA6lMHxGjRn5o446Sg488ED7fA9mk8eNG2dfuMMO
O8xew4xV7969ZdGiRWWS5ZIlS6R79+52luuYY46x8kKB+ueff+wMXxDLli2ziuuVV14pe++9t+y7
777y/PPPy5gxY2xZwMKFC+XQQw+1zzrzzDNtWw0dOtQqnyeccIL88MMPBc+lvZipaNy4sfTs2bPE
F5jnIxfamv/5uzyKG8rupZdeagczynb33XfLjz/+aMsWaTCpWbOmVZQGDRokF1xwgZUrdYg0Wxwf
Hy8ffvihlTv98Oijj7aEc/r06UWuQ9nbb7/9rMzat28vffv2tTNTQevYypUr7XHa+/jjj7czbyUp
bHPmzLHE9OSTT5aXX37Zzr48/PDDZSYgXEt/oh379etXcJzfHOMcfZI68/FCdsxG8VGLNAM0cuRI
ufbaa20/RMa33nqrnfEGv/76q637rrvuWlA+3pGDDz7YlsPj77//th+O4447zl6LfOib4e8D7xH5
IEvI09y5c+X++++3788777wjqampEescExNjlXfyvuKKK+w7zr2RQFkef/xx2+f4iJdVAaNvMwtH
/0cOvA9BckJ5qTPnGBNo6wEDBpQ6i86YRN9iLOM9Cvbdyy+/3LYPMh4/frzMnDlT7rnnHiuPDz74
QNLS0iKOibzz4eMf+URFRdl399RTT5XOnTtLYmJixDKlpKTY9mFsRVml7Xg3qSegLehLNWrUKGh3
3iWOcV9wXOnQoYN9BrOdWCcijQXIkmdSbggUVsqXXnqpzIqifwfJn/w8+A5wjP6I3CBlnTp1svK+
5JJLZNKkScXej5133rmI8ous33jjjSJ9je8rcqS93n33XSub8hA+2mb48OH2vaO/Y8GZNm1axGux
tL/55ps2r912203q1q0rXbt2teN7OPgODhkyxH7LaQ8mtxiXIYslERDeYd4J3mvGBsa88liJac8+
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

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/prototype.png

iVBORw0KGgoAAAANSUhEUgAAAyAAAAGNCAYAAAGeaiXnAAAABGdBTUEAAK/INwWK6QABJoNJREFU
eNrsXQWUVTcTDpS/lLZQSpHSFtfi7u5W3N2KFHf34u6La6FIkUJxd3d3WNZYWGBhF2f+8yUv9933
9q2yu6zMd07OtdwkN7mZyWQyE0FEXkTkyyFiBGE5YUQQGA3y559/cm18RkyYMIEbJFI0SL4M8SNE
KPhrfIcFP3DgQJQKgTbIw4mCHkwQ9HqObcD9DwsE0RJ1vraDOuqwsp06Iu6CFtb3fJ3Ufdwzx5/d
VOVjvmcOeJd7iKVBEFCRCN6zBD2aYr2Ha/s4utLt7zl6hvd9ZvvfEEFpkIcPH5IQ6vnEiRMpa9as
8nrdunXUo0cPef78+XNaunSpPB80aBDFj2/tcd999536eEsaOHbq1Il27dpl3CtYsCClSpXKeN6i
RQuZl/mdSZMmyfMOHTpQkSJFKGfOnPTixQtq1aqVfD5mzBj69ttvjXc+qUHMwXWyoMfTBDlPVEcd
cP1qjjWevu86SR1xb01723fkexPU8e1cQYXTWu8Pqx60BokbNy59/PhRnnfv3p2yZctGe/bsofz5
88t7aAA0yLJlyyhmzJj0ww8/yPs4B7Zt2yaP//77L5UqVUre/+mnn2SD6Djt2rWT50WLFpVHNOj/
/vc/g8zgno6bLl06GU/j2LFjMs+vvvqK3r59a8TTx09uEPcpgvb1FrS/jwr7+gg60Nd6PbWhJd5k
QUcHCDo1WD3X7++3xNfv4H2kqd+XoS+TrCA3SFCD5j2F0qrrrd388iLEeTZTUO08gr7+UpEx3B9T
WxAtFOQxhRsk1Brk5WxrMPcu830EkDo0CvjJ0xm28bmHOGgQVNjzmYIeTbUNn9JYwQ1h0SAbr5Wk
OacETTsuIlmDWIaj27oL2tFD0LlhgjymWu9HxgZBQwR0HWEbZFpNESHCkkbWCpt14tMqb/oxEaRG
4qmTIOJTG8Rc8SddBhnns09yg3wWmBvk2MOe3CCfG16+l2nDtcKRk2SF50gqPJn6zBOCnE4Kcn9x
hJxOxYw8TB2VUT+foHfzBNFSQbRaHXG/aHpB98YJqplb0EsnOxnEyTpfNb+5IFosiJapipXx7WSN
F7ME1cvHk4vRtodEqQY52E/1mM1d1ITgh/lqCgTX6D2eFqERUx9eMwSlSqieb+ikZBcX0yww0vGa
bumBy9XkpMskdfSYyg0S5B4SkFCI6Y/P3UN83rpIvvDXheSSX0Q0HvFZSBZ4BfgGptQrZ1d8A3zi
t+yCauRSvOnNXEFVsgtKlkD1iHYl1ESj90xBzQoL6lUhZA3i5GAIqxulePHitPOec4QMUZKHTDfN
TZnPF5yNbzTIAXdPWQGXiWi/2yM6+tTbqJTtd+7ThguXae9DNzr46AnteuBChx8/pRPevnTY8ynt
cXY14p58+YoOeDymE94+6vrFK3nc6+JOhzy9aNf9hzLM37k79Bqkfn5BrYspnvBshjqCb/yWI/wb
5PX7J/JPn3MqRgBB2AxvNe4/28Q95HP0kG03qwYooQfUIPiz0QNWnThNF9+T7EF7nN1o9wMXOvXy
NR158kz2ruPPX8pegV6w56Gb7Dl496DHYz/phWqDRIXpEWDe6di08Oz3kb+HRGYsPZfIQt5E1Bn2
MiJYg+zqLCJEONOPBUODqUN+mFRf0OQGgibXV+e4v+x3Qes7WhjuElsmrK8Rf3ErQVMaqPfnNLPE
X2QXf2HA67NCW1J/+/6FJGVaaJx5IhJNLiK4WIK5khxd28dzcRDs33f5DHNZjnQfkUIf4nBd1mR1
1Et0dPCY4njFiI6H49mhAVf6rCbW6xtjwqZBzEx+zeV8Vuk+MutDMDGol/H42C3ryZ/aui4LUyD2
S4HslwEhIK79PUc95NW7R7JCF5yJE+Lg36gr0vaQoAbwBfCM1InU7C2k+3862AasEz4+UC2my5Fc
0L+d1X00wJmhgu6OC/0eMutkJF7k8CkNgml0Hfy7r585uheey4CWX0hOKy+miRwNIvUTTooHmINL
JFdQaaERwcV7d+SbfvdxUgEKpQfjWWP4WRrkyTPfCBEeP/PlBmFwgzC4QSJ5g8CUy83NTZ4PGDCA
0qRRQ8Vr164Zz0+fPk19+vRx+P7AgQOtUvKaNTL+y5cvjXsVKlSglClT0pMnTww7wNu3bxvPN2/e
TPHixZPPtK3e48ePZTmmTp0qr5MlS2a8u2rVKiPuzJkzbcqC/DXat29PQ4cOVZVgZwOYMWNG+vDh
g3F96tQpeaxevTpt2qS0kHgXdolffvmlvIadoTZr0+khD8QBWrZsST///HPIGsRcwEWLFsnrcePG
Sbs5VJ6Os2XLFnJ1dZXnaJBnz57R4MGDpc3fN998I68B2NoB7969MwwyAd2IiRIlkvdXrlwpr3/9
9VebsowePVo+Q5oJEyaU99Eg+gPRYH///bfxDuLiPaQLuLu704gRI4wfpGHDhtSvXz9pM6jzSJ8+
PZUoUUJejx8/Xt5r1qyZ8fz+/fuUIUMGm7qJESMG5cuXz4ijbRxx/s8//8g8ypQpY9zDNZMs5iEM
bhBuEEaYNwgjYoAbJII2CIcI5FGOEcF6CIMbhBGkBqn6W6UI41HOP0Qlb3JHjhwJuEHyZUsptXVm
vyb2S38CC2ZLK+cA4ml/Wv4umIgGOHr0aNAaRLveQ+XqNVn62jmorprGB73hgtsgmBnWE3aYWDTP
2t67d49SpEghr2vUqCE9vMHT28iRIyl58uRGvEqVKlHJkiWpQIEC0lOcRurUqeXzOXPmyPfhrQ7P
MYkIh2dwdAbUrFlTzn7DkRri4xzCdenSpWnnzp1y0rVatWo2aYe4QfxUntm7nIMVJeZe5GgFiU7D
2a5h0diuk0LWQzDTDA9tmEEGevXqJa8xXX/lyhWbuHAJ+Pr1a+MaU+FoEMw623t569KlC/Xsqbw9
+Pr6+nmeK1cu41zPWmMmmCwe4xo3bkweHh7y+unTp7Jcbdu2lTPVodcgE6yV+nae7T3dm1wtDQM7
dhfzO6ajDq6mhngwwXFviQ64dOlSyBokNIKudLfJ6nxDR9ueZ78+i0dZYdQg9jznyTQ1aHCbbLvw
GkuNolsPCVaDhLcHufAgWbMspgjn3MdErgbBwmeQD+3OFcw3uMPfiNQgh+7/YWMP8uLN/Qhr9mZT
qlS/fB9hPMqZseRcok/6SEeV//KNC512HcJTJ8HFm/dPP7lB7j7dII/n3ScG2lDcIOGANZezOeYp
J7lBPgsc9YSIZmMY7nLI5x5loVFWXcpI959tlucH77ePHA2iJW/4OHk+yyqZa6n6SH//p0cQPKdZ
zdhujlHyhX/TIwFtV8FySBTvIVGmQWDz52wx0Lw+SvlS1EafkE0gces9QnAOQxv4xMI9+H3X81+I
/2S68k4n9yOx9I4NnQW9n8+SeogmFx3N9oaV+/GQ8Aj4ylp9OZM8X3e1IJMsOPBHr8ARbv/QeK4W
KR+mcY+nKgtc9BTfOaqnPZtpO02j57g+dRTldCoGvf/wSp5HVE9AE9euj5w8ZO7p/wXYIGZ783+u
5PXTUPj4LiNHS09vjbt0pRY9exse4UpWrUYHPZ5Q2Vq15XWTLl1tKg3vwAPdwt37aJ+rBzXu3NVP
xcIDHe4jbQSdlvQu98BFHkPcIHoEhb/6zjirkX9AyqewbBA9IRiQR7m5p74IsOdwDwlnHuLfFMiM
44E3yIAZs+io13M6//aj7DXfxItHU9dtsPhT9KVKDRrSKZ/XFDd+fOlvsWXvPtKr3Lk3H2Rc/ffn
LlqMdpt8M4ZKg0RWPH11xY+bDHMjRdoeEhWmSPRoK0oMexkRrEEyp04QYTzKcYOYmLqWmiH0mf1d
2a/TcqQ/13IE4uoFDY7iQv4Iz6kTeL4GOZt9MmI7yYwWc1mOGiBSqHD9axAtfziHcqVDkvevp4Rq
7zgVwzhff7WIcT7tmIicDWKev7KfBHQ1kSgIkK6TgrZGK6hLSZXTyhif4FHua3r26rqR3vZbNSJ0
LwlVkmXWbzjbnbtaFsLdGqN4y6F+fiV/V38WyqFSPwX+aQcjkgOzz8ZDXIK4+Do0MfO4INcX+yMv
D8FsrP06LPcpkVtBtfl6eUNwdDoZyUZZbnYmCA8mBKxuZY1hGDXIq1evIoxHOW4QBjcII5AGKViw
INdIOCJQCyr/GgQ2dIcPH5bn2n4P97QXNxcXF3mEDd93330n7f7gDAzPYdYFky7E3759u7zn5ORk
OAuDE7ClS5caeXl7e9OkSZOoa9eu1KNHD5meBt59//49FSpUSF6fOXNGHpEHMGaM1cwA9n3Hjh2j
5cuXS0dmcL7m5eUl04CpmpRvFiyQR3h+w339PXC8BkdpKDPShKlaunTp5DPYEiLekCFDjHe0l7kk
SZLII5yr6Txg/6i/b926dSFrEBgvojC3bt2isWPHSpd62pNanDhx5BF2fNo7HNzbyamIadOMtGbP
ni2fd+7c2WhA2P+ZPdABX3+thD6464NXOKSH523atJHu/96+fUvZs2en2LFj0969e43G1ZWuPxqN
jGP9+vVp/34lc/z222+0du1aacAZK1Ysw2udfj9u3LhKQLR4stMDG3M8NMi+ffuMd/AzmL3V4Rx5
6J8LWLJkiRFfG5CSA1eCIe4hjM9Eshg8ymJwg3CDMLhBIneDsIs/BoM7CIMRCh2E3SkzojO0O2vu
IAzGp3aQiLSsNKKE6LaVX1SGo5n2EHUQOHT4u531J8H2tg3yqxWkzQqrLW/x45h/pCLpBJ0eIujF
LEEnBwvqWDr45onXRlnP5zdXjuiQL8zbGxZQy8aaFlLuvJC+azDS39BJfVd4dhDoph48eGBzHRxA
r6d9bgYXu3btClb8GzduBPi8SJEiISoHFMCfJBP4U2fBrctQ7SAcPr2DaOWxuSHNCl54BibT1mlQ
XuvnWIUApTk6l+4gWkOPOHBoC2UzlN/wQpw2bVqbffGArVu3UubMmeXeeMuWLZNx4bwWKyHM5Uqa
NKlNhzIr4JG/jocOgi3W9D19Hysp7L8Re+bZfzO2eNPbp5lXU+iOpxXohw4dkudYvaDvw5MynpkV
8RG6g+zsaevIF05OaLmg44PUNTZYxxrUd/ME5UmpOA6e4xk4jLZn0GZZ4DTawWP+1MpIvmh6QR8W
qPfhQAUuhlxMhiu5Uwr6uNDqgkgb2SOPzV2USwlPixtUvKcds6As2Mwd79MiiyuKGf6vmeUhFg+x
mIOwDMJCekTvIG/nCro9VlCNXMo5XcE0yoquT0XrDhfgMl9+oTiG90zFucA1cI1n4FzgFJf/FORt
4VRI76WTklfwTLLmxYqTwSWYzn9pa3V8MVvQiUHcQbiDMAdhDsIIWQcB9d3dS/0gvSsqKo0xOpxo
5U2lxvGF01l+IsvYHeP+5zO5g4Q3Lj+abRhQzjQcjFndVkRk1xXMQbiDhCmC6o6KO0oodRBG4Jhy
zEqZP2eYe1rQPAf+QU+6DHRYbpjnzzjOnYQ7SDjizfvnny1vdBIPn+N+7h9/2Mdh/IjuKYw7CCNU
AW7gFIwfHp1j0/USXHHcQaIPtFD+bwA/PmSUiL5VYKQV0j2Dsbdkpp/U8epI2/uH+wf8HrYTcXR/
cv2g5bund8DPd/WM+tO8T3zP04wTfuWUqcd4SBVmHeSVk1KwtS+plnZgkSCWh7QrIejicPXj68WI
UMLF+0op4toWd7xpKxR0jo7moBcjomNi8SOmjZHf+4WCmhcWdG+8oFbFHP/IOr3Ecf2mD4XjKyfW
gzBCmYNExKD1MyENZu25OSxqyR2EO0godpD74xUHyZdKHaFAxMJAHLHXFBYdYuFgrhSKM+A+3sPi
Q3CcaQ1tKTyWjeBnLJtZ0OURglL8oLyg5k5h65BTcyzkiyOe45jLEg/3H5kWPb6Zp5a5502pOBPK
gaUsOOIbsGjROQJwkL8vpZPbwJqHSPNPf81/MHMQ/ym92d7j3NCQpYN1WVin9WJ2IDLMZ1jN6/PW
1dB6+we9/dbflzLZ3K9bty7lKlKUQzBCumzZI2cHAQfqXk5R/rYlFIWP+5V1qbp5d8NSvypDKsgY
4EzmI9LBsX4+tcBxeDVBX38paFNn6/MvYynDLFybdznRnulh7BUeHWTf3ebB0ksgrlnRV7x4cWMX
qx13H9COe87GJoDHn780jrsfuBjXOmDrM/PR2A1r1Rq5vZn5faSNo74v87IEff338VN08NETqta0
Ge2yyx/HOm3ays0GdT76vWPPXvgpr/moQ8V69eWmhf7t4lW6eg3a7+4Zot2+PrmDSFuNKbzUxIxp
lqlTaLI3XC0YoiC14aYNTWy4hgOOcvfpBpsOZe4gCNvv3KeTL15Z9vl7JX/AE8995I+9B/v43X1g
xJXP79yXHWqH6b79c/v0zNfID3FkPt4+fvM3XTtKXx/3urgH4z1fm/cPP376ydvhhbiDyH3UZyrK
6jFVLT/HUAVjdsxS/VFKLRl/M1/JD/YbvET1tVhv3j/9pP1MwA3sO4Knz2maclTQ2EN+81xyLlGA
HSQ4Qf9YOOIHP+z5VHakAxYqbP/j/TFkqORE8vndBwY30PF++PFH6/XdB9Sm/wDZKZE20kUnMMef
8e9mOujx2KY8ex66fZb9IoPVQfJnTylX6nKwBloRdjJIYPKHxqKz38u4vu88QqWDgErjuO3WXXW8
fY8OPnpMGy5ctrlvDhhC2T/XR73rrL5G+uvOX6SK9RvQfjdP2nDxir/p6s7m377NEaqDMMIfbi8O
GbNW4Cjbbv5GB++3l5sz6ftLzv3k5708efJQvY6dOQQjFKlanTsIgxFm07wMBneQMJrmjYrWhJFJ
k+7pe1buSosFjJBr5p/5it5+8OYeEBYdBJrlmrmtO9rCfQ90E1hYCMcI/jmOg7MDrHnCOq0q2W0d
x72a4/hoDldGWvUScByH2THMmOHaa4b1PcyYIX1XB+lrhaCv3dqrevlCtr91RO4gXr6XDDnlsc9Z
P89332nA1oRRVZPOHCSwGbBYQf7x73r9I+Pee7qBe0R4dJBLI9Q6Js1t3limRE8NVtfgMqD6cC6H
RYDQWGuOox3HXR9l1WSD00AbDrc/cHmKNVTQu8DlKd6HE4kCaayufKCjWdhS0McFdo7jpqr8t3RT
HMfecZyzhdNs767ep4XW9ILbQV6/e/LJ+7p/6hTxtceLHD6DLsUebFHIHCTcOIg2VJp/OrYcxoR3
2HOnocx/z92mfso27ZhjRw7oIBF523juIEH4ESGDwOYE3AccBM7hsLr32UzrWizIHpgQeD9fkM9s
9R6O4CbgWHBxCvdE4AqQmyB7wIUp5BlwoJZFlMtRWmLrbvTdfHVc9nvkGGKddx8vO8ntp2uDwG2+
YO7BHCR6zmLpoROWrjg/327cP+rcw7R0/kvuCaHZQTB2H1Zd/SCwHtROoW+MFjSjsaBt3QQtt1Ba
vdq2WznHloTcQcIPHz++l+a3z15d5z+fOQh3EEY4dxAGgzsIdxAGI2QdpECBAlxjjCiLa9eufVoH
KViw4CcXomjRosGKP3bs2E/O89GjR/K4Z8+eIMVfsGAB5cqV65PyfPLkySe9r7dgCwynT5+mUaNG
hcoPsmLFCuM8VapUwX5fvzN79uwQt/nmzZuDlHdIyhcYPnmHqcA6SIsWLWjv3r1y/zygbdu2NGbM
GJv94vBh+rlG48aNadOmTTKeu7u73HdPv9OnTx+jo+zbt8/Yqw5wdnaW1/v376fDhw8b7/zvf/+j
/v37Wz/Kch+Vr/N4/PixPMd7eN9cxh9++EEG/W66dOnkd2XJkkXeQ/nu379v7B+I8q9Zs0aely9f
Xh7v3r1rs1+ePm/evDklTJhQniNd3Wlr165tUwbs7Rc3blxav95qxDN06FB5xH2Up06dOsY7yFef
L1q0SO43iDjYCxFBlyN+/Pg29aL3C6xSpQrNnDnTT53hCAcQZNo7cOrUqX7ioU31OdocqFWrFt2+
fVu2OepZfz+Asun4z549o5gxY8rzJk2aGPfXrVsnz7GPIjYs/eKLLxyWT3/H+/fvjX8CmDdvnnFe
oUKFz99BIgqqV68epumjg6DBQoIECRIY5+nTp48U9Tlx4kRKmTLlZ8vfx8eHJk+eHKKNOcOVg/z3
33+SenDgEBWDmYPyLBaDwdO8DEYYdxAGg8EdhMEIcgfxsnQSDhw42AXBlcCBQ8AdhMFgBDDEYjAY
3EEYDO4gDAZ3EAaDOwiDwR2EwYjEHSRfhvgc7MK58xeDXLkHDx6kAwcOcIig4ZM7CHsx8Rs2bjsY
5A4CIy1GFOYg5h8DHtSzJ1N+rwwP69OVN0LsRmv2Suhh2eTzyXRBncpY758dKqh6roB9/FbMar3G
zrR6r0O423GxeFOEP114RcQ9sx9d+PItlNb/9FFG7JfuPpk7CCMUO0iD/KpD5E6hXHHiunlhQS2K
CBpeXdCken5ddOJHhmPqLmUFdSwtqHOZ4P+M6Bx6ywR0BuSbKpGglkUFzWmqrjd0UukjBDVdfEud
vOHbQTp27OjHQi6oduhGY4XQwi4k7/Xo0SPUy3HhwoVP+1n9yTcsLTWDzEGw9wa8prtYOMTTGcpD
ug4+pv039D1wAPt9OfQPat6P3Mx1zAEeHbEHus4LXANl0GlKD+0T/E9fdzKdlrnzhjcHQePa29rg
XtKkSY3zjx8/SjtrnOPd7Nmzy/Nly5bRuHHjbH4QnMMGHO/gPHXq1NKmWz/bsWOHTVyY0fbu3Vva
1Tds2FDeh60/bOHJYtdvnz468JAhQ+jLL7+kTJky0aRJk2jKlClGek5OTvTjjz/K+LAx1+/DXFd/
A765dOnS8v7atWuNtEuWLGmTl7btx/mbN28oTZo08nz+/PnyPuzTdb44JkqUSN7/+eefw9Q0l2WQ
cOwg+kfWyJw5M23dutWGOsKZgv65tKOJX375xQ8FxTkcRfj6+srzv//+W96HMww4mLCPSxbnD9oJ
hqenp82Phs7mqIOY30dnadasmY0DBfzIADqBvj99+nR5RFzkpZ1u6A4CDzDasYSj7wLatGkjHTPA
+cO5c+dsHGGYnU/ACQacYUT4DnJ3nJVKg3OAI4BSO1u4j7PFb6+L6fmUBioOrh+ZOIj26avfx1Hv
HmXepWpcHUEtCls43GQrp0Mc/a77FJW+Dnh2fJDKA/JKv8rWPPT72Nck7leh10GqVatm3NPePMiy
M62ZAmtKCRdEL168kO/r+2nTprV5F+e6g5w6dYoyZMhgk472KqLvaQcc3t7eRpz8+fMb3lngZcU+
/WzZstmkiePbt28ld4LXmWLFikm/BUCZMmWMeD179jQo/7fffis7I/DPP//I47Bhw6hRo0ZGXvBM
ojmKTqN79+6GzTgIBO7fuXOHfv/9d9q5c6fxPfBGozsy4uj3Q8N9VKh1kF4V1DFfKkGbOgua3kht
NYBtBmrlUR0hVwoV8qYSNK+Z6kyQT/DeuWHWLd4QCqUTVCKjoOIZBHUuK2hYNXWe9Re1cc7NMSrg
h8dw6s8agr77WtCy1kruuTBcbYGAd7ApTuOCgiplE1Q0naC8KQVt667ymVhPCfyT6gtK8I2g6Q0F
3R1r2yFZSGchPVQ4yOkhiiLjpz0yQNCZoYJujVEygFNT1SHwDPsWHh2g4uMZ4kCuwH4dOi1Q8JOD
Be3vI+jYQBWujlSzYnjXPm88uz1GPT/SX3GnM0OU/IJnyOfOWJUuAp6fHqzSuvKn8lIPDoh4gckn
wekgkCcY3EFYBmFwBwnvLQYwY6WHUNhZyrwL7paugn4vruQIvR+J+2TrDBvkDBdLOi8s+pInlhk1
7E4FIQ/DOr0X4kOTnINhnOaIK9tyB+EOEgE7CHQq+MGhq8CWaVoe6FNRBd0pKmQR1L6U+uHRWXDE
MCthXGHMeoyqpY41cqt0MBnwXRxBMWOojX90vEYFrBsAYTimy2KvX+EOwh3ks3cQyCRPZ1jlFsgG
eudac0Ac7E8IToC4miO4TLIGvI939Y64eK7TAtcwn+t0r43yf7db7iDcQVgGYRmEEdwOosfq2Isw
Z3JbqqvXNuk4j6ZwB/mceP76ttz62cmyoSc29lx2/if+28Oqg+RLrRb6QViGUg1bMUPBVi6zoERx
BRVLL2hjJ6UHgZ4BcQNaNMgdJOww44QwdrNFx5h7OhbNMt1bePZ7/uvDgoNgvL+pi2WMPlKNz6X+
YaxSvO3uJehwfxW8ZzIH+RzQneDYwz4Ony848418jg7DYBkkWnUQ7IuOn//9h1cBxvvvejkZ74LH
ZP77P7WDTKspONiFf7ft81NPZ93GkdMp8dm5x6pLGYMUd+YJ8dnLGyU6CCNgPHy+0xjWRITgCJOP
+r1/y2ul4jYf33AjcgcJe/xzJZ+/P2h4YPZJxx3knyu5aeox4S/HcfHew43HHSTqw78OAgTUQa56
LuTK4w4S9TH/dOxgDbFevX8s4/u+c+fK4w4S9fHqnaf84a88cgpS/BknYn7WISF3EEa4wykAQd2M
l6/vy3hLzv3AlcYdJHoBPz6Wl/iHxz5nVRzmHqHTQVgxGLk06a/fe9ksM7niOY+e+F6kI849jOUm
s09y5wizDrKwZdB/JL2Q0WwiC7NWe/9Z5nBvnKAlrf3eh+OFR1OD5u9qQYuA48xvEfUXKy48+4Mf
HQk4y/57rfmPD4sOAms+2IwnjiuoYQHlhAFO41a1Vw7hsLp3UUvbzoEwu6mgAVWUQ4Y6eQRdHK6C
fz8f1nbB+6K+hlMFGExpK8M/awrK+rOy80C6tEw5gED6CFgXdmRAAB1wvKADfa2WhrzcnRFqHAQ/
6hcx1U8Kz4a4blNcUJ6UKpTJZI3btJDyvNgwv6Acyf3+ZG/nKa8n6HSv5qrOtLiV33jwRtKggKAZ
jQS1K6Gs/lAGWAfCc0rLIoLW/uH3PZjW3h2vzmvkUlaCI2tan9fOw/YgDJZB2GCKEXE6iEcIjKRc
Jn3az7qqnaCxtUP+/oMJju9fHuG/k23uINxBgt1BMPyBVWGWnwSNriXorzbKU/tFy4+G4VbZTIIG
VVWywz8dlE1J30rKZrxuPmWIpdPLkFRQ7pSC1ncUVD+/ct5QLIOgHuUFja6tHFYjwDMJhmdbuimv
7QOrCNrYWdCiVmroBacOkEtaFVXlgCO5TEmVnAIbde04bmdPVb5u5QStaa/ewYQBdxBGqHEQjOvx
k+7tLejXnwT1qKA6ADyJ4MeGc4UdPZWsAtc68BYC2QCWiXqrBJ1W8h8EpUyoOkn6HwWlTyKoWSFB
B/sKKpreb97dy6nJA8yYwZIRnaNaTuXqp31J9bNjUiHFDyptOHionF1QxqSCWhcTNPA3QW1LqAkC
R7No4d1BMF0766TtLBTsPU487M9/bGSWQZ7OCN5983PnCSyDkJ3J7IIzX9Pay9lp+fmfjQWJTqzH
YCHdUZja0Hp+fZSgzV0+zTGdfzIRhodymJck/DvITEvn2HKjnMPnz15d89f2I3fRYpSrSFEOwQiR
toPA9h1hXnNBrS0eFPWwCGFfbzVsGlZd0OwmyssippohR2T4UelKyme2OIzLpY5wTo3p5zG1rI7j
ICcl/FYNAZN+p7gY5BFMOGAaGnIVdD3h0UH23m0qf/zzbuMDjYt4M+3sync/cKGd95w5BCNE2g6C
bdgm1FN6FOwiNbeZkhH09gk6Xvyv1Y89o7HqFAMqCyqQWnWCRS2Ut/bMP6kO8k1sJdAXSqOuV7QR
NKSqOt/RQ1D7EtZ0U/6gjpBPwouDBMeZwo5btWT8jx/fO+wgx569oOwFCsh7u51d5b19rh604+4D
46jj4rm87+JBZWvVNu5vu32PSlWtrtK9/5D2urjTfrdHRhqIs8fZTeZ19Kk3HfJ8Kp9dJ6Ljz19S
vO+/pzpt2tKu+w9l2PPQTb5zwtuHMubIaeSzy5I23t1+5748HnD3pIOPntAhTy868uQZHX781Ih/
8sUrSpMpk78/PZ6nypAxaneQyCiDHHPuHeLO8fbDS4uF3y6b+4vP/kDTjvtv8LTyYmo/HaRFr97y
h86aLx8t2rOfarduQy179aFm3XtQjRatqFGnLtR5xEibHwU/JDpKudp1ZCcxdxT85Jly5ZY/Ln7m
6s1byvs9J0ykdecu0q+5clHmPHkoZ+EiVLRiJdk58LxA6TL07+VrVKvV75QmU2Z5bp8vwsS/1xjn
6CDVmjWXHWjcX39TzZatqOf4SdSocxeq3LCRTblkuP/Q5nqX3fVn6SBpEgvqWYE7iLVj9DTkgg3X
CtOGqwWDHeBswb+l6jceL3F4XzmFi+HvEAuUFPf2OLvSUS9veW0OOh4oOq7BFcz3HT0HJUdH0fHA
FZDHyRe+Nunqc3AGdJgT3r7yfKeJc5l/asRBWngHnfWA+2ObMvk3fNTcUHNJcLLP0kHgq/b9fOXv
CtO2mX5Suo1D/dS4//hAtUgQ9zP+KOjDfEF3xkWPDvLP1Vym6dgYIQyOBe/3H9/S9lt1A+gggmWQ
iCKDYCVvLsu6qsrZlICLhYqDflMeFaHbgDyAsOaP6DfEWnM5a4iHWK/fKRNYj5fHbO5POSpowhH/
h1jLTe5EQ9pB9j50k9RdywI6HXALnGsZQsefum4DZcqVx3iOI2QFHef8u49SftDcYcuN27TP9REd
9nwq4yJoeQTP2w0cTCnSpbMpU6X6DWnLjVsspPNarIBnpvzD/nu/W4T0d5/cQZKlTiPH/nmKFadd
D1yoeY+expYQiS07yCKgY8z+b5v8qbffvqc2F02dWsoWGMJltOzIe+HdRymw4zxlhoyyg6ADlapW
nVr17ad25239u5GunBC4ddfPpAHOi1WqHLE7CJZhcLAN67eGTQfZdL2k/OlvPlkWohmvkHYQ/Jz4
KTGeBwfRXAQ/r76nKb45yOcuHvL9HXfuq3gWWQDHPRbOJLmUiztNWbvOSBfPEEfLDubQtFt3edzh
QF6JcB2EEb7QikL/fOu+ef/UX3mFZRDuINEC5qUmS84loiMPutHmG2UMody/2a76nbpQvY6dOQQj
cAeJpHB7ccDgJobJ7ClBO+/U48qJSGuxGAzuIAwGgzsIgxHqHWRXZ8HBLvy77QD/NdxBFFgxGHlN
brHGC0ZWelbskscs/tvDsoMMrqrMXbE3IQyWfGar/QixzzhsM8x7ip8ZooyPsEarUxlloAQlG0xi
cc+/n+/0EOW3Sl/DBBZpaSMn5AFbjVlN1L6IkxsI2tVLPUPAmrFNARhSwdYcy2D6VIq6HcQ8HWzu
IDqccBnAf31odxAYD9FCQflTCVrbQf3s8D2FBYxY2QvnB/YeE2F7gXfQQapkVzbi9t5EcNSmto68
osB/ljbXRQdY0VbZe8B+Hbvpwoiqbl6VPoLZw6K9ua+nyTPjxwVq0WVU6yDaLHfh2e8cPted5e9L
6fnPD48hlotdsL//0O7+pwQXB+cuPMQyMP9MXPnz3/L6O8B4c0/HkfEevTzFfz/LINGng6ghVYxg
xOUJzHDtIHCvg2ES7Lghf2AIo3304j6u8cz8HLbkZkfXZid07pNt33ebbH0f1wgjaii5xv6ZuylP
N1M6Os7mriqf37Ird0L2zw/1V3JOZOkgR5y7+LsExdFy+eMP+/IGOuHZQWA8hZ8xj8XZG2zEpdww
V/nLGl9XUN5UgoZWV15D5jdXz7uUVT8yZJqcJh+++VILKpFRyRxtSij/WrjuXVHJOgXSqKDjw1dw
rhSCFrdUnQ/CPn74khkFvZunfPz+lkNQkXRKdoGAj+eQnSBHNS4kqHBa5ZQbExAh4SArLqb57LKH
I3ykD+RuZ2eiuchj37PcA8KLg2CGKVVC9YNiZstruhLuITDDsApHPIMDuRezrb6wEAdcwCyk4337
gPQgc3g78MoOod3L4ngOXtvRWZ9Z0sczeZxmTQvXz2aqczyHd0cER9wssA7y14UUNn6sFpyJE+5h
TiC7Sy06m8BhBznvMZl7AMsgIQvoyEHpIKddRxg/6J47jWj3nQbhHvw12f3gS4vPfU83Hi932EFe
vHnAPSAydhCY9/7XVfn2BZXf3l3Q0tZWo6XV7QXdHCPoxmjFLTCFi012wCVwjSMCfADv7KGO2Hvk
386C9vdRlmydSqtp5vvjld8tj6nqWrseRdq1cgd9iHXSddBna0Qv34vyh3/26nqQ4i87/zPLIJG5
g2idyocFqoNonUXZzCroeNjQB3LM/75QQzbsHYIhUoJvBcWIoToC5Bcc4QBb617gTyt2LCWj4NlX
/7PVo5wcbJ0sGF4j8sxiBXXvQWmRyLNYkbeDQFbRWyMYepZJAccLUFdjF8+/c/vt4xw9i6gdxMv3
cpDs2ucEcTdcRgg7iAvrQSJsY55w6W90gE3XSxn33354QXNPf2E8+0jv+c8P7Q5yfbR1o00MTTDs
wRDERR8nqpmgwGaBuIOELT7SRz9bJ5jXZjHCoINAr4Hp2FOWsXmpX9WCP8gK8HGLI5w8506h9Azo
KHObcwf53PB560ou3nvp9bsn/KeHNQeRmvAptvt5YKYIM0g+TrbBhTkIg4V0lkEY0byDPHnmy8Eu
fPz4gf8a7iAMBoM7CIPBHYTB4A7CYHAHYTC4gzAY0aWDpEqVKkzj+4cXL16Ea95eXl5+7i1evDhM
8g6tOrJPq3379sF+/9dff/VTnpCUr2jRgPcs9/DwkG0a6TrIqVOnaPr06fK8ZMmSxk8RP358lbgQ
NGjQIHr3zroTUu7cuWnNmjW0ceNG+WNt2bJF3k+SJImMr3Hnzh36888/6f379+Tp6UmHDx82GtLX
15f27dtHhw4dMvLC+8B3330nA+7rPHbs2EHp0qWTz/Gu+WdAnoirj8Dq1atp/fr1Rhzcz5Mnj3H+
008/0du3b+nnn3820pg8eTL99ddfNG7cOCpUqBDFjBmTvv/+e+MdBHyPOU3788KFC9OCBQts7uMb
nJyc5Pfj+ptvvrF5B8ds2bLR5cuXacKECTb5AatWrTLaqESJEkbaFSpUsKnvBg0aULt27WjSpEny
+sOHD3Tr1i3jB8VzoH///kbdxIkTx0gjY8aM9N9//8lrfOfHjx/l/YQJE8r2P3r0KB05csSoL9Qf
jngP5Ud5a9SoIZ+/evWKli1bZnyDq6srubu709KlS/18h84fcXUZURfm+v1sHQSFq1q1qjw/duyY
vC5YsKCfwpsbYu/evfJ67dq1xrMRI0b4iYfzXr16yfNcuXLJnx6dBQ2OZ7t27ZKVvHv3bhmnePHi
8vj48WMZ7PMAdu7cKc+RBtKyL2OVKlXk+Q8//GD8iOY4qVOn9vNNKJc+nzt3Lr1+/Zq8vb0pZcqU
VL16deMnNb/35ZdfynrAD2lOK0OGDH7qV3+bPsdPgrLh/caNG9uk27JlS+M8b9688hw/H4AOtn//
fvksduzYfuq7Tp06RgfDj6YJjjke8gSaN2/up4Ns27bN2FZNv/PVV18Z5wcPHpQ/PjB69GibuKgr
fd66dWs/dYwO8vLlS3mN/0x/BzB48GBJiPQ1OhnOUZ5w7SDnzp2TGceIEcOm4mrXri3PdaFBJVau
XEmJEyf286H4cVxcXPz8vPj4gQMH+ukgLVq0MDrIkCFD5HnlypWpbdu2soNo5MuXzzh/9uyZpOaO
OgjewXm/fv2M+PHixTPuI20A1L9cuXI2ZQFFW758uc034Tt79lR7+j1//lwekyZNKp8nSKDswIsV
K2YTH/mVLVtWnp88edKmfM2aNfNTBzotXTZ0kJo1a8r3wUHN5WnYsKFxrjkeOoOO06dPHxnQAfC+
OS+0K6g9gG/QnU2nV7FiRXkO7qjf0x0E3B5cQv/04KTffvut7MA6H3QQTXx0ml988QXdvHnTpoO0
adOGYsWKRQsXLrTpINkteyCavwOERqepn9WqVUs+Aye+dOkSC+kTJ060aegwGYeGMH2UTQ/twrqM
oYlEiRJ91vxbtWoludnw4cN5FovBiLSzWFOnTuXAIcoG5iAMBg+xGAzuIAwGdxAGgzsIg8EdhMHg
DsJgcAdhMLiDMBgMfzuILwcOHBwH3UEYDAaDwQjRCIvBYDAYDGYgDAaDwYgADAR+XeCFgQMHDhw4
RK+gXU6FmIGY/TgxGAwGI/pAuwFjBsJgMBgMZiAMBoPBYAbCYDAYjOjGQPJlS0kPJwoOHAIMr+cI
2rjtIPdEBiMC4dq1a9GTgbQpLsh1kvXaeYIgl0n+x3eZGPDzwEJw378/PnS/N7zLH5kYCPZHYjAY
wQc2eotQDASE3Gu6oIn1BG3ppq4TxRW0tZughgUEeUwR1KywoG3dBfWuKOjJdEGdygja10fQ5PqK
yKVMKGhnT0GbuzgmRpdGCErxgyC3yYI8pwlqXkTQghaCBv2m0smbSoUCqRWTOTZQ0MdF6hgS4ndm
qHr/QF+/zx5NFdSogKCNnQUliSfo2Ux1f35zRTRx/ntxQZu6CKqaQz1f0lrQ9h6CcqcUdG+cqpv1
HQW1LCLo6Qxr+RFcJwu6PkrQxwUqjZCU//ZYQR/mC/qng2qPbd0Ejaih2gnXUZWBvHnzhnLkyCGD
f8AzvSdaWAC7aSIP7JkWXkB+x48fD9M8kH5A9RoY/v3333CrD+wX9yllDQ1gF9agolq1auFW3gjH
QHTwnCooZwrFMGLGEHRqsKDaeRTBrZ9f0K5egvpUVMTx5CBBazsIal9SMZQuZQU9miLoz5qOR9J4
N8OPgvb2VvHxniTARVV+3rOswVHZfJ0EfRNblQXXPrPV9cvZ6hqMCddr/gicMCI/EH6UqUNpVR58
68DfBJ0ZIuiVk6DxdQWdGKTqAXkgXZS9Wk5Bd8cJ2t9X0JEBgjqXUQQ9sPK/sJT3nknKAbNEPeg6
ShxP0MxGft/Ft+VJqRirSxSXQLDJYufOneWOnthI0eGPL4Tc8BJbEWOfN40yZcrQL7/8Qt26daOH
Dx/KrZCbNGlCcePGpRUrVsg42C4ZccAksB2xeZ9vbIuMXVPxrt6w0gxslol3wVhw1Nv9Am5ubpQ5
c2aaNm2aQVCwNTRw+/ZtGR/AtsE4B6O0/ybsrlq+fHmaM2eOzTNs59yoUSNjy2EAG3hiA0ls5Kh3
skW6HTt2pFGjRlGlSpX81Bs2mNTl0HWFrYRxxBbI5rRxD5uAYofdrFmzGrvG6vdnzJgh8+/ataux
/TWeNW3aVO5ZWKpUKZu8scVzihQp5FbVGtgUEzvqYtdce2CrZZ0XWTb1xDU2APXx8fETH22NLbqR
PzY4BbAJKN4ZOnSobAMA7YN2QnuZ2xXbKWPLaLR5ly5djI06dRmuX78uz7HpphnYCRdbSiPN8Nqf
McIyEA4cPicDqV+/vp9tux2NynFfb4sNYyndcTWhMwO772KLadzH1tR6a/GnT58aaW3dupXSp08v
d/sF7t+/75CBgIjp9HUcEC4QEJxjB2mdF9ltTQ5Ghp2hsUU4dll29E16e24QIzBSMAbcP3HiBF24
cMHYiVhLamA02EnYnI+WzHCOHartR/WO6koTTADMF+coo5lQ416RIkWMa5Rt/vz5cotwc/5gTPpc
tyXOp0+fblOWAQMGGHX2xx9/yO+wZ9Y6Xb1TMr4XjN+RpOCIeKO89rtNo330Tt9glBrr1q2T/4D5
W/Q5BjQ4P3v2rGTk5m3R9SAibdq0zEA4BD1AWoMk4zUjcpQX0svjaYJ8nCImAwGRRAfEiFfDvMW6
PbFF2L59uyTImlDZMxCcQ/L48OGDPG/Xrp3BQHT+OMdoV+e1efNmKd0ExkDu3r1rMBBINThftmyZ
JDZgKHrUqreb13klS5bMX6kKI1x8E5hHp06d5P2YMWPS77//TosWLaKBAwfK0X68ePGkhAbYMxBs
L6/PkyZNGiQGogkkAAkBI3ccEyZMKKUGnQ8I7NWrVylBggRSGgFQ9+b8S5cubZyjnJq4Ij98G+6v
XLlSMlOcQ+pr27atIbk5YiCnT5+mBg0ayDLlzp3bD7PRjHbKlCnUokUL4z17BpIyZUrKmTMnbdu2
TQ4mwIwrV65sxIEEos8hkeD88OHDUnrB+fr166lly5Y0a9YsGQcDjkyZMhnfpd9Fe5nrxMxwRo8e
zQzEUQBhaldCTfs8myEodixBdfIImlJfPc+fWtDIWoJq5RH0YpagJgUF1cot6Eh/NR1WJ6+aJrsz
VtCDCWoK6bfs6oj3C6UVNKa2oBq51JROuiTqHHqU4wMFJfhG3e9eTtCoWrZlwxQVpofq5RP0dztB
7pMFtSqq3t/dS9DFESqvpoUEjaiu3pneSNBvOQQNr66m5vpXsQak17O8KqsmyKvbq/SgI4JOyKmp
eh86JEy3Da6qritkEfR2rsoT9VM3ryLUSb8T9Hae+g5cx/lSUPVcgkbXUvVZLL2gmrkFdSyl8oPu
CfE/LBC0rqOgf7uo55hKRP7Q2WC6rVdFQc4T1XfSMkGnh7ASncFgJXoEYyDeFqZwdaS6Tp5AEC1Q
K6+g+F3UShAtF/R0uqA74xQhh5IYTOPdPEGF0wmixValdPtSijhfGalG+SvbWt6fYVVy0xJBS1op
vQiYR6mMivA7Kh8YEOKUzSzo8p+CaKFSjoPhvJojaFg1QUXTCyqeQTG4VsWU3gUKc4zccU8HeyU2
dCRdy6k0kyVQ180Lq/edLcwVhByMBMwOddWooKofLFpAecB88H1YaACGVSKjYgQFUwt6OEEtTtAM
AHU4u4mKj4UL0Mm0KKKU9qkTqe9pXFAdwbg8p/IqLAaDGUgkmcLCCH1oNXUMSvyTgwX1r6wIfEjz
AyNAnl7TeXotMuhAhg0bRkOGDOHAgUMwQ1ANxFkHEs4BU1v+2V3gPvQI7lPCrzyaoSJv6FvcJwf/
/Ud20scfJdmQkMGIDmAGEoqhX2VBJTMq3QUII6bK1ncSNKaOer6zh1pmDJ0KppoKpLGG5zPVMl7o
G2CfAUJeL69Smu3qqQj8vObqGmnADmRIVXWdJrGawmpdVF1DSsIUFc4xhZf5J0H7+6hrLPNNHFdN
cX0ZS92rnFVN8cX/WtCbuYK+iKHKg+XGeI5vApP4q426LvWrKh/0SNC1LG9jrQPoVPQyY0x7QQcF
40n/mCYzEAaDGQgzkIlKGX9tpDIwhBQB3czh/kp3gSkwGDpm/FHdc7boNXSw13mAQXzzpbLNyJRU
vQ9l+A/fKB0ECDqeJfxWUKqEalqtfGZltAjGhfyr5VCK/W9jC+pWThF/pJM0vqBZjZX0gIUIyX9Q
Cw3kqprvlPIfDAKLEnImV/ehUxpfRxl/giF52ElJKH+JDKrc+t6iloKmNrTqlJiBMBjMQJiBcGBf
WAwGI2IwkB091IjcPwtrDsxAGMHDizf36bHPGbr7dD1d9JhGri8O0NNXV+njx3dcOYzIy0AuDVe2
Ci6WaY+qOZUNAqZE4AMKS03hAwpTNE0KCaqSXdC5Ycq3FWwOcH1ztJqj//pLZVuBZbZQPiNdzLuH
lx8nDsxAIgJevnlAy8//TLNPCppzKmjB6ZSgGScEXXo0gyuQETkYCBSp/3VV/qBA5GE/oOfHwUAw
Fw+7iwb5lUSCuCAwYBAwmqMVgq78qRwOQoGbP5Ug5/GCCqZR8ZEu9Auf07ssB2Yg4YVtt6qSkx3T
AFM46tydXr/3cvjOLa9VtPJSOj/MZuYJQa/esd0Mg3UgHJiBRGncf7aJZp20Jf4v3jwIUVqbrpey
YSTzTsflCmYwA+EQdRnICZcBNO/0l9Gywx683846DXVS0GOfc6GS7oIz3xjpgjkxGJ+VgTAYoYUT
LgNpxnHbKZe5p2PR2ss5aM3lbNEm/H0pPc05bZE6jgt68/55qNbz6ksZjfpdci4h/3gMZiCMyI1X
7x7R6suZ5DSNrSI4Bs0//RXNPx07moSvLIxTff+RB10CrLd3H3xp7ZVcUpqYeizoEoXWjUC6wUou
BoMZCCPK4M37Z7Tq0q80/0ycaPftZsX3s1fXA4z7wbJc9/jDPiFiIAjnPSbyD8dgBsJgRDUGcslj
ZpDe+RQG4uV7iSudwQyEwYgKOOs60iDus8NA0X3wfnsj/WnHWJHOYAbCYEQpLDob12b5bmjhnPtY
6yqsE6G3uovBDIQZCIMRgbD0fFKbpbzHnHuFOK33H19L48PQsClhMAMJNQaSOWVc6l5ccOAQYBhc
TtDOvUe4JwYTb94/tSH8c4LhmuTdex9afTm7H2v0rTcrccUyIgYD+VyGhO6T2TiPLdGjF5acSxSg
HyynAJ7BngQOFxmMSMFA4PPqYD+1LwV8WGGPDL2jHRwi4lrvrw1/V/o59g3Hu7j2j0ncG2+7TwXe
R1qdyqi0kacOeH5ikKCHk5WvrZAQv7NDBT2YJGhuM//joLzaNxf8f61qp4gmrvFd2Ktclxl7vSM+
vgPOJi+PUPfw7c4T/Zb/xmjlPBL7kISk/Hj39hhBI2sq55TwMfZoKjOQyC6ZnHMfT/NPf0lzT8WU
ThM1c4Hx5abrJemx73muKEbkYiAg+lu6CupYWm2ghHv5UlmIantB7+cJ2t1LxQGDwaZMh/op54jY
6e/VHEET6ymCs+x3/wlSkXRqoyTsgY5d9nydBHUuI2hvb0G5U6iAfF0dOFxEWUBI7a/N3n1xHZR9
1UH4fS2MAp6EnS335zdX34AdCUfXVg4jcyRTzG5nT0Hbuqtd/FwtjidRbmwGBY/FuvwIrpMDLz8C
NppC/vr62Uy/m0Hp8GKWoF4VBW3oFH6SHDMQBoMZSLCmsDAiB7EDcXs2w3Z/bVxDagDBxfkTSxwQ
VBxB2Pzb4Q7PdUD6IJQ6D+cgEDO8Yy6PvjYzEFy7BZG4In/E16N6fJcu38OJ1m9DGXVe5vyNbwki
MbYvv87D0yRVoO4c7bmOd10n8RQWg8GIxjoQDqwDYTAYzED8jpInCrowXFD9/IIeTxO0sKWgYdXV
CB5SzZjagmihoHUd1ZTQwb7qOaaxMCWGjaiGVbPufIg0RtRQR+gcMKVEiwT93U7pB4qlFzShrtrg
6uJwQVMaqDIsaCFoRVu/0gbyRX5yj3OLjmW4JX/oNqDTuDVGnWsJA/lDooEEAGKqA8qP/U1QDj0V
hnSQHurA2TKdhvfxXcgfdYBrTJ9B6sA0GcqD8uP55PpKAsF3oM6mNVTpSV3RNEHtS6ppwtlNVH44
xzTg4laC7oy15o/v0nu6D6+hyoj4+/oIoqWqrpiBMBjMQCIMAwGRHVVLKaz1/LzWoWzqIujtXEEz
GitdiVaQf1ygntfKoxjL1IaKWOZMrggj9CsgwiC098db9RM6zy5llV7gqZ4Sm6qYVsuifqd7QLzz
pVaEukRGRcTfzlMMqXkRRWz7VlILB/AcZYOOA/njGQh+/XzWYD8VhTgoD8qCnRfxPct/ty4+wHNN
uDFlhnIUz6DKjTKgjhoXVIyjei6Vn9YX5U2pGCj0L2ASeBf1BAaC+sT7O7qr70D+jQqoe9MbWZXx
z2ewBGKG24uDUpl94F4b+vdaUfrvRlk6/KATXfKYQW8/vGDKw2AG8jmnsEDI4vxPkFcQCde5oYKy
Jwu5ctjLQji/jKWIME8/8RSWGRuuFrXZ5CmoAW7qwVQYDGYgrAPhMDHoiwwiOwN58GyLH2M+WHKf
fDiA3r739vc995dHaNmFX/zYZyw8+x1TJAYzkOjKQKAngD4F02GYOsK0FnQeetks7mf9xTolhmkk
HaBTWN9Rxfu3s5UQO0+02pHo60dTrEujnSda08fR2WRM6TzR7xHTXebnlbJZ8xRCBeh4HBlnutnl
h/Pzw9Qya/NSYNinIJ82xQNnJpGVgZg3uIKdxQWPKSFOa/G5hDaMBE4N/UPx4sVp9wMX2nnPmQOH
MAsT165nBhLeAfYpWodyfbSgHT0Frf1D0K6eigmAqEIHogltnpTWYG+/AaKdJJ6g779WhpCID+L+
Zq6Ki3xwjXOtR/nhW0HeM9V96FhwhK4Cim4QdVzDDgQ6Ib2Ut3YepTNBuvHjqLRixVTp9ako6JvY
lnQWq+P7+YIa5FfGjo6mCe+Ms5VEYCgJ5TzyjwoM5OPHdzabW62+nCVU0n3/8RVNNzGljdeKhIiB
4Nm6cxdDnaBUb96C9rs9Mq533H1A/12/5W98PNtw8Uq4EDuUZZelTnB+yNNLht3OrkF6f9f9h7Tx
0lVZXpwHFh91vPLYyVArv8z/4pUg5+/o/Q2f8D4zkAgSQHxBwLWOBCN1XGs7DEgn3pY4QdK7TFdE
WNu9QNHtbTIEBFPCtbvdtctE22swCM9p1nyhoNdpIA+8j3zw3Ky819b75jRx7sheBO/b65eCoiuK
bAzEvHf4puvFA43v89aN3n14GeT0zS5JnJ/vDJSBgGAef/6Suo8dT6tPnaVd95wpza+ZaMXRE1Sq
enXa6+JGVZs2o7VnzlP1ZooJNOrYmTZduU712rWnAx6P6YfESejfS9eo7+SpDonJ1pt3KEfBQnTA
3ZP2PnSjKo0a0/wdu6lqk6b0z9kL9GuuXEbY5+JOW27cptO+b2nauo3y/RotW9Ka0+eoULlytMfZ
lSrWb0DLDh6hZGnS0LFnL6hxl2604shxqt/+D9p++x5VatCQluw7SGVr1qK9Lu70c6pU8r0U6dPL
/GP973+04cJlGQ+MY/XJMzRy0VJauHsf7brvQgVKl6F9rh4yLXxfzZatafXps5S/ZCnJVMrVrkNL
DxyS34G6RBn+OnqcWvXu45BZlK5Rkxbt2Ufps2aTdS2J9gMX2n7nvjwfOHMWbb52k2q0aEXn336g
hh06yjr4OWVKOvPqLfWfNsO4BoHPWbiIUV8z/90s05y7bSc16NAxRMQe78/YuInqtGkbPSUQvayW
AyvRA8JJl8HS1bjasztRuDOPxz5njfwhLQQEV+/9NO1YDMv53iDv33HefaJJJxI3yBLIsWcvKVv+
AnTQ4zHF+eZbmrhqDZWtVUvGLVOjJo1ctIRa9uotR+Zjl6+gEQsWUd4SJSRDKVimLO156EoV6tQz
RvLmgPhps2ShcX+tpIOPnkgC/OfCxZKpgMAjTx3s3z3y5Bn1GDdBlgflQpwytWrL8tRt244OP35K
fwwdThP+Xk3jVvwtCW2t1m1ozNLlstwguKWr16BJq9fSl7Fj06FHT+jHZMnkd6TKmFHmr/OYsHK1
ZHZgTCgz3gdx7ThsBE1a8w99ESuW/F7cH7NshWSgOwMbsd9/KBneyMVLqeuosXTE6zltuHiZRi5e
Jutw89UbVLZWbVn+BIkT0ymf11Tit6ry+0pUrUZnX7+jxp27yuuS1arJNA+Y6stRW+KbIe0PmD5T
xXf3lNcLd+014pStWZvSZc4S/aawsGS2f2Xr6PRAX0F3x6oRMZanjq0jyMdJ6Qjg0mSc5RrLSv/p
oK6fW0b1sMXA9dPpaoktfDoxM4o6DMT5+TaafDT4K5vCIyw8822QOpjPW1c55XXEuXuQ4nv6nDGY
lKP9PlgHwiFa6kC0M8CauZUNgzY8w1y9nu4pm1kxCihlYWxHf6l3YLMB4zbM59NyQUtaq3fgEwpT
K7BjwDWeV86u9AXOTJyjlATy4eNb2nCtuLHq6XNIIJ6+Z4wpphnHA5co5pyKQXvuNAhWHpcfzTSY
FKbLmIEETQfiSPoxj+ghqYR1Oab8syFc8mElusX3khu7XmcGEkIdCBjK58D807ENAr/jdq1QT99s
S3LzyYrPzkCgeyhYtpycQilfu46c4mrVt5+8zpw7D53w9pE6FlyvPH6KVhw9Ls9jf/UV/da4iSTe
vSdMkvdGzF9I83fupiZdu8nQYdhwqdOArmLqP+ulbmD9+Ysybpxvv6VK9RvIKS5cF6tcRR5x3X7w
UHk+feNm2uf2iBL++KO8jv9DAjlFNeWf9fK64/A/jfcRKtarT4Nnz5Hnx56+kMe1Z8/LI/RG+UuV
lrqTqf9skPfa9B8oyz99wybadvse/ZIqlb+K+VUnTtP5tx8lMxs2dz51Gj4iUjMTVqJzYEPCMAB2
8DMruv+7US5U0gVDnG5a3bXmctYIsYz3qNdzypIvv1Q4I4AoxvziC6nAzlOsGB176k0Jk/5EFerW
k4T9pM9rSXwrN2xEsaTOwZMy5shJDTt2otpt2tLfJ05R19FjZRg4Y5ZkUOb8Tnj7qvcbNJL5QOcC
ZXr6bNlozLK/aM9DN/opZUrJnMrWriMJOnQgIkYMKlyuvCTgJatWpd8aN6VfUqeW6WPBQOpff6XM
uXJLhoIyIQ+lh3giz6HH+Orrr6V+omytOtSwY2eq/XsbmV9gdTRh5SqZh5aGek2YRP2mTpfMiBlI
CBnInt27aOGKfzlwCDAs+OtfevbsaaSyAXn/8Y3NUl5IDdDXhBRrrmSz0a9sCYApRfQprC03bknl
MlZGhej9m3fk+2A0YVG+NafPyvQR9IIBnC8wKag5RAAGwmBEdVzxnG3DSLRR4Y0nywN87+2Hl3Jj
J7Pdh343MLAOhAMzEAYjCgF2HovPfm+sngqWL6wTgg7ca8eVyIiUYAbCYIQyPtIHuu21mrbcrER/
X0pPyy/8IsOqS1nowL3fyfedG1cSgxkIMxAGg8FgBsIMhMFgMBjMQBgMBoMRiRkI24Fw4C1tGQxm
IGHCQOD1tW7e0CdIGZPaWrifHarcrDuKC5frS1op9+QhyQt7fcxvoVyiByU+vPFWyOrXdXtIA9y+
TGskqHK2kKeBbWv1niAuzEAiLS4/miFXdDkFcfUXlhCvv5qfK44RORgIXItjT4h6+QR9mK/upUmk
fGH1r6L24v67nZWx4Bp7dON5x9KCPiwQ1KSgIFqpiLYjYgR/WiUzKgZyZaSgk4OV88ZeFQVd+VMx
C4SlrRWxvD1WuTnHMUQbSI1T798c43hzKTiKhB8v5KeZmt53Hb664AwSvr7SJRH0Yrby/4X9Ovb0
EnRrrNqTA++dGqxcruvyI6A+sUEVnEpi//WQMiC4ekfd4BplbVZYlcNlEjOQiA73l4cc2pKAiZx4
OJCe+J6jl2+c6dU7T/J6dZmcn++glRfT2FjSIyA+MxNGpJBAwCBARN/MF5Q2iaACaQTt6KGewbMu
NldqXljQ4+mC8qUWVCOXoPQ/CjrUT1D6JII2dlZ7m9sTONfJ6t2k36kjPPh2Kyeoag5FoDH6D4yY
vbJs0vTIsn8HmBiukZbe8wLXYHRB2dYVjBFlwYZQ8rqykpDyp1blQdnw/aiH94sEZUum4h8fqIh7
3lQq3BgVNGIMhoPymTd7yvaLoJZFrBLG17EFTWngYC+TWYKmNwo96YgZSNgBlvBmxgFL+CPOXYOd
DrbdtWcmO27X4QpmsA6EA+tAoiIeeu+ymaY6eL/tJ6cJu5WZJkYy91RMrmgGM5BPDZhegtfgz5X/
heGCro8SdGJQ+OQn91g3fS8kMISnM4L2/t1xgs4NE7S9OzOQsMCLNw8M1ymQHB567w7V9OeZPA2v
u5qHK5wRdRgI9BvYUKpnBevWqYniqimxOpZ9vRe3ElQhi9KRQJcwurbauOr34mrPb0wVYTpqYBUV
v01xRcBwxPXKtup9KN0xldOlrO0GVZhuwtQT4uppLrOO59vYiuAWTa/KO6m+IFoqqGlhNb2UMqGg
uF8ppTeIcsuigl7PFdShlHpe6ldrQL4LWgi6N866+RY224JOqHwW9X1Q3mNaCtN8eL9JIXUNPRCu
u5ZV9TOridKXYLEA8i2XRelOcqdUx5zJ1Xtbu1s28zIp2DGt93aeoPWdBE1tqPZcqZ1blQ/5Y2qu
VVGlo4HO6dVcpUMJawby8u3DaNdZ556KZdpOt2Sg8a88mmNsSjX1mKDjD/sHGB8egfWUFo4v37ow
hWREHQkERHpnD6XbAMFLnUjQ0GqKUOI5NqTC9YKWitDXzydocFVBq9opwp4rhdq18NgANdKGcr5X
BUGtiymGUSWboGHVBM1pptJb2U7Q4N8E1c+vlOXYC/yPUoJ29/JbNjwHcwDh/uFbxWCgA+lTSVCu
5Co/6De+iyOocFrFYHpUUAr+diUVYUf6OviRhqYpBTe+L3FcRbCRdu+Kgv4oqZgMCDm+BzokfA8k
AcQH4wAjmdtM0Mhagn6Kr55//7VS3seNLejxVEHnhwkaUk3pTLApFxiRfh+MAfnjefIEqoxDqwvq
W0lQ00JhP4Xl/eYurbiQhpxO6g2lEke7zmrWV2B73aDi74sZaP3VgsHO47KnE1NIRtScwgJBBrEO
6hQTRsqI/6n5BSdPDp/GQO4920jTjkfMLW0/dwjM4y9w0WM6zT0VR57vulOPnE59HSwG4vbiEFNI
ButAIlLACivs/Q4Jwv4Zluv+11VQn4rhVx6tr4BEASkGkk5Ql/DinYn11bJr/Q4kwxQJrM9Dcwrr
vPvEz7ql7efGztv1TIruL4L83pVHC+j1O68gMJyphoIeq7w+fHzHFJLBDCS8AuxWME0EHQCI59Zu
SvcCHQUU8t4zBRVLr4gmdA8zGlsDprwujlBTb1jCC4L8b2dBsxornQ2mvEpkUEugoTPBlFmaxGp/
eEzVYYoucTxBa/9Qy56fTldLeqHDwFQdlNu4nt1ULWsGA8Ny5IJp1TJq6D4wvYZy6/egFF/VXlAM
y1JmLDuGnihJPFUe6EoeWaa+8P3IE9Nf2uYFcVa3FzSoqv971LMSPXgw7z+y6Mx3oZbuI5/ThvSB
acILHlO5shnMQMIrgODDPqVQWkHtSyoiCn1EvlTWazCChN+qe+6TA59yg70IdDhZflYM52A/Rdxb
FFbPN3dR113KKMIPaULu99xfpbGvt7qGASb0PHH+pxhPqoTK5gZpoMw9ygv6r4ug2P9TehHNENZ1
EJT5J/XetVHK4BDpLW7pV7rA9yOunt6DXU6t3Ep5z6uwQhczTExkxnFB3q9vf1J6Ky6ktpkeu+21
iiuZwQyEA9uBRFVc8phmLCiQxoQnsD97efoYxGmnB8+20ZyTMex0K2z/wYiEDATLSTGCPTKACSoz
EEZw4OK9h6Yf86tkx3QUJBXt2gQMZqaDHRNhxb76ciauSEbEZiCY18e8OqZSPKdZDdfq5Vfz/pgv
T/CNsi9omF/N0c9rrnxgYYoF9zd1UXYV8C2F93/4Rk3t5ElhdVbYobTy6cQrpZiBREccde5Oi85+
J1evzbQwEM0owFAQNl4rTJ4+p7iyGJFPAoGyt3gGQY+mCEqd0KpchTI2XhxBkxuo+XkonWF/Meg3
5YARvrBwX9s5PLHYXcCHU7yvFIOBgZ32W8WBGQiDwWAdCAdmIAwGIzoxkLxZU0jrZw4cAgq0WND6
rQe4JzIYzEAYDAaDwQyEGQiDwWAwmIEwGAwGgxkIg8FgMKI2A7ly5Qpt2LCBAwcOHDhEsvDff/99
XgZSsGBBZs8MBoMRCXH06FFmIAwGg8FgBhIiwHNsypQpwzT9Pn36fPbv9PT0lGV58uSJvB45ciTd
vHkzVL8zYcKE8vyHH36Q1+ENX19fme+9e/cCLWuqVKnCpAyo18A6TEjqtmLFijRr1qwIRUDmzJnj
sJ1xr1atWuHSd+PEiWOcjxkzJtz7ufRk3aSJ0fYzZ878pPRcXV1lms+fP2cGEtYM5M6dO7Ky582b
R4kSJaKqVasajWpu4P3799Px48fl+cKFC+n777+nH3/80Xiu78eIEYOqVatmk8e7d+/8pHfr1i1a
u3atPG/QoAG1atVKnr9//56ePXsmz3v16kWtW7d2yEDwc+A+KjZDhgz066+/yvtfffUVjRgxQp4X
KlSIihcvLs+//fZbKleuHPXu3dsoy65du+R53bp1ydnZWRJEPAfAJOw79vTp0+U9HG/fvi3PN2/e
bHxHvXr1qF27dvI8W7Zsss1wfv/+feO7u3btShUqVJDlMQNzoXiO+6hH1C2u58+fT0mTJpUBmDFj
BsWMGVPGwfOlS5c6rJd06dLR3Llz5fmCBQuM/L/55htatmyZcV26dGkjreHDhxvvjB8/ni5cuEAF
ChQw2jZx4sSS2Pz7778Gs9Pvoj2ByZMny//I/r9A3aJtAHw/vke/q+vH/H/EixfPOC9Tpoz8BvxX
ly9ftok7dOhQo16fPn1KjRo1kv+mTvvq1avG+e+//07btm2jOnXq2JT9+vXrRl7JkiWTberh4SGv
Ud/JkyenwoULyzixYsUy6jR+/Pj0888/y/tDhgyh2LFjG2k2bdrU3zavUaOGTAdx0R7+MRBddwkS
JKAUKVIY96H3BEBo8cyM169fyzjoA2XLljXSxjFv3rxG+dCv/GMg3t7exnv6f9Lp6jKlTZuWvvzy
Sxmnbdu2xn3kod89ePCgPMf3gs7gX9Jz/l9//bWkXYsXL5Zx0Ff//vtvGyaFc9SvZrKrVq0y7ufO
nVv+q6A39vWnGUiWLFnIyclJnqOP+tceaAM9YJLbOLRoYZzjn0dbaxr55s0btbVDly7yX2/ZsqX8
76ItA6levbqskO3bt0uCumPHDqPyOnbsaJyPHTuW8ufP7+/PrhsdP6N/cfToxp7w2o8ahg0b5ofh
2DOQfv36GeXeuXOnUe6PHz/adBrg7du38nz58uVGfBcXF4OB2JcTPwSON27csHn2+PFjeR/HoHyH
jqPrFec46gBmaZ83JA97CaRy5crGeZIkSeQzfMfu3bvl0REDAYPTDFVLCrjfpk0beb569Wqbby9f
vrwN0b57965xjo5jJk46D93mbm5u8lp3LvP3pEmTRp7v2bPHeIZOD6Ki/7nDhw/7y0AADFzQ6fVA
xhED0QBhLlq0qJH2vn37jDQ1s/3iiy8kcdVxDhw4YMTRhEYPXOz7hWYgQJ48eYzz7777Tg4azHDU
5gAILwiYZgL+9Rf0TU08dBwtBdsPyjRA1Ozv4z8x32vevLnBzB0xEJ02Bi/6vh5ogpkCaDOdJtJC
muayI0/NQDTAwHHt5eUlma+5n2oJxJ6BmAk//t0XL17Ic/xzui39YyDmfpoxY0ajHszt8eHDB8nY
wKj0/6v7IM7BvBxJhOj3GDDiPgYbUY6BgLteunSJJk6caHBajLrsR776Z0CDQsTHFAYAIosfY8qU
KXKEX7NmTeM+0tAjdZ1XpkyZAswDBOt///ufHKUgLxCEjRs3GnHxQ+Acox/g5MmT8hojWxwHDRrk
J02MLvFD58qVy/hZdMfFOz4+PjZSEH5g3N+6dau8t3fvXj9lxQ+Fn+Kff/5xWK+jR4+WxAIdWaeF
1RT+fQfOkQ+AjoORLEY1aBt7XLt2TY4o8a0gvDpN/LjmcoIR4rpv375+0jAzEIzAZs+ebdNOnTp1
shmtdu7cWTKl9evX2/ysiIvyACC8uMb0gsb58+flPf1foi31SNVMSFAGvAfJFnVrn4fuoPb/rpa4
IAlCqkC9aEnKjFGjRvlpQ0iIuDd16lSbNFesWGFc47/GPcQ1x0Fbapw5c0a2FRiSbk+0vc4P9815
o3y4Rtoa/rU5JJTatWvTkiVLHPYX3MNIGP3Evo9DikLd6r5qj4cPH0oJFOlDmgcwWIFEj76nR/I6
Hz1tinPQC/0t6K8g4LgPSQzHHDlyyPYEwTUPgFBvSBt0Qd8/cuSIzbeB+JcoUUL+z+a+jz6E8zVr
1tjQEnN7mP9d9Gtco2yQ+jAgMUP3QcwqgHFMmzYtwPbAYDJz5sxSksK3QYLVeYJe6XP8hwCkYEjF
SBuMhHUgDAn83BhVPHr0KNJ+AzrpL7/88kmjouAC+Tn6P3G/WLFi/GOFcl1DQo/OAAGHdIa6wMA0
MuOzMxDMHTIYDAYj8kHrsz4bA2EwGAxG1AYzEAaDwWAwA2EwGAwGMxAGg8FgMANhMBgMBjMQB8Ca
f6zp5sCBAwcO0SvAkPuTGAiDwWAwGMxAGAwGg8EMhMFgMBjMQBgMBoMRiRkIBw4cOHDgEJzgJZiH
MhgMBiME8GUGwmAwGAxmIAwGg8FgBsJgMBgMZiAMBoPBYAbCYDAYDEZQGMiWLVvk1rUcOHDgwCF6
hV9//fXTGEhgnhgZDAaDETURBE/szEAYDAaDwQyEwWAwGMxAGAwGg8EMhMFgMBjMQBgMBoPBDIQZ
CIPBYDCYgTAYDAYjEjGQvOnjU74MHDgEHDKmShomP7eLiwsdOHCAAwcOIQhPnjz5vAzk/lhBDydy
4BBwaJgzbLzlFC5cmIeIDEYIUa1aNWYgHKIvAylatChTAQYjhKhVq1bEZiD3xoc+MXo2U9CZIbb3
HgSQj8skFUKaX3Dfvzvu0/JzmP9nfJ8ZCIPBDCRcGcjzmYLmNlPE6/E0Qa/mqPvOEwS9niPo5WwL
4bdcI75+5jNb0JNpjtNFHKTlOsn2/VG1BPk6+Y3vNlnQ918LKvWrIM9pwSd8yCf+14IqZhX0aKrj
8ujye1qev5glqEF+axyUF3GcLdc4fzRFvYvy4Rrv4lv8EP+Jgr6Lo9JzDSFTwvvNi6jzBS2sdc8M
hMFgBhKhGIjHFEG3xgjqWFpJCiB69fIpwgViebi/oL29BU1rKMhruqB1HQXt7yOoa1lBPk6CauQS
tKSVoLp5FeNxxBD+6yro2EB1vbq9oJ09BaVKKOjDAkF5U1nDzdEqfplMKuA8JAykZEZB5bOqb7N/
vrmLoK3dBE2uL2hJa3Xv6QxBjQuqczDClW1VPFxXz6XOi2dQhLxsZnX9a1JBb+YIWvOHtfzlsigG
UjSdqhfPqSEj3oXTCapnqU8wuh7lBd0e65ghRiUG0qBBA8qRIwdt377d4XMoEfE8LIH0c+fOHa5z
2mH9Tfq7gjJ/7gjXr18PVyKJsjZs2PCzEWlvb296+fJlsMp7/Pjx6MlAFrUU1Km0VRrAqNptkmIW
tfMKSpdEjabr5xe0vbugnhXUdc7kioG0LynIe6agOnnVO46IEQjv0QGKuBdMo+6NriXo3TzFuHS4
M9Y6iv+kKSB/3se9vCn93jczEDCEpoUENSxglcbwvWCqYAg3RqvrhvkVs9ndy1r+vpXCpvyQ8LqX
EzSzcdRmIEIIGWLFiuXw+ebNm+XzsERA+YcF0qdPH+bfBPTo0YPGjBkT7PcWLFgQLuWzL+uUKVM+
C/Pw9PSU3/v48eNg/TO7du2KvlNYYAStiwk62E/Q8UGCmhQS9G9nRdAxWj8xSAVMcUEyONBX0E/x
BXnNEFQtp6Cn0wUVTS/osYMR8v3xgk4OErTsd0GXRgia31zQuWGCfvleEWTvWdbgnx5iSFVB6X+0
XtfILahydus10v0mtqCnMwMnjCvaCjo1WNDJwYJWtVdSzpEBgkpnErS/r6C2JZTUhTpAXZTIKGhP
L0Er2qgy5kslaFcvQaNqKqYLKUeX/7k/+c9sJChxPCtTgKSH8r5ysuqdcP3CwVQV6r1+PtVGUXkK
a926dbIjnj592l+CpRmIr68vpUmThg4dOmQ8++WXX2jjxo1UrFgxeb127VqKHz8+VahQgZ4/f27E
SZ48Of3333/y3MfHR95//fo1lS1b1iiDIwaC+HXr1qWpU6dSkSJFbJ7NmjWL0qVLR/fv35eEB3E1
8uTJQ3fu3JHnLVu2pLZt2zpkIBjB5s2bl54+fWo827t3r0wL5dW4evUq5c+fX34bJDJg5syZMh5G
zjieO3fOYfl13eB837591KhRIxo0aJBN2ilTppTPddoJEiSQ5cM9Dw8PunXrlmxD5L97924ZZ/ny
5fL5ixcv5NE8Gndzc5P7U3Tv3p3ev39v3J88eTJly5ZNpumorJUqVZLneJ4rVy4/9WAG2hrP16xZ
Y5MGypUvXz5F9+7fl22EtjKoqK8vNWnShOLGjUsrVqyQ93766Sf5vTjifQCMF23j5eVlvLt//35K
mzatTCPaMxCzHgQBRFETLMz7g1AiQDrBM5xjOgUSBc5BGPXRkUJYvw+GodNDOu5BnKKCFGDWAzyb
YUusdR7OEwJPy/w9OH9gukYe5vIhD0hXuPaZbZUGcO09M+jEGN/tM9tvGcw6FP/K/3xm9FCig7Bn
yJBBnn/xxRc2hM2egSCNAQMGyPObN28ao8Cff/6ZVq1aRQsXLqTSpUvL+61atZLpmSWciRMn0rff
fiuZkL4PIjVq1Ch/GQjux4gRQ76Lcz3FgrIkS5ZMEhncBxEFQbp06ZLx3rhx4+Q53j958qRDBtKv
Xz8qV66cwTw3bNhglDVmzJg0Y8YMyfD0cz1SBsPReTdu3JgqVqzokAHjHvLS50mTJqXRo0fL802b
Nkkmi/OOHTvKsuD7kB+OuhzPnj0z0sYUD87BIObMmSPPa9euTdWrVzfi6DQHDx5MWbJkMe7jHMR8
2LBh8p5m5OaygvHqcxDNkSNHUtWqVcnZ2dkmLto3Xrx4Rrto4onzxIkT07JlyyThx/Xw4cMlY9H/
IO5ppobzbdu20YgRI+Q5jhcvXqTUqVNT5syZaeDAgfI+BhtXrlyR5/hHCxUqxAyEA4fPzUDQCY8e
PSrPy5cvTz/88EOgU1g417uv4fyvv/7yI9WYp4g0AwEw+sX527dv5fHNmzcBTmFpxqXPv/zyS3kO
4t61a1c6e/asQaRAfKBvgO4AxD127Nj08eNHGTewKSyc79ixQ4548R7SBWPUxB84duyYlGYQ9/z5
8wYDAfyT4OwZCHYt1edgGh8+fJDnzZo1s2FyS5cu9ZMenkOSwn1IKpqBAGDoOH/37p1kRP6VBQwB
khLOZ8+eHSADAWM1S5tmoB3AuADUsTkNMF1AMyrkh7bSAwpdXjA4PG/durWUIM1TWDodXVYwpBo1
avhpM2YgHDh8JgaiO7B90FNPATGQypUrG+d4Dhw+fNggGEOGDHHIQLJmzWqMKM15BcRA9NQVzuPE
iWOcYypo5cqVUvrZs2ePJJ5fffWVHI2/evVKEjkQIRD9oDAQEGiMlPGeThdHjJbxfNKkSUbcCxcu
2DAQvBsUBqLrCuedO3e20XlAesN9SBn2DEQTf31+8OBBGwYCpqkZSKdOnfwtC5iW/jY9cHDEQABM
TYFJ4D6moswAM9AMxD4NlB1o06aNvDbXJYA2qlKlihEf8RwxkL59+xrvgkFjupMZCIcQBb0MGOHB
hMhRZpQVOhrnCRGTgWAKCBKBPQHAiNARA4EuAiNBTUDtiSKYiu7g0IEExED0fcTT00bBYSCYjsmU
KZNcOda8eXNjxRJ0BJiyAvS0CHQU/jGQ+fPnG1IFsGTJEnmOdEE0QEShS9HPIYXgHFNlocFAMHpH
OadNm0Z///23vH/37l2pX9DlePjwoTHlhOkdnINZ+8dA9DQb9AvQv+g4kKjAICAF/f77736YgpmB
YPoP00eYXsL9rVu32sQFk06UKJEsn54KtGcg7u7u8hrf1b59e6nH0nFQNi19tWvXTk4J4nzRokWS
+UMHhHbHNN8ff/xBrq6u8p/TEq9mbJqB4Lx3796y7rS+rmbNmqG2ECHKMhDoKZwtOhLoRrQNB/Qi
0HXgGnYVzpa4eoktzqFPMS/ZxT3zkmD3Kdb338wVtLS1NT8cpW5Fl8GuXDptvaRWx3tkyh9lMeeH
uI/9sUGBbkgTordzrXk4et/8jbjnPsX6PbqsqCsElBG6HNSV6yRreljZ1qWM9RoLBgqlFVQknVUv
9GiK7beby48yyDn+FEp5H9EYCIgRpnagnDUDhOWbb77xw0AQFwTnf//7n0Eg9FSSJooA9AEYxYPQ
4hlGlDjqaSQwLH0OQodzjOxx1NNTZuC+LjvOzWUDwcA9TZj0SP67774zpkkcTV8B0PvgGUa4OJqX
zEKXg3uYVgKRA7A6STMcPIMeA0RWpw8G4igv3NM6JnNd4bxLly7yHIp1LEmFbgjTfxpNmzaVugCU
AUpo5A/FPd7t378/zZs3z8gT5cc5GAhw5swZqaMAETVLlMgT8eynr3SZMIUHXL58mUqWLEkJEyaU
+TgCJCK8Y6Z7uMYgQwOMDuVAu4OhAJAWIcH06tVL6sCwOAEAE8L/dfv2bclYwXSQnjn/xYsXSwnm
wYMH8plmIDiHxAIGgnMwEDAZ/9o/2jMQTcRr51GEa3BVtSwYhnxQDMN+oWBaQb9lV0tesbILNiOw
rwAzyJhUUKMCgpoUVO/jnQpZVcD5vXFq6W3VHMp+BCuSsv4iqEp29Rz5YmUYluLG+dKv0rlVUUGd
ywj6LYci9Jf+VPkjQBmfPZmgP0oKSvqdygtpouwoL5jF9EaC+ldRYX0ndQ82MJl/stiNTFdp18qt
vvWV5X18H74NRB4r1ZAfbEOwYg3ndfIIujhC0N5egv5qI2h9R0E7egha2FLQ78UEVc+pGMqAKoKS
xFPfi2XDUN7/UUoxGdid6PRRD9dHC/KdI6hiNkE1c6m4YCC5UwrK9FPwDBvZkJDBiHiIUgwEjAOj
4VXtrNM5IFJY3gvCCsKOUS9sRfRoGiNhMB1aqIwVQdxBtGFUiCWrMNTLn1otl5VLhGcoJuBiMfJD
XFixmw0VsdQW0zRrO/gt44Xhgt7NFbSvjyL+MIpEGVInUhbnA6uopca0QsUBIS6QRhkGIl0whZtj
VACD0QxTMypdB3jnUD/FJOR0kWUFVY7kVukCdQIjRHw70oFxIr4bS5tRlo2dFUOAlIG410Yppod6
1N/jbarPStmUFX3htMq+Zls3Qc0KC/KFZDJJUKafHa9aYwbCYDADiRgSiMWOAaNyPU0zoZ4ioiCM
OILg6WWsLYsoAnqkv7LH6FdZjZL/bifozjhBs5uquJBOYC0OwgcG4jPb6hZlXF2Vxs4eKk342epQ
0rHLj7tj1VQT8sI7kByQBqzV389XzEgzkNNDBC1upQguGNLYOoqBgUgjOHKtMqiqIFqmGBPehzQB
4g9GB2PJMbUFvZ2njCadmgq6/KegLd0E0QJBjQqqMsBG5lB/QUcHKoZycbig16bpsWLpVRozGqt6
6FZO0McFyqBxSgNB9JegEwMVA/yno2LiSHdINXZlwmAwA4ngOhAQdhBYEGIQX4zKD/a1GhIeH6iM
D7UuAq5QIBlAaulVUbkwgTsVPYePuDDqg8QCp4uQTPT7yAvvIg2kBQIL4gpC7jzRsSEeDBfhSgWE
GQwOaeGIfHEfeeMZmBrSgCSh8w/s2yEVoSzXR6n3UD4YIh6wvA/JA2khDq7x/OpIdf3EoscBA7w2
Ur2Pb0N9nR2qyq69A+j3IQXhuXx/uqprnF/505o/rP5xLySuYJiBMBgRF9AlRTkGYg6zm6iRclDi
QvLAHD+mbEKaH0bzcK8CH1u8SiziL+Ndv369XFrLgQOH4AftISDKMhAOzEAYDMbnAzOQzxBcJvrv
iwvTZI48+4ZVMOeFqTZcB2e/EsS3n77CnifB8ebLDITBYAYS7RmIi8XbrvY1pQ0BobPR+gUo76EI
d0SkoWP44VvlzBHpaO/CZlftOMc9/Ry6Cij/tQ7lmekcR+g+kJexL8k0q2NFd4vdBq1U6cWPo66x
tNdjqrVMr5xsGZx5AQH2E4FTyPvjrd+Ipc9QrkPXAgV8YEaFzEAYDGYg0Z6BYDQe9yulm5lYT9Cu
nmp/EijdQdhBfCfWV3uAYMnuiBpqSS5Ch9KKWMPGI19qlR6W8375haAsP1sNHn+JLygGnPl9r/LD
hlZff6mW12IRQJz/CUrwjXoGr8dYeQa9j7SAzqI8G+N8VhNB6zpYDRUfWvY2wcoseASGO3eUt1RG
9RzKdyjSUye0XqOMWAIN9/uaaYFRwZuwZjZY8QaFe0CLBJiBMBjMQKI9A/GyGO5pG5Wk8ZWtBgKW
veI+lt96z7K6e+9TUQUsKdbefrURHlzTawIPwgxDQxgAIg7sTJoXVsaSuIaUk+FHJWVgpRf2GcGq
r+E11Mox6Z+nraBNXazXkJjAjLCMGZIKlvCC6CNN2MzA6rxAakHffCloagO1KRbsX96Z3nc1bemL
806lba3QIX1MqKuWAfs3NccMhMFgBhLtGQgkBGyPi6W1IKaw87g8QkkAf1v2A9nQSS2fxZQPRvSY
DjJPSZlD5WyCMv+siPW5oWrKCVvwQooAgb81VkkbyRIoIo0lu4niCkr4rSLckHJA/NMkUmlgI67G
BdQSYunEzWLVnzyBoJE1VdrYSwRpgpFgufB3XysJqGwmxSDxPHFcQbt7Ot4sSy8HlhLZVGV0CFuY
gKaxmIEwGMxAoj0DcZloZQhaB+LfdVBcfSAOJApzfL0xlovJNsQ84veabusrS++5gjTwDAGMTJbJ
lIezZb923DcrwPX7z2ZYp+n8szQfV8d23xWkHRSnisxAGAxmINGegXDgZbwMBjMQZiAcmIEwGIzI
wEDgMgPTKkHdKpYDMxBGwPjw8S15vbpMbi8O0EWPqXTv6UZ67HuWXrx5wJXDiNwMBMxCe9TF3HvL
okpBjCWnWCFkXq2D+XjzvLrcH91yrfez0PttgPl8ik8mDsxAIjtOuw6lped/pOnHBc0+KWjOKWtw
Oilo1glBM08I+u9GWXrx5h5XGCNyMRAYlsHWQTsjpEWCFrVS51gd1LG0oPJZlCdYGN1h/4uauZWi
eFcvtTKpS1nFKPpWEtS9nHJBDgZ0Y7Ta6wPLTJkwMwOJTjjrNlYyBqdTtkwjoAAGs+JCanr13pMr
kBHxGQiM62A8p92HI8DBIdyB4xxuyuEG/d18Qb0rCoodS+2VAQaBvS3gohzXCeOq1USQPrB0FHtZ
PLEYqsGdOjaaWtSSCTMzkOiB+WfiOmQOsywSyNzTsYx7YDL2cSGt3HiylCuSEbEZCJaeYoqqXj61
LBRSBJZ+6ufYvwIGd/ClBAvuhgWUhIJwfpgyRgODwe57eu8MHGHIBmM42B0gbeyU58KEmRlIFIfv
O3c/DAFMY/XlzHT36TqH77x+70UH77eXTMN+emv3nUZcqYyIrwOBtHC4n3K1YdZvwIUGjOFgiAd9
BmwctncXtK271bAN17CUfmDZi+LIAOUqAwZsOHpOY4LMDCQ64KMf5rHobFzJVIKKQ/c72KSB6a9j
D3ty1TIiNgPhwIEZyKdOW8W3YR7bblYJUTpPX12jGSdsp77uP9vCFcxgBsIhajOQjx8/RMtOe8bt
TxvmseN27U9K7817L5sprRnHmaEzmIFwiKIMxPetOy2/kI4e+ZyIlp121gnztNX3oZKm+4tDUg+i
0z3q3IOpI+PzMpAp1QRNq8mBQ8Aha7ygMRDv17do6fkkUlGMqZYnvuejXYc94TLAKimcEOTz1jXU
0v7rQjIjbehGGIzPykAYjNDAq3ePaOXF9H4Uvn9fSkdrLmeLNmHt5Rw07/T/jDpYczlLqNazz1s3
OX2lV3N5+pzkn4/BDIQRebH0XEKbqRUOVgbq/vJI0Ka8Tgraf691kOKaGdTOT9StMJiBMANhfHZc
9Vwgp6zsGcm801/S/NOxo1Uw23sEBhfvfYYx4YF7bYJU19tv1zDyWHj2G/75GMxAGFEDlx7NMKax
oqMO5O7TDVYGEgQdxdiDgh69PEFTjwWdgVx55MR6EAYzEEbUxRXPuZK4PfI5Fa2+26xAnxUM4h4c
BuLpcyZEeTCYgTADYUQqvHn/PFp9L9yyh0Q6CA4DefBsCzMQBjMQBiOqwc37YJhLIKdchvIUFoMZ
CIMR1YDlzE4mlyPwhxUUTD4qaP/dVkGK+9eF5AYDWXkpLVc6gxkIgxFVMO24dRnvSZeBoZ6+2dYG
U2YMBjMQBiOKYP3VAqalvDFDNe2Lj6bb7BHy9sNLrnAGMxAGI6rA/cURG19YoSklmKWPxWfjc2Uz
mIEwGFENC8/Gs/GH9faD9yenufZKThsr9+evb3JFM5iBMBhRDd6v7xgW5lKhfkp8kmv7/fda2Vj4
Q5HOYDADYTCiKGBU6GQi+pBEsDlUcPHP1bw26QTFRQqDES4MpFsRQd2Lc+AQcEgfj4lWSLDxWlEb
yQFLe9dezk0fPr4N9N3z7hP87Is+/YSgdx98uGIZEYOB8IZSHHhL27DF7juNJOMwMwKlZI8ppRTn
5zvI69UVqXy/7OlEKy+mUY4p7bz74h4zDwYzkImCXJgoMwOJRrj5ZLmxj4ejMPtkwM+WX0jNlciI
fAxkaWtBrpNDlxj5Ogk61M96jfSnNhT0aIoDRjNJ0PwWgjZ1EeQ2OWSMCu9v6SrIdVLQ3nFqKmhv
79D7XuS/q2fI31/QQtCe3oKcJzADiezYc7eJdFsSlP1ToDNZfDYJeb++zRXHiDwMxHmioPvjBbUs
KujpDEW4r/xpIfaTBF0aIejGaBXPfYq6vjNOPb8+StC1Uf4TOzCEi8OtTAnvXxwhaHYTxVieTLcG
PEfe2ZMJKp5BxQ0u4UN5s/4sqEwmQR4O3kf6KP/tMeqbcY8WCmpUwBoH337Z8v2eU9W5u6X8SFNf
u1jS0+V/PE3dy5RUUPWcjvMPSsiYVFDdvOr9diVVOZ2ZgURqPPY5TRuvF6W5p78wpAxMWc09FZMW
nvmWLnpMj3aOKBlRgIGA8A2pJuifDor4guCPqKEI48ZOgkbWFEQrBD2YIOhwP0H/dRVEKwWNqS3I
x0lQ30oqnZq5BT2d7pg5gUAfGaCIa5cygj4uFJQjuaD389V7Otwao8owrLoKQZUg7BkWvufPmo4l
mN4VBb2bpySi/X3UPTDNxgWtDAOMjRYLuj9BUOpE6rxnBUFe0wWlSKiuWxcT9GyGqg9d/uZF1DcO
+k3Q2DpWphPcMPA3QRPrKQaC79neXX0TyskMhMFgRBgGcnqIoFIZBT2aqq7BKECoQByr5BCUPoki
kpu7KCmjfBZ13aGUYiDtSwrynimoTl5FYB0Ro5ezBR0doBhC7hQqnUn1BX1YoK51uDna8fsom5l4
PplmlVg003g+M/BROoh7tl9U/ghaQjAzkA6l1fTRvj4qzpu56nsXtxLkPUvQi1lqemx4dUE+swWt
bm8tP6QeR/kin2czbZmqLK9JarO/NgfUa+lMgk4MYgbCYDAi2hTWBEUgB1VVI/ffiwlqkF+NxEGc
25VQYVt3QV3LCmpZRFCpXwXdHCMoTWJBbpME/RTfMSHC1Feb4oKq5xK0rqOaPupYWlDZzILODwsa
MQOzihHDep0nlaAsv1ivzw8XJIQi8IGlhTKD6SEc7KcYZatigpIlENSlrKCVbQW1KqrqAHWR4gdB
zQoLaphfTVF9GUtQ00Jqyss/hmkfIMWhfHohAZgQriEJ4frueHWN+vbzbi1Bs5qEvz6EGQiDwQwk
SAzEZmQ/TU296BE/RsvPLBIJiBimhXAudQCT1PnDidajoykl/T5G4khDvx/UKSq8ZybWIOQI9nkE
RU+g89ffY75GHvp7UT4t6eBa14eWzp5MDzoxhi7HLEHpPMxMwf7a/K2sRGcwGBGegXDgwAyEwWAG
wgyEAzMQBoMZCDMQR9NinytvTEUVTa+WGb+YFf7f62yZhrs7Lmh2MpiKQ1mh3wnOdBgzEAaDGUi4
MBDoDsbVUctwoYy/OlLQqJrqGe5hBRaWBkNJDEU3luiu/kMRwPF1lSHfwb6KMOplxAg4vzNWLbkd
VUvQKydlgFg5u3oOvQHSwoouLL+d1tAvkZzeSNDJQYImN7DoO2aqd5b9rtJHubGSakI9pfMAgcYS
Zb2UGUzi9RwV8J1YUTawiqDCaVVcrFqD4SDSlDqUCSpNrNJa31ER8OE1VBmxmgvPt3ZT8bGK60h/
tbAAhodYcPBvZ0H3xqn3oTtBOdMmVuWB4eWLmco25MVstbABinnEQXrPLCu58K14H6vXoD/CgoeC
aYK3LJoZCIPBDCRMGQgI8O2xaoSLFUXOliW7O3qo5a+w+QDDKJdFLfkFsSybScXFyi0sDYbNBBgD
jAsv/Snoj1IqXRA7rI7C8lYQQBBMrJqiZYKmNFDMCMSblgva1kPlDcnAXhGNa6z2wnJl3zmKuYEx
gKC/nitoQl3F5J7OErSrl6BeFa0GifXzK8K+oZMKWEaLd88OVQxPSySnBqvvBoPoX0XQqzkqbdiZ
NCwg6O089R0ow+H+qs5QBxWyKJuSec2UrQzy+LhA0Jym6vrKSJVWxazqe/EtWDKNFWTIu1I2xYTA
oPF8RRu1ast3tsoTtimoSzBgXV5mIAwGM5AIwUBAtN/NVwQOBM/ZQnifWlY0lflVjYph4a6Jcs7k
FsK/ULns6FxGET8QThBoMAEwH0gXOJptNLRbFEgjSEPbrsDID0zrhgM7EljBIy3YdeBdWKmjTH+3
U8QZDAxSDgg54lTIKujDfBUHRL5vZUH186mwsKXf9GHgh3dhbLmlm1qurJcTg2nAqh5Mx9liXwMX
LbRIXYPxwhZmfnMrA9E2M1jlBQt/fCPsS5wtzEozELwPxowlvrRU5Y9vwhJjMJCHkwRl+ol1IGZ8
+PiOLnlMpyPO3em/G2Xp32vFaN+9lnTWbSw99N7FlIfBDORzTGFhagUjXLg1AbGEhADDOhBQEEHY
iuRKoaaDcC9fKjUy95wmqHt55fYDFu14F8/BZPKkFHR2mJIO9PsgzGBCLYqoNPSUjNcMZZfhSDcC
A0dM78DuZEYjZV2fO6Wa7trdS1CGHxXzmdlEUKG0inHkTaXiHB8YtCXGeVMKGlBFlQnMKn9q9T4k
LnwzzvE9kH5QV2AAiIspM3xDrTyC+lQUlCOZoIn1BVXKqiQZ1JGLxVcX3sdUFwKmtPC+p2WKCuXt
UV4xK+RfJL0qE5gRMxC4SZ9EC858G6hzQ2wfu+JCCvJ568JUiMEMJLwYiDmMrq0IdpAYz1RBaZMo
xhPS/OCCBRLQxs68copXYdnixpOlNnuKBzWAmay+nIvo40emRgxmIOHJQDAqDs5qH0zLfMqqKm2k
F1LHhRyiJgPZcbu2H5fpuIbH22Xnf6RVlzLS2svZ6a8LKaUzw+kOpBNILM9eX2eKxGAGEl4MhAMz
kM+Nped/smEEcKW+6Gw8cvXe5+877z++pjNuI/1ILLi+7bWKqRKDGQgzEP+n0qC3gTLbkXv4v9oI
Wt8pZO7lQxKwWgv5QlEOxT+WEOsFA0EJ8OeF1V4PJth+h9f0qM9A1l3J54cBPPI5Faw0dt6ubyO9
QBLxfn03wHey5MtPuYoU5cAhzEKeYsWpe/fuzEDCMzhb9uzA0lkwAOxLcnOMdY8NKKmxPBirwKB0
RhxMw2kFNabjYPMB9/OagbhMtHXV7j7FuvRY7zmiXeNr4u3I6M/Z9L5+D0c4VsQKMbjH//ILdZ0m
kVp0YI7nYlLku5gMDjP+KKhJIdtpvSw/q+dYguw2OfBpw8jIQI44d7PZFnbe6ThEFDI9xi2vlZZt
aK2bPQWEv46dpJ33nDlwCLOw3+0R1a1dmxlIuFqOT1eegu+NV0aIQ6oKor8EnRumvPiCiMMGBUuG
QYQn1VOGighYwgsiPLqW1T4ES36xF0jsWGrFGBjJ918Lqp1HUPIf1HN49oUNRomMgi4MU6uysEkU
mBYMFodWU+dgDLAQx3u1cqslwLDZwH14QwaRL55eLem9MFxQv0oqPyxbhg3Ips6KqfwYTy3pXddB
lbFXBUHj6lqlFnyrecdF2OS0LW5ZThxFGMiHj29p2nGzvuOLT07z2uOFNtIMlv4yA+HADCQaMRBM
22Aprx6xp0ssaM0fgla1V+5A9JSRtt0YVk0tmUVoV9JvejBA/Da2IvJv56qdFWFsCEU+JAm4gYcl
Oa4h7UByAcG+O1a5tcfSXtixwNYEacAif1s3ZXMSw+LyHfdpiWJGJTKoaSwwELiFB1NJHE9Q/K8F
zWwkaEVbQWv/UMzA7DLeLB1hCbOWWvReJOUyC9rew3/r9MjGQLbcrGAzbfX2w8tQSXfz9TJGutNP
CHr93itEDGT9hcuhTlCOP/ehaes22txbffIM7br/0GH8DRev0H/Xb4UbwTvg7mmc73Vxp0OeXjLs
vPsgSO9vvnqDtt26S9tu3wtS/H+vXJffGFrl33ztpswbZQjJ+6hrvL81hO8zA4kIfrMmCvrle0Ft
S6iRPKy7YTMB+5O9fRShhw0JJIFrI63vuPiTHmxJQKgRwAww1QW7FVwvaaUIPPYQwTUYA/QQ338j
KF0Sy9TWZEGxYqppMcQpmVFQ+cyCdnRX12B40y15YP+V/1mmsMDQMJ2G9GLGEFQknaCcyVR8pIE4
V//0W14YHppXxWH6DkwuMH1IZGMgs0w6i03XS4Zu2qaprIP32weLgex396SOw/+kUy9fSyZy/PlL
eX/H3Qfy/NjTFzbXR548szCHl3T48VM66PHEMUG5+0C+C6Jifn/y6n/o5ItXDt9J+OOP9FvjJrT7
gYuRx7FntvkffvxMlhn3kL8uB66PPfWW14h72FPdQ3l3yLJ4y7Ic9Xou7+956EbZCxai0z6vaY+z
K01bv5EKl69ANVu1NsqMtOzr4+hTb6O8BcqUpaFz5tGa0+ccM9BnL2U4ZCnLPlcPypQ7t/EczEqX
V6ePb9vt7Gpcg7H5R7DL1qxF4/5aSX8dOR4igl+5QSOatHotLT1wmBlIZA4got4zrft/+HcdlOXE
LpOsFuE6/iO7/T4wrWQm0DAY9JxqKxVhKgppPLHsbQJJwHumbR5y3xBL2cz6DC3t6Dzs9xsxB/gB
M3+XVs6HlRL948cP4c48nJ9vN5TeSvp4Eeg7gSnFbaWbigYDAaMKCgMBYfrryDFq8EcH2fFBaAuU
LkOL9h6gVSfP0LKDR+Roef6O3bT15h1atGc/bb15m/pOnkonvH3p9379JfGq3boNHbEQZXOAlLH2
zAUav2KVvJ68Zh2tPnWWkqVOQ2devaVfc+UygiaARSpUpOrNW8rygICCMC/cvZcOPfKiGRs306oT
p2n8ylXUb8o0Wf5eEybJNBMl/UnGx7MVR47T4r0H6O8Tp+S9edt30cFHT2j6hn+p7cBBNGimkyTM
GL1nyZuPluw7KEfiJ7x9aPZ/22Q50mbObKmf47T88DFJ+FEPK46dpNFLl9POe0pCqVCvPg2dO5+O
PXvp5/s3Xr4m01u87wCVql7DuI/v1cyvx7jxtOPOfRo+bwF1GDpMShK9J02mv4+fpMoNGtK/l69R
gw6dJEPdfvueTZ0d9Hgs62riqjUGkwtuqNOmLc3YuCnE7zMD4RBtlvE+f32Tlp5PTo98ToY7A4HE
oQn8wjPxAox7x2uN1JVgZdWUo4J837oF4dtuG8p5MCos+Q2MgczZsp2qN29hSBgYsa87d5H2PnSj
3MWKU9a8+ahJl27UqFMXmrnpP2rYoRM17tKVSvxWVUoQnUeMlEQXz82jcnNAvAkrV8vzjDlzyuPo
JcvojO9bKlurthHAsOzf7TJyNDXr1p3qtm1PRx4/M97XzKnf1Ol06uUr4xrE8MiT5/I8S968tAtE
9859SYQPeDyWDBHfiim1ky985Xt5ipeQ34t3NAPBOaSEPpOmUPMePalhx85yqgv38AzfinuBEVPU
k54iM0/ZaQay8thJ+r3fQPq9b38aPn8hnXjhK+uydd/+tOHCFVnGxp27UJOu3dS33L5nU2f7TdNv
NozbIr0F9Tra6kBcJoX/NqocIh8Def76Fi0++72c5gFxfeJ7/jPYfSQxGMi+uy0CXi11IRVttijD
YTy49UalIOUx9ZiVgbh47w3SFBYIa9fRY2jEgkX01+GjlK9kaRq1ZJmUODZeukrjVvxNE/5eTZ3/
HCUJ4qjFyyh52rSSMFeoU4/2PHSlgmXKyukgRwRl6rqN1Lx7T1q4e5+UYKb+s4GSp01HW27cliNo
HRzpRGq0bEVjli6XZULZlh86SpPXrpMB00YYwbfs1YdGLlpCZWrWklJGz/ETJcNad/6SnAbCd2Fa
asn+g9R/2gxaffIstRs4WDIVcx5lataU0la7QUNo4uq1tOb0Wckwxy5fSSWq/CalINzDs66jx8q8
AiOmyH/w7Dk0ZtkKatCho7xGWb9PnEgeF+zcI+unx9jxkkmgXPi2KWvXSeZSukZNKb2NXLzMSNNc
Z470NP9duymnivW0n9OW7fJaT8lhmlI+twwaoh0DMS81vfKnUrbCT5V/0yNBshSfzMQ4KjKQF2/u
0fILqW30Axilr72cjTZcLRhuYeO1ojYGg5ceTQ8y48HS3LNuo4OlY8E3XvSYEiwlOvQDmI/HtI3U
T1jm5HGOgHMQQJwjjo63x3Jvtz+jWv0+pqB0engXU0JBIUg6PspmU5479+Xzo17eRjlwDSlCl9f8
vtaVgPAjjll5Lt9/6EYH3B/bfK+5vFqPguvgTPdAinBUnwhgwjgibRxBfM3545v1dVCV+mDE5u/X
7aOvd1jy3BHE9KIMA4Gksb272l9CG9bBwR88usJGAstAsc8HFLhYrYT9LvTeFlhhhCWj8KSLa6wK
ujFKrVZCWs0KW/f6YMIcNRjI4rPf+XETEhECyvTQe3cQV1eVotknY9BHCprOZtn5pEY+Bx605WW8
HHgZr7ZrwJJOsyt0bFCkCf6h/sqjLjzeLmyhloRCMsGy0p09VYCE8lsOZXMBYzy4LAcTgpIXU2Fg
QGBIetksh8gvgWhDOyc/jCTGZwhWCeSq59xAO9iBe22lst379b0gSytOlnwggVzwmMwMhAMzEG3F
jGWs2INCryCC+3HNQGCAhr0qsO9H74rKKM7TsqoI1tIN86tVRM2LKIaBVT6QVMB0nlgYCOwNsIyW
p7Oing7kquccw3/UZ9OBnEtslQ7utQ0wLvQXUKIHF1oHAib14Pk2ZiBBJHgBPddTb2FaBndPWrL/
EDOQsJ7CgouLZoUsRnUzrc+KphPUv7La1AiSBpgCmEiB1MqmARsy4RrW2ZAwOpVWzAJMCXtk1Mun
9rDgKayovQrrltcqmnkiRrD9ToUGoAvRDGTxuYQBxl1w5mup+5hwRIV5p2IFmv7Ltw8NSQtM8u17
7wjBQKBzMK8WgvIXq560zgLz/Lst54gLXYpZQQ2C5J++BGmlzpSJlh06QjVbtpLXSEu/D70GdB84
6pVHWDSg7SqgLyhUtpzUiWglPp5BF6Lz/t+XX9JleE6GXcnjpzJ9lAd54bnWz5iXRiMPZfPxiFJl
/JWGzZ1Pg2bO9reOsBR6n4u7tME56mA5NDOQUF6F9SkKcw7sjfft++fhzkDgLVcvs8XKqg8f34Rq
+nvuNA62HUhYh2UHD8sVP4l/+okOez6TK7tixIxBmXLllquT1p69IJ+Xr1tPGgcmTZacSlatJu9t
t1hGJ0icmJKlSSOJMpbUYrUSwj9nL0hiniZTJknMQaB/SZ2aSlSpKt/feuM29Rw/QZ4XrVhJrtra
fvu+ZAhYngwmAIt4bXD79/FThpHfV3G+pu13H1D/qdON51CG4zh2+Qqq1rQ5/ZI6FZWpXoNyFCwk
72OJMJhH5tx5KNb//ieX3O5+6EqpMmSQaa92sExZK7nTZMosGRRsa8rUqEVnX78Lc6mHl/FyYAYS
iS3Rd92pF6ppm12877xdO0IwENhbFK/8Gw2dt0Beg7BiGalc7fXQTRLe8+8+Siv4Rbv3UfOevaTh
IJhJ2ixZKG/xEhTnm28k0a/WrLm0FJ+6boMM2t0J3HBAegDBhZHgiqMnpJ1G8jRp6aC7p8xjn5uH
JO7fJ0woVyDN37mHuowaI99DHpBAwITaDx5KSw8couPePpTk558lMcT7V4gMqaXtwMHSeBDvwI6m
//SZdP7tRxmv25hxFPurr2SZEyb90SjfzvsP/XXdsvbseZsl0PvcHsmlx/lLlWEGwgyEAzMQK9Zd
zWOVEk7A2O9tqKQLuxKzR17ft+4RgoGUrFpdEv6YMWNKpoERPaaMytWuKw32eo6bIA3iYEWOKZym
XbtTuqxZKV/JUjTj38208ugJqlivPtVr157mbttB3ceOlzYYCI78SbXu24/SZM4sremn/LOeZm/e
Igk7JAYwrNn/baVC5cpRsrRpaccdNcKv1ao1VWnUWEopkBpSpE8v3ZPM3b5TSgeQaqo2bUYdhw2X
02ut+vSVtiJ4d+a/mynxzz9TmRo1qW3/QZKJwQCzXvs/aIjT3EDrB3UC40c9hQeXJ/lLlabzbz+w
BPIpDOTlDKX85sAhoNAib+RiIK/fP7XZVXDu6VifnKbbi0M2y5XXXM7iv4FiODMQjLrhmkOPsEGA
QRh3WUbk2j0HRve4rt6ipXRFsss0YtfSxe5ArKcRr2679jRm6V8270lHh5bpMJ2m1r9oYz9dBvMz
I+5DN5nOXhcPmr5hE2UrUNDwe/XnwkXSihy2FZoJ4H3Yd5jz8C/AyE/7FUPQxpWsA/lEBrJoxb+0
kAOHQMLqdf9SZMPu2/VtlhQvO/9TiNPy9DllM3U186Sgjx/fRxgGEpwABjFp9T/SQnt3EIivo/dh
xf3nwsUhej8oVuUjFy+V00uL9u6X9yAV4dq/6SlexvuZGAiDEZWx7MIvfuxSfN66BiuN8x4TbSQP
MBK3FwcCdpHCy3g5MANhMCI/5p7+nw0TgePEf67korcfvAN87+7TdTTn1Bd+rNvPuY0NNE9mIByY
gTAYUQSrLmXx4+rEybIpFNyYwODw2MPetO1mVVp5MbXNdJVZ8rj7dH2Q8qvUtDnV69iZA4cwCw27
dqca1aszA2EwwgPHH/a3cfYYHJ9aC898S77vPLgSGZEOzEAYjFDEnrvN5BJcp0AYB2xJFp79hpyf
b+VKYzADYTAYVrx5/5T232tNqy9noeUXfpHh70vp6b8b5enGk2X04eM7riQGMxBmIAwGg8EMhBkI
g8FgMJiBMBgMBoMZCIPBYDCYgTAYDAaDGQgzEAaDwWAGElYMZHsHQbs6c+AQcCidXHBPZDCYgdiC
9wPhEBX3A2EwGFGUgWA/dNdJTJSZgURPvH7vRRc9ptG807ENi3dYxsPXFtymzD0VgzbdKEVevhe5
shiRl4G4TRbUrZwg9ymhS4x8nQQd6me9RvoVswp65mD/dTCaKtkFDa4q6NHU4OflYnl/RI2gf0fL
IoJmNA6db3WZqPKf0iDkafyWXdDMxoLuT1BtwgwkcuL9x9e09kou6Q04KD64nCyM5arnPK48RuRh
IJAQdvUU1Ka4INfJgq6NVATVeaKgx9METa4vaPnvgh5MEOQ9S9Ck+oK2dlfEbU4zQYtaCjo1WKVj
nzaIOOLfH6+un89U17ObCvKZLej1HGsA8UeaRdMJKpIuZMQTDKhQGkElMgrycMBAns5Q+W/qrMqM
ey9nC2pc0FIXE9W3gwGgLlBenN8Zp9JDmXB9a4ygR1MUk9PlB6MEA8mbUlClbII8p4aMeOdOKah6
TlX3ncsI+q+rqntmIJEHhx909teR42w7CcQRI8E+Ju8++HJFMiI2A7k7TlD5LIKuj7Le29ZNEcSB
vwmqkUvQi1mKsM5tJujkYEEvZgsaUEURzD6VBL1yElQjtyLOjpgTLRd0pL8i7pWyCqKFghrkF/Rm
rqAlrazh3nhFgHf2UMElhMRvRw/FEF0m+ZUOKmcT9HGBoNtjBV0daWUqmoE8mS7IbZK6B6Kd9Wd1
vqCFYh4Zkgrymq7qAszxzBBr+Ve2VWls7y5oT++QT9tt6y5on+l91EuFLKqtmIFEfKy5nNUh01h1
KSM5P99BT19doVfvPOnlG2d67HuWjjh3k44e7ZkJJBevV5e5QhkRl4G4TxZUP5+g44PUNYjmy1lq
eqlCVkEZf1SjbIy2MVLPn1qNrCfUFeTjJKh9SUHeMwXVyasIqyNihPeODlAEMWdylcfUhoLez1fT
PTpgVO/ofRB1SCv6GlIB8jRPW2Efb+cJgU8vZf5J5Y+gJQQzA6maUzHGd/PUFBLyRTxIKzjHM89p
gha2UAwQkowuf6OCjvPF+3jPzFRRXrNUEVD5Lw5XbeQxhRlIRMfyC8ltmAD2ad93r1WQ3n3kc8LQ
k5j3JGEmwojwU1inhwhqVlhQ62KCxtUVlDeVmq6C9FEgjQog8POaq2eDfhN0bpiglAnV9FSyBI5H
yBjl50stKHsyQQtaKiZTKK2gYdUFHewbNGLWr7KgX763XkN/UupXE4EdIUgIQc9mBp4W4ujvwcge
34fvSZ5ATTuhvLhGHaAucJ4npXVKLUk8dQ3JLKhTbJjy+jq2VaICA0R5IeVpCQPXL2f7fRfTiicG
Bc4cmYF8fuy8XdduKipk01D77raykUbAhD58fMMVzIiYDMS/0br53CWAZ/b3HKXl3/uhFVyCGdcl
GOVz+YS8wjJNZiARBx4vjtJsE/OYdzruJ6V3xXOuDRNZdDYhVzIj8jAQDryMlxF0mPdSxzLd0MCu
Ow1sJBqPl8e4ohnMQDgwA4lKuOW10pA+oAy//2xTqKVtXsk173QsrmwGM5BPNUrE8tbPlT/0HlCc
I7iHk1L7+UzbZcpQyCMEZWkvFhigrPv7qGXJzEBCH6sv/2oQ+QVnvgnVtB88+8+yrFetyvJ9y/u0
M6IYAwGRAlG/NtK6ssv8XK8eAvHTS1PNR5eJASuk9fuIA8UzjAzt83eUr5no6zgujvKfZC2HvT4C
aSJ/BBBgKLpr5haU4UeroaOrXdouEx2XR3+jPtrXhX7fvNoKK7jypbLVlUCJD0PDFW3V8mo/+U+y
rbssPwsqnC54q7iYgQQRHz9IJbeWPi56TA1cYnmykhac+VoyhgfPtwVLCjnlMoTrnBE1GAikgY8L
BXUpa7Uqx6i8U2llZ7G7l1r1lDS+InSzmggaWEUtwYXNBOJghRVWUY2urQgfbCCwPBgB51him+Q7
ZciHpb+4P6qWSg/5vZ4raEdPVZbUif2W8dooQePqCNrbW70L+wxaImhRK7V0dmxtZTOypLWgvX1U
vKfT1TLeDZ0EtS2hVnwhTG+kygPjSRj4yVVdMwQdHyiI/hK0pZugQ/0FXRmpmAveXfOHItw3Rwua
WE+tWEM94L2uZQW9natsSlAW5AcGheXTj6ersntMFVQmk/V7UXdYOq1Xo+E9+U0rVJ1ixRZsU8DQ
l7ZWzKp7eVVel0lhz0DevH8erTqr7zs3G1uPoOCvC6npqud8Ou06QjKHwLDqYgYjj2UXkjKFZEQN
BgLitPoPQXVNNiAYDYOJPJmmjAbBQFoWtT7DslgQQ9iALG4lqHNZi0X6XGVrAaNGWL0vbKmIodlG
Q7tF0QwE+WMaJ8svasnxpRGObShArPf1Ue/CwhuW853KKOKL5ch3xgqixSpOrTyKECN/2K40L2Jd
9gsLdvv0wXj+6aCIPxgR6kIvJ9bSg5Y4wEjAZMCcUP6SGQV9WCBofnNB7+YL2tDZajPzxMJAHlkY
CN6HLY5mIHgfjGZTF0HrOgra2EnQ+o5q6THseMAsciQPPx3IKZehNO24IE+f09Gqszo/325Vnp8I
Xp0dedCVFpz5KtB459zG2NiFMBhRagoLc/QgnCDmIJL18qkRr7fFgh3W270qKKJ4bICg4dWV0R1s
MGDRjmcwlMOoGWlhZA7JZGQtNWWTNrHl/WmKobQootKAtID8YUX/RynHuhHYm6z9QzEMWLe3KyGo
T0VBBVILuvynMowEwd7fT1Db4oqAQ4LqW0lZ4utpNz3VZZ/+lq6ChlRT7yBtvN+htMoDaaBMfSur
tGY0UswMVvhDqymLdVy3LqqkOPjkAoPpWUFNT0EqwzQYvhf1BAb2YLygzD+r96Hb2N1bnaPOmhZS
TBKSD/JzmxT2DOS82zjplkOPwKOb0dtFj+khIu4f6QNNOCLI1XtvoHFdvPeFmEkxmIFEeAaifUiB
wMK4EOHFbOt8PIgqAqaZEHAORoBnIKYYkXtOs7Vcl/EdvK8tx/U1DP/WdxJ0Zqj/hoNgXBi5Iw83
ix4DUpK7Pp+spAUwNLyDoyOjPv+m8RAXjMK/9+3Lj/KYr8FE8L5O57mlzHpa0GOKNb6rP/X5ZJo1
T+9Z1voLKwZyxvVPh36c5p+OTQvOxIk2Ye7pLz6JuE88Iuixz9kA4zx6eZwZCCNqMxCzs0JHXnb9
YzogdJ/i6h2EXxNeXn4bPst4l57/0SHziI7ByXQeVOL+7/WSdPfpenk+9Zig64+XBBj/gvtknsJi
RA8GwiFiBpeJwZNIApNAXr/zohUXU0qCZiamW25UoN13GkSbsP12jWAbEG6/VUPGnX8mDs0/HSfQ
+BuvFTXyWHz2e6aQDGYgESlAesEeHNA1OFpCDJ0OdBT+OYsM7QDPvo+mWKe7kG9wluBi0QEWCph9
k2EVm9eM0NeBeL+5Q39dSCmXpEIqiW5K9A8f3xlMFAz07tMNQXrPy/cS3Xu6MUhx55yKaTCQA/fb
MYVkMAMJr4Bls3AUiRVfmOoCEZ3TVNDmLkrpj1VOWOa7toN1Cg6rsxCgiwBzqZZD7dGhp93gLt7s
Ofj2GLVkGfnolV9QzJ8erHQ4xwaqe3iG+1htBgeKWL0FAz+k9W9nNR0HWxo4VtzVS+Wd9Du1mgpO
HKU9i8VBJeIb7t7HCdrZ02p3kiuFrXdkMB+4sUdZLgwX9FebwDfrCu4qrDfvn9FfF9KQx8vj0a7D
LjmXyCDwyy/8EqppP/E5bzAoHJ+/vsEUksEMJLwC9DF5UilmgI2ZsIwXS4gxOseyWTARnNMyRZC3
dlMbSiFg9RbuYbXUxs5WpfnyNorIw64E9h0w1MPS46LpBZ0YKKh8ZiUBYIEAVmn1tKwyOztEMQ2s
DANzQBpYWVU2k6AVbZRn4yt/Cooh1LJg5FcsvSL2YDJYXYXyrG6vVl4hD5Q/dwrl8XdsHfUOlvSC
oejlw+s6KJsbw3Zngdp0KyCJKuSGhB+jXYc97z7BsBbH1NRj3/Ohlvb8M3GDbWfCYAbCDCSUAogk
RuPm/UBcTPuM4AjJwduyggrSSNnMKoDw26dXO49aLgvi/36eGs2vaq/2BjnQV1D/yoLODlXX2Ma3
ei7FLM4NVUT/cH+1PBcW9Ujjn45qAy8wNTAO5IH7tFJJJ7AVwQZcsDGBwSFsVtIlUfedmiimiPuI
81N8v159IX1AgnE2b/C1QO36+GI2W6KHFmbZLCr4IlTSvP5ksY2S/vKjWVzRDGYg4RkwvQPCms8i
hWCKCnt7wLXHrbFqyW3OFIIKprFOMwUU9vQSlDieoDj/UzYtINDYs+P7r9X0FJYHV80hKFVCZWcC
KQD7n4CJSbcoU5UbFNi1IA1IRHXyCNrdU11jOS6YReK4gm6MVvuggKF0KKX0IpBAtF1MqYyKOfWr
pKa6HJUXNjLmnSLPD1PSTWhPYUV3XH+82GZ11trL2T8pPa9Xlwz7Gu0Hi8FgBvI5ViDZGQEGdh3s
9CYG4dqB7y6XSbbP7MvkX9kc+bzyr/xPpoWPJTqDaPn5ZDZMZNWlzCFK58HzLTb+r6D7ePbqOlcw
gxkIB3bnHpXhdNLeTiQmuQTB2pzkiq43tOFaIZvpMOg94HyRwWAGwoEZSBQHtrB1OhnTr4X+mdh0
/GFfh1vTYv+QDdeK2ExZaYX8effxXKmMyMdAoDvACias6HGbzASVGQgjOFhxMbVDa31MR2kJA8/B
NBzFg4t43oGQEWkYCJSqcMinbR3SJhH0cJJaUfR2ntWQzWWidX8MPfeOc725EhTFeg8NXHcsHTwj
OA7MQKIK7j/bLJmDUzBco0D3AUt1BiNSMBAsc4WRHfao0IT+xihlGIdzuFR3aipoew9l5AYvuFgy
CtfhsJ/AHhlYztqggEoLDAVeaWGw9sRiQY1lqyvasb8qZiDRE64v9tP6q/mlVDHDTgKBRDLtmKDF
5xLS8Yd9uLIYkYuBYMkorJT1tqkg+LBd0MwEe2TApgGW2XARjiWkcEs+raFiFo0KKKM7LFUFA8Ey
Uxi3YS8LMBAXC5PCLn6wi2DizAwkOuP1u8f09NUVqVh/4nuBfN66cqUwIvcUFnQcMKADI9CuxfWz
3hXVNBSsoLHXBPafQNzxdZRLDhjVja4lKFkClQ6kmbnNBU2sryy5YR0NQzfWozADYTAYUVQHojeG
ggsMs02BdpWuLbVhyay3nMU5nuEc9gYuFtchCEgLkoeWbDgwA2EwGFGYgXDgwAyEwWAGwgyEAzMQ
BoMZSOgykMeTrdNMHDj4F5rmYgbCYDADscOTZ74cOAQavF/6ck9kMJiBMBgMBoMZCDMQBoPBYDAD
YTAYDAYzEAaDwWAwA2EwGAwGMxAGg8FgMANhBsJgMBgMZiAMBoPBiIwMZMOGDRw4cODAIRIGFxcX
lkAYDAaDEXxUq1bt8zKQ9+/fcyswGAxGJEStWrWYgTAYDAaDGQiDwWAwmIGED06ePEmpUqUKs/T7
9+8fpukHFwsXLpTHChUqhHq57t27Rx8+fJDnSPvatWuf5RsXLVoUaJwbN26ESd537tyR3x7a/3Wb
Nm0oQ4YMn61O/QO+tVGjRjb3Zs+eHS7/vLOzs8zn1atX1L59+wDzDMt+vn///lDNA2mkS5eOGUhk
YCAHDx4kIcJurwl0/LBMPzhAOXRZ5s2bRyNHjgy1tM+ePWvznTi/cOHCZ/1G/7B3794wa5MnT57I
etWMNDTQuHFjWV6k+/jx4whFQFCu0qVL29wbM2ZMuPzzd+/elfn4+vpKQhZQnmHVz/v27Wuk++DB
g1DpU0gvVqxYzEDCi4H069ePsmbNSh4eHsa9GTNmyIaoXLkyPX361LjfuXNn+vXXX2nfvn02P9b9
+/cpceLEtG7dOod5jBs3TsZDZ/bx8ZH34sePT2XLlqXRo0dT5syZbb4F+TRv3pw6duzo7487duxY
+vHHH+nq1avyumLFilSsWDHjOZ6hMwK7d++W+ZlH17guWLAgpU6dWn5TgQIFjGebN2+m77//3rhu
27atQVzxXpUqVeRRp1OuXDnZ0PgO3WZFixalFy9e2IzsERdlsUfcuHGNtFG3OD9w4ADly5ePRowY
YcR79+4d1ahRg+rXr++QyP7www8yjfnz58vj8+fP5f0hQ4bI6+XLl9PWrVuNb0ySJIls/7dv31Lv
3r0pRowYRjkAT09Patq0KeXJk4cOHz4s73377bdGHAQwU41KlSpRsmTJ6MiRI/LZo0ePZB7r1683
4ri5uVHGjBlpwIABfsp/8+ZN+R6+E1i6dKm8LlKkCD18+NBPfDzD6Dlp0qTy2svLi/LmzUs9evSQ
19u2bZPExPxNYCI5c+aU36tRsmRJ+Rz/HaQgYNiwYXI0i38b8Pb2lnFA6HLlykWTJk0y3n/9+rX8
B8qUKUO3bt0KsM21lKUHDf4xEPRH9Kljx47J+wkTJqSZM2ca8bCCB3VtD8RBnsuWLTPu7dixg5In
T07dunUz+l9ADATfjmvULb5N93P8T6jrjRs32nw70kX6W7ZssWkb/DfoX8Dx48cpffr0FDNmTNku
oCtfffWV0TbIQ7eRbo8zZ87II8qqgX8C/RWDDTxzd3f3w0Bix44tJbnixYtLCSug9kBZULfoO6dO
nTLqFvGuXLkij/gvzbQM91q2bGnTv6MlA0HnRocDEUfFv3nzhgYOHEh//PGHfI5O8c033xhEDj+7
Zga3b982fixUBDofzvFDmdGwYUOaOnWqPE+bNi2lSJHCaGgQLEwL4VwvaQMRjhcvnryvCZo9UGb8
mE5OTvI5CN3169f9jOLxPbqMSO/rr7+WP7t5tI379u+CcFevXt24BjE3x0fH0PFxRKfQ34FOAQIO
QovvBZAn8tZxkJ4Zw4cPN9J2dXWV59myZZNtb5ZGcN6sWTPJiJGnPTSxnDVrFhUqVMgoY58+feR5
z5496dmzZ0ZbIT8dD53nyy+/NO6j7nDerl07SZRw/t9//8lpRR0HjEwTCADthSmJXbt2yTggqPob
zp8/L/8NnKNTgAj/9NNPNuXX7QAG0r17d3mOTt+gQQP5XzoabcaJE0cSFTBUXKN8YN4JEiSQTAfT
Gbq8SBfngwYNkoOHRIkSyXR0e06cOFH2KbQb/kP8t7j/8uVLSTxxjrgoP8714AXn6DNaYv748aPD
Nkfaug3xPQExELSxjoP/u2vXrpJIa3zxxRe0c+dOm3cxtQoCr/NEu+my4h6e63/CPwaCQZgeCKIf
5s6dWxJ/PAdBnjx5sjzHlJP+dqSr8xw6dKif/oV/TqcPBq4ZJPqYjoP/RsfR7YF/J1OmTPK/Atas
WSPvo99j8Ilz9BdHUvTcuXNl2XWajtoD7aef79mzxzhHm+B81KhR8j/V97Nnz278k8h/2rRp0ZuB
oDLwQ+hR719//WU8QyOhg5kJpZkT24u2mjjoEZwZIEbIBw1oTg+MwEyE9TkIKgAu74iBIC6kAj2d
ookLzvGDomOBkJt/BsQFUdZEA/fMxA9lw0+kn4Fo+De9A4nNv+9AxwYw2tJxkCfy1uW1JxpgEPbM
7/LlyzZthJEwztHR9M+OEb4jBgJogoc4moFoYFBQr149m/wwSgUx1vF69epl8w4kMkgOJ06c8FNW
EMyLFy/S//73P3lPMxBzHEhtuvPif4MEad+2ZgZy9OhRgyDpunD0/9apU0eeY1Ss6wfEQ6cN6UWf
awKE/LWUbSZY5nQhIen2AiPR9akldZwjPU1c7eGozUGY7fMJbAoL55Ds9DkYJQifo2kaENouXbrY
3AMjBeE3p4d+HpAEAmkL7YN/GfdPnz7tp0yQ8CHRmu8jH+Sn4/zyyy82ZYH0q5kG9FFoW/2+mZaY
28M8zQVmYs+IHDEQXTd6MAb6E1Af/OeffyTjtGcgeqZDn0Pq1P8DJOloP4WFyoBEsX37dtnpoRzF
z6WnpSA9BJWB4EfEuVncBMDFcR+iJqYOzOnhR7FvdDND8I+B4F7r1q2NcuvREEbLaFyM3vRUjc5T
x8VRpwEirzF9+nQpGiMOFK4B6QfsGYij7zAzEBDsLFmyGGVACIyBmKUOfBPqHudgjiD2ONozuaAy
EDBLSA/m/CDKmxkIpoHsGQi+yZ6BYJS3ePFiKW1oxq8ZCBiLmQjq0asuP47+MRD9f0Oag6SMaQZH
bdKkSRN5rv9b+7TNDEQzMPs4jhgI6ky3F9pC16cmWDhfu3atnGJy9I86anPEDwkDgTQG5M+fXzJH
TC07ksgcMRC0mz0DwfSWfwxETxtjikgPIB0xEJQb6dgzED31i/spU6Y0BpC4XrJkifEMbR0UBmL+
dzGACQoD0YM4EPmA+iAGA3pwiYGvIwZi3x6QpkArcA9SSJRjIKgoM3H77bffDOJuLx3gB4EoDwKA
uW6I/OapDzPHx5RM+fLlDbEec71BYSAQu3Uc/FyBEV4QJMwxrly5Ukoajjon4mCaAXFq164tR78A
mJS9IlhLVytWrJAdDyNPRwxE3wOh0vP99nWF52BMOXLkCBYDwZQR2gXlhbivmZs94QSx1JKcPQPR
57///ruccgRRsW9/zUBAZNCZtVRnz0A0Y0Z5zCMvTC/qqSpNMFH2BQsWGCNuTUwwbQTdCZi3mfGY
GQimQPX0F+aTMR+N8/Hjx8v5dXs9iJmBYJQN6QLtBv2WfwMJzUD0FBaIEqYroNuxZyB6CgudEt+F
6S5HDASSKUarYEpgtPjX/WMg+hxTTJr4gnE6anPc120I3VZADATTXDqOlnowDQgpT0si9gBB+/nn
n2We+r9BPei2Bi0IbAoL/7nWRdhLIKVKlZK6BZxjIGGmMTpP82yAZiC6XVFmMG1NP6ZMmWKU7dCh
Q4EyEC1lghFVrVo1wCksDBbAcHV/dNQef//9t5E2pi8DYyAYZOFdvAfpCgObKMdAQLBB7DXRxzJB
/CQ4x1JRe2BeHM90ZwDATKAHAGHGM60swggfc8rg2ACUpTov//JAp4V+Az83piXMZcNctT7/7rvv
jHfwo4LAgEjq+I4qFs/A/MxAB8J0iRlQ7iEuvkvXGa7BCMyoW7euv0p7+K1B3YJQgOgG9h1I21z2
OXPmyGut2LcHOh7mrzGyQrxLly4ZaUKnAUDiQGfFPdSlIx0IRqHoYGCyGC0BmPO3r8dNmzZJxSHa
X4/4MdeO9kU7A5BeoH/At+jllgAU0CAOWkmPjqmnWcwMBKNYdDL4/dHA/wHmimDvCwhSFsqpywPG
hSkR/MNIyx6IC0nUrKBHWaFcho5OE1XztyNPSJAov/5X0X729YP2wD0wMD2tg2s9dYFz/V1QTOOf
BdM2K9EdtTnKpdsPR/t/FYQM9zEDgKO53s26yIDoBd4Dg9fAqBv6JjA49FPdDoiHa9Sv/n58C9LH
Yg3db8AscMT/AMU+iLAGBgUdOnSQ6ZvbGfExANXAoAY6NiyowDO9CAF9EoNYM20wt4f9v4vRP/RT
9gzdnC/+awxccI52C6g9MEOCga2mZfhmtInOU7eHBgZvuAYdwAAq2q/CYpCUvPQIRI/2IyPMU1jh
AYzQBw8ebDALewbCCD1g1KunfOx1X9EFkMqwQgzMBzMPkf0fYwYSRQCjKoikUApGZmBUba+4DEtg
JIcRv15qataNhWc5ogNANDGthpFydAYkEPxbkKbsl/AyA2EGwmAwGNECn52BMBgMBiNyAnqmz8pA
MF/PgQMHDhwiX8DqNpZAGAwGgxEmYAbCYDAYDGYgDAaDwWAGwmAwGAxmIAwGg8FgBsIMhMFgMBjM
QBgMBoPBDITBYDAYzEAYDAaDwQyEwWAwGMxA/Ae2VMS+Dhw4cODAIXoFbOn7SQyEwWAwGAxmIAwG
g8FgBsJgMBgMZiAMBoPBYAbCYDAYDGYgDAaDwWAwA2EwGAwGMxAGg8FgRCgG4suBAwcOHDgEM3iB
gbxiRspgMBgMBoPBYDDCAa/0DBaDwWAwGAwGg8FghDV8WQBhMBgMBoPBYDAYLIAwGAwGg8FgMBgM
FkAYDAaDwWAwGAwGgwUQBoPBYDAYDAaDEQ0EkPfv39Pr1685cODAgQMHDhw4cOAQxQPG/p9VABk7
diyNHDmS5TgGg8FgMBgMBiMaAGN/yACfTQCZMGEC/fnnn9wSDAaDwWAwGAxGNADG/pABWABhMBgM
BoPBYDAYLIAwGAwGg8FgMBgMFkBYAGEwGAwGg8FgMBgsgDAYDAaDwWAwGAwWQFgAYTAYDAaDwWAw
GCyAMBgMBoPBYDAYDBZAAsTHjx/J5/UHDhw4cPjk8PLVB3r77gNzAwaDwWAwWADxH7kz/0LuEwQ9
nsqBAwcOnxZogaBGOQSt33Ig0hDu8uXLU7Vq1ahevXocOHDgwIFDuISSJUtSu3btoq8Aki9bSro/
VtDDiRw4cODwaeH1HEENcwrauO1gpBFAihYtSo8fP+YpNAaDwWCEG44ePUq1atViASQ6DI6cJwh6
NlOQ6yQeKHLgwAIICyAMBoPBYAEkUgkgGMQ/m6EG9K2KCkqfRJDHlIg9OHoxS1ClbIKODxLkNtnv
c5T/3FD1LaNrC/KZHbR0kdblPwV9F0fQ8OqC6uUT9PP3gp5MD5/vQlvcGKXyH1BFUNNCghJ+K+jR
1NDL48k0QbXzCPo1qaDu5QX5OkWcdnWZKOj+BEHffS2oY2lBXcsJ+ipW+Jcj/teCWhcT1LeSoNix
BN0bL+jhBEFPZwhyncwCCAsgDAaDwWCwABJsAcRlkqBXToKmNhBULrOgifXUuu8HEwQVzyBody9B
NXIJqp9PDcpdLJoGCCr7+qhnNXMJ6lxGCQNSKzFR0MvZgpa0Vs8RkC4GuBhA7++j0jvSX9AfJdXz
tR2s7wclPJ4maI+lbI0KCLo5xlYL4uMkaEUb9bxXBUFTGgjqXFaVAfG8pjsOLiYBBOUrkUEQrRRU
KK0SSNwmh58AcmqwoCLpVP5F0ws6MzToAuGL2YI2dLLW/5jagv5qI2hTF0Ge06zxMJCe31xQ44Jq
oGkvhKGdauZW4eZoQe6W/NGOjQpanuUSdKi/oJE1VR2ijNdGqvt43qKIaqtpjdR/42xJ21H9awEP
7XB1lKACqQXRCkHlswja20f9m+E18L41VlA+5P+XoCrZBW3rpsqHf29mY0FlMqlvxj/lMokFEBZA
GAwGg8ECCAsg/g4otBCwqKUa2PWvogaiXqbZfQggOZIJujtO3YfmYG4zQQ3yC3o3T1C2XwTNaiJo
VTtBf7cTtL6ToFK/ChpcVdC7+YJujFbx8RyDXrzXp5ISDN7OUwLLiBpqcEOLBNXKI2hxK9syBGWQ
/mGBoGLpBR0doAa1uIeBOgauTyyDWuQxqKqaRdeDRQykHQWb5V0T1Yy3i+XoHN7Ly+zznxA0zcH1
UYLyprQd5EuNymi/3+BIAEHbQ4BEu0JowRHtmDaxeh9CBDRCTk2t7Y80UN8oI8oKrdQ/HaxprG4v
6PlM6zf42wZ2At69ccH7/tAOOv/7DvLH93rPFPRnTUEVswqa00wJ7I+msgASGQWQrVu30tdff01C
CCPUrVs3WGls3LjReDddunSRkoG6uLjY1MGzZ8+i3CAhefLkxvdt3749Un/L5s2bjW/59ttvwyVP
Nzc3OTb56quvKH/+/FFyILl06VKjXn/55ZdoNYh+9+4drVy5kvLlyye/Pywmc6JSH2QBJBgCCAaY
emA+q7GgZoUFLWypBogYADpbBve5U6hrzGhDO7G0tZrRfjtXUM7kgl7NEfRhvjVAMPGaoYSbHMnV
zD3u4zi6lhJAfOcIej1XUIdSSiuBARzSw4B2RdvgCSAo15u5SjtwcrCamUZ5oTnAABzCDuKgnKNq
CepWTpXx/DBBY2v7DePqKIHLJZiaCg8HwotZi+DhYGBt/x0IoTGLjrJfGyUoZzIlXOi0Eey1N7iG
oAFBFEu80Fb4DrRHmcxKg0LL1P338wTlS6XKiP8D8d5b2h0CJLQjmX5SAp6zRUOl/wtaLmhlW6VF
QNoYoB8Z4LgNpjYMXj3o+g9IM+Tuz/fb139w7IjQnhDEVrUX1KSgEsYhpOPegwksgEQ2AQRxCxYs
KJlh4sSJqXLlyvI8ZsyYtGDBghANBrNmzRopGai7u7vxDbFixaLnz59HuQFW+vTpjW/cvXs3T9sG
EytWrDDqD32NEbWAPm+ehAgLGmDug7t27WIBJLoIII4GcRhQXRyhBINXc5WGArPim7sozUaFrGo2
WA+0ITj8Z3mmAzQa3rPUzDBmgvX9NsUF/dtZUNnMgs4OFXSonzrHEhYM+PEMy78wa35nbOADUJQX
g2ydPt4tnUmdL/9dCVIQPuY0VfewBGhLN5Xngb6CPENphvr5LJVH6V+VAGUvhKAcELrwHDYWsK1x
9B14jrCjR+jZmECwWPa7bftMb6TaR7bfLNVeuI92QB2WMn0Hyvp7ceu7+A/wP+C/eDVPULuSqsz6
ebWctkJWtRy2ef9RSv0zoTkwhoAFDQzKUTm7shmxFx5Rn7DhQBwION6z/NqZ4F08R1pIM7B8UTdd
ywo6MUjQoynhtyyPBZCwE0D69OljMMOdO3fS27dvqVixYvI6SZIkdPHixWALIMmSJaMiRYrYMPJ4
8eL5EWgyZsxoPNfx48aNSzdv3pTlaNSoEX3xxRdSQIJgVK5cOfkc8SpUqEBPnz41hChzXlWqVLG5
Rhg8eDC9f/9exvfx8aE//vjDTxy4L44RI0aQBZDFixcb76ZIkYJy5cplk94PP/xAO3bssHnn9u3b
cubcPu9s2bLR1atXZRx8N+79/PPPsqwa//zzj01baTx8+FAKjLgfGM80D36qVq3qpxwVK1YkDw8P
Iz7qbOrUqfS///3PT9x+/frRq1evjLinT5+mlClTSkEW7YM2y5kzp4yL92fPnm3EHTlypJHOr7/+
ShkyZLBJGzPvx48fD/BbUAc6fqpUqRz+V/ge+3Lju729vY34J06ckPnZx9Oha9eu9Pr1a3+f65ly
tC3yRrvjX8X3582bVz7HfzV+/Hi5VxmAutDvpk6dWra/Ob1EiRLR3r17bb732rVrlDt3bn/LaMa5
c+coc+bMfuIVLlyY7t27F2C9rl692oifI0cO4/6jR48c/rs6lClTJlDag+c1a9Z0+D7+mZcvXxpx
CxQoYDzT5/jPz549K59funTJT70hoIxoCw20XWC0BJqP6tWr+/ttkydPlmkdO3aM0qRJ4+d56dKl
pXbMDCcnJ/rmm29s4hUvXpySJk3KAggLIBw4cOAQfQWQdevWGYxw4MCBxn0MhDGIwn3sK2IeZAZF
AMHA2dnZ2Xg2duxY49msWbOM+9CU6PujR4/2M1AHs8fg2gwMevU7nTp1ciiAHD582IivB7YYAOpB
e7NmzQwhwxz333//DZYGxLxUJVOmTIawgIGRvv/9998b9QcGHTt2bD8DRvA5XUYMuj98+GAMrObM
mWMITWgTDKAwAEqbNq0hUGkhsnbt2sGafUW7aKC90G56sKeFO/j11wLE3bt35T0Ihz/++KO8j8Ek
rhHOnDkjy68H2Rr6X0Kdom6AMWPGONQkYNDtSKhwBAzedFx8l6P/auLEicb91q1bG/d79eol75mX
3WGAisGqBpbg6TrWWL9+vREf+x5ooM0w6Mf3YzBrBoQynf6RI0fkPbSrTid79uxGvqhDfR+CnM5/
//79hpDZvXt3G41Mhw4daPny5VJwJ8uSSp0G6lmjY8eOxnI13Q6OsHbtWuP9PHnyGPdRHn1ff4cc
6fn6BolGPHjwwKgLDMTNgmvLli3lBMWpU6eM++ZJDPzjZkB7p58NHTrUuN+zZ095D0vkUJfAnTt3
AqUlqEMNMy0xY82aNcZ9CBcajRs3NoRGLfjMmDHDiDtlyhQjLvqQuR5ZAGEBhAMHDhyilQDi6uoq
GSaY4E8//SQFAAgHOtSvX99f4SC4S7D27NljPMMAxNFA8b///vOT5qZNm6hLly705ZdfSg3Kb7/9
ZjOr26ZNG4cCiPn7zXlAG2GOGydOHJuBU3CXYJkFEAyWzIMMcx4YoAGVKlUKcBZdD0aBCxcuyGto
VV68eCFnpTFzikHmhg0bKEGCBJLh379/Xwo5CRMmtNFchGQJlnk2GYNY+3r1L+h0UH8Y8OuZZGgD
IKBgMKjj4rvsBRDzoOXkyZPGfXzvpwog+C81OnfubNzHuQY0Au3bt6csWbLYfFeJEiWk1sI8s+1f
mwNPnjyR2iLYT+E5hER8m55pRzh48KAfAQSz5xrXr1+30RpqYQZx9H3kERD805LYawmDK4BAazRi
xAhjyaYOEPL79+9vaPD8w/Dhwx22uX8wCyDLli2zeVaoUKFAv9EsIIYGLUF7BpZn06ZNZVxoj/W9
Q4cO8RIsFkA4cODAgQUQ84AGA20IIpiVsw+YKXWkVQiKBgQzyxoQaBwNnvwbKNovv4BmwtGsZXAF
EAyqAS1cYVZfD4jtl/SEhQCCgToGQPYaJ/+wcOFCGff333+XAxoMujQggGAgiIEU4kDIC+76cwyu
NaDxwDIy3McAFoNps7YI5dZaEUfAjLpevgaNhyMNSEQVQBwBGg0sjdLxDxw4IO8vWrTIuIelihoQ
BPX3o80daUA+RQDZtm2b1KDg/oABA4z4uD9u3Dg5yPX09PQjQMycOTPYNMQ/AcQ/aIHLXuNiDwjP
WJ6pl2uZl5ZBi4H+AS2JIwEEfc1+csKRlssRgkNLUIdmWmKeoFiyZIlxH4bqgY1fdVzz0lNM/Pi3
BAsCHiYREDDpoJdA6nsIWrsI7Zy+Z16myQIICyDROsBjEgyxYXDtPCH6fT++fXt3QV3KCDo+UFCX
ssobltf0qPONsP2AzYij9oUdExw3mIP2EhZaecPbGer1v67KoQM8vYWFB66oKoCA2ev11AENhGH/
Ae0I4mLAG5BXKLMAgtl4eMIyM3LkZT9QCEgAwUBVL/PBOnQswcCsLWb7tccuPduIwXJQBBCdBwSL
evXq+Zm9hOeb4NiABFcAAaCFMQ9AzAF1hmU85kEwBkY6HQxOHdV3QIO+gAQQ7enHvg4wmDYvr9Fl
cBQw862XD40aNcq4DyEPy2EwiMf/oO9jkBKRBBDU8bRp0wKc1dbr/8niBQvL7czPoeWxt+vAN+H7
oR0wC2AQGEIigOh/x+xByb4M5v8MGjP0FUdxYZdy48aNYAsgW7ZskXTAv3pq0aJFoEuxoCVx9N9p
7Z95mVRAAggATaC5bu3TunLlSrBpCf4HLMcyp4X/V9cX7L7MEzP2GjOzfQ00x/Zx8D+Y69AsgJj7
mV5yZqYl0CTqNsb/FZL+zwIICyAywCAchudbuykPWxhUwSPR3t6CDvZT7k/hznVjJ+vgFcbDMF6H
e1+4loUnrPUd1UAXBsLayxf27cC76zooN70wCsfAEHtUbOmq0tnZU8VBXC+7ASIGjEhXB7OBONzC
buqsjMjhVhjlw74hyANlRvlhmN2yqKCdPdT78NSFASI8RiFPGJ3DON7Z4lUJhvu7eipDefcpAQ8+
t3VX3r5uWNJCOtrNrfZCpZ/h+w/2Vc/xPvLHoBXlPNxf1QneR50+mmJ1AYzBNRwE6O9H2WE4jzyk
of9svwH5Olvc+MIlM4y1kV/eVLaevnQae3oLWtdRlRP/gXYQIHe4n6HaGHkjDu6jDrW7ZaS3zlI2
fA/eOT1EPdfvwyUz0kbAOe7h3YvDlYB0e6z6ZryH9rhnqYNjA9W/gbTWWfLHOQLaBv/m+LqCsvys
2g1lwPtyr5yJ6l/C5oV186o9aq6MVBtaok502+L70S7rLOVDe8n6M9UP2kXnr51FaM9d+/uqfWLg
FKBgGnXtNokFkKAIIGCwECS8vLwCnNHWwOAScRECGlzABkDHMxv4Ig/ztRkY4Ot38H5A5TUPrjA7
qMuv18jrdBDMNgiB5YH7ZsNX/9JxhDdv3jj8ZpRZ30cZ/UtHl82cvz0wAHXUVkgzqOX0r871e2hX
XKPcAcHcxgHFRXr29hP6PT2zq/O0/368o+8H5gZZ1w2CWVj0r80xU6zv+zdrjP9MlymgetVtjO+x
txNBn0F7mYUH+//E3K90ndh/f0D9E3Vjn0dAcZGeuQ8FtZ3967u6/Khr++8PKlDHSMNsd2MG8tbl
QF8LyjcGpA0IjJbY1yW+Td939C/gWWB00ZyOo//TnKf5/9Rl9I+W6LoLSv4sgLAAYnh/gmvcQb8p
71Xw1kQLLS6AJygBAl6s0iVWe4ngGdz3YjYdGxpiEOk9W+0tAVfB8OaE9DBwh+tYpAFvThi8wUXs
xwXK9S52/YYHLtwbVl15xcIgmxaruHgHg0UM/LBxX7/KKi7yx7FvZeXOF/kjDgbncDeM/LHxH4Sc
NX8oQQWuZxEfbmXhyhblw318GwapcE2MvSOwgR8GnbgPD005U6i4gblyRR0mS6AG3rRUDa5zpVD1
hHo8OUgNbFEO5IVNIevkVS6QEbDxJNwXXxohKFFctelfyV+VAIS6R7nhtli60V2o6gjfOfA35Wp3
RiO1Q7t9QP3jOyGsIC0Myh+MVy6cza5yMUD/q62g22ME0RJBtFptfPlvF/UNs5sKaldC1QkGwHD5
O7aOoEWtlHCDtsGAHvfxHG0ypJoSLNGm5yztDUFBln+hOsc9eGLD98A7Fv4vlAXtWz2XKj/KifjY
X6Z3RbXXDJ5nSqoECeyEjjqEkALPbdioEG2Gf0ALsPD4hX+1fUn1DPdwRPyNndU34F+59KdqP1oj
qGoO1ReQNvbEgfc27FYP18X4hyfUVXvZ4H9B+6MsUqs0Q9Uv/l0XXoIVrCVYDAaDwWCwABJNBBAM
rl0nC+pUWg3yMEiVe1BMtg7gMMDCvhNmjQZcwcJdKgZkuD+jsdIwvJpjOzCHe1TsU4JBJN5Fmnqz
w/kt1HmnMmqQjV3gEQdx8Q7exV4hGJxv7qoGz5iZhmYGs+PPLEtuAtpBHAGDdCyPgcCC5TcPLO/o
JVlaw4Ay4fsvj1D7ZFz5M/D9KFwsM/jYpfuZZa8P7EpfIqPK95plI0LkccOye/nc5oJaWOoKg18I
f5ihh9YBs+cYkON9pIPBLoQjDG71Bob4fsRFvaMtUO/YHd4+TG5g6+rW4S7ts5SAB9e8GEwjbWhP
sCnm1u6qLaA9gktlc1r4Z3CN8mdPptxGaxe4qFPUrd77BJqTYhlUWz+wCLU4xz08g1CBtkMb2gsg
0MIgD2gX9AaXEKpQp6hbF8tmntBCwYWx3PtkgspX7wNiL4DIf3CxcneMHdUXtBDUtLBKF9+PNGrl
VvuKoCxNCim3ybhv3hTx15+smiy2AWEBhMFgMBgsgLAAEoKdvjEAw0zu7CaCaudVy3UwwMagD4PM
nhWUpgKDwcUt1ey8XEY0RlDGpIJ+iq8GgRhYYgYeA1S9VKh1UTXgw3MMLi8MVwNEDHYxs43d2bHs
q0IWFRfv4F0MIDHwm9dcUOF0Ku2SGVU60Hpg0IzBeNafBf34nTV/lFUPDjEYxSx8wwJKaEI5fi8m
6OpI6xIcfCfyhGahVVFBt8YEbU8JDJgxeI77ldo8EQNECAzxv1YDagyescEkygytAgQb7O+S8ge1
5AcD3lQJBaVMqLQU8eIozULlbCo+yod6hgAAQQz3IJxAQwKt06faGSB9LIPDPiPQgKF9IYxCgCma
TgkaqH/soo56LW4JJTKozSpRt2hDDPBRLsTBXiPQLmA5FAQI/Fdoo4b5VfoIOMc9PPOwLLOqkUsJ
PqgfpJU/taX+mgj6Lo4ShF7PU22E+oYQ99SyjAv/CTRpeg8atAGWdeE5vi99EkG/fK/+D+SP5Vg3
Rqn9Y/D/diyjniFAUME/AiFH/3/QlKBMCKUt++ygbM5shM4CCIPBYDBYAGEBJPQMa7UBMwa/8b5S
A2MM6BztJI575mA/eNdr5s3PMPjFQB/albKZ1Gy251T/tQ4BpR9Y/vqb9HOdh+c0NVAeWVNt7Pf9
12p5EO4Hp67Madrn4WJXPpdJ1qM5vr7vOsmaZkDfGNpL8czldg1m/i4TA69/+zwCqkezjYU+12m6
+pOHy6Sg/x+ukwP5/kkBf7/LJPaCFVTAABfGwDCs5cCBAwcOHMIjYF8meOVjASQSe5CCpgKzwNqw
OjS1Lu6WGXYE10mf5/sg9OgyIDyZFj29ZXFgN7wMBoPBYDBYAOHAgUMkC9COYPmhMwsgDAaDwWCw
AMICCIeIHGDPsaqdoDwplRct2DF4TAma+2R4HYMHrfkWWxnYabyYFbXqp1tZQXOamVxAT1LuiuF1
DG6QES5ZjOFDew8OpJk8gaDmRZTHL9j4YPmg/VIsaPGODBBUKI3VVTTueYXSviMsgDAYDAaDwQII
CyA82y0HwfCUJF0YL1IuZWFT4utkdekL18IwtIfxNQyYtbcmpIElbtMaKiPsJPEENS+sDOZhJI/B
K+xwsPzNPuhBLZ7DSLxuHuVGNndKq4cvF4unswN9BA2pqtzpQljRdhv6OyDoIA6eo+zIe0UbSxqW
fT6wvwaew0kBnAhAWNJOBhDgKADPEU/vMwJbC9QLDLuxfwY8d2HgPrqWuod0ZjZW59ivBWnAvS1c
+LpbBAkYqHcvrzY4SptEuSSGYT/ygBE/9v/46n/K9W+fSoJyJFPG5DfHWPcpgcE7PJx1L6fePzPE
VnhAWvCyhfLDmB1lNO//gjqErRLqF84S1ndS9lDmfwHXcLEMWyL8Ey4W4QNptSmuvJXBs9unbADJ
AgiDwWAwGCyAsADCQQ4813YQVCWHcs/6xGLADu9Lty0euuBGF4Nq7BUCl7EF0qjZ/GcWuxq8g0E/
PIzBLS3S1ANkbFKIAa19wH1dBpzftszIY+D90E64wN4rcJ28pr0ayHcspQazMLbHoDhdEkF18iiX
wkhnZVvljcrLsgEkjPPhKhiubzHoh8CEjfzgAQv7kEAjgL00kB+8gSWMK+i/LkoLA4EHeWJgD8FL
uh6uqu5BY4F9M3AOwQDufPEt8Pj1vy8sApTF/XIMoeoYGp/blj4FD2FwHw0vWRBWtECI9CAU4hu1
AIXvhNtdCDx4Pr2hoDfzVBmw5wuEQ7Tf8UGCMvyo9v4wG7PftNQv8jbXvSzHbEFOTQU1LaS+z8XO
1gnpoK3RxvD01q6kEkrxXcGxfWIBhMFgMBgMFkBYAOFgbORXN5+g9/OsXpgwCMWAExs0YgNE7Gmi
Azbt85xq1YLgHbgKhvtbDNK1ByYIJhjYD63mNyxoGbi3LgxuMZiGm9+FLdXmhVIAKa32cEHZIRhh
AD+urtKm4B4GxtgYEHtoYKAeO5YSRFBmPMdyJ8z2v7S4UU7wrdpUEANx7N/xTWxBC1uob8Gu9MgT
+52gfqARgKtl3IMws8oiFMGtMgSvN3OVlgECh65HfAvi4D728MAyp0UtlbCG5Wbx46jNB1F+CAJw
Z7zeonHBfi5J46u6XW7RxiAtCE5oB5QPG0kOsmzsCGEFy9hKZQyat6tHlp3QoXlC2RxtXIn2RPmg
yYFgB4EVe6zIneJZA8JgMBgMBgsgLIBwCM4SLCzvwd4QmLXXActwMPjF4BmDdGx2Z34+sb5aeqU3
A4RAYX6ud0b/VHe7WAIFIQibPWL39a3dlMYAS7zODVWDbVeL1gBlxN4b1XMqWxJoA/Q+MBAUsGwK
z7FEDEu+9Mw9nkPbA0EEzyfVF3R3rCC3SVYNDAQavIcNG7EUCxoUlAObQ+I9nPevbFlyNUAtR8O9
Za0ty7wmqw0isZQJe3is/UMJZ/v7CPoth6ovXXYIRm4mV7k4Pz1Y7dfyR0lB/3RQaUMQ0EutIAQg
TaRRL6+g4wMt7naDYLeD97BHicdUv8IE6giCWdsSqh7cPtGFLwsgDAaDwWCwAMICCAcO0Tjondbd
J4fPpoQsgDAYDAaDwQIICyAcOHDgfUAYDAaDwWABJGoLIFjCITfL4wEZBw4sgDAYDAaDwWABJEwF
EIvNQYqEaukH1pT3KC9oVhNlgMuDNA4cWABhMD4XPF4ep4seU2nn7Xq0+lImWnIuIc0/E5umHRc0
/bigGSdUwDnuzT/zFS07n4RWX85Mu+40pMuPZpOnz2muSAaDwQJIeAkg8IgEL0DYGwFuW+HS07zX
AAxa4SK1UDplIPzQ5F60QlZlqAsj40P9lIEz0pMuXqcrQ2Q8Q4BR7FPTc5yfHCxoa3f1/OZoJcxo
96GH+6s8EBfPsZ+C3mQN+dfLpzwYIY//t3cd4FUUXXT8rdgVe0XFBoL0IgoqUhRBQUSa0gQU7Iqg
ohRBRXpLoXdUEEFEEWkC0gIh9N4SEhJCICSBJJBw/+/MvHnZvLyXvEDAEM/5vvvlZWd3p+7uPXNn
7o3Lo4BrFAqFBITI3zh+8oCsiOgk48JulMAQQyoCQpQErzlzCVqjJAAkZZXS9xwfdousjeopJ07G
sMEJgiABySsCAmUdbjxBAlpUMW5Gl35mXHQ6z8OSKyj/baqaWA02SJoNoHZPYeMRSMYbcoKgd4jD
gE2y8P6j0yYrkUnmeqSDVCBI3k9vGxewcBUrPxsvQwgId9RFJhBr4YGbjdtSlAvefh65LXNEagTg
Q4wLxGnoWN1co70LkYxQKCQgRIHB/vjZ8tPmxzXZCAw5M4JxJsQEecFi8svWJyQqYRE7giAIEpCz
ISA2cBxIAaI3N6tsAp0hVoTT1SesEJUfMC5bPSNYI4J0jeKGHIBwnBql5LM6xr0pYiCUusdYJhCM
DvmAbES63L+Oa23ICKwr63saogN3rYhebQkG0hDLItwVWRvB6MoXybCCoA7IE25j65U2LlS3f2vq
cTYuRykUCgkI8e/jZHqSLAvvKEEhOZOO4a7lVaNDC8nUTQ/J/N2NZFXEp7IpZqjsjJsk0Yn/yMHE
ZbIjbqJsjhku/4S/J/N2N5ApGx+SkWsvkyErzT1yIiP4uyaqu6Slp7CDCIIgAcktAfG0hsByAEvC
J7UzIlFD8YcFAvEkPIOcgZw8X0JJibuUvFvdxCOo9ZiJto2gcEhHjAdEhX7xcUNy6j5u4hIgBgJI
Aq6rU1LJCyVNnAXEtEC8BkSgxj4TkJkrLzN7TZJHKmlbzQSaQ1yI5GAlrZ5S0u0lJYs7G1JDqweF
QgJCXPhIT0+RP3bW0cuhfFo0QgxhmLj+Tlkf3V8SUveedb7xKTv0sqtx627U9w4K8W1NQdn+2t2Q
RIQgCBKQMyUgmSwj/TOWWYF02N/eBFYQG30bhCPGy7k2zUrUAO9pBx330aTIFcUZ/+tYB66y2HMj
+mdfNgqFQgJCXHjYEDNAAtdc5FP5h5Xj5y2lJSZpxTkvy4Fj82Xqxgd8EiGUEbIheiA7jiAIEhBh
HBAKhUICQlxAwGbvyRvv86nsw4PVkn1t5WR64nkvW0raEVm0t5XPJVoo27RNj8mJk9HsSIIgSEBI
QCgUyoVGQOJTtsvGmCF6OQzx30BCyh4ZG3qNV6sHPFP9vKWMJKaG/+vljE/eLj9uekSXyZs1BF65
klIj2KEEQfx3CUjFkvdK3CAl8cMpFArl7ARe7lqUUzLzj7wnIMdPRetNvZM23KVdqcLj0PiwmxmT
4T+C2OOhMiHsFq9udLHcan10v3xXZuwTGeaFhKAOE9ffLvEpO9mxBEH8NwnI8OEB8sGn3SkUCuWs
5b1O3eWzrt0lMvLA2c92p+7VhGPKxqJawfSc9Q7UM8k3SWTCQklJi5fkU4cpBVDQtwkpe2Xmtiey
KPM6JkfIRRIW3TffKgbrDn5rNqp7kBAQ6Dk7asqp9OPUngiC+O8REIIgiH8bp0+n6SUpoQe/kYnr
b9PkIidXp86lN8MpBV6gwI9Ym5WErjzwaZ6Nw9S0Y/LL1koSEHKTrAj/KM/ui30h3vasgIRsORTE
FwBBECQgBEEQ5xtYM785Zpj8vLmsVjZzE0AuiFLgxfa1k4BgjPy06VFJP33yrMffqdMnZN3Bb2Tk
2kL6voNXYiN7uzwb38mnYvWSq0AvVjx4zzpxipvSCYIgASEIgvhXgWUpGw8NkZ82P6bXy3ubPYby
NnbdDTpgHPYHxCStphQwwf6ebYfH+tx0vvHQsLMaZwg+OHjlRTJoJchMcZm1rYomwHlNQIA1UT28
Emvkd/TEFj70BEGQgBAEQeQnwG3pltiRMm1zCa14QpEDMeEm9IKPTTHDfCruiFh+Nth7dJYs2/+J
HD8Zqf9fdaCzJh/ngoDsPTrTaz0wnnccHs+OJgiCBIQgCCI/42R6kvZ69NuOGhJ7fB0bpABjRcQn
XhX3oJCL5Fgee5E6lwTk8PEwnwRkfcwAdjRBECQgBEEQBJEfsOfIdJ+K++4j0y4YArItdqxPS86B
hPnsaIIgSEAIgiAIIj/gWMpunwRk5YHOFwwBmbf7lSz1wAb7UaFXaJfTBEEQJCAEQRAEkQ9wKj1J
Zm6tnCUAITamQ3nPyz1AoVG9ZOTaW7WsjPgkz+679+gMGbn2siyb6RHX5M9dL0taejI7miAIEhCC
IAiCyC84mLhUgtdcniWYH5YvzdhSVgcszK+Ai91pmx/L4skNFhx4cYtOWs4OJgiCBIQgCIIg8htW
RnTSgfs8l2IN0ySkQr4kIcmnDsm0zY97DaoJQrLqQBd2LEEQJCAEQRAEkV+xYE9Tr8o8ljYh0B8C
WuYXxCatkXHrbsxitbHWj8X7WrNDCYIgASEIgiCI/A5YDYZ6IyEua8jivS3k9Om0f6182M/x+84X
ZKgXaw0Ex9dG9WBHEgRBAkIQBEEQFwq2x42X4DWXePWOhWOQRXvfkNS0o+etTMdPHpQ/d9XX1g2v
Vo8QJSPXXiW7j05jBxIEQQKyYO5MGRI8WQZTKBTKWcqgoMkyccpPkpBwjF8E4pzitJzWS7KGrfZu
abCb1CdtuFs2HRomx09G5XkZklIjZN3B72Ti+lu9Lg1z7lNZsr8dO40gCBIQi/IlikjCMCUngigU
CuXsRCYraVlOyYzfl/CLQJwXJKbul1nbquqlTUEh2ZCAVcYyMX1LKe1iNyZxZa7c3+LcqMQl8k/4
u/LTpuLaypId+Qlypf+xs66knIpjRxEEQQLiRIWSRWR/HyUH+lMoFMrZSUqwkqallcyau5RfBOK8
Iv30SQmJ7CojfCzN8kUSYLkAUQCBGbISrnGvk9GhV+rfOIY0nBPk5z1x7si1hWR9dB92CkEQJCDn
ioBE9FNyZKiSY8Pzv3IUNUDJ+h5K9vfN/pyEACWHBpu6+XvvSMd1tj0izmPdbP6xg5XEnYP+QF3i
h5k8Dg/JXducL7Flg+D3fy1/EhCCsFaRfbIs/D0ZE3q9JgQBfpKHM5EAF0EZF1ZYR2ZH3A+CIAgS
kHNAQCJdijoUXShb/RopufEqJTGDjCIM8aUk+0qPdKZ7uc55/ZkqRyjriBZKtvbOeh/kGT1IyZ4+
Sio9oOT9GkqSg/2778GBSjZ8rUQpJR/XVFL1IfP7yLDzR6y29TZ5dnxWSc3i5jfISG5JjG1/zz4A
sfquoZIaxZQ0qajk5Ihc9q9HWmQu03Maj/v6mjo3raSkeWXz+3wr38izfhklb1Y1v/d+r+RAP/Oc
YIyQgBDEvwMEMgyJ/FJmb39WRqy9WFs2AnNJSoJcG9xx7Yi1l8icHTVkXdQ3EpO0ig1MEAQJyLkk
ICdHmpnvZpWMkr6hp1F+MTte9l4lPV5WUqWokgr3K/ntfSWJgea6xAAlvRooeaKoua56MSVru5lZ
ely/u4+SDs+aays/oKTVU+YYZtwXfark/puVdH1RyQslzTlf1jWKapSfZAQK4O8fmnvffI2S9T0z
FEKQJhCTd6srefIhJS+VVtLuaSWf1FaSMsKQlSnts8rU9saSEukiIMs+U1LmXrMGvuTdStZ+df6U
TrRDyFdKSt5l8i9TRMk/n5u6+UOejg5T8unzGe3f5inTDoGvK4l3WFJw3qiWRsFPcZAzELdf3lFS
8X4lFe4zMr2DOY77L+6s5IkHzXH0/xd1lVQuquR4oJLogUp+eCvj2ueKKXmnuhljqcEmPayH9z6Y
3jGDMKGfit2uRCYqeeohJXM+UHJ48PlTvHf1UfIw8p+gpPqjSn7uaMYdyrftGyVPPmjIya7vlJwa
mTuCRQJCEHkPLNlKOXVUYpPWSmTCItkaO1I2xgyRZfs7yNL9b8mmmCGy/fB4nRZ7fJ2cSj8u6adP
seEIgiABOR8EBCQhoLmSWo8p6VJHyez3jWUg3LEEB78r3qckKdD8BnGAcli7hJLTo5Xcdq2SV8uZ
mfmajylpWE5J0VsNqUgfo2TFF0oalFVSo7iSFx9X8vBtSr6ur+R4kMnrraeVBLcwCisUnFfLK5nY
1ix1yo1yhPJBEUR+UIyhuK/+Ukmpe5TIGFP25CAlQ5oqefc5kx+U+LRRWUUrkQMyK/IgWuF9zd/z
PeONutj8E/zMH0rwlt5Kit9h6oP6g2Cizmhn/HUutfJGQCJcY+SzOqa/MU5qP6bk3sKmfQ4NMmSh
VglzHGOgXVUlqSNMfij3wCZKnndc2/NlM26QDgFB9NYHqSMyW1B0/fuZ8oD8nNclcP0z5x/jkT+O
Y5P2vI+VfFXPEK3vGylJGE4CQhAEQRAECUiWtf9QZrEEB4rgmFZKWj2pZExro2hZhffBW5TMetco
8lBCMKMORfJEoJLXKij59T0lMt4olvgLC8iSLkpWfqGk1N1K5AdzLZTKl0sr+fYV8xuK5ke1lAS/
oSQpwJzT/AklM981RMffpUUok0xS8swjZkYaCjdmqKGA133cWAxkrCEpIEPdXjJ5Q3Hc9713yY1i
BoV0+edKJrU11gFP6w3S535k0v/4MKv1AnXAkh6kQzZ+ffYkB0rznu9Ne8//JKPv8Hfhp6ZNoMhb
Uol++/Ets8RIphiCiKVYsGihP9C+OAflf/DWDCIEaxjOldGmjWEFePR2o5DDigTrFPLUY2Oykh/a
K6lTMmOZV4SvPuibu/aHVQptB+uVtz0ssLZgDOOcxZ8a8uS53wnXIh338sfChGtATMa3UdK2mpKh
zcy4w/OE/CJoASEIgiAIggQke9HK6HAzGz6tg1GmoFD/9oGSHd8qCXjdzJJDYY1w7L3Y6UoLfMP8
xdIqKGYxrn0XOu11c0/8P7a1ku3fGEV7wpvmfyicWGoE68e4Nv4poFDcoWTbfKe0M/tAkJddpoT6
rPlKyfDmRsHGfXH/jT3zzpKBfFZ1NfUDGfNGQBZ0Mul/fWIUf896QOlGOmRzr7wpW4TLsoHldM7+
QVn1Rvp+Zi/J7x+Y46NbmfbH7/FvZliWsOQIbYrjGAcYDxgXh4caYgULFu6Nc9C2ICe4N0gQzgt0
5P3Lu8b6FJ6HG93Rnuu6m7ab8Y53xR/tCTKEc7CkzpNg4Bpci3TcK9oPAgKigbZBG1oLCfeAEARB
EARBAkI3vBQKhQSEIAiCIEhASEAoFAoJCEEQBEEQJCAUSl7GGOlnlipZr1j4i6V9Ef3YNnnppADt
iqVgWB6ZGHBu2pcEhCAIgiBIQAoUAbEemrB5GWv0sScCx466AuRhTT72I0C5cnqowm8ctwH04B74
iEPBtfsccE6SI81uwE9yecPCnogklxLnqbzZPKz4yj/ctSkZZbZ7ILBxGy6MsQfCboRHHjjX5g+x
we1snZM86uGrzVBuKJ2HBme+jycBsPnYslnFFcewIRt52Tb29JBlvUDZe0TlIl4LNqh/31DJxf8z
+2MQQ6NTbdPPzjLGD8+4v2f+BzzyRzm91cPWH9fHeYyBuCEZ58S5xoodc0kuchTuaCvc03rpwv/O
vjro2mCO61G/lV2NMwb0NdLjXftrcM/NXxvPb3A3Xf4+48a69ZMmXxvLxdnnuj+8jMGEgKz52/1F
IV+adsUmeNz/0TvOTZwaEhCCIAiCIAEpEAQECjwUNmxKRxC8rnXNpnYoYVAU4SELyhViRyBGCOJI
fFTTKKR643x/JS+XUXLfzcaFLNIQsG7qW0pOBJsN140rKOlWT8kXL5q0nzoYZQpesiq7YptAKe5Z
35yLayyhgeKHwIWQT2pl/HYq+nA9fPeNSt54QsmHNZU0r2S8KUHBRL6Ig4H4EXBni/IhrgauD+tu
6nTrteZaKKzIt/9rSq68TMnYNtm7I44doqT7S0ouu0RJu2qG6Lz1jJJvXjHXQTmFcow64zzUH3FA
sFEc7QePVSgXPJWhbHBjjHgjH9RQsqVXhmIPr2dod8RPQTvBdTIUZvQP/n+lbFYZ1cr0KxT0zi+Y
esMBAfJKDMjsCnpwUyWtn1LyeR3jxha/dRwal8UEZXv7GSUf11LS5QUlzzxqXD3j3mgveO5CGZH+
aW0lJe4y3s7gaQvkDBv/G1c0bQ3BbxyDW+bQbkoeuEXJuNYmNgy8t912nYk1grzh5evqy40rYdQD
0uEZ4+ELJAcb6zHuQDDQvqhnn1czyAVc8aI/UX64ncaYknHGZTHcWWMcjmippEUVE0MFHtrgiQ4O
GTAeQNQwLuFlC22NtsC50Y5YN/BqVvEBQ4DQvnC6EDWABIQgCIIgSEBIQLJELod7WEQWh2IPD1Y2
foTn8pJyRTJiL0DphQL/QgkTzA5K7tDmRgGHhcG6XAWBgRKHWWcolhEuT0fpowxhgBIO97Dv1VDS
t5FRNqEc4lxcAyUOwRlfeNzEEkGgRRAJBNur8qBRyK1FYWRLJS2rZM7flhcKJAgLSEFigI/I8wOV
FLvTXAN3tQgYCFexOXnCAnmDNy+UCfnAMoDAgE8/YpRzXA8vY9UeNmVHHYreYuoMZRjl7+pSymFx
QrBCBPur9oi5D9oKpPCxO02arv/9hqhACUaecMv749tZBfFYbBugXNarlLYwOTxTgZS8/5wZBxVd
977hSiVLPzNt0ai8IQfOoIkYO9aqhQCHcPvsbKs4F/mKGWw8X8E9M1wz2zGA3ziGtPTRhkDAuxv6
Eu2CoJiz3svIA2UKdeWBe5cvYtw9R7o8YcETGGJ/OK06bsuFBwHBMZsHvInhniA1to+QV+Grlcx1
uS9uU1XJoCbGTbXtc5B1jEnrqhrHrOUOfyMHcA8I4R2pacck5VScFvwmCIIgSED+kxYQu4wFyt97
z5kYEViCZWeQoUjecZ1RUqHMIV4GlFLMYEP50wSkmZKWTxryYKNn22jUmFXHjDSUfyhsNtYFZv9B
eKCAP3K7WSoDxRDn4hqrLEPBxvIaECMbfO/vLkZpPOZyWTyyhZKmFc39bP62flBKQVYQLd4uIevd
wMSkgCJtFXEQiWcfUdK+mnFrmxTon/UI15UtkhEgD8QB0cJRFyjJpe82y3GQByLQF7tDScdnjTIJ
0oVZe1gPQASgzGMWHdfjPkdd0eoRHBLtBTIIIgFi90FNk4764F6eAgtMTm5pcS3aBYEhUV7076R2
hoDAEoG+xV8QRtQF+R90RU/HWEEbgey8UcWMBbQHCAKWetn2httlnBv0hrk/BL9xDGkgmSBZ6MNT
o4x1DAQAbpPR/xibIIQ2wCXassw9mQkIxghIH+qAPsX/sGTY/Po1UtL+aTM+0U9wdwwrCixYw5ob
Moc01BcxV266xrhGhpUM1ji0P+oc7Voqh/ELAu1PrBISkP8WDiYukZURnWTW9moyPqywDFmpZNAK
pf8OWaVk2Golw12C30NXmeODVppzxqy7VmZsrST/hL8jEcf+krT0FDYqQRAECUjB3oQOBRNKVaQj
LgmUVMy6Y2/H/r4ZFgZPRRzX2r0dnvfUa+Zda/6d/6eNNBHgESPERoC3UdQ9g9jZ2XO7t8NZhuzy
twTDne7Iw+4xAHEBUcEyKcQxSQjIXbsd9Ah65/w/emDmcqF9dVkc7WPra9vF0/Ji62rbwFsfnE2f
O9vGjoHc5O+sY4SLKDrr4C2PKI9I95EDvOdv9wr5+t/2v3OMeeYf6SP/CB/jM9v698u7ticBubCR
fCpOtsWOkakbi2pCERiiJChESfCavBHcC/fEvSdvuEfCovtK0skDbHiCIAgSkIJFQLwF+MNafAR7
m/1+3s74Qunb9LWSH95SMqW9CbAXNeD81w97NBCIEYH/sCcAlodDg+nZiUI3vERWpJ1OluURH0hQ
yMUybJV/RAIkIsAlw1dnloDV5rgmL37cC3ni3AV7mkhy2mF2CEEQBAlIwSMgFAqFBIQQiT2+VqZv
LqVJQ05WCyyrGhVaSH7d9rSsOtBF9sbPlCMnNkliaoScPp2e6b7HTx6U+OQdEh7/u6yJ6iZzdtSS
sWHX6XsE5mBNQVmmbHxQIo79wQ4iCIIgASEBoZzBXhyXVQh7FOzeltwso8I11j3ukQIY5wP7QaIH
eV9idz4E+0OwXA/WsWPDs99TtblX5n1IJCAXMvEIlYnr79SEwCvhcBGB0aFXyeJ9b0p8yo48yzvp
ZKSsiOgk49bdoPPwtbwLaWPXFZaohMVnl19Skuzfu0f27t5NoVAoF7SE79snycnJJCBUsCk5bWbH
5n6438UGdWxyhsvdg37sNYBXsnkfG1fJA14zLmzhktibR6gLWR6/K2Pju10+t/Yr48QAG/LRdths
Dm9ZsUPyNm/s+UD71iiu5N3q5jeWDHp6uwJB+bahkp4vZyxXBDnUMVNIQC4onExLlLm76umN4r6W
VUGwHOtUetJ5KdPaqK9l1NpCesmWr+VZs7c/LalpR8/o/k899ZTM2rJdViccl5XxiRQKhXJByrrk
kxI49y95pX59EhAq2QWbOCDuBTwlLe1i3LjWL2NmwWNds+XwdAVXvYh3Uq+U8WhlrRTY5A+vXyXv
VnLNFcYVLLxqwbsWFFp4f4JnJk+BdywoxiAgk9sZt8jwoPXw7Zk3dMO71rcNlNx9g5KLLjJexuCN
y+63gVUByjRcAUOxhptgxAWBW2Obvr6HiQ2CdNQPbm2hiEOxRhngNQ1ucJHeqoo5X7v+HWhIw/VX
KvmuoYkLsqmnkmoPmWO4Dh7V8BtezeCFDPFX4HENsWhgdYC3MnjFwr2tNCxryg8PV3BPfO0VSnZ8
p2R9TxMH5I7rjfcuWCtiXMEIO9dWctXlSq4tpGRMq8yb1Xd/Z7x24d6IJ4K9QHpjvMMZw6O3m/gh
z5dUMrV9hgtea/WAy2K4oh7Y2HgCs2koA/YXwZPXwCbG2YIziCMJSP7DwaRlMjr0Oq+KvlkWdZns
jJv8r5XvwLF5MnbdDXr/iDeLTPCaiyXi2Lxc37datWoyeWWILAiPlL/2RVAoFMoFKX8fPCT9p/8i
jRo2JAGhsl5wBUQCCiZiWciUjJgQR4caxR7KNdy81i1lBAEP77rBeP6y3ragTCOWBpRUpwcuKL6Y
8Uc8Ck9JcXkNi3BZA6CsW69lkY4YJ9o18KfG1W/3ekbJhoUl1RUkcEZHo/QPaGziuiBGB0gLAgAi
9sU3DZT87yIlc943rmpBIkAw/vrYlA31Rh1xDcqFvC65WEmfhiaPdd1NngjSCKsMjoGM4NjW3sbB
AX6Pb6MkbZQSmWAIHI7ZSOm47iLlinY+xZA6tDNc9CJ+yXWFMtwAgxDawJmoj/VyBScKaAPEvEE6
rCXpY4z16LorlXzfyMSRQfDMZx9V8tCtpm0jHS6L0b5oM89I8ScCTZ0QMwRt4I1c2L6ElQpuoVGX
1V/mzrEDCch5UO4T5suINYWyLncKMRvG/97XRtJPn8wXZV154FOvJClIb2i/THbETTzvBGT+/gMX
BIGZtzdcKykLIqKyPQ91QZ1ye3973YXSHheazA+PdLexbt8z6CN/xnF+7Ttnvc90jF7I+ZOAkIBQ
+pvZbFgkLAHBDDcUZCihsDS8WNLE7YBircnDBPN/yJdGMYZiipn8Pd8bZRrpyS7FGcovFHsEvvMU
WFFyCniHdFhVoExP62BiY1jlHJYTWFhAEO650QTmQ4wWEAJYQDo8a8gVggVecamJo4F7TO+gpPvL
xmIC18zwYnbzNUp61TexMxAJvshNxrqBtkFAyUKXKnm1nInPAUUfgQRRDsSSGdLU/Ib7Y8T4AJGA
NQWEA2U76GqHay43VqR5n5ho5J2fN2QA94JlAwTjp7eV1C+t5N7CJl9YIkCWQKBwTwTQxBI35PdV
XUP2YP0A4UBgRNxjbBsl9xQ2Vil/3O3C0oOo8yB1IEqeS61QH5AiWKkQoR4WLfQ5ypbbgIUkIOcW
kQkLfe6zgGVhZ9zUfFfm8Pg5MmLtZVk2rNu9Kfvj55wXArLiSIKWd3v2lmuuv15mb9me75QSp6w8
mihN33lXAmb/Ln9HxXhVsObu2isPPFpMXnqjpYQkJvt///0H9Dvm+dcaS7P33te//9i5J1+3R25k
4YGDMvLP+fLbtp2Z6rQ4KkbGLVoifSZPlZ4jR8tXgcHyVUCwzN29TxZFRudZ/lgiWKVWbbn8iiuk
z8TJun37Tv1R/jl8NE/uvzwuXr4KGiGlKj8hd9x7b74jIRiLdZo20/Xu/+M0/bdb0Aj9/J2v/Bu0
flPnO3DaDP23y6AheukTCQgJCOU8CoLpBb5uorFjaRKW4EApP+SKOA4lHIq0TcPfZZ8b5TfCFYcE
BAbRthEgz55nAw+e7RIxKNGIeI/ggMgPkdlnvGMUb3t/KMNwiYw0KOlbemUEacQ9QEQwW490kAgs
j0K6XeYFiw+WPCFd78EYnGE5AMlCW4CcIB3KONoDv+HyGBYI/AYZwb12fKNk2tvmGEiaJmIDDBFB
xHPUA8QOFh+UE6QJ59qyw6oS71jiZK8HuUA7gNDhXLiXRlwbHdxysGlvHMf9Dw7wj3yAaH5Y0xC2
6EHe2x8BE0GMsETL03LCJVj5B6fSE+XHjY9kWdYU5Fp2dSB+Xr4te3TSChm19vIs5Alln7T+dr/3
hOSGgEChXHUsST4fOkzKVq0qnQcO1orpP7FHpeyTT2nFpFzValp+XL1WlsQc1laHZYfiZMLfy9xp
T73wglupxd9lsUfku4mT3ekN32ynFUuk/7RmnZSv9rROb9LxXZ3+/jffyoqj/is+KPfUFav1teWf
fkYmLVuhFWc3kTqaoJU6pD9dt550Cx4ptV5t5CYgUKa9iTMPKObFypSVnSLyZO3nJfC3P2RpzGGT
/4GD8sOqNe76VXquhiY6VpFfHndMBs+Y6U5/tf1bWpH/MiBQtw36Bgpyo/Zvu8/pM2mKNH33PZm9
dYe+P85B2W36mAWL9LW47vUPPpQnatTU5yw7dESTK9Tv7+hYTcSeqfeStPzoE+kWPEJfCxK1JDpW
lw1/R85bIJWqPyfX3nCjPFauvO4PnDdu0d+yKDJGNqSJPPX8CzLpn5Wy/mS6hKWmy9ejx0rd5q8b
i1N4pPyyfpO7bBCQVTvm0NfBc/9ypz1Xv4Hus4UOSxUISLlqT8uM9RulU78B0uzd92RdaroeX9n3
f7gsjozW+VV45hnXGHhaBv8yS7cL2sfTyvJomTLy5579mY6jjG92+cxdxs8GD9XjxhLbjt17utO6
DguQNp92kSnLV+k6oB9ebtnanT7gp5+l8dsdM5Xd1xiz54Qkpug2Hrd4qfQeO15eeqOFbDglftQ/
rwhIijz70ssS/Mef0v/Hn+T5xk3Oa/4kICQgFArFEUSxoLnhPZK8UTZED8hTr075GVjOhA3nnrE4
EJ089GDvs17WtXTfOzIh7Fadx5wdNSUkspecOHkwz8q/NXa017gkIE9L9rfLEwKy+OAhGbNwsXzU
53t5oXETrVj9czjeTR60chZ7VEpUqCC/bNisFcel0bEyduHfUuqJKrJZRIqVLiNtOneRD7/tIx98
8510HjBInqlbT55v3FTCUtO0Iv5+7290Wqf+A+TFZs2l3utvaAKAGdYPen8rzd/7QNaeSJXQE6nS
7N335Z0eX7sVQH+Xj6xLSdNKVL+pP7kVbCiaD5YoYRTeAwdlRdwx+W7CJKnZ8FWdP9oF+XoTKJdO
BQz3wP8gBPNd7Yn/Vx5NkM8GD9H1Qxu07/qVPFKqlCw/HK/PQ/6woCB/K5pURERpxbfLwMFS7/UW
si7lVMY5EVE6P5TxlTZvysff95XVCSfMtZHRWuF/tHRp3TcLI6OlWNmyuq5oh9+27pDi5cppgoj7
QFEuXeVJCUlI1srysFm/SZWatSQk8YS77VBfkLfxfy/T/avr6CJQIAcgKIFz5mpih+OzNm3VeUAp
BGkFoQJxRBu807OX3P/IozoNZXj48cc1QbB9EJKULO/27KWV9NWuMvyFdo2Mdi8D0uPPD+U3JClF
E170+XLXuHW3MSw0HvfwJCDoP/TB1JUh8l4vM0Y/HzxUSlasrC0Qockn9Xh5uWUr+XzIMJ3+3te9
dRsvjYnTBOf93t9qwtSp30Cdjv9Rb+dSwDXHU7yOMbSnHmN2XOWy/nkme8N1nmif+f9G/iQgJCAU
CqXgxAFJTA2XFRGfyMT1d+ulO3A7Oz7sZh3/oqDjWMou+XHTo1lifECh/2VrBUk9FX9mX5yTMfq+
A5fDEnG37Dnys8QeXyNL97+t924MWaVkW+y4PKlDWnqyzN31UhavXSAg48JukKPJ28+agED5WRx1
SCtIUDDbfva5tO7UWebu2mesCHvDZfWx41KyYkWZuHS5VtZWHDmmldjKNWrKxtOnpexTVWX62jDZ
dFr0rOnGNNHKMpQ8KGp33Xe/bBXRM+mgvlDs6r3RQkJPnNIE5OM+faXFR5/ImqRkLfiNY1Bs/VVO
YI1A/phdHzJjllaaoYCiDMXLldcWDCjfqMsXQ4fJC02aasIyZ/su+XbCJK8C60NOliMo8Q8Uf0x+
Wb9ZtojIpnSRmRu3SMlKlXReUCgfK19eZm7aqvNfeihO//1z9z59f700KDBY6jRtru/lPufQEa3k
r4xP0srtOz16agKBNPQBrDylq1TRBAQK4wPFi2uLh1WmQQ5gRUL5Ya0qW7WarD2eqi0iQXPmytMv
1tWExxIstFfJSpX1fdG/KAfyRzmhhD9Rs5aMWbBY9xfygMXn8UqVdJuXKF9BL9PCaNyYbmbNi5Ut
J//Exesy4Tycj+tgLQOpavf5F9Ly40656mPvS7dOaDL59agxsio+0dV2cbrv0Q+WRKEddNrho4Y4
Rceatow9Ir1Gj9PLvw6IGbu7RLQVySyBOia/79ity466YXyHg3SXLSfBf8zT1heMIfQdxrce/6dF
7ihSxG1FQ3t8P3mq1zH2c9iGTJagnATj+LdtO3S/eO6RmYfnbdsOLd4sF2gLLBtE+u/bd+X5HhsS
kAuUgGDpTHCLjM2r2Ihr9xxQSaNQSED8wdHkLbL6wBc6xgUU7SAvM+fjw26Sg4lL5VT6Ce2WtiBK
WnqK7I//TUaFXp5lHwWWY60+8NkZt3FC6h6JSlws22JHyfbDEzK8bCUu0eQDJOTnzaXzjEjtjJsi
g1dm3ZA+cu2lfnntyv0ekHBNPKCctfqkk1aQsRTrpRYttWJb85WGWuGDImT3AEAxmBG2UWq+8qpO
wzlvfdlNK5eYSf118zZzvOGr0qDNm/LDqhBtBcGeA8yM12nSVP+P+0PwG8emh67PZInJTlC+Gq80
lLrN39BLjJBX1+GBWnGEIjxq3gKdjvOgkL/Y7HVNouwyqrPZ+A4l9pU327rrjjogH7SbVrpjj+rl
TDVcbYe/nw8eJquOHXfNfkfotkKb2faFoE3tUjIQglfaZOQxbc06t5UHfYslX/bek5ev0u2srSbH
kqRJx3e0haV78Ehd1vqt2kjd19+QvlN/0vf1VY9pa0I1Mfl2wmRtsardqHGmOtoleFDSsffG5j9p
2XJ57a23tSUA9cd5zrHT6K2382xvh9s5QHik1Hb1uzMPQ7BjNHm2aSC/9vfYRX9r8j101mzTP680
lA+/6yNDZ/4qz7/WRBPYgN9+1/sznP03bvESTRLRfiAqzzvyhszZtsvvseuvhW/uzj26f15u0UqC
fv9Tt6vTOgeShzQIxodn/ijrF0OH6/S3v+wmS6IPk4AUdAICEoHNwVhzv6pr5j0ASEtxeehZ2ElJ
1EBDQrBvoFwRJemjzb4Cz5gDuA5r8pEGiRuSmazgN/Kz6XrvQr/MaTrI3UDXOcMdXpYGKFnZ1aTH
DiYJolDyIwHB7HhCyh5ZdaCztmoMD1E5RvR2BrkDQcHMeoGUVd7bAoo79lXAapGXSEjerS0SgdpT
1f8kOnF5Hm6iX6wDIjqJlN3DsvrA5+fFCxaFQqGQgFxABAQK/alRZkMu4iIgCJ2OhO0gAvCgVLuE
kintMyIxg4CAADx4q5K3nzHegZpWUhL8hvHIg43Cq75U0riikk61lXxcy7j/hGcjS1YmtTPXIH4C
8kW8B3hpwr1BPqyXIriPxfXw9gN3rtbtKTbf4rrGFUxecNVKZZFCyT8E5MSpaNkaO0JmbaumFe7A
EP/Ix39ZNAEJvUL2Hvkljza5H5f5uxvp9h+0QsnMrRUl+dShvN2MnviPjF2XOX5JkMuSs/JAJxIQ
CoVCAkICkhFboJ/LLWnvBia4HBT48H6ZPemADIBAINZAsiPCNY4v6qykejFDYEBUEGehywvGjSg8
DiHGQ7WHjZUEgkByxe8wHohAULq/ZI4hDXEobrraBH87MjTDixDKB8IBQgSvPvjfGWwN5UV8CHgW
gqtXuEsd0zqDKFEolPyzBCvtdIrsiJsk0zeXlKCQi/R+D29LsMauu162xo6Ug4n/SFTC4gIpMUmr
9GZ7LFMK8mI5WBvV7aw/XmujemorC4jA/D1NzjhSeU7YdeQHvbTL+xKsiSQgFMo5iCeDJYjuDeJs
ExKQC3EJFiwcYT1MrAAEYrOedeBlB9GlEX9Bk4D+mQkIAtjdeJWJM4BAbogzAGsE3KEeHGTchA5r
biwiOB8EpufLxnKCiNBNKhoXoQg6Bzelt11nXJEedRGMQ4OUlLknYzkY3JWWuzcjGBxcojYoa2JL
7OqTQYSoMFIoF8Ym9JNpx2T74fEyc1sVvSwJindAyH9nE3p88laZurFolqVYQ1cr+XXbM3IqPfmM
7pt++pT2eGXJx8ytlWTR3haycE9zLfP3NJfl4R/kSR0QHBH39rYJfWzY9XLoeCgJSAER9A/2dCx0
eULCJum8jLPhjyvjwT/P1C5gcztW7ObmrsOGa/fAi73EYDkfcUzQfjqYYUSU/r0gF5u7nYLN+bVe
fU3vBcEeqPn7I91ezygkIBfWHhBXYDMbvAxKfsfqZmmTr7gEiGsQNTCDHCAuhY434HATatNAFmx8
CRshGiRCp31nLBnIB0HxbBRolAPH8ddGmsb/+77PSMf+D9wrgkoihXLBu+FNO50qW2KDZc6OGhJ7
Yt1/wg3v0v3tZejKrHE0YB3aeGjIGd0TFhYQkF+3V5ffvAiOL9jTLE/Kvy9+dhbyYQnIX7v9+wgX
dAJio5/D29bwX+dob0MTlvyj3dRCcdTKaUSUVooR4wDps7fs0C6FZ6zfpNvFun8dNH2Gjhfyl2vj
Mo7BA9KwWbP1dVBy4QkK+eCeVsGFcooyTFy2XJ/3Y8ha/b8N5AdXsyEeAo9NC1xufnEuNjXfePMt
8knf/jJz42a5t2hRafrOe7ostl44H+dh8/yC8ChThvBIveG475Qf3XnDKxPijthYJLgOeYz6a4E+
B96t/nZtYLfkAZuxHyhWTC674grp/+N0GTpzdqZAi1DoUS5cP3r+IqPgu6KKY7N8jxGj9LLu6vXr
S8DsOTJ+8VLtVvbndRuk75QfpN8PP8kvGzbpNoSrX9wHm7tRxrELF+v/4awA5wz4abqug5PI4Pes
TVv0eajH4sgY95hGWqe+/eX6wjfpvsf111x3nc7T9oO/RAp9+WaXz7U7XTgGwMZteNiq36qVfDNu
giYktIqQgNANL4VCIQEhfCIl7YhM2XBvlkCEgWuwF+RqOXQ8JB9bcHbI+LAbswYi1MvobtDugElA
IrQHJrhQhfL79aix0nPUGCn95JPy2lsd9DIakIuPv+8nV11zjbzV9SsZOH2GjueAc76bOEm7lUXA
vzuL3Ce9xo7XARGLPPSQvNSylVaWdWC/Fi31/Z99qb5WzqGgqouUjg8BBXXQ9F/kljvu1ErrwGk/
azfGdz9QVCvfXwUG6Ws9pfBtt8nYBYvdnqzgjQuBGOGhC3Vq2+VzGTF3no6E/Wq79voauM4FQUI9
TH3HaCIxA/kEmHz+d/HFUq/569Jv6o/a8xM8JaFNri9cWJcPxKRKzZryWPkKMmvzVq28WwLy4GMl
pNBVV+k8LAFB+i8bN+u4JtXqvKivR5yP6woXlm/GT3R7QOsxYrTO/7kGr8hwBwGZuWGLtP60s9x2
193aSxOCMnYeOEhuufNON0FAPXDtw4+Xkh6uaOsIiti4Q0cdawP3f7RUae3JCyQRdb397nt0npY8
Tg8N03FF0J5wf/tq23a5i2PhWnZVq2EjGfLLrEwepODeFrFxQBw79vhajzf0+ZlaWCgkICQgFAqF
BKSAAx6vvG3QhyVkxNpL5NDxNfmuzIePh+mlcgFerB+wiGw7PNbvexV0AoJ6IZr6lBWrtVUDs+rX
3XijtPjwY3cgvjvuLaLjYECBhMvVNUkpWtGfEbZBWwNuuOkm7TYWMS0QWLFN58/kmuuv19HVEUgR
EbWhIMOV7PqTp7WiCgUawfnWn0zTivEll16q3bM2aN1Gu7mFy1wsZ+oePMIrAQEhGv3XwkxugOc7
4jLo3/sP6DgXiNCNazC7v+HUaT0Lj9gqCC4IAgT3uSALOAcBH3eLaBermKmHQg6yUbT4Y9qlLmJZ
wIKC8kLZB9mxcUBKVKio6414Fmg7uEnG/bsOC5SLL7lYEyLEyUBk8HuKPihlnnxStwXaGC6TkX/b
z7/Q+cOaAWuNXRoFUnPfQw9Lw7btdMwS7WI5IkoTjOG//qav7dR/oG5/lBFR1tGPIBiIun7JJZfq
eDNwL1y/VWvdvm98+JGOw+G1/XIx3tFOyBeR2LEMzZJCJwFBm6+KT5KWH38i1es30G2x3NV2FBIQ
EhAKhUICQmTB7iPTvC5lCnK5Ll57sFe+KeuOwxMkMOSSLA4EglzukzfEDMzV/Qo6AYGFAmTjoosu
MpaFW2/TForfXcuH5usYGfvky4Agueu++/Q5lapXl27BI90RpxHU7Yshw+XKq66Siy+5RD7p119f
jxluEBYonbiu67AAeaxcObn1rruke9AIWRhhZskx0484IxWfra7Pu/fBB6Xx2x1k5Lz5OhYFFFcs
53EKLBvIP6flPIj03f6Lrvq+sNyUqvyE3Hz77TrGiVXgvxg2XFs+rrz6av3XEgG7/AjnDZkxUx4q
UVKnNenwTpYYK6grgknWbvSaXFGokDRo/abez4HjOO+nNaFuS0yxMmX1sjRnAL0Frjxg+bmnaFF5
p+fXmoSAQKCPsK8ClpjiCMq4cYv7WpQ/+Pe5+r7ox4ZvtpNLL79c2n3eVS/DWuCKao7yvvZ2B30e
rCMIJIlAfgvP0gqBMYI+Aqn54JtvdZR2p+UEabDINOnQUYJ+n+uOLUJCQALyrxCQ++64TtpWUNKu
EoVCoZydfFhVyd2XK5n7199kCucQ+47OkhFrC3m1hpjI4jdLZMKif2/JVcoOmbrxfgn0EcsFZfTH
69V/dRO6Jhsu8XleDume10PhmbxilV4+ZC0XIAHZBdGzlou8Urhgqbnz/vvc+YMc/eMKHuir/j7r
mFP7eLEk5Lp+jnQdpC8wOIv1B8r+ItceG0i1OnXcaXWaNMtk1cipj/JkA7smcodJLEhA8j8BIQiC
IC48HD95UH7eUsqrNcQGaBwTerVsPRR8/ohR/EyZuP52n0EkcXzqxgf0npAzAb1gnT2xgSKN5TZY
hqOtBudRUdX5H8rIf9GB6POa/1nJ3nDdXii3Lr9LPDeGY8mTrzQKhQSEIAiCKBA4kPCXjFl3k9c9
Fs69FtO3lJWNMUN01Pm8xPa4cTqA5PDVvgNImqjql8jOuMlnlRcJCIVCIQEhASEIgiDyCbbHjZex
6270aRFxRh0PDrlIxq27XhbuaSZ7jv4ix1J2SWpavJxKT8pyX0RIR1pi6n4Jj58jS/a3l4kb7pCg
Nf/T9wrKJmo9SMnItVfJxpiheVLHqlWryq/bdsqapGS90ZhCoVAuRIFDiKB5C+TVBg1IQAiCIIgL
H4mpe2X29urZWiS8WShAXIatMnFFEK18yErzF8eQFuDnvexm+OmbS8lhP4IL5gZLly6VUcFBMiIg
QEYEUigUyoUpwQEBMmbkSAkNzZt3JAkIQRAEkW8Ay8bf+9rI2NDCmlD4S0hyI7gnSMuo0Ktk3u5X
5VDSKjY8QRDEeQQJCEEQBJFvcTR5q+w68oPM39NExocV1tYKEIgAl9UiwGXpyCSrXWmuc3HN6NAr
Ze6uurI9bqLEnVgv6adPsnEJgiBIQAiCIAgidzh9Ok0SU8P1fg8r6adPsWEIgiBIQEhACIIgCIIg
CIIgASEIgiAIgiAIggSEIAiCIAiCIAgSEBIQgiAIgiAIgiBIQAiCIAiCIAiCIAE5RwSk68dt5YUX
61EoFMrZS5168mqj12T//v38IhAEQRAECYh3VChZRKL6KYkZRKFQKGcn6aOUNC+jZOYfS/lFIAiC
IAgSEN8EZH8fJQf6UygUytlJSrCSpqWVzJpLAkLkXyDeydGU7bL98ATZcihQloe/L4v3tZbZ25+R
GVsqavltRw1Zsr+trIj4UDbFDJNdcVMkKTVcTks6G5AgCBKQf5uARPRTkjBcyfGg/K8cxQ5WMqaV
km29lUQO8H5O1AAlycFKDg8xdfP33pGO646hPQKVRJzHutn844YoiR+W9/2BtkgMNHkcGaokvF/+
619bNgh+/9fyJwEhCC9f1VMxsjFmsMzaVk2C11wkw1a5IrqvURKcS8E1uBb3GLn2Upmzo7ZsOjRc
UtOOsqEJgiABOZcEBIoolGwoWSFfKYkZrOTvzkruvdEo+FC+IZmu6a8kemBG2tFhmZVz3NN5rVX+
cc5B13W4Htfh96FBuSMH9j6JAUp2fKtkf9+sdTo0WElCgJITQUrerKqk47P+K5G49/qeSpRS8s0r
Sp56SMmt1ymJG3p+lD6Qpi29TP7dXlJSs7iS6680dfK3T7F8xtn+6A8ci3DkseILJZ2fV9KovJLU
EVnvY6+HRHkQvHhHGvoSbWP7EOfaNJCn6EG5I4CR/ZXs/d7U/8OaSppUVHKRMsfPl+KNdkL+bz+j
pNWT5jfGGcbGmq+UxLqemYh+JCAEca6x58g0+XlLGQkKuUiGrc490cgtKTF5XCwzt1aS/cd+ZwcQ
BEECklcEBMpc2igl8z9R8mp5JR/VVHJkmJID/czs+303K2nxhDnesoqSr+qZWXikYba8RRUlH9Q0
ij0UxJEtlSQHGSV5cWclTSqZa9+vYc6d84GZcV/fQ0mpu5U884iSd55V8nEtJW2eMkodFGR/LR9L
P1Py3nNKri1kroViiDQoumHdTZk61Tblq1JUyed1lJwapWRlVyVvPJFVWlVRsvs7Uz/c65/PlZS+
R4mMN3/xv83jfBAQkMGSd5n8y9+nZOGn/rUPztnaW0lTV/u/+5yS959Tcu9NSoY3N6TMngsCOKql
kuaVjaJpj6MNP3/RKN7tnzbS5QUlUQNN2nevZqS9U11J7RJKit5qyB6uR7t3eEbJW0+bPi5fREn9
MkpOjTQWnT8/8t4H6CvUHWNz6zdKHr1diYxV8vQjSma8Y/r9fCneu/soeRj5jzEEcEp7U3ZrIUQd
G5ZT8ut7StJH+7bAkYAQxJkhIWWv/LGzjt+EA5aM4auVDFmlZEzo1TIh7BaZtrmEzNr2pBb8Hh92
s4wOvVKfg3ODQvwgJLhviJL5u1+T4ycPsmMIgiABORMCAqtBv0ZKyhVR0vsVJYs6K0kZkXkJDn5D
abQzvFBUf3xLSd1SSk6PVnLn9UqefFBJ2XuVlC2ipPIDSkrerSTwdSXHg5WMbW2sBkiveL+Su25Q
0ruBITCwQkAxHdZMSVKAUXBAgCa2NfnlRjlKCjTlwEw+yIFV3FG3kyNN2bF0qv9rhqwgr53fKZn3
cVb565PMbQCF0iqc+Hu+FUxn/lD6owb4RypBPh6/y7S10+oESwT+Oi1V3ggIztnSW8lr5ZVUuN+0
JeTuG00ZrHWmyoMZabWKK9nQ06SBAIEs2TTc4/UnlOz73qTj/iijtz7AdZGOulirCup/vsifU7LL
H2MFhBvEFM8TSCqsVYkBJCAEcTaIiJ8j48IKZ0s8AkKUDF2tZFzYTbJsfweJOR4ip9KTcp3XyfRE
iU78RxbuaSZj190oQ13LuXxaRlYpmbzhPolO+ocdRRAECciZWEAgmN0N7abklbKGBGgly7V86qar
jdVDL83pp6RxRSW/f2AU2T4NlXSpY8gElqIku0jHhDeVhPUwpAPWFZy7/Rslj9xmCAjOw/0w0z2o
iZLE4WZWvFEFJVPfUnJ0qP9LdJAv8gABWdvNWG+wFAiKIawqQ5qZ9F3fKSl+p5Iv6xllCuegHN4k
NyQDS5DGtzGz4O2qmWVGBzyU+571TTraEf97Wjm2f2vSIVC+oejmBXH5oo6S7xqatkY7gWAObmqs
CHopVH9TXtR5XBtDEDAWYL1KDVZSr7SZ8T/hIowoP8YDxgWuhzUE7QqChHaHBQqEFWQPS6c6PW/q
a8cG9unYZV52eZy39j+Ri30uIKu/vGParlllJfv7ZV2ihbJiCRfOGdI081JCnItrcC3ScS9/CHCE
a+zBwgZCDgKCtovkEiyCOCvAuvDL1nLaMuHLEgHiMXfnS3Iwadk5K8eBY3/Jb9trGAuJDwKEtJ+3
lJUTJ6PZcQRBkIDImewBcS3bgXKJZSdQYHf3yZgNxx4LKJvO5T92JnvntxkCxR9KbaRH2p4+5lr8
xTkQKKn4H3ljXf0+x//+ltneH9ejfPi9r29GufF3h5f883qfgLYy9PO9FyO79AP9c04/E0H90Q87
XG2Ev852sXsskIa+RvvbfrbLuGw6jtvr9Phwldm2ub7Hd2Yfj9s60Dfz2MD9nftPzlf7+9MH7vT+
/pNftMOhweemTiQgxH8RayK/1NaFIB/WjtGh18vmQ4HnvVxhB7+VUaFX6TL42iuCshMEQZCA0A0v
hUIhASEuEPyx4wWvVg9YPLDpfH10n3+9jCGRXSXAx54RkJD5uxvBGTA7kyAIEhAqTxQKhQSEyK/A
/os5O2roDd5ZrB6rlcza9sQZ7es4V0hNO6aXXQWs9m6lmbuzrqSlJ7NjCYIgAaFQ/g2xbpqxpwLL
9fA3ZlDBd1l7vp0UoF2jXcsn44acm+VgJCDEucLf+9rKkJVZlXlsBAcxSUs/ke/KfDItQX7dVtXr
BnmUe+n+9uxYgiBIQC4YhdXl2rSguDLF5ueZ7xrPTufTdWx+EXjgGvCaiZ3xw1vmb+MKxuFAQagf
9sTA2cLoVlkdB1gvX3CE8OnzxuECZHI74zUrL0gYyBycR6BdP6tjnD5c/D/jGIEEhLgQEH7sDwkI
uSjLng8sxfp9Z+08JAzH9KbydQf7y+4jP0na6dSzvuep9OPy67Zqes9KJjfAa5SMWFNI50cQBEEC
kk8Jx1FXdO8BjZVUul/J+DeNYoU4FYghgRgQiFtR4T7jznfxp0bBAknZ9o2SEneZGBSrvzTpiDWC
zc6HXAEQP3vBXIsYGs0qZQQuRJBF3BuueV8qbZQ3nItrtJvafuY33PLCtSrujb/433pRwgZsxOiA
9yt44MI94BUJG7exKR4uiG+/Tsk9N5oylLnXeKGCFyh4TUKZEGfliaJmUzPq1fJJJfcWVvJJ7exd
uWLWG+VGHJXvXzVubhEnY9PXrhgaLicAX9c3ecMVLjyYYQP+4cHGTXHxO0w6guyhjZEvPHqBLEW4
yrPsM1NO1B/ln/WuKRfyWP65kvmdsgqUcuSNfkWcDLQr2gPXIwaLVb5xzuZeSl58PMNdb/AbjvyH
mXgtFR8w+SN9QBMTbwTjA+X4uaNxAY30Zx9V0uNlJW2rGiUf4wgudDs8a9oAgt84BtfPv76r5IFb
lMx+z7hrHtvG9AfqjD7C2ECbjGhh8kY+qL8O7hig5C3X+LyukGl/1O+1ChletJBHQHMlH9RQIhNN
e2Bcovx/fmzOw+b+V8qZNoYgz9ghGR7U1nVX8uRDJm+UYUJbc1/rNGJBJzN+ZIoZiyA9UQNIQIj8
j9S0ePlhY9Es7m6xv2LsumskMTX8rPOIPb5GL5UavFLJqNBCMnnDXTJq7eXa4jI+7CYdY+RscDBx
mYwOvSpLHUCgZm9/RltKCIIgSEDyiUDBhJKHIHYIUNe3kYnl4TkrDEUKSqOOsN7PKGyz31fy3KNK
To4wCjLc7EKplMkZVge48V31pSEMiFcS7vJwBDepUPYwY43fiAkCN8Bw+4pzcC6uAZnBLH31YkbJ
f72yIRZwUwtlGQofFFaUa2QLE0AR+Ue66mbjRuC+CMCIKOreyASWy8BlccfqGfEm4Ka4V4Os7ny9
Lb1BzI0nHjRlxVInBH4ECTnuUr7heQrR32F1QIA/lBtkDa5u0d5fvGgU9nAXWZKpSqo+bO6DoHoN
yhplGaQO9W/uclULd8bIA+6NZVxWQV1BOGzsDGsdAHGzfYy/KAMsI2hXkCMEukRsGZDD02OUvFxG
yaS2GUETI1wxX2Alw18EskQbuL16DTBtHuda6oWxUu1h09cRjjGAY0hDHVEnxEBBX6JdXiipZNZ7
ph+Rx1MPKtn8tckD94WbYRBf9DXIxNyPlDxXzLvrYJQThAIEL9kVX8XmMfM9M4aR1xuu+rdykU8E
60TgRRwf2kzJiUDXPQco2dtHSbE7lRwblkHi0K7h/bxHqr/QCEjSyQOyOvILHTDu0PEQfn0KMI4m
b/EaawOEYc3BHnmSR2LqfjmWslN2xU2RJBeh2X54rAxaYUjC4r2tzzqPJfvbea3HiLUXS0LqbnY0
QRAkIPlpb0CUKyjerj4mijTiQ/z2vlEiowdmKFeIHYIo7VD4MSv97SuGOGhFNMDMWlsCAiXQxtmA
JaBGMSUbvzYKOpQ93O+lMiYfKJ+wMrR+ysyWQ5ne6LoG10LBRqDE4a+bKORQXKEUosxQkEEQoPD9
0D6DgCD/+GEZSjaUzbbVDMGSCaYcmNHHrPZBRx0xi40I4bAUILq4Z6wQXwJLjyUguA+sMDWKm7Ju
6qWk6C2mXCg36vBRLRMRPX2UKRvaMhMBmWKUcyzrQcwQnN/nVRexGGsEMT5AUKDgo51QF0/BrH5O
ijDugzgiH9RUItNM+UBUMNO/qqvpbywr6lo3IzaIJhdDlPzxoekfkCLEL8G5SEOZ4WZ50aeGrILk
1n7MHMM5EPzGMaSBcFqSg/6Bgl/uPiVLPzPuhJH+jMuqhHGJ+1e+37VE0BXHBERGt90ko6SDeKE/
0T6oY9AbJgYJ+gH5Ix0EBH0Fqx8sXjLd1B/EDfFsYGXDeAQZRRR7EBC0Aa6f3kFJ/bK5D9aZXwlI
UmqEhB3sKxPX36GVOCif2MiLSNWxx9fy61OAsTNuslfFHcQgPH7OOclzbWR3CVj9Pxm37nYJj/89
T+65LXasz3rsi/+VHU0QBAlIfl6KBWUOivGoVhlxKEBE9Ax0LxMED8uFrOIFJRDnQYmGgo/07i8p
mdTOFWSvX8ZSK6R1q2eiuFtrBxQ6WCcCXjdKLM7BubjGEgjkgXv1eMncGxGuMSNto4tDmUWgv36O
/HEvO+Mf7rKCIF/k75mHXSYFxXZMa1cgwLH+7Q+AgoyyD2ys5Ke3DWmBNQdKLQiWnhXva8qMcuE4
4lZguVbIlyYwJMgFBMrwQNd1IIM4J2pgxjIoKMK2/pjR92atOpM+h4KO2f6vXG0DognlG/mhbewy
uG8bmvwhKJttP0tUbR3RxrBu2T72lgd+H3eV3/YPrkEarBkgVxhn6EMst0K7YdkcrG1T2ysZ2MSQ
CrtMDONxfQ/XGHvJLNey1hC0McpuxycEFg9dvr5KEgMNWbHj87cPDPlB/rb8aGu0eTdX/fa4lhde
qF6wkk/FypqobvLDpmJ6s67XuAp6Cc51siF6oOyPny37js6iFDBBv87b9YpXd7ZwuZuQkveWg9OS
LtsPj5cNMQNk7LobJDDkSlkR/tFZ3zfuxCaflpywmH7UoAiCIAG5kASKJywUmJEHUcjLjbVQHpd0
McuNqj5kZu1zWvKU14L6YPkV8gfJwsw39mEcG07PTpSC44Y37sQGCY3qJRPX36kVMihqvqJKeyMi
+nxKwZRsoosfSJifJx9v7DNJTTsqscdXS8qpOPfxRfta6n0gA1YoWXWgy1nlsffoTJ8EZPeRadSg
CIIgAaFQKJTzbQFJSN0j66P7axIS6Fpi5Q8JCQyhFGTxZv2yijvGS15ge+x4GbRSydCVSpaHfyhp
p09KfPJ2mbb5MRm4QsmPmx6SEycPnlUeKw508kpAQLKQF0EQBAkIheJjORT2LEDJhBwP8n8vj15C
FmyWBWG5kHMJW0ERLLPSS67+pXphuSCWwqEcaOvIbPYETXwzY39Rft0DknzqkKyJ6p6xDGt1VuIx
PuwWOXJiE78+BRgILjhh/S1ZyCj6H3uC8sqDVELKHlm8r7VMXH+PDFhu7j9jS2XZFfeDnD6dflb3
PpayW8aF3ZiFgIBcTdvyuCSnHWZHEwRBAkIpeALF1CrH2Adi9784iQXOifdIs+nY1I29LC+WNK6B
//zI7JPwJxYLrp37oYlDAW9gt19vXNEmBWacYwMRIv9oH4pxtKuMca6AhZ57HA4Nyig/lOtDgzOC
7VnPY0g/5LGM7pDruA1+iDqhzDiGfGJdv20Qv6Ouc53kCseuukxJ00pmMz6uwT0Q2wVulx+8Vckd
1yt5+mElY1q5vLc56hnpqh/uA/FGDqIHZq6/ZzwRtC/yhzct/N79Xeb+iXDtaapXyuzhsXns62s2
0LtdS+dTL1jwfBUW3U8mbbhLK3IgJePCCnMT+n8A22PHyZBV3pdhLdrXKt+Xf96u+nq8ZrJ8uMq/
68iP7GCCIEhAKAUvAjb+wk0uvF0h3gbctr5aXsm0DoYE7PzOuJmFNy+444ULYgRGtJvIofQOa2Zc
6956rfHmBZfDiCUBF7LYnN3+6azS7zWjLEMRn9LOeA6D562HbjMb3a3iDCcBLZ8wSjMEZQvrnqHk
gyAs7GTc2Npz4A0Mrm5Rv5jBZoM94lsg7dorjJJd9/GMWCQo/y3XmvTH7jTn4/6Q1115w90wHBxs
6KHk4dvMMcSTefYR8xv7cApfZX4jFg3KhA3iuJctl5WnHzLesuCRCh6yrr/S/Eabwvpw5WVKpr1t
SBcIEfYX1SmRcf271Y17ZEuklnZRUqdkRjr2PaHdLBHBZvSHblWSNtJ4zxrb2riZdpIPOC5Au8Gd
cILD3TP6CPFeEBcF/Q8C53SFnF/jgCSk7pONMYPlWMoOfn0KOBDlfO6uel5JCAL8rTrQOV+W+/Tp
NFkR8VEW8gFBXebtaqDPIQiCIAGhFDiBkouN7Hp2foJLaR9kAg1Cib22kFGuS7uCCCIOCBRwxN6w
rn6h6MILVuUHMiuvUJARYwPuaj0FbnqjHG6EQUTC+2V2DYv7wuVsr/pKitxkrAVQsBG0MTXYEAhY
TXAMwQThYhn5W2sOFN6Orhn/jT0z3C5HD8zwDoUYMTdcZfKFZ6ktvcz5uA5ultd8Zf7vWd+kw10x
3Bzj2JbehqjhN0gZ0uAKFyQNx6yXLTgLuMhFntDG1uKUFGTaFkEIQSQiXfXFtYjngfKjL7b2Mu6M
775BScX7TDqiw4M0/OiKDj+xrXH5e9oVewXHYL2IdPSzjakSPTCz9QfHvqxr3BWDCHmzcqBv0L6I
wo6giOhrWLty402LgQiJc0k4p2wskmUpniUhWD6V37BgTxMZttr7/pWpG+/T3t4IgiBIQCgFUkAi
MEuPIHZQnu0SrAOuGe5Pahn3uogpgTREIYcLWbiCtcuxQB5g8ahS1CjAOA/KtCUUNv6GU/yZRcc9
EGX8rhuUfFzLRAiHYg1rCZZ8IX9EjK/gigYPSw0CEdYtZWJjIB1EB5YZkCdYd1o8oaT6o8aigTIg
Evsjt5tjiLeC80AKECgQS6Ww/AiEq8SdxgpQ6zElt7msJYhQDmsDfnd90VgL0A4gaziGpUywYIBI
lbhLyT2FjfUHMT9QH1gxYJm49GKX5egJY4lC+l6Xq1zElbnpaiWP36Pk0+eVPO+yhLR50hA3EJT2
1UzwQdwDligs50I0+hg/vLJhaRdi4sBSZaOnZ1oiN1TJ8i9M22L5Fvo2wRW0kJHQifxlCUmWnzYX
87qZ2+wJukliklb86+WMTFgoY9Zd67OcP28poze6EwRBkIBQUS/Qm8ehNCPwH6wEULh1lO4BGXsL
8Nem4S9m6fWeCBdJwLWI9A2FGgozzgvPo83WUJBxr32uPLE8C+TDOUuP41DGkYZN1PjtdImsrQv9
TTrKjjrZekX2z9jfgXQdxHJQ5v0XSMd1SI9xEQqdV1+Tn83XtifKZ/Ny7tHA/7gm2rW8K9xxLmTv
9xmkwnP/B67D+dGDMs51WpqiB2aUyZYxp7YFkej4rIkj4suFNMqM/gWRjMrHe0AIAjiZdkxm73hW
Wz28eceCxeHX7c/qjd/nG3CIAHIxfLX3smEp1h87X8yzjfMEQRAkIBQKhW54SUCI84TwY/NkdOh1
Xq0MloiMC7tZtsaOPOdl2RgzREauvcYn8UAZx4ReL9FJy9lxBEGQgJCAUCgUEhDiQsaKiE+04u+L
iCDOht03snDvGxKVuEQHHjxTJJ86LJEJi+TPXQ3ccUp8xatB2vAQJeui+7CjCIIgATkfBMS5NAXr
9J0uUSkUCgkIQeQlYOkYFXq1103qntYILIWCF6qx666V6Zsfl1nbnpRFe9+Qpfvflo0xg2R9dF9Z
tr+jzN/TWGZuqyI/bX5MRodepa/B0q+gkOzzCFhtXETvPfoLO4YgCBKQvCQgWH+e4CWYHNamD2tu
NuBa4gH3ofBudCL431GK4EkpksohhUICQhR4YB8G3NsGrbnIqweqcyUgJiPWXiaL9raQxNR97AiC
IEhA8oqAQJHHRlV4yil1j5L5nTI2+oKIwEVph2eNR6XYwRmEZEkX41nom1cMEXm+pNlgC4KCTa/w
VPRZHePpqPx9xlMR0uxGW1hTmlU2aRAdX2KIIRUgQR2eUVL6HhPfwJ6z9itzLcoHb07lipg8cL72
zkRlkUIhASEKNE6mJ8meI9Nl+pYyMnJtIW39GJbNcq2cJMi1rMreY9Taq+SXrRUlPP537aGLIAiC
BCSPCAhcciL+QOunjHtR/D4elNXyAcXj6/rmHARzi3BYRBZ9quS54sZ9K7z8IA5BlzpKurxg4lDA
BSksJoiLAEGwvJuvMa5j4Rp23kfmvkiDR5+it5qYEDaeBIgGyAvcicK1LDw8IUhdnEcgNpQ74HVD
oHA/xHVwxqSgUCgkIETBRvrpk3Lg2F8SerC3/LWnsfy67Sn5eUtZmbj+dhm37gZNLiDjwwrL5A13
y4wt5eTXbVVl0d6Wsu7gt3IwcQkbkSAIEpBzTUCguGMZFQKtwfVq7wYmYNrizoacIB0kY/ybSppU
NFYQJzlBWlgPY6Gw5APRoxFvYWgzE4W7RnGTB2JUIPAa/iJYHK4f0tQVv2K6OY7743zEX7D5w6JR
0UVAbN6V71eSHOyKYTFUyd+dlbz1jJKhzZVs7mWusa5ZqThSKCQgBEEQBEECkk8IiLdoyVDesUQK
5AD7OmDNwPIquxwr016RgUq61TPWhnkfm6BuAxqbQHW4l41WPfcjk4ZAbPiLCMwgPVj2Nf8TcwyW
EVhFQCY+r2OWccGCMaKFIUaBrys5FqhkcBPzPwK14R6Dmpg8cG44CQeFQgJCEARBECQgFw4ByWIh
sUHgBlD5olBIQEhACIIgCIIE5BwTEAqFQiEBIQiCIAgSEBIQCoVCAkIQBEEQJCD5j4CUK/WIVHyw
kFR8iEKhUM5OnnykkNxZuJD8s2IVvwgEQRAEQQJCEARBEARBEAQJCAkIQRAEQRAEQRAkIARBEARB
EARBkICQgBAEQRAEQRAEQQJCEARBEARBEAQJCEEQBEEQBEEQJCAkIARBEARBEARBkIAQBEEQBEEQ
BEECQgJCEARBEARBEMQFT0DKlSsnb775prRt25ZCoVAoFAqFQqGcY6lTp460bt36v0tAKleuLGlp
aaSPBEEQBEEQBHEesGLFCnnllVdIQAiCIAiCIAiCIAEhASEIgiAIgiAIEhASEIIgCIIgCIIgSEBI
QM4Af//9tyiltNxxxx0XXPmxicmW/+OPP+ZTLSInT56U4OBgeeyxx3S7HD582J128803u9tr2rRp
+a7sCQkJMmjQID0Wr7jiikxp11xzjbvs69evL/D9iHfTuHHjpGzZsrrOe/bsOeN7HTlyRPr27Ss3
3nij3HLLLRdMG2zevNnd55BTp07ly3KuXLlSLrnkkkxlvfjii2X16tV8IflAQECAu62qVq2a7bm9
e/d2n1uvXr0Lvu54lm19/ve//8mJE0b1Qd3scdS5oH/P8Xx/9NFHurxNmjRxH58/f767Hpdffvm/
WsbIyMhMz/WxY8f48JKAFDwCkp6eLqdPn/b7XMjZ3nfp0qXuB+u+++47o/vntnwoi013nuNv/Z3X
tG/f3l3+zp0751kZoehkVx6kYez4Gj/ZtZ23+uMYJCUlJcd2t3mnpqZ6TTt06FCmFyb+z64uue0P
f8doTu3g7dywsDB3uQsXLuwuE/LE/zZty5Ytuc7jTMazzd+zn/0Z2/7k62sM4j5JSUlSqFAhd513
796d45j0ddypmBQpUiRTf/sz3jDWbL5n8+za9jkX787c3vdM+srXPcqXL+9u36lTp55x/X217Zl8
L3I7ds/22fW3zS1GjhzpbrPq1atne913333nPrdhw4bZ5osJGPv+9mdc56bsuWm77M7du3evuz54
xi0BgUJmj6POub2/83uO5/xM+/JMvl+5vR+OdevWzV3e5s2b55i3r3fWmYw/PBf+vDeioqLcZcQk
w/Hjx8/Zd9DbOymv6u/v+54E5D9EQObOnSu33XZbJoUR8tRTT8n+/fvd52EWG8euvPJKeemll6RF
ixb6RYz/cX6jRo3cDwYwfvx4ufrqq7PcF7MtY8aM8frCuuqqq7KUBbN4EyZMyLEe27Ztk0ceeURu
uukmXRaU74UXXpCLLrpI3+fTTz91z15i5t3e//bbb5fixYtnyhN1mjFjRqb7//HHH3pGx3nerbfe
Ko8//niuCMimTZukZMmSWdrlwQcfzDRbOXToUHebzJkzJ9M9OnXqpNMwm7xq1Sr3iwMfVKfCaOW1
117LZIX466+/3GnXX3+9PPzww/p3165dZdiwYe60hQsXZin/e++9534Ros09Ubdu3Sz5Wxk9erRU
q1bN/f/s2bP97o9Jkybp8eZ5T3xAnM8Q6on6ep6HdkH7ZPfSfvTRR32W/ffff5f777/f/f8DDzyQ
5RyMORA4CzwPdnbNU7766qtM53oDZrrs+IU899xzXvN0zojZsQEpWrSoXHfddZmsTShTy5YtfdYT
hBpo06aNz3O+/PJLfU5ERIRUqlTJ6zl4zoOCgvR5d911l897Walfv36WDxOeFTurb62LzplJPOtw
Ze68z2WXXZblQwBlC+9azzzvvPNOWbBgQbZ9sH379kzvJ/sOgaXs+eef91kf1Hnjxo3Z3tup/GDy
Bc8zfk+ePNk981mzZs0s98Z5P//8sz4H7ylfZShdurS7n5555pks6bBG2mfQokyZMu50a/nCe9wS
7uXLl2d6Dpx5bd261efYffbZZ7Nc8/7772tl3SI+Pj6TRdkpeLfv3LnzjJ7zDRs2ZHpPO60eZ0JA
8J649957M90LY9H2SWxsrNx99936OMaIp9UMYwqz6kh/5513ss3X19iFwI2oJQ5oR1/vGsirr74q
iYmJZ0xAli1bpr/NGNdNmzbV7x1nnw4cOFCf988//2Rqk4oVK2YqB57nb7/9NtOzjnI1a9bMZ9nf
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
PXCer/vY4848neWyXqCsZFde5wfGnp9bF5223fy5zvaNv+PFnzp4a3PPpVh2WQ4UFeeMeW7r6G0c
23F2Jv3h7T7ePv451TGnNnde6+0Z9Bz/vvrHWZcztYBYqxfGi698kJab8ehZR3/70deY8ydPX+8D
KM6wNKLOvl7mvqx3nu+knOrh632UXb9l107+tqO38elPu9l+9VVu5xjM7v2dV/fx553k6/3tTx72
neCPcpKb59xZFmff5jQefPWVP+9kLMWCcgflMbc6gre+8Wec5zQefb1bc3qXWc9dvr6vvr4tuXk+
cjrX3+9XTmX1NjZsnX3l4Wvsenvv4i+WrnkDJoLsZCEs6Nm9W331lc0zr54P3M/zOfB8PnyND1+6
qLd+yy+uzElAGAeEyGdwKnjOmULPJV/EuQcIiLMfnBuuCwrsMiOnpQteWnzBab3ztpSLIPID7NIh
T4sn8d/ClClTst2HAQuyL5JCkICQgBAEQRAEQRAECQgJCEEQBEEQBEEQJCC5ugb+zrERES4XKRQK
hUKhUCgUyrkVeEWEY53/LAEhCIIgCIIgCOLCBAkIQRAEQRAEQRAkIARBEARBEARBkICQgBAEQRAE
QRAEQQJCEARBEARBEAQJCAkIQRAEQRAEQRAkIARBEARBEARBkIAQBEEQBEEQBEECQgJCEARBEARB
EAQJCEEQBEEQBEEQJCAkIARBEARBEARB5EMC8scff0j58uWlSpUqFAqFQqFQKBQKpYALdH9wgH+N
gBAEQRAEQRAEQZCAEARBEARBEARBAkIQBEEQBEEQBAkICQhBEARBEARBECQgBEEQBEEQBEGQgBAE
QRAEQRAEQZCAEARBEARBEASR/wlIMtuBIAiCIAiCIIjzgOT/A/v54u0YLTx5AAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/warning.png

iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAACslBMVEX///+/zDGkrzU5ai4zYio1
ZSs4aC08bTA+bzFAcjNCdDRDdzYxYCgvXSfL01ouWyYeSRksWSQgShooVCEwXidFeDcYQRMfShoh
TBshTR0lUR8qVyMtWiVGezhMfDpbhUUXQRMYQhMaRBUcRhciTx4hUB8hUSAjUiEmUR8kVCMoVSEp
ViIoWSYsXikwXygyYCk2ZSw3Zy07bDA9bjFIfDlYeEpUfEBaekxliVBskFaMpnjU2nwWQBIZQxQZ
QxUdQhcbRRYfRBkgRRohRhseSBkiRxsiSBwkSh4lSx8mTB8hTx4jUB8kUB4iUSAjUSAkUiElUiEr
TyMkUyInUyEqUSUlVCMlVSMnVSIsUiYmViQpVSIoViInVyQrWCQwWCktWyU2ViwtXCcsXSgvXCY0
WisuXigvYSsyYSowYis1YCo1YS0zZSw8YDI0Zi08YjI3aC48ZTI3aS5FYDlBYzY6azA6bDBEaDg7
bjFIZT5EaTU8bjFJZj87cDM8cDM8cTQ9cTREczVFczVBdjZDdjZCdzZCejlFejhGezpJejhKeTxG
fDpKezlJfTlIfjpJfjpKfjpJfzpKfj1ac01PfzxQfzxSfUJYekZQgj5TgT9WgEZYgkdXhkNZhElh
flRkgFdnflxciEppf15hiFBfik1nhVpkjE5kjFJrh11ojlZqjlRziWVskVZukVhxj117kG12l192
l2B3lWh4lWd4l2R+knJ6mmOElniEmnaGmXmCnm6FonGHonSHo3OMo3qPoIKOooGOpX6QpoCSqYCV
q4GVq4KdqZKcq5CstUehrZaitZKktZWmuJeuuaWvvaK2v6y5wrC8x7DAx7e/ybPBybfDy7zP123H
0LzJz8HM08TN08bY3YnP1sbb4JTW3M7Y3NPc4dXd4dbk6ODt7+ry8/D3+Pb8/PvcsaW3AAABuklE
QVR42mNggIJLBzfNmrnxwIWnDCjg9OLp63dZWe3ZOnvBSSTh+yt6Vx8+xHScadXeIxsmLLsLE789
sWfp7s2Md64yMU1au9Oyr+saRPxhu0n/mpUWjLcYGZmKpllYTjFpfQCWWNQmO1le3oyRDyiRUGkm
P0NWdg5I/GyTqGiHnFwjWCIws0GuW1S05RRQYmozNwgYgyU8k43BvE4Ghht1XGBgBJbwiDcC8+ov
M+yv4QQDZrCEuyAzmFe7nWF5FQcYGIIl3KQNwbzyJQzmJexgYACWcI0yAPNKzRlM85nBgIURCJic
glnAvEJThnnZbGCgrwGUcBTS0Afzcucy7EhjBQMRKXEBAQFxKREwL2MdwxXddBYQ0NOyZmSyl9DS
A/N0zzEwFCTxgICINcgOZ2kRECc1C+jzYzqJvEAgA7Kc0UVKBsTR2QcKrLJIGX5+fm0hoLitnZA2
kB2TBw7de5qhsYKCwgKKYmJiigLCgoJhmjchEXI+SD1cWlhCScFGQUlCONpf/QwsCq8Xq/kG+Agp
OyiLq/ip5VxEivVtKareKpKSkl6qcVueoCSTxycWVkeEVMw/+ggqAABQ8XNwHY+9TQAAAABJRU5E
rkJggg==

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/aop-proxy-plain-pojo-call.png

iVBORw0KGgoAAAANSUhEUgAAAdQAAAC+CAIAAAF0WlklAAAABGdBTUEAALGPC/xhBQAAAAFzUkdC
AK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAEXpJREFU
eNrtnU+Os0Yah+sAo6iOgDS7mQ1HqCNwBI7gG5hFr806G/cN2t8qaimRuUBkbmAiRfoWWRipl4lk
RuN3UlPin7HBBszzyGrR2ED59Y/H5TIGdZ4bat4t/vFX1ec2rRYLdkKm+7R4v9+XJiZdY2nl8Xgc
OMdKle/9/Pyc9J5XbXEURbSYFtPi8Vpc1FGaP6EWF52hxYPm+AltxRW0eFotLu6ipsU///Z7z9vj
mmsb3bXF0ot3/6192LoZ+4olSWJboJQqiiIMQ5koiiK7INOr1crzvKIodrtdmqa3tXjAGg+Ziunz
35dlXs2dWYvnF4mZjVRcaa47HNE03bO5YRjKhDFmyOrWNnHA6t7c3Jfa1aIoGn08BZHR3CU1d6Jj
ET37gTR3uOw+ZxQCM9DckZs7iWGHCY05VIcaqsMOXQYc8jyXIQU7sFAUhdY6DMNS4/I8l9GJOI61
1ncOODQNjnQfbRgsDOxqCx4ZmSPUd6T69hzVuXvA4pmHr8y4vvZwmi5jVk+r72az+f8z//vtdr1e
n8/n7XZbHQe79eid8fM7qcOvpuvf6tdxJd7e3qbwleLL1nciX9lSX+pLfakv9R1gAIj6Nta3GBrq
S32f64cFFpf3N+pLfanvwPUNgkAOT6W+j8pvEAQzym8xBlfq2/9I5dIh2B2/cbzjq8eSuEo7VhzH
crC2+9c9mlvwPG+1Wiml5HvUoihkN21ZUCmV57lMy+JRFOkLMnP4+pa+XC7V0c55XH2fn19jzD35
VWOzaP9Cx52G+j72HZX64gfqC9R3SvXteBTI447xob43H5JDfbvWt3S8U/XwJzun/d+J1He1WlVn
nk4nrfX49b367x0xH7a+279pGqCwyNFpduhKjkvDv1coHaMnK6+eykoeZh88Zn55f3ts/+x4PNrj
OJt4e3ujc/bA+k7hp8kvW185OJXvhx6bX4pLfakv9aW+1Jf6Ul/q+4L1nelh6zOo7wv8OOCp9b31
2OkXOLj6efVd5o8DnlTfxx2dSH2pL36gvtR3mP7ZK1WWz2/Ul/pSX+pLfakv9X1effnx5mPrKz+8
m1d9n/mbzb717QI/jm2rb5ffVz70NuAhfsVIDFDfPj8vflB9lVKHw8EtrlIqCAL5fbC9QJTv+6Vy
1P7IOI5j3/ff399lcZmfpqlSyhhT/XWyUkruTdN04Pq21/rWiiul1nchz9x9Lr7v53kehqH88lpO
kl2qr3sibTutlAovSKF3u50903aSJLLaoiiSJHEXl5fEHqQ9QH2rFRwxv8/3QxRFI/v3jrUNfoj1
KG9ujfWVMxiMyD9++GG5/V/ovsdQ38d2uqkv9aW+AHQfAIgvEF+AV4vvuOcsGPf2SmdMIL69rvtW
Xc+DdowBV0t8Fx3fm86W1CX3LRfsa9lPXi++8g2hUkpOgSXnh/Y8z/2GRM4lJNOn08ld/HA4yHw5
05C7+Ha7tfPttmTC933se8PZ0FrieDXHg4R4yvbVWu/3e8mZ/A3D0J4cS1ru+/7xgiTvdEEeEIbh
fr+Xx7uLy4Kbzebj44P49k0PZwurxVyovSsIAmNMSbeMPNyD7M1Xjxe+ytfXF30+mGV8v76+OJ8a
zDK+NrskGObaeSC7QHyB+BJfIL7EF4gvEF/iC8SX+ALxJb5AfB/Aa5wKk/guLr4vecpc4juJ+BZT
hagR3yvxLaYNaSO+jfEt5gCBI77EF+g8kF3iO82RB4JLfBk4A+JLfIH4El8gvkB8iS8QX+IL84jv
er2Wk2f5vr9er79//058YU72tRe2sSfMIr4wm/hKgntml/g2USyAvvH1fV8tm3/+698EdzohvvkM
k+NesXDY66OOe0nKjgV3L8TaFF95RwqC4Oprr7UuiiLPc2NMnwzZS7zGcVx77csW5OKxLu/v71eX
sg2eRHxFZtVp+29pW9VNlx7Wvrbq/D7NHovaj7zuSxvHsRsIGwuZnySJjVptfEuLS0Zr0+leoVge
oJSyp5+r7kg2slpru2m7kiRJ7E5oF5dL+GYXJhffLpedbr+Wb8eHDWvr59u36dy9LZ0HSUN1uqN9
S4vc+rCm+WmaypWgpQFpmtq77DWjq413rxktd00lvnO8TfYk1Xx0I74zji8DZwAzGygkvjDjEW7i
CzP+aob4AvEF4KMbAPEF4gtAfAGILwDxBeILMMv4/virWuyNrBBf4gsvGl+liC9MNb42nU0xJb4w
J/sKpfjav9V7q/l2Z7Y8vnbZhcR3u91eD4FS6/U6CIKrj9Ran89nY8zpdKLzUGNl9+8dSq6N+CB2
n2Y6D4eD3dVtFu3vk935xpjaX861LK61VkrZHSAIAptayfFy41tN1aPj+6r2dZNnU+V5nkzs93tJ
+fF4lDPNVX95bzPtLm5lbE9L5/5QaiI/mhqt73tTfEszq7msvavl8S8W3/XfrFar/X5/Op1sECW+
cooZ+1fOOmcf4Pu+PMxd/OPjY7PZuEnFvgycPdC+wul0cv3qnpXLRrk03bJ46WH0fec6rDbN7B6P
R2NM06cuY4y1LCMP2BfmHN+e73GD9Pd/+eUXXjaYZXy/vr44OyrMNb5vb29RFH1+fvLKwcziK+rl
9NQwy/iKegUEDHOKr6teBAyz7Pt++/YtiqKJjJkD8SW+QHyB+BJfIL7EF4gv8QXiC8SX+ALxJb5A
fIkvEF8gvsQXiC/xBeILxJf4AvFdQnybrnQOxHfS8S3qIE/Ed+rxLa5BqojvjONLiInv/fEthqbn
ygkZ8e0U32KqkDPiO+P4kmDieyW+xeQhbcSX+ALxJb7El/gSX+JLfIH4El/iy8AZ2SW+48R3sgkm
Z8T33P2YB7JLfGcc30EguMR3xvEF4kt8gfgSXyC+QHyJLxBf4gvEF4gv8QXiS3yB+BJfIL5AfIkv
LDy+P/3003q9lviuLxBfmJN9lcPHxwfxhTnFNwgCG186DzDXvm8f9RLfq9x0LPJ9RzBP6jD/58VX
BMxHt9GDO1NGju/5fO6pXuK7zOC2JPi2+KrFQ3wnleDbXo+ff/t94TeyO6kEE9/pxjcMwyAIusRX
ax1daH/h8zw3xsjj+wQoSRI77XneTcvGcVxqp7u2JtxFRouvUqo08Zxl5xtf6bG0hLgoCtuxKYoi
TVM7be9K09Sm3OY4CIJqStzFtda+77uLW9wtGmOatu7ieZ5SarVa2Wm7I7U3Xv51p8ePb2lmNZru
zC5Rrl2JO98+//5PYSxqQ1ySk3WhvlCa6QarKWRu0MWLkrMmX8q9Mse+CZTsHsexTLy/vxdFEYZh
URRZltkdw+4wdnG7d8n6p25fG7I+u0GXh/W8rZ+IyE/Y7/dN9k2SJAxDG6A8z5MkWV1IkiTPcxum
q/Z1F0/TNI7jPM9936/GV8K32+1838/zPI5jcWee51mW2bwKWZZJZLXWaZpKM2SOG1938TiOd7td
URSy9SiK8jzf7XZZlk3IvqVATz++z+88NAW36dNbmqZ5ntuYum/9Xfq+7uItpGmaZVnt/Ka+rDu/
9Bj7VuAuLjuSu0ie52OOPPSJb5O5u6xhwBw/M77fv39/+cGHIAiMMV12mBcfOHvORzq+vJjxt24L
z+6U4zuLELe0sP2uYY55YNyX76hnfMQZXxqTmIUeMAkweB+J+MKMj7AjvjDX7BJfIL4AY2SX+ALx
BRgju8QXiC8AANwI8gUAQL4AAMgXAACQLwAA8gUAAOQLAIB8/4d7ajlYDr7vs18BjClfpdSPv3Jb
3I2TuAAgX27IFwD5jmEBS/dFShOl6alpDvkCIN8Jybd2013aUyvfKfcxke/C2W63q9VqkFV9fHzI
BRqMMZvNpv8Kj8ejMeZ4PMq/QRD0vxY08p20fG+SbJNzm3q+1X50Sx+5pSVXG3Drv9PpqiPfPrba
7/fWVpbT6bTf7w+HQ/9VNbFer40xtXe1bH1/oXap/X6vlFqv1y1zkO9C5Vuiu3y7d5abWnLT/C7r
rwX5zgWxktZaRLbf77XW0p9dr9d2/ul0CsNQa306nc7n8+FwEPdtNhu35sYY3/dFu8fj0ff9Jqu6
DQjD0Pd9WaH1bNPWpcG2dywNKFlYriNc2tBqtVJK3fQugnxfatihi0BnJ1+GHea9Hyq13W7dwQSt
tcwvfVT3fb/UeRQVutNiZ9tv7XI11tqeb9PWjTGlsY7ValVaHPnyhVt9N7B01yDyLa35qhObmtfe
e21Z/xS6vcj37p0lDEPP85RSnudZEZ9OJxGW4HleVaOufO1Iq13EHXW1vVR3SPdwOJQ+MwVBcHXr
m81Gay3ztdbVMWKGHRYt33F73Is90g753sTpdFqv1yLfm77m2mw26wue54VhOM0hbL5wQ77ckC/A
YuRrP5XAopDBSgAYTb4jftixIpjCx7HPz8+3t7evry/SBgDI93nmjS7gXwBAvs82L/4FAOQ7jnnx
LwAg33HMi38BAPk+iW/fvlntur87AgDki3yRLwAgX+QLAMgX+SJfAEC+yBcAkC/yRb4AgHyRLwAg
X+SLfAEA+SJfAEC+yBcAAPkiXwBAvsgXAJAv8kW+AIB8kS8AIF/ki3wBAPkiXwBAvsgX+V6haIX6
APJFvsj3ScJFxIB8kS/ynYp5cTEgX+Q7vnyLpzBl8+JiQL7I90nyLSbM+Xz+66+/JtUeAOSLfPvK
twAUDMgX+T5ZvjgUBQPyRb7Pli/qxL+AfJEv8kW+AMgX+QLyBeSLfJEv8gVAvq8jX/yLfAH5It9x
5It/MS8gX+Q7jnzxL9oF5It8x5EvFka7gHyR75jyfTQ4FwD5It/XBMkCIF/kCwDIF/kCAPJFvsgX
AJAv8gUA5It8kS8AIF/kCwDIF/kiXwBAvsgXAJAv8kW+AIB8kS8AIF/kCwDIF/kiXwBAvjdzOBxU
M77vI18AQL5P9e9Y5kW+ALCUYYeqf0c0L/IFgKXIt+Tfcc2LfOEOuCjJQk7tr14yvuLf0c2LfAHn
YuFlyVeOeZhCM/7444/j3/z5558oBjAvCn64fJVSP//2O7cl35RSiBXt4l/kyw35DsZ2uz0cDsPK
N45jcyEIgt1u13/P3+12QRDIdJZlxpgsy0Y0UZqmpTlBEBhj3t/fH7fRLpt4f39frVb9t5XnebXC
S5Rv9Zgz966Oaxhk67eu9mXet15YvmEY2tc3CIL7ROzuosaYKIqanJUkSZ7n1V09SZKq0YQoipRS
SZK0zOlozNqt27s6ridJEqVUdb488SzLarfSsvXuDZZNtJfrjspXn3sURcaYjv3fF5dv08yHtq1l
u89x63TcrZbHTSJ292Tf98MwlF1aek95nmutwzCUnT9JEq21CDqKIq217Px5nodhqLV2HZGmqVKq
2pvzfV9r3bET17R1Wbnv+9LO4EL72rIsi+NY1C/Y1hpj7HOJ41ial2VZ09bvaLAxRikVx7Gs2b/g
6jVJEmmebW3Tqna7nVLK9qNXq5V9P0vTNAxD3/ftc0S+V+RbeljtXdUObNOza3nWTWtr7xp3bGpp
/ch3RIwx+/3+1s5vtecbRZF1hB1GEEEopUrjEr7vu4v3l2/L1qUBVi5N3b2ber6lx8i7i6lwX4ON
MW4p8jyvfgJwm9ey9dKquvR8GXZQLUa7+rDuQwcd5du+VEnTtc3rsiGGHZ4z7HCrcEvylT6Xi/TR
xAie59n5q9VK+mJ5nkufS/A8r/YjcM9hh6ata61lTpqmtvFXO7+2B2qPwU/TNAgC+5TlDUMpJW8P
u93O3XqXTdQ2WFrrzvc8rzr4UHpvaNm6W3l56e3asixzlwqCIM/zhcq3pwfvkO99ww539GGR7+jy
vVu4TzvmYWpfuE2QOI7lMHzP88Iw5FCz58m3+s1Yf/l2+cKt5d5aF3dZVe185MsxZzDN31lwqNlE
DxLgaAcsDK/9C2Pkyw35AowA8uWGfAFeS74AANA0rIR8AQCe51zkCwAwjnaRLwDACNpFvgAA45gX
+QIAjGBe5AsAMIJ5kS8AAPIFAFiMfP8DfKagSH00l1QAAAAASUVORK5CYII=

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/aop-proxy-call.png

iVBORw0KGgoAAAANSUhEUgAAAfwAAADACAIAAAEZ+HawAAAABGdBTUEAALGPC/xhBQAAAAFzUkdC
AK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAGKZJREFU
eNrtnb2r7cZ6h6e4cLkhMYOrwMUgcBenUHuboMqkVOlSRdK4SMT5B85U4eLgo9oEvFKEwwHDEdzO
GLb+gGu2SJVuy2BzyqPOpXfwfu054xlJS+tDS1/Pj2GztpZGGo1+82g0a/RK/XSZHnv0062kflq5
3h3AF9+q6RIHsIcD8L9Q/lfGmEW3gZEH8HiKFncAnaU0xpRlmef5Wg9gTWdg0W3gh8+Vm5RS3hJj
jLdkfFrZAYR5N3UGHs/VUg4gSRJbpqqqLjyG2x2ApYJboDEHUNf14+Oj1ppGzAFwAMcO4JvvvveS
Uh0L+1J4zNfFaCeURh2AexjqSX0HMCwhie0CygellFcsrbXXWXSXJEkieauqOn4AJ6WRZ+BaJ+FI
G7huYlRimgNgUGju8QilZhuPOLP0Vqss/ULGgtSOmLOaAYjh0st127vgx3Es9xk3O4A91f1qRn5W
1tW5VllFay39RP3kOUv/8PBgi24HfMJ7lCRJBkZQFlF6K1v6zhK7o1ozlx7mjC59yA3qfsrSnzSS
05luObLgj+1cXvqjYztu6ZMksb/tRVF0OBw6fwK0fw+HgzBKKSV9wQ3VPUM6qxrPuVyLultYRO1P
Oryw0nksK6t9b5jKjl3Z5e5olruc2p/Qnlep5S3X/pEMSv2EFlv75knU7GzeD+cfygiCO47QNI3X
p/cUjp1srwt0i9r3KnfkzET39FD7J9f+dedbbLLvrzrr90IZY9TNtZHaP3WSaZgumWu1wNEMav/d
rt2/1P7Svf84hyas/WVyv+8y4HZesyxrnhTWV5qmfb+qVVUl0xXjOLbD4eE8R6+LjPdnsz/kgfvU
/tVrvzbU/pS1/9EfZ75mfvgPH1239h+XpCO1P/L3afdZis6nKLwVOh+/OPW5haO1Hz7dVRTFQF1o
rcMZQ9JzG67E4RVsFyjsYslzHpfW/nTpktoPRx3csdW+GWZt2w7Xvjeh1sviZXcXSj/VHeVtmuZM
7i827WKME1H71P5l2u2Y/lK8v/OqhzzLq30msm2h9iedOEXtD1W3NznQewp2+F9q/2pzN482hWs1
EcgD96n9Dfc4kyShp7jc2mcK7cy1zwlYhPeZxzlb7Z86RTmcZT4wiZzaH1v7hyeVZWnrtK9a5eck
+ztfZ6Beav+02s+yzH4uisL9d7hx2BNG7V+ZPHB/lVdd+jz09yer/TU+uBLH8UZqf3jixp8+XOI0
wr08OTRX7Q/Pr6L2J6x9W/V954DavxF5Os8Etb9Q7i/zqZVd1P7sc8T3Vfv39/dh7Q+89uloPZ7x
xqU5n1lcwgOL9hx4jyTKLPC6rmUgzxvsy7JMKRXO5XdfseCeFfvkoo3op7WWbe7U+0qpu7u7TvKE
I9hHfX3GxP9dk2cJ6OeqS4+T2qf2qX1q/xq1Lxp+Wpran7b28f5s5FlmmIBN1f7sum7tLzNMQG/t
X+t586sHwl/F3dalcRpODdLQ92F44RS1f3d39/bt27D2O0dvhscbxrz3t29uUhhW4Mq1P/58nNEm
rhgZzA6oJUkig4BhtUp0LxtMo3MMLooi2UJ4hsKgDrIpG21MXovaNI2sdgvyTPEKjjHef/369Rnk
Ebf2Dat1DqX1rSyfXft72e0Q7NZqfwtX3dWlvfT3qf05ZxIiap/aR9T+GVrUlB6E9RHC+ggtxPrr
feklwVbQKq3vhQ27QcC3G8eRw/pY/2QXjvw2DMo3HC4O62P95VL/pMCRnasdbQOzNwB8SV//omaz
EIRj/Z2O8CRJkuc5FY12Z32ZO3bhRl49ibOF9mX9V69eSVxV3I92ZH3r+wH3Py5e+Azrn6kwmvZJ
zpOwFUeVpunAgxVuaFYJXTwQoJUGgPUnsX7nswvyyIn7N8uytm3ruq6qSh4zSZJEjBtaPMuyqqrk
KQc3u2QsisI+EmFfZ5/n+fBDQbgf61/T+gOPrCmlBPB5niulbLwi+9hV0zQy6CnYLp4kz/XIcnm2
ys1eFIVSShqDF4l+ICQ97sf6N6L+WoThsP5N+/r4Hm3H+mc0A0422pr1EZrK+hc+Mn40at7RJNZf
4xPzO3nCHuvv2vpnhzDD+lh/I9TvbAADSzbwthKsj/WPvw7JbRhhI8H6WH8Xff3OhnHJ6fTGsuy/
jHFh/Q3e5j7uQ1gf6+/R91O4H+sv2voPDw/eW9o6fZ+mqawmU5Lk1WoynUkiRNvpekVR2AmnfXOQ
bHY7tcnO2PPW+fl1I08T+OI4tp/dvbsllHVkZpTWWv61ga0luxyIzJuSz/KtjVu9MutfLrG+2r3c
d+W57pdpeTK3tCxLaQDiG3Gt9e5R63vZ7UbCYN+yzTRN67ouiqJt2ziOD4eDbD+cKK6UKssySZK2
bauqiuNYCpzneVVVbdtKLHZZzcbPl4VTgB/qL536od3X2OcxxiRJctITDtJO3OnldHjo6++r688I
D9ZHWB/rI6yP9RHWx/poGdb/+tm7Ubnf/w7rY/09UV/cf6HvsT5aZYfn62dXMATWZ4jz6qOiJ1j/
klegbyNd+BjKpNbH6Kc2g9msf+rWvBexn519k9bH2We4f3HW9yzet/LwagPrX1jmrz6dNslEHVcv
XryQoQKt9du3bzt9b4cT7Ewy+SzR45RSMkNGprJ5s2u8iWju5yiKlFJ5no+f+mazF0Uh2e1sHG8d
2YJM5pESent35QYFs7VhA4S5QcG8GXWymt3j4qw/xr4nUT9c51rWf/bxtEkp9fy3kqhyotevX3d3
W5/OvTGmaRqZ5ChLxCsyOUyCLpZl6Vlfpmd2ziQT19rIc0et72aX2Wx9a0pQxzRNi6Ko61r2lWWZ
uFbmz3ntU3JJaWUCnD0QmefjZZfC200dDoeHh4fnz59vqq8vtthqX//HH3+kzzM8xc2GQ52qr//e
H/Y+Z/hv33uPEZ49jvCQGNff3bg+QlgfIayPENZHCOsvXcTRR/ulPr5H++3w4HtEXx9hfYSwPkJY
/+dZgV98S7pdYi4D1sf6COv3WATrow1a3+63rwBYH+2F+iLP+vZv+G1YcnfhwPqdebE+1l9KP8ez
/nmXgs7mMe9VBetj/SOOnNr6UB/rL4juI63vLQw93fnVwPpYH+uTsD7WX7yBsD6C+lgfnW79S/TJ
J58kSUIto91ZX0LPXb6dzrfGIrR96xtjOFVod9Z/9eqVMebVq1ecLbQv65tfxdlCO7K+IF8E+NGO
rG9+q3CF3b7sG22/w3N/f2+MeXh4WJ3paQBY/8rWP9V29r0gRyO1hy81CCUvMpA3OOB+rD+/9Zsn
yee2bcOX0oj6XkMghu7M7mapqsoY437A+lj/Rtbve4VT9aQ8z40x9rU24lHLcnnFjfz12kMcx2Jx
N7vNa9+KY9+uM/A+KdyP9W9qffelaK7RLbbF0AL1kP2W+m52u9B2mbA+1l+c9aMnua8NtP62H+QV
gqHL3Xf6edmlLdnrxiUdHqyP9a9sfTFr3x2qMUaaxLV09m0u1sf616c+45uIwU2sj7A+vkcbs/66
GgAmw/pXtv6pDYCTjTZlfYSwPkJXtX4cx2pWxXEsY/NqB8KRC7K+UuqHz89MH7yvLsku6e7PP1v/
r59FF25nFQlHYn2sj7D+GqxvhfWx/u6sD/WxPtZ/92/n8oE6wZFYf2sdnrAxdDYDHIn1t9bhGVkP
OBLrb8f6A1eDcDmOxPoMbp6scKqSXcIUJqy/Tes/blpYH+vvzvSTNgCsj/WxPtZfm/UfdyasvyPr
p2k60voyv7Usy2H3SICt84IIedtxw2Fgfax/ZevLwGhfA3DDENk4QofDQSklobJsTCGJveU6vizL
zvAtbnaZMe5m79yjfJAsbnZvfdmURHSUaEiSPc9zCaMky4uikEOWz/LvFO6/hfWZr38VhQ2gM5Zo
lmXyQdwTBtvqDDNq5Wa32wyDbblLZJuyRE6WMcaLU2TXF4sbY2xzOhwO8sHGeJQlbdvKNcqGUsX6
O1X4LkrX90VRuD2ZoijKsozjWKLw2hiMR6nvZi+Koq7rpmlse3Ct3LZtWZZN00iWLMuaphHe13Xt
db2MMUmSlGUpK2RZZj1tl8iOqqpSSslXSZK4FxA6PLvr8Ay8gPVoNGk3APXIvn5fMOpwtbAjJMvD
MNfDQRr79ng4HNxdYP0dWf/oW4fXMjiTPOmMLLbjxOAmg5s7HeXE+lh/dw2AiQxYH2F9rI+wPtZH
WB/rI6yP9RHWx/oI62N9hPWxPtafyPpfP/vN1Kvf/w7rY/3dUN9VbbA+1t+N9S34L0E+1ker7Otf
jnysj1Zp/a+fXYp8rI9Waf0fPr8U+Vj/VC1/GuZCpnyeYH3EpOUtzXk+wfrffPf9zhOPqmypAWB9
rI/1J7a+Usr7cJu8m7c+tj7P/TNY31sY2tpdOKYZdG7EXW4762u0vlLq+fPnw9a3sUaKopBAN+PV
tm2apnmeu4EbJo3cZp9Pr+v61E11hkU5mkv2skTqW4Ne0oTGrHZh+upTNXW6C2TbbV8DyLJMVhBb
SMAiieIkX8VxLCaz8dL64qi5gdBsFs9AsloYbiSMo6a1DndnN2sDvEkJveydhazruqoq9wBlubi/
s/Bpmkr8tjCG15zU9xrD8q2/hFGmly9fhtTP89wLaJPnuTFG/oqxxIVhRBA3Bo4bCM1a0AaBsj6u
qqqTtW52u0IYY8ctg1uqNE0lcpsXG8sWIIoiG7jKxb/sy81uiypfLYX6Z1i/74oxZgtXbAPPPlZT
p+eB3Ch0nSfIRkGTCGdN05RleTgcJJ6ZhO9rmkYC2oQYlrBtQnE3EJrWum3bqqpsuzpKfS+OWtM0
dV2HMd7E6Bbb0mFr21aaaBjBKs9zCXeltS6KQkzvRmWzMQ9tdq21HLu9tjw+PnqXzY2M8Nzm9neu
vn6f6a3quu4MhCY9hJM60+763mavG7mtb3nnLUfbtm578LK7Vxib3Tv2u7u7DQ5u3mzYh8HNBQZ1
8+LaMq6/L+szyjntr7loq3N4ttpsZp6+RmLm5k5nbpKwPtYnYf1VWR8hrI8Q1kcI6yOE9RHC+ghh
fYSwPppBvEkOIQT0oT+sRwjoI64BUB4hoI8QQgjoI4QQ2iX04zjmeXW0YR2NgoTQvqCvlPriWxJp
s0kp7okR0Af6JKCPENDfFQisxmfxPnifl3aA4B7oI6AP9LtpOKYSOqG/rsME+ggB/X1B/yS497G+
r6cf3jcM3BMMlORoAU79dxW3JkAfIaA/G/Q9jYf++JuDvpKctHzM9jsF9BEC+gzvjAX36qDP8A6w
QECfH3J7u73eV1eBvrfloyzuK95wb31g+7vt5gN9BPSB/vx3GNQ50EcI6JNIQB+h6aH/N3/Hg/po
y9JaAwsE9OdXFEXSJpMk4VwihBDQv53evHljjHnz5g2uQggB/Y1DX4gvgvsIIaC/Zei7xIf7CCGg
v2Xoh8SH+wghoL9N6PcRf7Hcv8prbK/1OlzeqYsQ0F9fT190f39vWf/w8HAD+CKuAQgB/aVDHy5D
f4SA/l6gPynmqqo6HA5X2Y5SKs9zY0yWZWmaXr7NJEm01m3bdv4L9xEC+luD/hhI1XUtx5JlmX0Q
NM9zu0Ke53Z5FEV1XctyrbX77Khdv23bJEns8iRJhjlrC+A+hnp074fDwRZAax1eeNI0VUp5u47j
2N043EcI6O8O+iKllMvNw+EgHA95GkVRURRhJ90leNM09tumaZRSFtZ9MsYkSeIt7Nt7mqZZlrnL
w5sDOTvhXpRSVVUBfYSA/tagfxKnpL9sjKmqyhgjn6WjrbUWSrZtm2WZ1tplugd96U3HcSzrNE0j
/7r3AcYYrwNeVVWWZXEcV0+y2+/be1mWSil77SmKQilVluVCevpwHyGgvwLoD/R/27atqqqvty4I
9hY2TePi20P8SWUb2LtcJBY1pg/xEQL6ix7eaZom+VUn/XyapqnkCnvuzOFBCAH9hUIfQXyEgP5G
oA/6IT5CQH930If7sB4hoL8v6G+S/jMeDg0YIaC/DugjhBDQB/oIIQT0gT5CCC0K+kqpHz6fIX3w
/i/RYP704TwFsOnuz7GF/l8/i+YtDOlaSSkFIxDQB/pAH+gjBPSBPtAH+ggBfaBPOpWzR5cAfYSA
PtDfLPTtQvtX5H4bLhy4foy/rgB9BPSBPtCfrac/Etad6B+4Hgy4F+gjoA/0gf4MPf1LoH90CdBH
QB/oA/11QH+4Cz8M976hHqCPgD7QB/q7u8AAfQT0gT7Q3xfxbw994qSuK0og0Af6QJ95+rCeyN5A
H+iTgD7Eh/5AH+iTdg594Aj3gT7QJ+0d+m3b5nkub7rPsqyu68sBlKZpWZbyuSzLNE1npGHbtk3T
uEuappHjvcrBwn2gD/RJU0H/4eFB7Jem6f39/VW6+Uqpqqo6v6qeFC5vmqaqKo+klrBa6yRJ3IVJ
kmit27Y9CWF9e5evxvPaGOOVxz3wuq479zKw9zMKLJXmlblt25MOBOjPDP2P/qi++nTO9F/P3kH/
v/89mrcwpGslpdRdv16+fKkCjbwA9LFbKVUUhQBLuGwXympFUdgLQ5IkcRwL7pumiePY42mapkop
j+9t20o5R6Kzb+/yOcuy9klRFNnV+lTXdZZlcRxXv8qFvj2W9ElyX9K39z6UZ1nmlirLMq21bFb2
LjsSvstejDFaa9mszSLZZY/Fk+SD3KmkaWovnHLsaZqG112gPyH0Z1ccv4O+fbUL2rlevHhxamc/
hFqSJHmeu0tk/Edw7AJdaO5mvxz6fXu31wN3TWPMhT19b50kSaIoSn4rrzzh9qMocpe4V6POvSul
7PCXSJqzfJZrgFxI3HXkMlDXtQzE0dOnp083eac9/SRJ7u7uzhjhEUC7skMNRVEId5RSWmuLMBkN
d3ftdTavMrzTufe6ru0St/BHO/tN07i9ojRNpZD2kAWm9rIk3XC7vtZ6+NJijInj2JYnyzLbzQ/v
ydzfUezyKIrk8mP3a3v69njtsSil+soD9BnTJ212TH886GeZw7OoH3InVVmWcnNgjJnuZ+G6rqWl
a63jOO68zjF7B+iTmL3D3E3mawJ9oE8C+tAf1gN9oE/idYnbkIvCKaLfQHmgD/RJQB8hoA/0SUAf
IaAP9ElAHwF9oA/0SUAfAX2gD/SBPkJAH+gDfaCPENAH+hAT6CME9K+R/udf1bOPf0nv/eEX6H/w
/ruFf/k3oE8C+ghtqKf/z//YG9fwX/6Jnj4J6CO0ueGdTu7PRXygD/QRAvq35v6MxAf6QB8hoH9T
7s9LfKAP9BEC+rfj/uzEB/pAHyGgv6/0v5/9/V/+I5H0f/+pwSXQv1BEKkYTBfucBPpKqW+++560
57SNfsDtoQ/C0NT0B/okoM9LVNCOuL9N6IezOd2vRm7hKns/dbObuV4CfXCPlon+zUK/b+GkZRvY
722Yvpxrxn6gf39///z587dv314O/aZp2rZ1W2+WZcmTpsZEXdd2X3mee8W4/IXsMsdhRg6GdStv
UZ+0bkfuIkmSq7zG3W4E6PdC31ut86uww953dANH3be14VuBkUX1tg/0bwz9u7s7e2OntT7jAiAN
tW1bpVTY+LMsS9O0bduqqpqm8b6V5Z3IaJqmM0uoqqqUUp1fDWy/ruuqqjovD23baq1d2IVLxmhg
730VMgDW8KpjD7xzLwN7H19gu4uB6jqv5sNjV0pVVXWU+7se3hmz2vghmpHQH87lXR46izdmR0uA
/s41/gIggM6yLI7j6ldZOiil0jSVFp6mqXCzbdv4SbK8qiqtdZZlljJJknhZBrqHRVEIL0S2b661
ln/bts2yTGvdPkn2JSWUXXs8TdNUKRX2rJVSRVGMQd7A3rMss9up67rzShnCPY7jLMvkAO36Uldy
LG3bRlEkm83zvHPvZxRYdmHPlFS13ADJt6I4jm0dDuw9jmN7ZpumsddRu6OiKGSDDw8P9PRP4+8Z
0D9veOeMPjvQX4viOH79+vXIzr7W+nA4hCiJ49j+q7UWXiRJEkVR8lsJNfqynNrTt2yyEjB527c0
vy70+/YuB+hextzu7dk9fW8dOXde9YZnZ0yBZRduVeR5Hl6G3eL17T3cVF9Pn+GdIQS7nejLoT/m
h9yBbzuvAWM21bmc4Z3bD++cBHoP+nEcuxuRHrT8m2WZ9BDlBqKua+npu/uVDuBAlj5S2Cx2ZTu8
kOe5XR5FkWVrVVVRFNmvwt8ALh/e6du7Pag0Td3CH+3sl2VpV9Za53kudwn2kOVCJZclez/hFmD4
2tlZYFtar7qGr0kDe6/r2t2Ud49ljHGzfPnll0zZXMekF2bvrA7654F+83N4FvVD7gJV17VUiyB+
/O8TTNkkAX0ezkKIh7NIQJ8wDAjWE3uHRCLgGiLgGtAnkYA+AvpAnwT0EQL6obxZXwht5gErGIGA
PkIIIaCPEEII6COEEAL6CCGEgD5CCCGgjxBCCOgjhBA6Tf8P5KJZwAJT5uQAAAAASUVORK5CYII=

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/callouts/1.png

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAXUlEQVQY01XNoRHDQAwAwYUP3Yah
oFtIbYKGpikhbXwbX4KgApwZT+CSO911Htt2XNWtVzB2YrUK5ESU5LVqQgp4TwgDrgnjH/Eg5IP8
pT93utcO97S7MsY4zur+AsB4LBZZZiB5AAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/callouts/2.png

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAc0lEQVQYGQXBoYHCQBAAwBEvTka+
jUSuTAvfBhKJpIWTkdiUQAtfQixyJXLlMqO79m1Ztmd16wwuK5Gtwnrm538RZXKc1prMn4M8vfPC
YYCoO8OAv3wNhsCsB4TJra4Rv0wVnpmZD1E6A4hs3TVjjG2v7i8ZjDdeJ6G4ngAAAABJRU5ErkJg
gg==

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/callouts/3.png

iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAAAAABzHgM7AAAAcklEQVQY0yXHEQLDUBBF0YuDs43g
w7+VajHYLRQHg91CsNsIBqMfg4Ov0GMHu7eROT5t4ylijEDTtMjrvI5ETcFrRnqFQpAL6RVEAOzz
DIh/xrNXCASPguMLoqBujfsNRYvcu/dAjecCAWgau0uR2tr+AVG4NWNsW+ndAAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tx.png

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

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tx_prop_required.png

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
IYQQChBCCCGEEEIIoQAhhBBCCCGEUIAQQgghhBBCKEAIIYQQQgghhAKEEEIIIYQQQgFCCCGEEEII
IRQghBBCCCGEEAoQQgghhBBCCAUIIYQQQgghhFCAEEIIIYQQQihACCGEEEIIIYQChBBCCCGEEEIB
QgghhBBCCKEAIYQQQgghhBAKEEIIIYQQQggFCCGEEEIIIYRQgBBCCCGEEEIoQAghhBBCCCEUIKwH
QgghhBBCCAUIIYQQQgghhAKEEEIIIYQQQihACCGEEEIIIRQghBBCCCGEEEIBQgghhBBCCKEAIYQQ
QgghhFCAEEIIIYQQQggFCCGEEEIIIYQChBBCCCGEEEIoQAghhBBCCCEUIIQQQgghhBAKEEIIIYQQ
QgihACGEEEIIIYRQgBBCCCGEEEIIBQghhBBCCCGEAoQQQgghhBBCAUIIIYQQQgghFCCEEEIIIYQQ
ChBCCCGEEEIIoQAhhBBCCCGEUIAQQgghhBBCKEAIIYQQQgghhAKEEEIIIYQQQgFCCCGEEEIIIRQg
hBBCCCGEEAoQQgghhBBCCAUIIYQQQgghhFCAEEIIIYQQQihACCGEEEIIIYQChBBCCCGEEEIBQggh
hBBCCCEUIIQQQgghhBAKEEIIIYQQQggFCCGEEEIIIYRQgBBCCCGEEEIoQAghhBBCCCGEAoQQQggh
hBBCAUIIIYQQQgihACGEEEIIIYQQChBCCCGEEEIIBQghhBBCCCGEUIAQQgghhBBCKEAIIYQQQggh
FCCEEEIIIYQQQgFCCCGEEEIIoQAhhBBCCCGEEAoQQgghhBBCCAUIIYQQQgghhAKEEEIIIYQQQihA
CCGEEEIIIRQghBBCCCGEEEIBQgghhBBCCKEAIYQQQgghhFCAEEIIIYQQQggFCCGEEEIIIYQC5NKS
nJwsPXr0lO7de0qPHr1YslA6d+4mM2YE8LEmhBBCCCEUINmla9du0qVLJVm+3E8WLPBhyUJZvNhH
fvnlWzl9+iwfbZIlDh8+JAsXLpbAwPkyd+4CFparvsyePVdCQ8P48hNCCAVIejp37iLLlw+DL0RE
olmyVOKlcuU/5fjxk3y0SZYYPnyYlC//lQwc2Eh8fOqysFz1ZcCAhvLttx/Lnj372AAQQggFiCcB
MsBpWK9nyVIJl8qV/5Djx0/x0c6lpO7fLuEbQuX4qdwhEvv395NZs/qLyFYRSWBhuQbKNqldu7xs
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
pSjQHNv+DxeMrEl3aSX3AAAAAElFTkSuQmCC

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/tx_prop_requires_new.png

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
NUomT55MJUYIIeSeA9EPCJF7ToBAfOzatUuOHTsmR48eZUnBcuTIETPt7vnz500khHXCcieUkydP
ysaNG6VRo0YUIIQQQggFSMpTo0YNOXv2LJ8AQoiLnTt3SuPGjSlACCGEEAoQChBCCAUIIYQQQgFC
AUIIoQChACGEEEIoQChACCEUIIQQQggFCAUIIYQChAKEEEIIBQgFCCGEUIAQQgghFCAUIIQQChBC
CCGEAoQChBBCAXJzBEhERIS888478uGHH0qhQoWkdOnScvXqVdf3ly9flu+//17+97//mW3effdd
2bJly3Wd0z///CPr1q1z++yPP/6QV199VXx8fG7afahVq5bkyZNHOnXqlOS2+/fvl0GDBsmXX35p
6mHYsGFy+PDhe/YZxr3fsWPHTT8u1tH5+OOPJW/evLJ8+XI2JskEa2etX7/+nq6DK1euyMqVK93a
t//++0+KFSsmr732mixYsOCerZvt27dLwYIF5b333pOYmJgkt4+MjDRr3Vn7tvfff/+G+gcKkJso
QNCIYyVvdIaJlUqVKsmyZcvuyZdCF3JU0PHjgUK93YpO8E4gNeoFz9+vv/4qLVu2dGu8yZ0vQFat
WiX33Xefqzz77LNmgU/rO/f000+7bbNhw4bruvbPP/9cfvzxR7fP8+fPb/ZZu3btm3YfihYtao6J
ZzoxNm/eLLlz53a7dpQCBQrI7t2777nnd9GiRfL888/LtGnTbvqx0Q888sgjpv5vxfHv9D4B4i2p
5/1u5t9//zVtzJtvvhnv8/Tp05vnasyYMfds/YSHh7vat5CQkES3nTdvnmTJkkXmzp3r1lbq74OC
gihAbncBsmbNmngdW0KlT58+92SjCa/r9OnTXZ9t3brVVSerV69mz2J72fCcfPLJJym+b19fX1Pn
MD7gESd3rwB54okn3DogiI1HH330hgUIIgj47U8//XTHCBAIJmz3wgsvyG+//WbEk4qxqlWr3lPP
7qFDh+Sxxx4z1z579uxb0r5duHBBzp8/TydIMvnss8/Mffv999/v2Tpo06aNqYPXX3893nf6XCFC
QgGSuADZt2+fpEmTxmwHhwQFyB0qQHDDkXqA9AeErfLly+e6gS+//LIJh+E7eODGjx9/T70MiHzA
2EVdzJkzx/U5Ggm8HBs3bpQzZ86wZ7HQoUMHU18w6ChAKECSK0Aeeughl2HetWtX1/ft27c3n330
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

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://docs.spring.io/spring/docs/4.3.21.RELEASE/spring-framework-reference/htmlsingle/images/DataAccessException.gif

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
8yaPsPZM0fY7UiRpH/Zvf32jgqd2zyLJIfdewiZjj/cS2vd5H/h7/9nv4PeDX6N+0iKSQviVbfh1
//gPoviCH/mN3+cXcn64AviYvyGlYvluzfnBFPq5o/mdX/qfPzFKPTSq/zyszyBGjfoaM/SgKm2x
/zsH3apiYvQxPfuMWvS278i4r8a/D/yRKfxEr/vFb/zH6vvJr/x4c/y0z/TPD/3MjznET/2y39G5
Hya7X9K9f/3On/2cF/3N3/3jr/3lH/7nj/66pP5Mgf3t/4/J72+o0y//Yrf9wy/+969x9I+n8c//
75L/yM/+/N//1g//+8//75L/yM/+/N//1g//+8//75L/yM/+/N//1g//+8//75L/yM/+/N//1g//
+8//75L/yM/+/N//1g//+8//75L/yM/+/N//1g//+8//75L/yM/+LL7yK6/y+Il8K7/ytpcjK7/y
4FefHt+uokqAmT3xie3xyzDxOujxaN3yzfyBoD3xie3xyzDxOujxaN3yzfyBoD3xie3xyzDxOujx
aN3yzfyBoD3xie3xyzDxOujxaN3yzfyBoD3xie3xyzDxOujxaN3yzfyBoD3xie3xyzDxOujxaN3y
zfyBoP898Ynt8csw8Tro8Wjd8s38gaA98Ynt8csw8TrY2wFf3uadh8oNtfewhaUSR8rN3r098fjf
ebgd6kR7h6EOtVuo73YI8MXN3BxPWrrbttAU3AQQ/wBNo/ct6VCcCeTb7K1Z88SKGRlhSNWVbd0X
juWZrm2XM3XvibpkwwPuRj9hSWIsKYmQZrEJQN2o1RjAmtVuaQof8pkDO58TsYlpLovSkCkXrvKS
KOVzPbke53dttc6PTo+v7y3uEDGxag6EIwQEoxGSQQPyq5GyDtMyZG/SwcvxkXMOVHQstFK1k+LU
lLJn9E4TthY2VbNz01BREasXOHigFOkz9uO1B6O2chn/z3X2lXZ6dMja0VnaMntSStiKOFc5c3l7
qLvZ1Pg2HXTPvXzJ1raju7gY2/P8mL5d95HXN4EDqTCS1+rcQYTUSOSI5tAavHEG6YiByPBLQkEX
SxGzSEsSuYsMQWr0EpAguJQrF+Eh+bGkOpP3MJJxVZEmTFGPar7Mec8bSxnhdP5cmLGoT6RAbeLz
SY2V0aQ7OR6cKtUBSqFbCYaiCaYjO5fjyB2N1BGTk5AUZV4lM7btWbEZxaKKCPaDObPPqGnlOvRv
4BZEpdqbeaswz1gw82IVF42v3KdFgwpeQfil4a+THfOcpu+zYbeNOct0eS2vW8p+Lbfmku6jMsZM
8cru/0woHELVP0fuZWzbrIWq9Xqi/t3XdZfkgTEnTXhmlnOrRg+Pfhd2YXWslV03p057aek72Htn
Fg9692nisZue574cfhbY3DwvdvZvZyTEElkZU/w4J4/sC8m0VcYrCz/9kpFkIvsKFFAn1uD7JT6W
8pvHQf4i0wY7aZ4RDQIQ6VFwrX1I/OfD5yQU6kIPM6zGNBfJA6oafgjsL6zfPJMMuh3R0SsfDo/h
B6QVKzxysEGUfGfJJp18EspBAmHDyO6QXGnKKaPckks0lHzPsiyb1LJLKZkscw0y3biSzRnUhPJN
NOWcs8s4K6iyNQrbFCYQO+n800wp8eyqDyf9BJSHQ//p9BPMPR1VFNFIJZ30z0aP1NPRXiCllFNJ
Lf1r005FHZXLTzNFMlRSVV1VVVMnPDWYVFmd9ctBB5KV1lx1TcBWWAVjENhghR2W2GKNPRbZZJVd
ltlmnRW2V1B91fTZaq29FttsgY2WT229/RbccMUtlttptxIA3XTVXZfddt19F9545Z2X3nrtvRff
fPWtN1NMzYVj34AFHpjggumNz+CEFV6Y4Ybz/RfiiCWe2Fd/Kb4Y44w13pjjjj3+GOTlLA6Z5JJN
PhnllFVemeXXWn4Z5phlnpnmmm3m8+acdd6Z5559/vnUkYEemuiijT4aaZ+FTprppp1+Guqo21xa
6qr/rb4a66y1hoHqrb3+GuywxY6567HNPhvttNXes+y13X4b7rjldnnuuu2+G2+8286b7779/vvo
vQEfnPDCDU9Z8MMVX5zxxmFN3PHIJZ+c8pQgrxzzzDXf3E3OPf8c9NBZuFz00k0/fW7SUV+d9da9
Vt312GWfPXDabb8dd6dhz5333n0HefffhR+e+GmDLx755JW3cvnmnX8eVeiln556Fqu/Hvvs4zhe
++69V57778Ufn/fwyT8f/dbNT5/99j9f3/345Zcc/vntv5/w+vHfn3+79e8fgAFM2/8EWEADbo2A
B1TgAp+WQAY+EIJDc2AEKVhBm03QghnU4MowuEEP/37wYx0E4QirNy4TnhCF3iLhCoWHq1298Emu
YuEMV+dCGN5QUDTUIe1siEMfRqFcOxQi/X5YRE7JcIhJzFwPjdhEMwRRiVEsHBOdWMUTSBGLnqOi
FZ2IxCx+0XBb5KIRvQhGM/4tFVEpFE708APhqFEQf4hhWr50pjWdEY+MI4sdiBSot2zmj2qBU5S0
VMY8HjJ1qFkCjuiDjzTiCBf8IcuAZAEEHxApQXrBCzw4+aMU0QOKiBTl2PY4o5rkiI3C4c1XVKme
TQ5HIZe0B3vOg5FQjhKXr4uIKdNiEIs4R0TUcdAwexnHXubDjbsU0W4MmUtniq2UT7HkXqbjHmHe
ZoCV2dnIaXzjylqe5JnhlNsePyTL7dTHkcjUCSSxsQmbYHIVQvIHgiqZCUwu4Zbi1GfTlEDOMb6Q
Ufnc50CNZgS6/BOGASXoQqGJUIeOSaAMlejOxPjQhEZ0ohmtWQo52lGPGgujGhVpzBxWUpOe1GEj
VelKWdpSl74UpjGV6eEKAAA7

------MultipartBoundary--t6kELfZ3Uf6XqB9TFcmzO2Ld2kV9aOsowNbtXyzknj------
